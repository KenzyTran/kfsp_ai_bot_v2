(function(M,G){typeof exports=="object"&&typeof module<"u"?G(exports):typeof define=="function"&&define.amd?define(["exports"],G):(M=typeof globalThis<"u"?globalThis:M||self,G(M.OpenAIAgentsRealtime={}))})(this,function(M){"use strict";var Nc=Object.defineProperty;var Aa=M=>{throw TypeError(M)};var Rc=(M,G,X)=>G in M?Nc(M,G,{enumerable:!0,configurable:!0,writable:!0,value:X}):M[G]=X;var _=(M,G,X)=>Rc(M,typeof G!="symbol"?G+"":G,X),Pr=(M,G,X)=>G.has(M)||Aa("Cannot "+X);var u=(M,G,X)=>(Pr(M,G,"read from private field"),X?X.call(M):G.get(M)),T=(M,G,X)=>G.has(M)?Aa("Cannot add the same private member more than once"):G instanceof WeakSet?G.add(M):G.set(M,X),y=(M,G,X,Pt)=>(Pr(M,G,"write to private field"),Pt?Pt.call(M,X):G.set(M,X),X),L=(M,G,X)=>(Pr(M,G,"access private method"),X);var wt,Ht,bt,Yt,Xt,xt,ae,Me,Je,Be,St,ce,Mr,jr,Dt,pe,Qt,Kt,en,tn,at,qe,Ge,it,nn,Tt,je,se,ot,Gn,Ea,fe,rn,kt,xe,Ve,It,sn,an,on,At,ie,Zr,$r,Lr,Oa,Fr,ut,un,he,cn,dn,z,ln,ct,pn,dt,lt,ne,fn,Ze,pt,ft,Vn,Na,q,Z,hn,P,Et,Ot,mn,W,Nt,Rt,Ee,gn,H,zn,Wn,Ra,Hn,Da,Ur,Pa;const G={version:"0.0.16"};function X(n){const e=atob(n),t=e.length,r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e.charCodeAt(s);return r.buffer}function Pt(n){const e=String.fromCharCode(...new Uint8Array(n));return btoa(e)}function Jr(n){if(typeof n>"u"||n===null||typeof n!="object"||!("type"in n)||typeof n.type!="string"||!n.type||n.type!=="message"||!("content"in n)||!Array.isArray(n.content)||n.content.length<1)return;const e=n.content[n.content.length-1];if(!(!("type"in e)||typeof e.type!="string")){if(e.type==="text")return typeof e.text=="string"?e.text:void 0;if(e.type==="audio")return typeof e.transcript=="string"?e.transcript:void 0}}function Ma(n,e){const t=n.filter(a=>!e.some(i=>i.itemId===a.itemId)),r=e.filter(a=>!n.some(i=>i.itemId===a.itemId)),s=e.filter(a=>n.some(i=>i.itemId===a.itemId&&JSON.stringify(i)!==JSON.stringify(a)));return{removals:t,additions:r,updates:s}}function ja(){return typeof window>"u"?!1:typeof window.RTCPeerConnection<"u"}function Br(n){return n.role==="system"?n:n.role==="assistant"?{...n,content:n.content.map(e=>e.type==="audio"?{...e,audio:null}:e)}:n.role==="user"?{...n,content:n.content.map(e=>e.type==="input_audio"?{...e,audio:null}:e)}:n}function qr(n,e,t){if(e.type==="conversation.item.input_audio_transcription.completed")return n.map(a=>{if(a.itemId===e.item_id&&a.type==="message"&&"role"in a&&a.role==="user"){const i=a.content.map(o=>o.type==="input_audio"?{...o,transcript:e.transcript}:o);return{...a,content:i,status:"completed"}}return a});const r=!t&&e.type==="message"?Br(e):e,s=n.findIndex(a=>a.itemId===e.itemId);if(s!==-1)return n.map((a,i)=>i===s?r:!t&&a.type==="message"?Br(a):a);if(e.previousItemId){const a=n.findIndex(i=>i.itemId===e.previousItemId);return a!==-1?[...n.slice(0,a+1),r,...n.slice(a+1)]:[...n,r]}else return[...n,r]}const Za={"User-Agent":`Agents/JavaScript ${G.version}`,"X-OpenAI-Agents-SDK":`openai-agents-sdk.${G.version}`},$a=`openai-agents-sdk.${G.version}`;async function Yn(n){try{return[null,await n()]}catch(e){return[e,null]}}function La(n,e){const t={...n};return Object.defineProperties(t,{$brand:{value:"auto-parseable-response-format",enumerable:!1},$parseRaw:{value:e,enumerable:!1}}),t}const Fa=Symbol("Let zodToJsonSchema decide on which parser to use"),Gr={name:void 0,$refStrategy:"root",effectStrategy:"input",pipeStrategy:"all",dateStrategy:"format:date-time",mapStrategy:"entries",nullableStrategy:"from-target",removeAdditionalStrategy:"passthrough",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,errorMessages:!1,markdownDescription:!1,patternStrategy:"escape",applyRegexFlags:!1,emailStrategy:"format:email",base64Strategy:"contentEncoding:base64",nameStrategy:"ref"},Ua=n=>typeof n=="string"?{...Gr,basePath:["#"],definitions:{},name:n}:{...Gr,basePath:["#"],definitions:{},...n},Xn=n=>"_def"in n?n._def:n;function Ja(n){if(!n)return!0;for(const e in n)return!1;return!0}const Ba=n=>{const e=Ua(n),t=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return{...e,currentPath:t,propertyPath:void 0,seenRefs:new Set,seen:new Map(Object.entries(e.definitions).map(([r,s])=>[Xn(s),{def:Xn(s),path:[...e.basePath,e.definitionPath,r],jsonSchema:void 0}]))}};function Vr(n,e,t,r){r!=null&&r.errorMessages&&t&&(n.errorMessage={...n.errorMessage,[e]:t})}function V(n,e,t,r,s){n[e]=t,Vr(n,e,r,s)}var Mt;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(o=>typeof s[s[o]]!="number"),i={};for(const o of a)i[o]=s[o];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(Mt||(Mt={}));var zr;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(zr||(zr={})),Mt.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Mt.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);let Wr=class Ca extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let o=r,d=0;for(;d<i.path.length;){const c=i.path[d];d===i.path.length-1?(o[c]=o[c]||{_errors:[]},o[c]._errors.push(t(i))):o[c]=o[c]||{_errors:[]},o=o[c],d++}}};return s(this),r}static assert(e){if(!(e instanceof Ca))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,Mt.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}};Wr.create=n=>new Wr(n);var Hr;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(Hr||(Hr={}));var D;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(D||(D={}));function qa(){return{}}function Ga(n,e){var r,s;const t={type:"array"};return((s=(r=n.type)==null?void 0:r._def)==null?void 0:s.typeName)!==D.ZodAny&&(t.items=J(n.type._def,{...e,currentPath:[...e.currentPath,"items"]})),n.minLength&&V(t,"minItems",n.minLength.value,n.minLength.message,e),n.maxLength&&V(t,"maxItems",n.maxLength.value,n.maxLength.message,e),n.exactLength&&(V(t,"minItems",n.exactLength.value,n.exactLength.message,e),V(t,"maxItems",n.exactLength.value,n.exactLength.message,e)),t}function Va(n,e){const t={type:"integer",format:"int64"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"min":e.target==="jsonSchema7"?r.inclusive?V(t,"minimum",r.value,r.message,e):V(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),V(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?V(t,"maximum",r.value,r.message,e):V(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),V(t,"maximum",r.value,r.message,e));break;case"multipleOf":V(t,"multipleOf",r.value,r.message,e);break}return t}function za(){return{type:"boolean"}}function Wa(n,e){return J(n.type._def,e)}const Ha=(n,e)=>J(n.innerType._def,e);function Yr(n,e,t){const r=t??e.dateStrategy;if(Array.isArray(r))return{anyOf:r.map((s,a)=>Yr(n,e,s))};switch(r){case"string":case"format:date-time":return{type:"string",format:"date-time"};case"format:date":return{type:"string",format:"date"};case"integer":return Ya(n,e)}}const Ya=(n,e)=>{const t={type:"integer",format:"unix-time"};if(e.target==="openApi3")return t;for(const r of n.checks)switch(r.kind){case"min":V(t,"minimum",r.value,r.message,e);break;case"max":V(t,"maximum",r.value,r.message,e);break}return t};function Xa(n,e){return{...J(n.innerType._def,e),default:n.defaultValue()}}function Qa(n,e,t){return e.effectStrategy==="input"?J(n.schema._def,e,t):{}}function Ka(n){return{type:"string",enum:[...n.values]}}const ei=n=>"type"in n&&n.type==="string"?!1:"allOf"in n;function ti(n,e){const t=[J(n.left._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),J(n.right._def,{...e,currentPath:[...e.currentPath,"allOf","1"]})].filter(a=>!!a);let r=e.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0;const s=[];return t.forEach(a=>{if(ei(a))s.push(...a.allOf),a.unevaluatedProperties===void 0&&(r=void 0);else{let i=a;if("additionalProperties"in a&&a.additionalProperties===!1){const{additionalProperties:o,...d}=a;i=d}else r=void 0;s.push(i)}}),s.length?{allOf:s,...r}:void 0}function ni(n,e){const t=typeof n.value;return t!=="bigint"&&t!=="number"&&t!=="boolean"&&t!=="string"?{type:Array.isArray(n.value)?"array":"object"}:e.target==="openApi3"?{type:t==="bigint"?"integer":t,enum:[n.value]}:{type:t==="bigint"?"integer":t,const:n.value}}let Qn;const ze={cuid:/^[cC][^\s-]{8,}$/,cuid2:/^[0-9a-z]+$/,ulid:/^[0-9A-HJKMNP-TV-Z]{26}$/,email:/^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,emoji:()=>(Qn===void 0&&(Qn=RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),Qn),base64:/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,nanoid:/^[a-zA-Z0-9_-]{21}$/};function Xr(n,e){const t={type:"string"};function r(s){return e.patternStrategy==="escape"?ri(s):s}if(n.checks)for(const s of n.checks)switch(s.kind){case"min":V(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e);break;case"max":V(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"email":switch(e.emailStrategy){case"format:email":ye(t,"email",s.message,e);break;case"format:idn-email":ye(t,"idn-email",s.message,e);break;case"pattern:zod":ve(t,ze.email,s.message,e);break}break;case"url":ye(t,"uri",s.message,e);break;case"uuid":ye(t,"uuid",s.message,e);break;case"regex":ve(t,s.regex,s.message,e);break;case"cuid":ve(t,ze.cuid,s.message,e);break;case"cuid2":ve(t,ze.cuid2,s.message,e);break;case"startsWith":ve(t,RegExp(`^${r(s.value)}`),s.message,e);break;case"endsWith":ve(t,RegExp(`${r(s.value)}$`),s.message,e);break;case"datetime":ye(t,"date-time",s.message,e);break;case"date":ye(t,"date",s.message,e);break;case"time":ye(t,"time",s.message,e);break;case"duration":ye(t,"duration",s.message,e);break;case"length":V(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e),V(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"includes":{ve(t,RegExp(r(s.value)),s.message,e);break}case"ip":{s.version!=="v6"&&ye(t,"ipv4",s.message,e),s.version!=="v4"&&ye(t,"ipv6",s.message,e);break}case"emoji":ve(t,ze.emoji,s.message,e);break;case"ulid":{ve(t,ze.ulid,s.message,e);break}case"base64":{switch(e.base64Strategy){case"format:binary":{ye(t,"binary",s.message,e);break}case"contentEncoding:base64":{V(t,"contentEncoding","base64",s.message,e);break}case"pattern:zod":{ve(t,ze.base64,s.message,e);break}}break}case"nanoid":ve(t,ze.nanoid,s.message,e)}return t}const ri=n=>Array.from(n).map(e=>/[a-zA-Z0-9]/.test(e)?e:`\\${e}`).join(""),ye=(n,e,t,r)=>{var s;n.format||(s=n.anyOf)!=null&&s.some(a=>a.format)?(n.anyOf||(n.anyOf=[]),n.format&&(n.anyOf.push({format:n.format,...n.errorMessage&&r.errorMessages&&{errorMessage:{format:n.errorMessage.format}}}),delete n.format,n.errorMessage&&(delete n.errorMessage.format,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.anyOf.push({format:e,...t&&r.errorMessages&&{errorMessage:{format:t}}})):V(n,"format",e,t,r)},ve=(n,e,t,r)=>{var s;n.pattern||(s=n.allOf)!=null&&s.some(a=>a.pattern)?(n.allOf||(n.allOf=[]),n.pattern&&(n.allOf.push({pattern:n.pattern,...n.errorMessage&&r.errorMessages&&{errorMessage:{pattern:n.errorMessage.pattern}}}),delete n.pattern,n.errorMessage&&(delete n.errorMessage.pattern,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.allOf.push({pattern:Qr(e,r),...t&&r.errorMessages&&{errorMessage:{pattern:t}}})):V(n,"pattern",Qr(e,r),t,r)},Qr=(n,e)=>{var c;const t=typeof n=="function"?n():n;if(!e.applyRegexFlags||!t.flags)return t.source;const r={i:t.flags.includes("i"),m:t.flags.includes("m"),s:t.flags.includes("s")},s=r.i?t.source.toLowerCase():t.source;let a="",i=!1,o=!1,d=!1;for(let p=0;p<s.length;p++){if(i){a+=s[p],i=!1;continue}if(r.i){if(o){if(s[p].match(/[a-z]/)){d?(a+=s[p],a+=`${s[p-2]}-${s[p]}`.toUpperCase(),d=!1):s[p+1]==="-"&&((c=s[p+2])!=null&&c.match(/[a-z]/))?(a+=s[p],d=!0):a+=`${s[p]}${s[p].toUpperCase()}`;continue}}else if(s[p].match(/[a-z]/)){a+=`[${s[p]}${s[p].toUpperCase()}]`;continue}}if(r.m){if(s[p]==="^"){a+=`(^|(?<=[\r
]))`;continue}else if(s[p]==="$"){a+=`($|(?=[\r
]))`;continue}}if(r.s&&s[p]==="."){a+=o?`${s[p]}\r
`:`[${s[p]}\r
]`;continue}a+=s[p],s[p]==="\\"?i=!0:o&&s[p]==="]"?o=!1:!o&&s[p]==="["&&(o=!0)}try{const p=new RegExp(a)}catch{return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`),t.source}return a};function Kr(n,e){var r,s,a,i;if(e.target==="openApi3"&&((r=n.keyType)==null?void 0:r._def.typeName)===D.ZodEnum)return{type:"object",required:n.keyType._def.values,properties:n.keyType._def.values.reduce((o,d)=>({...o,[d]:J(n.valueType._def,{...e,currentPath:[...e.currentPath,"properties",d]})??{}}),{}),additionalProperties:!1};const t={type:"object",additionalProperties:J(n.valueType._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??{}};if(e.target==="openApi3")return t;if(((s=n.keyType)==null?void 0:s._def.typeName)===D.ZodString&&((a=n.keyType._def.checks)!=null&&a.length)){const o=Object.entries(Xr(n.keyType._def,e)).reduce((d,[c,p])=>c==="type"?d:{...d,[c]:p},{});return{...t,propertyNames:o}}else if(((i=n.keyType)==null?void 0:i._def.typeName)===D.ZodEnum)return{...t,propertyNames:{enum:n.keyType._def.values}};return t}function si(n,e){if(e.mapStrategy==="record")return Kr(n,e);const t=J(n.keyType._def,{...e,currentPath:[...e.currentPath,"items","items","0"]})||{},r=J(n.valueType._def,{...e,currentPath:[...e.currentPath,"items","items","1"]})||{};return{type:"array",maxItems:125,items:{type:"array",items:[t,r],minItems:2,maxItems:2}}}function ai(n){const e=n.values,r=Object.keys(n.values).filter(a=>typeof e[e[a]]!="number").map(a=>e[a]),s=Array.from(new Set(r.map(a=>typeof a)));return{type:s.length===1?s[0]==="string"?"string":"number":["string","number"],enum:r}}function ii(){return{not:{}}}function oi(n){return n.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}const yn={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function ui(n,e){if(e.target==="openApi3")return es(n,e);const t=n.options instanceof Map?Array.from(n.options.values()):n.options;if(t.every(r=>r._def.typeName in yn&&(!r._def.checks||!r._def.checks.length))){const r=t.reduce((s,a)=>{const i=yn[a._def.typeName];return i&&!s.includes(i)?[...s,i]:s},[]);return{type:r.length>1?r:r[0]}}else if(t.every(r=>r._def.typeName==="ZodLiteral"&&!r.description)){const r=t.reduce((s,a)=>{const i=typeof a._def.value;switch(i){case"string":case"number":case"boolean":return[...s,i];case"bigint":return[...s,"integer"];case"object":if(a._def.value===null)return[...s,"null"];case"symbol":case"undefined":case"function":default:return s}},[]);if(r.length===t.length){const s=r.filter((a,i,o)=>o.indexOf(a)===i);return{type:s.length>1?s:s[0],enum:t.reduce((a,i)=>a.includes(i._def.value)?a:[...a,i._def.value],[])}}}else if(t.every(r=>r._def.typeName==="ZodEnum"))return{type:"string",enum:t.reduce((r,s)=>[...r,...s._def.values.filter(a=>!r.includes(a))],[])};return es(n,e)}const es=(n,e)=>{const t=(n.options instanceof Map?Array.from(n.options.values()):n.options).map((r,s)=>J(r._def,{...e,currentPath:[...e.currentPath,"anyOf",`${s}`]})).filter(r=>!!r&&(!e.strictUnions||typeof r=="object"&&Object.keys(r).length>0));return t.length?{anyOf:t}:void 0};function ci(n,e){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(n.innerType._def.typeName)&&(!n.innerType._def.checks||!n.innerType._def.checks.length))return e.target==="openApi3"||e.nullableStrategy==="property"?{type:yn[n.innerType._def.typeName],nullable:!0}:{type:[yn[n.innerType._def.typeName],"null"]};if(e.target==="openApi3"){const r=J(n.innerType._def,{...e,currentPath:[...e.currentPath]});return r&&"$ref"in r?{allOf:[r],nullable:!0}:r&&{...r,nullable:!0}}const t=J(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","0"]});return t&&{anyOf:[t,{type:"null"}]}}function di(n,e){const t={type:"number"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"int":t.type="integer",Vr(t,"type",r.message,e);break;case"min":e.target==="jsonSchema7"?r.inclusive?V(t,"minimum",r.value,r.message,e):V(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),V(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?V(t,"maximum",r.value,r.message,e):V(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),V(t,"maximum",r.value,r.message,e));break;case"multipleOf":V(t,"multipleOf",r.value,r.message,e);break}return t}function li(n,e){return e.removeAdditionalStrategy==="strict"?n.catchall._def.typeName==="ZodNever"?n.unknownKeys!=="strict":J(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0:n.catchall._def.typeName==="ZodNever"?n.unknownKeys==="passthrough":J(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0}function pi(n,e){const t={type:"object",...Object.entries(n.shape()).reduce((r,[s,a])=>{var d;if(a===void 0||a._def===void 0)return r;const i=[...e.currentPath,"properties",s],o=J(a._def,{...e,currentPath:i,propertyPath:i});if(o===void 0)return r;if(e.openaiStrictMode&&a.isOptional()&&!a.isNullable()&&typeof((d=a._def)==null?void 0:d.defaultValue)>"u")throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);return{properties:{...r.properties,[s]:o},required:a.isOptional()&&!e.openaiStrictMode?r.required:[...r.required,s]}},{properties:{},required:[]}),additionalProperties:li(n,e)};return t.required.length||delete t.required,t}const fi=(n,e)=>{var r;if(e.currentPath.toString()===((r=e.propertyPath)==null?void 0:r.toString()))return J(n.innerType._def,e);const t=J(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","1"]});return t?{anyOf:[{not:{}},t]}:{}},hi=(n,e)=>{if(e.pipeStrategy==="input")return J(n.in._def,e);if(e.pipeStrategy==="output")return J(n.out._def,e);const t=J(n.in._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),r=J(n.out._def,{...e,currentPath:[...e.currentPath,"allOf",t?"1":"0"]});return{allOf:[t,r].filter(s=>s!==void 0)}};function mi(n,e){return J(n.type._def,e)}function gi(n,e){const r={type:"array",uniqueItems:!0,items:J(n.valueType._def,{...e,currentPath:[...e.currentPath,"items"]})};return n.minSize&&V(r,"minItems",n.minSize.value,n.minSize.message,e),n.maxSize&&V(r,"maxItems",n.maxSize.value,n.maxSize.message,e),r}function _i(n,e){return n.rest?{type:"array",minItems:n.items.length,items:n.items.map((t,r)=>J(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[]),additionalItems:J(n.rest._def,{...e,currentPath:[...e.currentPath,"additionalItems"]})}:{type:"array",minItems:n.items.length,maxItems:n.items.length,items:n.items.map((t,r)=>J(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[])}}function yi(){return{not:{}}}function vi(){return{}}const wi=(n,e)=>J(n.innerType._def,e);function J(n,e,t=!1){var i;const r=e.seen.get(n);if(e.override){const o=(i=e.override)==null?void 0:i.call(e,n,e,r,t);if(o!==Fa)return o}if(r&&!t){const o=bi(r,e);if(o!==void 0)return"$ref"in o&&e.seenRefs.add(o.$ref),o}const s={def:n,path:e.currentPath,jsonSchema:void 0};e.seen.set(n,s);const a=Si(n,n.typeName,e,t);return a&&Ti(n,e,a),s.jsonSchema=a,a}const bi=(n,e)=>{switch(e.$refStrategy){case"root":return{$ref:n.path.join("/")};case"extract-to-root":const t=n.path.slice(e.basePath.length+1).join("_");return t!==e.name&&e.nameStrategy==="duplicate-ref"&&(e.definitions[t]=n.def),{$ref:[...e.basePath,e.definitionPath,t].join("/")};case"relative":return{$ref:xi(e.currentPath,n.path)};case"none":case"seen":return n.path.length<e.currentPath.length&&n.path.every((r,s)=>e.currentPath[s]===r)?(console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`),{}):e.$refStrategy==="seen"?{}:void 0}},xi=(n,e)=>{let t=0;for(;t<n.length&&t<e.length&&n[t]===e[t];t++);return[(n.length-t).toString(),...e.slice(t)].join("/")},Si=(n,e,t,r)=>{switch(e){case D.ZodString:return Xr(n,t);case D.ZodNumber:return di(n,t);case D.ZodObject:return pi(n,t);case D.ZodBigInt:return Va(n,t);case D.ZodBoolean:return za();case D.ZodDate:return Yr(n,t);case D.ZodUndefined:return yi();case D.ZodNull:return oi(t);case D.ZodArray:return Ga(n,t);case D.ZodUnion:case D.ZodDiscriminatedUnion:return ui(n,t);case D.ZodIntersection:return ti(n,t);case D.ZodTuple:return _i(n,t);case D.ZodRecord:return Kr(n,t);case D.ZodLiteral:return ni(n,t);case D.ZodEnum:return Ka(n);case D.ZodNativeEnum:return ai(n);case D.ZodNullable:return ci(n,t);case D.ZodOptional:return fi(n,t);case D.ZodMap:return si(n,t);case D.ZodSet:return gi(n,t);case D.ZodLazy:return J(n.getter()._def,t);case D.ZodPromise:return mi(n,t);case D.ZodNaN:case D.ZodNever:return ii();case D.ZodEffects:return Qa(n,t,r);case D.ZodAny:return qa();case D.ZodUnknown:return vi();case D.ZodDefault:return Xa(n,t);case D.ZodBranded:return Wa(n,t);case D.ZodReadonly:return wi(n,t);case D.ZodCatch:return Ha(n,t);case D.ZodPipeline:return hi(n,t);case D.ZodFunction:case D.ZodVoid:case D.ZodSymbol:return;default:return(s=>{})()}},Ti=(n,e,t)=>(n.description&&(t.description=n.description,e.markdownDescription&&(t.markdownDescription=n.description)),t),ki=(n,e)=>{const t=Ba(e),r=typeof e=="string"?e:(e==null?void 0:e.nameStrategy)==="title"||e==null?void 0:e.name,s=J(n._def,r===void 0?t:{...t,currentPath:[...t.basePath,t.definitionPath,r]},!1)??{},a=typeof e=="object"&&e.name!==void 0&&e.nameStrategy==="title"?e.name:void 0;a!==void 0&&(s.title=a);const i=(()=>{if(Ja(t.definitions))return;const d={},c=new Set;for(let p=0;p<500;p++){const f=Object.entries(t.definitions).filter(([h])=>!c.has(h));if(f.length===0)break;for(const[h,x]of f)d[h]=J(Xn(x),{...t,currentPath:[...t.basePath,t.definitionPath,h]},!0)??{},c.add(h)}return d})(),o=r===void 0?i?{...s,[t.definitionPath]:i}:s:t.nameStrategy==="duplicate-ref"?{...s,...i||t.seenRefs.size?{[t.definitionPath]:{...i,...t.seenRefs.size?{[r]:s}:void 0}}:void 0}:{$ref:[...t.$refStrategy==="relative"?[]:t.basePath,t.definitionPath,r].join("/"),[t.definitionPath]:{...i,[r]:s}};return t.target==="jsonSchema7"?o.$schema="http://json-schema.org/draft-07/schema#":t.target==="jsonSchema2019-09"&&(o.$schema="https://json-schema.org/draft/2019-09/schema#"),o};function Ii(n,{parser:e,callback:t}){const r={...n};return Object.defineProperties(r,{$brand:{value:"auto-parseable-tool",enumerable:!1},$parseRaw:{value:e,enumerable:!1},$callback:{value:t,enumerable:!1}}),r}function ts(n,e){return ki(n,{openaiStrictMode:!0,name:e.name,nameStrategy:"duplicate-ref",$refStrategy:"extract-to-root",nullableStrategy:"property"})}function Ai(n,e,t){return La({type:"json_schema",...t,name:e,strict:!0,schema:ts(n,{name:e})},r=>n.parse(JSON.parse(r)))}function Ci(n){return Ii({type:"function",name:n.name,parameters:ts(n.parameters,{name:n.name}),strict:!0},{callback:n.function,parser:e=>n.parameters.parse(JSON.parse(e))})}class $e extends Error{constructor(t,r){super(t);_(this,"state");this.state=r}}class Ei extends $e{}class ns extends $e{}class de extends $e{}class K extends $e{}class rs extends $e{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class Oi extends $e{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class ss extends $e{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}class vn extends $e{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}function We(n){return typeof n=="object"&&n!==null&&"_def"in n&&typeof n._def=="object"&&n._def!==null&&"typeName"in n._def&&n._def.typeName==="ZodObject"}function Ni(n){return typeof n=="object"&&n!==null&&"input"in n&&typeof n.input=="string"}function wn(n){if(n=n.replace(/\s/g,"_"),n=n.replace(/[^a-zA-Z0-9]/g,"_"),n.length===0)throw new Error("Tool name cannot be empty");return n}function Kn(n,e){const t=r=>JSON.parse(r);if(We(n)){const r=Ci({name:e,parameters:n,function:()=>{}});return{schema:r.parameters,parser:r.$parseRaw}}else if(typeof n=="object"&&n!==null)return{schema:n,parser:t};throw new K("Input type is not a ZodObject or a valid JSON schema")}function as(n){if(n==="text")return"text";if(We(n)){const e=Ai(n,"output");return{type:e.type,name:e.name,strict:e.strict||!1,schema:e.schema}}return n}function Ri(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var bn={exports:{}},er,is;function Di(){if(is)return er;is=1;var n=1e3,e=n*60,t=e*60,r=t*24,s=r*7,a=r*365.25;er=function(p,f){f=f||{};var h=typeof p;if(h==="string"&&p.length>0)return i(p);if(h==="number"&&isFinite(p))return f.long?d(p):o(p);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(p))};function i(p){if(p=String(p),!(p.length>100)){var f=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(p);if(f){var h=parseFloat(f[1]),x=(f[2]||"ms").toLowerCase();switch(x){case"years":case"year":case"yrs":case"yr":case"y":return h*a;case"weeks":case"week":case"w":return h*s;case"days":case"day":case"d":return h*r;case"hours":case"hour":case"hrs":case"hr":case"h":return h*t;case"minutes":case"minute":case"mins":case"min":case"m":return h*e;case"seconds":case"second":case"secs":case"sec":case"s":return h*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return h;default:return}}}}function o(p){var f=Math.abs(p);return f>=r?Math.round(p/r)+"d":f>=t?Math.round(p/t)+"h":f>=e?Math.round(p/e)+"m":f>=n?Math.round(p/n)+"s":p+"ms"}function d(p){var f=Math.abs(p);return f>=r?c(p,f,r,"day"):f>=t?c(p,f,t,"hour"):f>=e?c(p,f,e,"minute"):f>=n?c(p,f,n,"second"):p+" ms"}function c(p,f,h,x){var b=f>=h*1.5;return Math.round(p/h)+" "+x+(b?"s":"")}return er}var tr,os;function Pi(){if(os)return tr;os=1;function n(e){r.debug=r,r.default=r,r.coerce=c,r.disable=o,r.enable=a,r.enabled=d,r.humanize=Di(),r.destroy=p,Object.keys(e).forEach(f=>{r[f]=e[f]}),r.names=[],r.skips=[],r.formatters={};function t(f){let h=0;for(let x=0;x<f.length;x++)h=(h<<5)-h+f.charCodeAt(x),h|=0;return r.colors[Math.abs(h)%r.colors.length]}r.selectColor=t;function r(f){let h,x=null,b,v;function E(...R){if(!E.enabled)return;const Y=E,re=Number(new Date),me=re-(h||re);Y.diff=me,Y.prev=h,Y.curr=re,h=re,R[0]=r.coerce(R[0]),typeof R[0]!="string"&&R.unshift("%O");let ge=0;R[0]=R[0].replace(/%([a-zA-Z%])/g,(Dr,Ec)=>{if(Dr==="%%")return"%";ge++;const Ia=r.formatters[Ec];if(typeof Ia=="function"){const Oc=R[ge];Dr=Ia.call(Y,Oc),R.splice(ge,1),ge--}return Dr}),r.formatArgs.call(Y,R),(Y.log||r.log).apply(Y,R)}return E.namespace=f,E.useColors=r.useColors(),E.color=r.selectColor(f),E.extend=s,E.destroy=r.destroy,Object.defineProperty(E,"enabled",{enumerable:!0,configurable:!1,get:()=>x!==null?x:(b!==r.namespaces&&(b=r.namespaces,v=r.enabled(f)),v),set:R=>{x=R}}),typeof r.init=="function"&&r.init(E),E}function s(f,h){const x=r(this.namespace+(typeof h>"u"?":":h)+f);return x.log=this.log,x}function a(f){r.save(f),r.namespaces=f,r.names=[],r.skips=[];const h=(typeof f=="string"?f:"").trim().replace(/\s+/g,",").split(",").filter(Boolean);for(const x of h)x[0]==="-"?r.skips.push(x.slice(1)):r.names.push(x)}function i(f,h){let x=0,b=0,v=-1,E=0;for(;x<f.length;)if(b<h.length&&(h[b]===f[x]||h[b]==="*"))h[b]==="*"?(v=b,E=x,b++):(x++,b++);else if(v!==-1)b=v+1,E++,x=E;else return!1;for(;b<h.length&&h[b]==="*";)b++;return b===h.length}function o(){const f=[...r.names,...r.skips.map(h=>"-"+h)].join(",");return r.enable(""),f}function d(f){for(const h of r.skips)if(i(f,h))return!1;for(const h of r.names)if(i(f,h))return!0;return!1}function c(f){return f instanceof Error?f.stack||f.message:f}function p(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.enable(r.load()),r}return tr=n,tr}var us;function Mi(){return us||(us=1,function(n,e){e.formatArgs=r,e.save=s,e.load=a,e.useColors=t,e.storage=i(),e.destroy=(()=>{let d=!1;return()=>{d||(d=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function t(){if(typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs))return!0;if(typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let d;return typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&(d=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(d[1],10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function r(d){if(d[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+d[0]+(this.useColors?"%c ":" ")+"+"+n.exports.humanize(this.diff),!this.useColors)return;const c="color: "+this.color;d.splice(1,0,c,"color: inherit");let p=0,f=0;d[0].replace(/%[a-zA-Z%]/g,h=>{h!=="%%"&&(p++,h==="%c"&&(f=p))}),d.splice(f,0,c)}e.log=console.debug||console.log||(()=>{});function s(d){try{d?e.storage.setItem("debug",d):e.storage.removeItem("debug")}catch{}}function a(){let d;try{d=e.storage.getItem("debug")||e.storage.getItem("DEBUG")}catch{}return!d&&typeof process<"u"&&"env"in process&&(d=process.env.DEBUG),d}function i(){try{return localStorage}catch{}}n.exports=Pi()(e);const{formatters:o}=n.exports;o.j=function(d){try{return JSON.stringify(d)}catch(c){return"[UnexpectedJSONParseError]: "+c.message}}}(bn,bn.exports)),bn.exports}var ji=Mi();const Zi=Ri(ji);function $i(){return yo()}function cs(n){const e=$i();return typeof e<"u"&&(e[n]==="true"||e[n]==="1")}const ds={get disabled(){return!0}},ls={get dontLogModelData(){return cs("OPENAI_AGENTS_DONT_LOG_MODEL_DATA")},get dontLogToolData(){return cs("OPENAI_AGENTS_DONT_LOG_TOOL_DATA")}},Li=ls.dontLogModelData,Fi=ls.dontLogToolData;function ps(n="openai-agents"){return{namespace:n,debug:Zi(n),error:console.error,warn:console.warn,dontLogModelData:Li,dontLogToolData:Fi}}const C=ps("openai-agents:core");function He(n){if(n==null)return String(n);if(typeof n=="string")return n;if(typeof n=="object")try{return JSON.stringify(n)}catch{return"[object with circular references]"}return String(n)}function Ui(n,e){return`An error occurred while running the tool. Please try again. Error: ${e instanceof Error?e.toString():String(e)}`}function xn(n){const e=n.name?wn(n.name):wn(n.execute.name),t=typeof n.errorFunction>"u"?Ui:n.errorFunction;if(!e)throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");const r=n.strict??!0;if(!r&&We(n.parameters))throw new K("Strict mode is required for Zod parameters");const{parser:s,schema:a}=Kn(n.parameters,e);async function i(c,p){const[f,h]=await Yn(()=>s(p));if(f!==null)throw C.dontLogToolData?C.debug(`Invalid JSON input for tool ${e}`):C.debug(`Invalid JSON input for tool ${e}: ${p}`),new de("Invalid JSON input for tool");C.dontLogToolData?C.debug(`Invoking tool ${e}`):C.debug(`Invoking tool ${e} with input ${p}`);const x=await n.execute(h,c),b=He(x);return C.dontLogToolData?C.debug(`Tool ${e} completed`):C.debug(`Tool ${e} returned: ${b}`),x}async function o(c,p){return i(c,p).catch(f=>{if(t){const h=Ut();return h==null||h.setError({message:"Error running tool (non-fatal)",data:{tool_name:e,error:f.toString()}}),t(c,f)}throw f})}const d=typeof n.needsApproval=="function"?n.needsApproval:async()=>typeof n.needsApproval=="boolean"?n.needsApproval:!1;return{type:"function",name:e,description:n.description,parameters:a,strict:r,invoke:o,needsApproval:d}}var U;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(o=>typeof s[s[o]]!="number"),i={};for(const o of a)i[o]=s[o];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(U||(U={}));var fs;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(fs||(fs={}));const k=U.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Le=n=>{switch(typeof n){case"undefined":return k.undefined;case"string":return k.string;case"number":return Number.isNaN(n)?k.nan:k.number;case"boolean":return k.boolean;case"function":return k.function;case"bigint":return k.bigint;case"symbol":return k.symbol;case"object":return Array.isArray(n)?k.array:n===null?k.null:n.then&&typeof n.then=="function"&&n.catch&&typeof n.catch=="function"?k.promise:typeof Map<"u"&&n instanceof Map?k.map:typeof Set<"u"&&n instanceof Set?k.set:typeof Date<"u"&&n instanceof Date?k.date:k.object;default:return k.unknown}},w=U.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);class Oe extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let o=r,d=0;for(;d<i.path.length;){const c=i.path[d];d===i.path.length-1?(o[c]=o[c]||{_errors:[]},o[c]._errors.push(t(i))):o[c]=o[c]||{_errors:[]},o=o[c],d++}}};return s(this),r}static assert(e){if(!(e instanceof Oe))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,U.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}}Oe.create=n=>new Oe(n);const nr=(n,e)=>{let t;switch(n.code){case w.invalid_type:n.received===k.undefined?t="Required":t=`Expected ${n.expected}, received ${n.received}`;break;case w.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(n.expected,U.jsonStringifyReplacer)}`;break;case w.unrecognized_keys:t=`Unrecognized key(s) in object: ${U.joinValues(n.keys,", ")}`;break;case w.invalid_union:t="Invalid input";break;case w.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${U.joinValues(n.options)}`;break;case w.invalid_enum_value:t=`Invalid enum value. Expected ${U.joinValues(n.options)}, received '${n.received}'`;break;case w.invalid_arguments:t="Invalid function arguments";break;case w.invalid_return_type:t="Invalid function return type";break;case w.invalid_date:t="Invalid date";break;case w.invalid_string:typeof n.validation=="object"?"includes"in n.validation?(t=`Invalid input: must include "${n.validation.includes}"`,typeof n.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${n.validation.position}`)):"startsWith"in n.validation?t=`Invalid input: must start with "${n.validation.startsWith}"`:"endsWith"in n.validation?t=`Invalid input: must end with "${n.validation.endsWith}"`:U.assertNever(n.validation):n.validation!=="regex"?t=`Invalid ${n.validation}`:t="Invalid";break;case w.too_small:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at least":"more than"} ${n.minimum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at least":"over"} ${n.minimum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${n.minimum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(n.minimum))}`:t="Invalid input";break;case w.too_big:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at most":"less than"} ${n.maximum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at most":"under"} ${n.maximum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="bigint"?t=`BigInt must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly":n.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(n.maximum))}`:t="Invalid input";break;case w.custom:t="Invalid input";break;case w.invalid_intersection_types:t="Intersection results could not be merged";break;case w.not_multiple_of:t=`Number must be a multiple of ${n.multipleOf}`;break;case w.not_finite:t="Number must be finite";break;default:t=e.defaultError,U.assertNever(n)}return{message:t}};let Ji=nr;function Bi(){return Ji}const qi=n=>{const{data:e,path:t,errorMaps:r,issueData:s}=n,a=[...t,...s.path||[]],i={...s,path:a};if(s.message!==void 0)return{...s,path:a,message:s.message};let o="";const d=r.filter(c=>!!c).slice().reverse();for(const c of d)o=c(i,{data:e,defaultError:o}).message;return{...s,path:a,message:o}};function S(n,e){const t=Bi(),r=qi({issueData:e,data:n.data,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,t,t===nr?void 0:nr].filter(s=>!!s)});n.common.issues.push(r)}class oe{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){const r=[];for(const s of t){if(s.status==="aborted")return O;s.status==="dirty"&&e.dirty(),r.push(s.value)}return{status:e.value,value:r}}static async mergeObjectAsync(e,t){const r=[];for(const s of t){const a=await s.key,i=await s.value;r.push({key:a,value:i})}return oe.mergeObjectSync(e,r)}static mergeObjectSync(e,t){const r={};for(const s of t){const{key:a,value:i}=s;if(a.status==="aborted"||i.status==="aborted")return O;a.status==="dirty"&&e.dirty(),i.status==="dirty"&&e.dirty(),a.value!=="__proto__"&&(typeof i.value<"u"||s.alwaysSet)&&(r[a.value]=i.value)}return{status:e.value,value:r}}}const O=Object.freeze({status:"aborted"}),jt=n=>({status:"dirty",value:n}),_e=n=>({status:"valid",value:n}),hs=n=>n.status==="aborted",ms=n=>n.status==="dirty",ht=n=>n.status==="valid",Sn=n=>typeof Promise<"u"&&n instanceof Promise;var I;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(I||(I={}));class Se{constructor(e,t,r,s){this._cachedPath=[],this.parent=e,this.data=t,this._path=r,this._key=s}get path(){return this._cachedPath.length||(Array.isArray(this._key)?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const gs=(n,e)=>{if(ht(e))return{success:!0,data:e.value};if(!n.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new Oe(n.common.issues);return this._error=t,this._error}}};function j(n){if(!n)return{};const{errorMap:e,invalid_type_error:t,required_error:r,description:s}=n;if(e&&(t||r))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:s}:{errorMap:(i,o)=>{const{message:d}=n;return i.code==="invalid_enum_value"?{message:d??o.defaultError}:typeof o.data>"u"?{message:d??r??o.defaultError}:i.code!=="invalid_type"?{message:o.defaultError}:{message:d??t??o.defaultError}},description:s}}class ${get description(){return this._def.description}_getType(e){return Le(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:Le(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new oe,ctx:{common:e.parent.common,data:e.data,parsedType:Le(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(Sn(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const r=this.safeParse(e,t);if(r.success)return r.data;throw r.error}safeParse(e,t){const r={common:{issues:[],async:(t==null?void 0:t.async)??!1,contextualErrorMap:t==null?void 0:t.errorMap},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Le(e)},s=this._parseSync({data:e,path:r.path,parent:r});return gs(r,s)}"~validate"(e){var r,s;const t={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Le(e)};if(!this["~standard"].async)try{const a=this._parseSync({data:e,path:[],parent:t});return ht(a)?{value:a.value}:{issues:t.common.issues}}catch(a){(s=(r=a==null?void 0:a.message)==null?void 0:r.toLowerCase())!=null&&s.includes("encountered")&&(this["~standard"].async=!0),t.common={issues:[],async:!0}}return this._parseAsync({data:e,path:[],parent:t}).then(a=>ht(a)?{value:a.value}:{issues:t.common.issues})}async parseAsync(e,t){const r=await this.safeParseAsync(e,t);if(r.success)return r.data;throw r.error}async safeParseAsync(e,t){const r={common:{issues:[],contextualErrorMap:t==null?void 0:t.errorMap,async:!0},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Le(e)},s=this._parse({data:e,path:r.path,parent:r}),a=await(Sn(s)?s:Promise.resolve(s));return gs(r,a)}refine(e,t){const r=s=>typeof t=="string"||typeof t>"u"?{message:t}:typeof t=="function"?t(s):t;return this._refinement((s,a)=>{const i=e(s),o=()=>a.addIssue({code:w.custom,...r(s)});return typeof Promise<"u"&&i instanceof Promise?i.then(d=>d?!0:(o(),!1)):i?!0:(o(),!1)})}refinement(e,t){return this._refinement((r,s)=>e(r)?!0:(s.addIssue(typeof t=="function"?t(r,s):t),!1))}_refinement(e){return new Qe({schema:this,typeName:N.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this),this["~standard"]={version:1,vendor:"zod",validate:t=>this["~validate"](t)}}optional(){return De.create(this,this._def)}nullable(){return Ke.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return Te.create(this)}promise(){return On.create(this,this._def)}or(e){return kn.create([this,e],this._def)}and(e){return In.create(this,e,this._def)}transform(e){return new Qe({...j(this._def),schema:this,typeName:N.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t=typeof e=="function"?e:()=>e;return new Nn({...j(this._def),innerType:this,defaultValue:t,typeName:N.ZodDefault})}brand(){return new ks({typeName:N.ZodBranded,type:this,...j(this._def)})}catch(e){const t=typeof e=="function"?e:()=>e;return new Rn({...j(this._def),innerType:this,catchValue:t,typeName:N.ZodCatch})}describe(e){const t=this.constructor;return new t({...this._def,description:e})}pipe(e){return lr.create(this,e)}readonly(){return Dn.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const Gi=/^c[^\s-]{8,}$/i,Vi=/^[0-9a-z]+$/,zi=/^[0-9A-HJKMNP-TV-Z]{26}$/i,Wi=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,Hi=/^[a-z0-9_-]{21}$/i,Yi=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,Xi=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,Qi=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,Ki="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let rr;const eo=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,to=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,no=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,ro=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,so=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,ao=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,_s="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",io=new RegExp(`^${_s}$`);function ys(n){let e="[0-5]\\d";n.precision?e=`${e}\\.\\d{${n.precision}}`:n.precision==null&&(e=`${e}(\\.\\d+)?`);const t=n.precision?"+":"?";return`([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`}function oo(n){return new RegExp(`^${ys(n)}$`)}function uo(n){let e=`${_s}T${ys(n)}`;const t=[];return t.push(n.local?"Z?":"Z"),n.offset&&t.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${t.join("|")})`,new RegExp(`^${e}$`)}function co(n,e){return!!((e==="v4"||!e)&&eo.test(n)||(e==="v6"||!e)&&no.test(n))}function lo(n,e){if(!Yi.test(n))return!1;try{const[t]=n.split("."),r=t.replace(/-/g,"+").replace(/_/g,"/").padEnd(t.length+(4-t.length%4)%4,"="),s=JSON.parse(atob(r));return!(typeof s!="object"||s===null||"typ"in s&&(s==null?void 0:s.typ)!=="JWT"||!s.alg||e&&s.alg!==e)}catch{return!1}}function po(n,e){return!!((e==="v4"||!e)&&to.test(n)||(e==="v6"||!e)&&ro.test(n))}class Ne extends ${_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==k.string){const a=this._getOrReturnCtx(e);return S(a,{code:w.invalid_type,expected:k.string,received:a.parsedType}),O}const r=new oe;let s;for(const a of this._def.checks)if(a.kind==="min")e.data.length<a.value&&(s=this._getOrReturnCtx(e,s),S(s,{code:w.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="max")e.data.length>a.value&&(s=this._getOrReturnCtx(e,s),S(s,{code:w.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="length"){const i=e.data.length>a.value,o=e.data.length<a.value;(i||o)&&(s=this._getOrReturnCtx(e,s),i?S(s,{code:w.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}):o&&S(s,{code:w.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}),r.dirty())}else if(a.kind==="email")Qi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"email",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="emoji")rr||(rr=new RegExp(Ki,"u")),rr.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"emoji",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="uuid")Wi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"uuid",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="nanoid")Hi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"nanoid",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid")Gi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"cuid",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid2")Vi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"cuid2",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="ulid")zi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"ulid",code:w.invalid_string,message:a.message}),r.dirty());else if(a.kind==="url")try{new URL(e.data)}catch{s=this._getOrReturnCtx(e,s),S(s,{validation:"url",code:w.invalid_string,message:a.message}),r.dirty()}else a.kind==="regex"?(a.regex.lastIndex=0,a.regex.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"regex",code:w.invalid_string,message:a.message}),r.dirty())):a.kind==="trim"?e.data=e.data.trim():a.kind==="includes"?e.data.includes(a.value,a.position)||(s=this._getOrReturnCtx(e,s),S(s,{code:w.invalid_string,validation:{includes:a.value,position:a.position},message:a.message}),r.dirty()):a.kind==="toLowerCase"?e.data=e.data.toLowerCase():a.kind==="toUpperCase"?e.data=e.data.toUpperCase():a.kind==="startsWith"?e.data.startsWith(a.value)||(s=this._getOrReturnCtx(e,s),S(s,{code:w.invalid_string,validation:{startsWith:a.value},message:a.message}),r.dirty()):a.kind==="endsWith"?e.data.endsWith(a.value)||(s=this._getOrReturnCtx(e,s),S(s,{code:w.invalid_string,validation:{endsWith:a.value},message:a.message}),r.dirty()):a.kind==="datetime"?uo(a).test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{code:w.invalid_string,validation:"datetime",message:a.message}),r.dirty()):a.kind==="date"?io.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{code:w.invalid_string,validation:"date",message:a.message}),r.dirty()):a.kind==="time"?oo(a).test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{code:w.invalid_string,validation:"time",message:a.message}),r.dirty()):a.kind==="duration"?Xi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"duration",code:w.invalid_string,message:a.message}),r.dirty()):a.kind==="ip"?co(e.data,a.version)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"ip",code:w.invalid_string,message:a.message}),r.dirty()):a.kind==="jwt"?lo(e.data,a.alg)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"jwt",code:w.invalid_string,message:a.message}),r.dirty()):a.kind==="cidr"?po(e.data,a.version)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"cidr",code:w.invalid_string,message:a.message}),r.dirty()):a.kind==="base64"?so.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"base64",code:w.invalid_string,message:a.message}),r.dirty()):a.kind==="base64url"?ao.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"base64url",code:w.invalid_string,message:a.message}),r.dirty()):U.assertNever(a);return{status:r.value,value:e.data}}_regex(e,t,r){return this.refinement(s=>e.test(s),{validation:t,code:w.invalid_string,...I.errToObj(r)})}_addCheck(e){return new Ne({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...I.errToObj(e)})}url(e){return this._addCheck({kind:"url",...I.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...I.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...I.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...I.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...I.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...I.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...I.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...I.errToObj(e)})}base64url(e){return this._addCheck({kind:"base64url",...I.errToObj(e)})}jwt(e){return this._addCheck({kind:"jwt",...I.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...I.errToObj(e)})}cidr(e){return this._addCheck({kind:"cidr",...I.errToObj(e)})}datetime(e){return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,offset:(e==null?void 0:e.offset)??!1,local:(e==null?void 0:e.local)??!1,...I.errToObj(e==null?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,...I.errToObj(e==null?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...I.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...I.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t==null?void 0:t.position,...I.errToObj(t==null?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...I.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...I.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...I.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...I.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...I.errToObj(t)})}nonempty(e){return this.min(1,I.errToObj(e))}trim(){return new Ne({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new Ne({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new Ne({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isCIDR(){return!!this._def.checks.find(e=>e.kind==="cidr")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get isBase64url(){return!!this._def.checks.find(e=>e.kind==="base64url")}get minLength(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Ne.create=n=>new Ne({checks:[],typeName:N.ZodString,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});function fo(n,e){const t=(n.toString().split(".")[1]||"").length,r=(e.toString().split(".")[1]||"").length,s=t>r?t:r,a=Number.parseInt(n.toFixed(s).replace(".","")),i=Number.parseInt(e.toFixed(s).replace(".",""));return a%i/10**s}class mt extends ${constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==k.number){const a=this._getOrReturnCtx(e);return S(a,{code:w.invalid_type,expected:k.number,received:a.parsedType}),O}let r;const s=new oe;for(const a of this._def.checks)a.kind==="int"?U.isInteger(e.data)||(r=this._getOrReturnCtx(e,r),S(r,{code:w.invalid_type,expected:"integer",received:"float",message:a.message}),s.dirty()):a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),S(r,{code:w.too_small,minimum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),S(r,{code:w.too_big,maximum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="multipleOf"?fo(e.data,a.value)!==0&&(r=this._getOrReturnCtx(e,r),S(r,{code:w.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):a.kind==="finite"?Number.isFinite(e.data)||(r=this._getOrReturnCtx(e,r),S(r,{code:w.not_finite,message:a.message}),s.dirty()):U.assertNever(a);return{status:s.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,I.toString(t))}gt(e,t){return this.setLimit("min",e,!1,I.toString(t))}lte(e,t){return this.setLimit("max",e,!0,I.toString(t))}lt(e,t){return this.setLimit("max",e,!1,I.toString(t))}setLimit(e,t,r,s){return new mt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:I.toString(s)}]})}_addCheck(e){return new mt({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:I.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:I.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:I.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:I.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:I.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:I.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:I.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:I.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:I.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&U.isInteger(e.value))}get isFinite(){let e=null,t=null;for(const r of this._def.checks){if(r.kind==="finite"||r.kind==="int"||r.kind==="multipleOf")return!0;r.kind==="min"?(t===null||r.value>t)&&(t=r.value):r.kind==="max"&&(e===null||r.value<e)&&(e=r.value)}return Number.isFinite(t)&&Number.isFinite(e)}}mt.create=n=>new mt({checks:[],typeName:N.ZodNumber,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class Zt extends ${constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce)try{e.data=BigInt(e.data)}catch{return this._getInvalidInput(e)}if(this._getType(e)!==k.bigint)return this._getInvalidInput(e);let r;const s=new oe;for(const a of this._def.checks)a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),S(r,{code:w.too_small,type:"bigint",minimum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),S(r,{code:w.too_big,type:"bigint",maximum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="multipleOf"?e.data%a.value!==BigInt(0)&&(r=this._getOrReturnCtx(e,r),S(r,{code:w.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):U.assertNever(a);return{status:s.value,value:e.data}}_getInvalidInput(e){const t=this._getOrReturnCtx(e);return S(t,{code:w.invalid_type,expected:k.bigint,received:t.parsedType}),O}gte(e,t){return this.setLimit("min",e,!0,I.toString(t))}gt(e,t){return this.setLimit("min",e,!1,I.toString(t))}lte(e,t){return this.setLimit("max",e,!0,I.toString(t))}lt(e,t){return this.setLimit("max",e,!1,I.toString(t))}setLimit(e,t,r,s){return new Zt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:I.toString(s)}]})}_addCheck(e){return new Zt({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:I.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:I.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:I.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:I.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:I.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Zt.create=n=>new Zt({checks:[],typeName:N.ZodBigInt,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});class sr extends ${_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==k.boolean){const r=this._getOrReturnCtx(e);return S(r,{code:w.invalid_type,expected:k.boolean,received:r.parsedType}),O}return _e(e.data)}}sr.create=n=>new sr({typeName:N.ZodBoolean,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class Tn extends ${_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==k.date){const a=this._getOrReturnCtx(e);return S(a,{code:w.invalid_type,expected:k.date,received:a.parsedType}),O}if(Number.isNaN(e.data.getTime())){const a=this._getOrReturnCtx(e);return S(a,{code:w.invalid_date}),O}const r=new oe;let s;for(const a of this._def.checks)a.kind==="min"?e.data.getTime()<a.value&&(s=this._getOrReturnCtx(e,s),S(s,{code:w.too_small,message:a.message,inclusive:!0,exact:!1,minimum:a.value,type:"date"}),r.dirty()):a.kind==="max"?e.data.getTime()>a.value&&(s=this._getOrReturnCtx(e,s),S(s,{code:w.too_big,message:a.message,inclusive:!0,exact:!1,maximum:a.value,type:"date"}),r.dirty()):U.assertNever(a);return{status:r.value,value:new Date(e.data.getTime())}}_addCheck(e){return new Tn({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:I.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:I.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}}Tn.create=n=>new Tn({checks:[],coerce:(n==null?void 0:n.coerce)||!1,typeName:N.ZodDate,...j(n)});class vs extends ${_parse(e){if(this._getType(e)!==k.symbol){const r=this._getOrReturnCtx(e);return S(r,{code:w.invalid_type,expected:k.symbol,received:r.parsedType}),O}return _e(e.data)}}vs.create=n=>new vs({typeName:N.ZodSymbol,...j(n)});class ar extends ${_parse(e){if(this._getType(e)!==k.undefined){const r=this._getOrReturnCtx(e);return S(r,{code:w.invalid_type,expected:k.undefined,received:r.parsedType}),O}return _e(e.data)}}ar.create=n=>new ar({typeName:N.ZodUndefined,...j(n)});class ir extends ${_parse(e){if(this._getType(e)!==k.null){const r=this._getOrReturnCtx(e);return S(r,{code:w.invalid_type,expected:k.null,received:r.parsedType}),O}return _e(e.data)}}ir.create=n=>new ir({typeName:N.ZodNull,...j(n)});class or extends ${constructor(){super(...arguments),this._any=!0}_parse(e){return _e(e.data)}}or.create=n=>new or({typeName:N.ZodAny,...j(n)});class ws extends ${constructor(){super(...arguments),this._unknown=!0}_parse(e){return _e(e.data)}}ws.create=n=>new ws({typeName:N.ZodUnknown,...j(n)});class Fe extends ${_parse(e){const t=this._getOrReturnCtx(e);return S(t,{code:w.invalid_type,expected:k.never,received:t.parsedType}),O}}Fe.create=n=>new Fe({typeName:N.ZodNever,...j(n)});class bs extends ${_parse(e){if(this._getType(e)!==k.undefined){const r=this._getOrReturnCtx(e);return S(r,{code:w.invalid_type,expected:k.void,received:r.parsedType}),O}return _e(e.data)}}bs.create=n=>new bs({typeName:N.ZodVoid,...j(n)});class Te extends ${_parse(e){const{ctx:t,status:r}=this._processInputParams(e),s=this._def;if(t.parsedType!==k.array)return S(t,{code:w.invalid_type,expected:k.array,received:t.parsedType}),O;if(s.exactLength!==null){const i=t.data.length>s.exactLength.value,o=t.data.length<s.exactLength.value;(i||o)&&(S(t,{code:i?w.too_big:w.too_small,minimum:o?s.exactLength.value:void 0,maximum:i?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),r.dirty())}if(s.minLength!==null&&t.data.length<s.minLength.value&&(S(t,{code:w.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),r.dirty()),s.maxLength!==null&&t.data.length>s.maxLength.value&&(S(t,{code:w.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),r.dirty()),t.common.async)return Promise.all([...t.data].map((i,o)=>s.type._parseAsync(new Se(t,i,t.path,o)))).then(i=>oe.mergeArray(r,i));const a=[...t.data].map((i,o)=>s.type._parseSync(new Se(t,i,t.path,o)));return oe.mergeArray(r,a)}get element(){return this._def.type}min(e,t){return new Te({...this._def,minLength:{value:e,message:I.toString(t)}})}max(e,t){return new Te({...this._def,maxLength:{value:e,message:I.toString(t)}})}length(e,t){return new Te({...this._def,exactLength:{value:e,message:I.toString(t)}})}nonempty(e){return this.min(1,e)}}Te.create=(n,e)=>new Te({type:n,minLength:null,maxLength:null,exactLength:null,typeName:N.ZodArray,...j(e)});function gt(n){if(n instanceof Q){const e={};for(const t in n.shape){const r=n.shape[t];e[t]=De.create(gt(r))}return new Q({...n._def,shape:()=>e})}else return n instanceof Te?new Te({...n._def,type:gt(n.element)}):n instanceof De?De.create(gt(n.unwrap())):n instanceof Ke?Ke.create(gt(n.unwrap())):n instanceof Ye?Ye.create(n.items.map(e=>gt(e))):n}class Q extends ${constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),t=U.objectKeys(e);return this._cached={shape:e,keys:t},this._cached}_parse(e){if(this._getType(e)!==k.object){const c=this._getOrReturnCtx(e);return S(c,{code:w.invalid_type,expected:k.object,received:c.parsedType}),O}const{status:r,ctx:s}=this._processInputParams(e),{shape:a,keys:i}=this._getCached(),o=[];if(!(this._def.catchall instanceof Fe&&this._def.unknownKeys==="strip"))for(const c in s.data)i.includes(c)||o.push(c);const d=[];for(const c of i){const p=a[c],f=s.data[c];d.push({key:{status:"valid",value:c},value:p._parse(new Se(s,f,s.path,c)),alwaysSet:c in s.data})}if(this._def.catchall instanceof Fe){const c=this._def.unknownKeys;if(c==="passthrough")for(const p of o)d.push({key:{status:"valid",value:p},value:{status:"valid",value:s.data[p]}});else if(c==="strict")o.length>0&&(S(s,{code:w.unrecognized_keys,keys:o}),r.dirty());else if(c!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const c=this._def.catchall;for(const p of o){const f=s.data[p];d.push({key:{status:"valid",value:p},value:c._parse(new Se(s,f,s.path,p)),alwaysSet:p in s.data})}}return s.common.async?Promise.resolve().then(async()=>{const c=[];for(const p of d){const f=await p.key,h=await p.value;c.push({key:f,value:h,alwaysSet:p.alwaysSet})}return c}).then(c=>oe.mergeObjectSync(r,c)):oe.mergeObjectSync(r,d)}get shape(){return this._def.shape()}strict(e){return I.errToObj,new Q({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,r)=>{var a,i;const s=((i=(a=this._def).errorMap)==null?void 0:i.call(a,t,r).message)??r.defaultError;return t.code==="unrecognized_keys"?{message:I.errToObj(e).message??s}:{message:s}}}:{}})}strip(){return new Q({...this._def,unknownKeys:"strip"})}passthrough(){return new Q({...this._def,unknownKeys:"passthrough"})}extend(e){return new Q({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new Q({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:N.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new Q({...this._def,catchall:e})}pick(e){const t={};for(const r of U.objectKeys(e))e[r]&&this.shape[r]&&(t[r]=this.shape[r]);return new Q({...this._def,shape:()=>t})}omit(e){const t={};for(const r of U.objectKeys(this.shape))e[r]||(t[r]=this.shape[r]);return new Q({...this._def,shape:()=>t})}deepPartial(){return gt(this)}partial(e){const t={};for(const r of U.objectKeys(this.shape)){const s=this.shape[r];e&&!e[r]?t[r]=s:t[r]=s.optional()}return new Q({...this._def,shape:()=>t})}required(e){const t={};for(const r of U.objectKeys(this.shape))if(e&&!e[r])t[r]=this.shape[r];else{let a=this.shape[r];for(;a instanceof De;)a=a._def.innerType;t[r]=a}return new Q({...this._def,shape:()=>t})}keyof(){return Ss(U.objectKeys(this.shape))}}Q.create=(n,e)=>new Q({shape:()=>n,unknownKeys:"strip",catchall:Fe.create(),typeName:N.ZodObject,...j(e)}),Q.strictCreate=(n,e)=>new Q({shape:()=>n,unknownKeys:"strict",catchall:Fe.create(),typeName:N.ZodObject,...j(e)}),Q.lazycreate=(n,e)=>new Q({shape:n,unknownKeys:"strip",catchall:Fe.create(),typeName:N.ZodObject,...j(e)});class kn extends ${_parse(e){const{ctx:t}=this._processInputParams(e),r=this._def.options;function s(a){for(const o of a)if(o.result.status==="valid")return o.result;for(const o of a)if(o.result.status==="dirty")return t.common.issues.push(...o.ctx.common.issues),o.result;const i=a.map(o=>new Oe(o.ctx.common.issues));return S(t,{code:w.invalid_union,unionErrors:i}),O}if(t.common.async)return Promise.all(r.map(async a=>{const i={...t,common:{...t.common,issues:[]},parent:null};return{result:await a._parseAsync({data:t.data,path:t.path,parent:i}),ctx:i}})).then(s);{let a;const i=[];for(const d of r){const c={...t,common:{...t.common,issues:[]},parent:null},p=d._parseSync({data:t.data,path:t.path,parent:c});if(p.status==="valid")return p;p.status==="dirty"&&!a&&(a={result:p,ctx:c}),c.common.issues.length&&i.push(c.common.issues)}if(a)return t.common.issues.push(...a.ctx.common.issues),a.result;const o=i.map(d=>new Oe(d));return S(t,{code:w.invalid_union,unionErrors:o}),O}}get options(){return this._def.options}}kn.create=(n,e)=>new kn({options:n,typeName:N.ZodUnion,...j(e)});const Re=n=>n instanceof Cn?Re(n.schema):n instanceof Qe?Re(n.innerType()):n instanceof En?[n.value]:n instanceof Xe?n.options:n instanceof dr?U.objectValues(n.enum):n instanceof Nn?Re(n._def.innerType):n instanceof ar?[void 0]:n instanceof ir?[null]:n instanceof De?[void 0,...Re(n.unwrap())]:n instanceof Ke?[null,...Re(n.unwrap())]:n instanceof ks||n instanceof Dn?Re(n.unwrap()):n instanceof Rn?Re(n._def.innerType):[];class ur extends ${_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==k.object)return S(t,{code:w.invalid_type,expected:k.object,received:t.parsedType}),O;const r=this.discriminator,s=t.data[r],a=this.optionsMap.get(s);return a?t.common.async?a._parseAsync({data:t.data,path:t.path,parent:t}):a._parseSync({data:t.data,path:t.path,parent:t}):(S(t,{code:w.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),O)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,r){const s=new Map;for(const a of t){const i=Re(a.shape[e]);if(!i.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const o of i){if(s.has(o))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);s.set(o,a)}}return new ur({typeName:N.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:s,...j(r)})}}function cr(n,e){const t=Le(n),r=Le(e);if(n===e)return{valid:!0,data:n};if(t===k.object&&r===k.object){const s=U.objectKeys(e),a=U.objectKeys(n).filter(o=>s.indexOf(o)!==-1),i={...n,...e};for(const o of a){const d=cr(n[o],e[o]);if(!d.valid)return{valid:!1};i[o]=d.data}return{valid:!0,data:i}}else if(t===k.array&&r===k.array){if(n.length!==e.length)return{valid:!1};const s=[];for(let a=0;a<n.length;a++){const i=n[a],o=e[a],d=cr(i,o);if(!d.valid)return{valid:!1};s.push(d.data)}return{valid:!0,data:s}}else return t===k.date&&r===k.date&&+n==+e?{valid:!0,data:n}:{valid:!1}}class In extends ${_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=(a,i)=>{if(hs(a)||hs(i))return O;const o=cr(a.value,i.value);return o.valid?((ms(a)||ms(i))&&t.dirty(),{status:t.value,value:o.data}):(S(r,{code:w.invalid_intersection_types}),O)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then(([a,i])=>s(a,i)):s(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}}In.create=(n,e,t)=>new In({left:n,right:e,typeName:N.ZodIntersection,...j(t)});class Ye extends ${_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.array)return S(r,{code:w.invalid_type,expected:k.array,received:r.parsedType}),O;if(r.data.length<this._def.items.length)return S(r,{code:w.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),O;!this._def.rest&&r.data.length>this._def.items.length&&(S(r,{code:w.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const a=[...r.data].map((i,o)=>{const d=this._def.items[o]||this._def.rest;return d?d._parse(new Se(r,i,r.path,o)):null}).filter(i=>!!i);return r.common.async?Promise.all(a).then(i=>oe.mergeArray(t,i)):oe.mergeArray(t,a)}get items(){return this._def.items}rest(e){return new Ye({...this._def,rest:e})}}Ye.create=(n,e)=>{if(!Array.isArray(n))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new Ye({items:n,typeName:N.ZodTuple,rest:null,...j(e)})};class An extends ${get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.object)return S(r,{code:w.invalid_type,expected:k.object,received:r.parsedType}),O;const s=[],a=this._def.keyType,i=this._def.valueType;for(const o in r.data)s.push({key:a._parse(new Se(r,o,r.path,o)),value:i._parse(new Se(r,r.data[o],r.path,o)),alwaysSet:o in r.data});return r.common.async?oe.mergeObjectAsync(t,s):oe.mergeObjectSync(t,s)}get element(){return this._def.valueType}static create(e,t,r){return t instanceof $?new An({keyType:e,valueType:t,typeName:N.ZodRecord,...j(r)}):new An({keyType:Ne.create(),valueType:e,typeName:N.ZodRecord,...j(t)})}}class xs extends ${get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.map)return S(r,{code:w.invalid_type,expected:k.map,received:r.parsedType}),O;const s=this._def.keyType,a=this._def.valueType,i=[...r.data.entries()].map(([o,d],c)=>({key:s._parse(new Se(r,o,r.path,[c,"key"])),value:a._parse(new Se(r,d,r.path,[c,"value"]))}));if(r.common.async){const o=new Map;return Promise.resolve().then(async()=>{for(const d of i){const c=await d.key,p=await d.value;if(c.status==="aborted"||p.status==="aborted")return O;(c.status==="dirty"||p.status==="dirty")&&t.dirty(),o.set(c.value,p.value)}return{status:t.value,value:o}})}else{const o=new Map;for(const d of i){const c=d.key,p=d.value;if(c.status==="aborted"||p.status==="aborted")return O;(c.status==="dirty"||p.status==="dirty")&&t.dirty(),o.set(c.value,p.value)}return{status:t.value,value:o}}}}xs.create=(n,e,t)=>new xs({valueType:e,keyType:n,typeName:N.ZodMap,...j(t)});class $t extends ${_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.set)return S(r,{code:w.invalid_type,expected:k.set,received:r.parsedType}),O;const s=this._def;s.minSize!==null&&r.data.size<s.minSize.value&&(S(r,{code:w.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),t.dirty()),s.maxSize!==null&&r.data.size>s.maxSize.value&&(S(r,{code:w.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),t.dirty());const a=this._def.valueType;function i(d){const c=new Set;for(const p of d){if(p.status==="aborted")return O;p.status==="dirty"&&t.dirty(),c.add(p.value)}return{status:t.value,value:c}}const o=[...r.data.values()].map((d,c)=>a._parse(new Se(r,d,r.path,c)));return r.common.async?Promise.all(o).then(d=>i(d)):i(o)}min(e,t){return new $t({...this._def,minSize:{value:e,message:I.toString(t)}})}max(e,t){return new $t({...this._def,maxSize:{value:e,message:I.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}$t.create=(n,e)=>new $t({valueType:n,minSize:null,maxSize:null,typeName:N.ZodSet,...j(e)});class Cn extends ${get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}Cn.create=(n,e)=>new Cn({getter:n,typeName:N.ZodLazy,...j(e)});class En extends ${_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return S(t,{received:t.data,code:w.invalid_literal,expected:this._def.value}),O}return{status:"valid",value:e.data}}get value(){return this._def.value}}En.create=(n,e)=>new En({value:n,typeName:N.ZodLiteral,...j(e)});function Ss(n,e){return new Xe({values:n,typeName:N.ZodEnum,...j(e)})}class Xe extends ${_parse(e){if(typeof e.data!="string"){const t=this._getOrReturnCtx(e),r=this._def.values;return S(t,{expected:U.joinValues(r),received:t.parsedType,code:w.invalid_type}),O}if(this._cache||(this._cache=new Set(this._def.values)),!this._cache.has(e.data)){const t=this._getOrReturnCtx(e),r=this._def.values;return S(t,{received:t.data,code:w.invalid_enum_value,options:r}),O}return _e(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return Xe.create(e,{...this._def,...t})}exclude(e,t=this._def){return Xe.create(this.options.filter(r=>!e.includes(r)),{...this._def,...t})}}Xe.create=Ss;class dr extends ${_parse(e){const t=U.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==k.string&&r.parsedType!==k.number){const s=U.objectValues(t);return S(r,{expected:U.joinValues(s),received:r.parsedType,code:w.invalid_type}),O}if(this._cache||(this._cache=new Set(U.getValidEnumValues(this._def.values))),!this._cache.has(e.data)){const s=U.objectValues(t);return S(r,{received:r.data,code:w.invalid_enum_value,options:s}),O}return _e(e.data)}get enum(){return this._def.values}}dr.create=(n,e)=>new dr({values:n,typeName:N.ZodNativeEnum,...j(e)});class On extends ${unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==k.promise&&t.common.async===!1)return S(t,{code:w.invalid_type,expected:k.promise,received:t.parsedType}),O;const r=t.parsedType===k.promise?t.data:Promise.resolve(t.data);return _e(r.then(s=>this._def.type.parseAsync(s,{path:t.path,errorMap:t.common.contextualErrorMap})))}}On.create=(n,e)=>new On({type:n,typeName:N.ZodPromise,...j(e)});class Qe extends ${innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===N.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=this._def.effect||null,a={addIssue:i=>{S(r,i),i.fatal?t.abort():t.dirty()},get path(){return r.path}};if(a.addIssue=a.addIssue.bind(a),s.type==="preprocess"){const i=s.transform(r.data,a);if(r.common.async)return Promise.resolve(i).then(async o=>{if(t.value==="aborted")return O;const d=await this._def.schema._parseAsync({data:o,path:r.path,parent:r});return d.status==="aborted"?O:d.status==="dirty"||t.value==="dirty"?jt(d.value):d});{if(t.value==="aborted")return O;const o=this._def.schema._parseSync({data:i,path:r.path,parent:r});return o.status==="aborted"?O:o.status==="dirty"||t.value==="dirty"?jt(o.value):o}}if(s.type==="refinement"){const i=o=>{const d=s.refinement(o,a);if(r.common.async)return Promise.resolve(d);if(d instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return o};if(r.common.async===!1){const o=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return o.status==="aborted"?O:(o.status==="dirty"&&t.dirty(),i(o.value),{status:t.value,value:o.value})}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(o=>o.status==="aborted"?O:(o.status==="dirty"&&t.dirty(),i(o.value).then(()=>({status:t.value,value:o.value}))))}if(s.type==="transform")if(r.common.async===!1){const i=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!ht(i))return O;const o=s.transform(i.value,a);if(o instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:o}}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(i=>ht(i)?Promise.resolve(s.transform(i.value,a)).then(o=>({status:t.value,value:o})):O);U.assertNever(s)}}Qe.create=(n,e,t)=>new Qe({schema:n,typeName:N.ZodEffects,effect:e,...j(t)}),Qe.createWithPreprocess=(n,e,t)=>new Qe({schema:e,effect:{type:"preprocess",transform:n},typeName:N.ZodEffects,...j(t)});class De extends ${_parse(e){return this._getType(e)===k.undefined?_e(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}De.create=(n,e)=>new De({innerType:n,typeName:N.ZodOptional,...j(e)});class Ke extends ${_parse(e){return this._getType(e)===k.null?_e(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Ke.create=(n,e)=>new Ke({innerType:n,typeName:N.ZodNullable,...j(e)});class Nn extends ${_parse(e){const{ctx:t}=this._processInputParams(e);let r=t.data;return t.parsedType===k.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}Nn.create=(n,e)=>new Nn({innerType:n,typeName:N.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...j(e)});class Rn extends ${_parse(e){const{ctx:t}=this._processInputParams(e),r={...t,common:{...t.common,issues:[]}},s=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return Sn(s)?s.then(a=>({status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new Oe(r.common.issues)},input:r.data})})):{status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new Oe(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}}Rn.create=(n,e)=>new Rn({innerType:n,typeName:N.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...j(e)});class Ts extends ${_parse(e){if(this._getType(e)!==k.nan){const r=this._getOrReturnCtx(e);return S(r,{code:w.invalid_type,expected:k.nan,received:r.parsedType}),O}return{status:"valid",value:e.data}}}Ts.create=n=>new Ts({typeName:N.ZodNaN,...j(n)});class ks extends ${_parse(e){const{ctx:t}=this._processInputParams(e),r=t.data;return this._def.type._parse({data:r,path:t.path,parent:t})}unwrap(){return this._def.type}}class lr extends ${_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.common.async)return(async()=>{const a=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return a.status==="aborted"?O:a.status==="dirty"?(t.dirty(),jt(a.value)):this._def.out._parseAsync({data:a.value,path:r.path,parent:r})})();{const s=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return s.status==="aborted"?O:s.status==="dirty"?(t.dirty(),{status:"dirty",value:s.value}):this._def.out._parseSync({data:s.value,path:r.path,parent:r})}}static create(e,t){return new lr({in:e,out:t,typeName:N.ZodPipeline})}}class Dn extends ${_parse(e){const t=this._def.innerType._parse(e),r=s=>(ht(s)&&(s.value=Object.freeze(s.value)),s);return Sn(t)?t.then(s=>r(s)):r(t)}unwrap(){return this._def.innerType}}Dn.create=(n,e)=>new Dn({innerType:n,typeName:N.ZodReadonly,...j(e)});var N;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(N||(N={}));const l=Ne.create,A=mt.create,Lt=sr.create,F=or.create;Fe.create;const B=Te.create,g=Q.create,Is=kn.create,le=ur.create;In.create,Ye.create;const ee=An.create,ho=Cn.create,m=En.create,ue=Xe.create;On.create,De.create,Ke.create,g({name:l(),description:l().optional(),inputSchema:g({type:m("object"),properties:ee(l(),F()),required:B(l()),additionalProperties:Lt()})});const pr={};async function mo({server:n,convertSchemasToStrict:e,runContext:t,agent:r}){return n.cacheToolsList&&pr[n.name]?pr[n.name].map(s=>As(s,n,e)):Uo(async s=>{const a=await n.listTools();let i=a;if(t&&r){const d={runContext:t,agent:r,serverName:n.name},c=[];for(const p of a){const f=n.toolFilter;if(f)if(typeof f=="function"){if(!await f(d,p)){C.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the callable filter.`);continue}}else{const h=f.allowedToolNames??[],x=f.blockedToolNames??[];if(h.length>0||x.length>0){const b=h.length>0?h.includes(p.name):!0,v=x.length>0?x.includes(p.name):!1;if(!b||v){v?C.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the static filter.`):b||C.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is not allowed by the static filter.`);continue}}}c.push(p)}i=c}s.spanData.result=i.map(d=>d.name);const o=i.map(d=>As(d,n,e));return n.cacheToolsList&&(pr[n.name]=i),o},{data:{server:n.name}})}async function go(n,e,t,r=!1){const s=Array.isArray(n)?{mcpServers:n,runContext:e,agent:t,convertSchemasToStrict:r}:n,{mcpServers:a,convertSchemasToStrict:i=!1,runContext:o,agent:d}=s,c=[],p=new Set;for(const f of a){const h=await mo({server:f,convertSchemasToStrict:i,runContext:o,agent:d}),b=[...new Set(h.map(v=>v.name))].filter(v=>p.has(v));if(b.length>0)throw new K(`Duplicate tool names found across MCP servers: ${b.join(", ")}`);for(const v of h)p.add(v.name),c.push(v)}return c}function As(n,e,t){var i,o,d,c;async function r(p,f){let h={};typeof p=="string"&&p?h=JSON.parse(p):typeof p=="object"&&p!=null&&(h=p);const x=Ut();x&&(x.spanData.mcp_data={server:e.name});const b=await e.callTool(n.name,h);return b.length===1?b[0]:b}const s={...n.inputSchema,type:((i=n.inputSchema)==null?void 0:i.type)??"object",properties:((o=n.inputSchema)==null?void 0:o.properties)??{},required:((d=n.inputSchema)==null?void 0:d.required)??[],additionalProperties:((c=n.inputSchema)==null?void 0:c.additionalProperties)??!1};if(t||s.additionalProperties===!0)try{const p=_o(s);return xn({name:n.name,description:n.description||"",parameters:p,strict:!0,execute:r})}catch(p){C.warn(`Error converting MCP schema to strict mode: ${p}`)}const a={...s,additionalProperties:!0};return xn({name:n.name,description:n.description||"",parameters:a,strict:!1,execute:r})}function _o(n){const e={...n,additionalProperties:!1};return e.required||(e.required=[]),e}function yo(){return{}}class Pn{constructor(){T(this,wt,new EventTarget)}on(e,t){return u(this,wt).addEventListener(e,r=>t(...r.detail??[])),this}off(e,t){return u(this,wt).removeEventListener(e,r=>t(...r.detail??[])),this}emit(e,...t){const r=new CustomEvent(e,{detail:t});return u(this,wt).dispatchEvent(r)}once(e,t){const r=(...s)=>{this.off(e,r),t(...s)};return this.on(e,r),this}}wt=new WeakMap;const Cs=crypto.randomUUID.bind(crypto),vo=class{constructor(){}pipeTo(e,t){}pipeThrough(e,t){}},wo=globalThis.ReadableStream,bo=globalThis.TransformStream;class xo{constructor(){_(this,"context",null)}run(e,t){return this.context=e,t()}getStore(){return this.context}enterWith(e){this.context=e}}class So{constructor(){}setTimeout(e,t){const r=setTimeout(e,t);return r.ref=typeof r.ref=="function"?r.ref:()=>r,r.unref=typeof r.unref=="function"?r.unref:()=>r,r.hasRef=typeof r.hasRef=="function"?r.hasRef:()=>!0,r.refresh=typeof r.refresh=="function"?r.refresh:()=>r,r}clearTimeout(e){window.clearTimeout(e)}}const To=new So;let Es;function ke(){return Es??(Es=new xo),Es}function Ft(){const n=ke().getStore();return n!=null&&n.trace?n.trace:null}function Ut(){const n=ke().getStore();return n!=null&&n.span?n.span:null}function Os(n){return async()=>{const e=Ft();if(!e)throw new Error("No trace found");await e.start();const t=await n(e);return await e.end(),t}}async function ko(n,e,t={}){const r=typeof n=="string"?Ie().createTrace({...t,name:n}):n;return ke().run({trace:r},Os(e))}async function Io(n,e={}){if(Ft())return await n();const r=Ie().createTrace(e);return ke().run({trace:r},Os(n))}function Mn(n){const e=ke().getStore();if(!e)throw new Error("No existing trace found");e.span&&(e.span.previousSpan=e.previousSpan,e.previousSpan=e.span),e.span=n,ke().enterWith(e)}function Jt(){var e;const n=ke().getStore();n&&(n.span=n.previousSpan,n.previousSpan=(e=n.previousSpan)==null?void 0:e.previousSpan,ke().enterWith(n))}function _t(n){const e=Ut();e&&e.setError(n)}function Ao(n){var e,t,r;return{trace:(e=n.trace)==null?void 0:e.clone(),span:(t=n.span)==null?void 0:t.clone(),previousSpan:(r=n.previousSpan)==null?void 0:r.clone()}}function fr(n){const e=ke().getStore();if(!e)throw new Error("No existing trace found");const t=Ao(e);return ke().run(t,n)}class Co{async export(e){if(ds.disabled){C.debug("Tracing is disabled. Skipping export");return}for(const t of e)t.type==="trace"?console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}`):console.log(`[Exporter] Export span: ${JSON.stringify(t)}`)}}class Eo{constructor(e,{maxQueueSize:t=1e3,maxBatchSize:r=100,scheduleDelay:s=5e3,exportTriggerRatio:a=.8}={}){T(this,ce);T(this,Ht);T(this,bt);T(this,Yt);T(this,Xt);T(this,xt);T(this,ae,[]);T(this,Me);T(this,Je,null);T(this,Be,!1);T(this,St,null);y(this,Ht,t),y(this,bt,r),y(this,Yt,s),y(this,Xt,t*a),y(this,xt,e),y(this,Me,To),C.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.")}start(){y(this,St,new AbortController),L(this,ce,jr).call(this)}async onTraceStart(e){await L(this,ce,Mr).call(this,e)}async onTraceEnd(e){}async onSpanStart(e){}async onSpanEnd(e){await L(this,ce,Mr).call(this,e)}async shutdown(e){var t;for(e&&u(this,Me).setTimeout(()=>{var r;(r=u(this,St))==null||r.abort()},e),C.debug("Shutting down gracefully");u(this,ae).length>0;){if(C.debug(`Waiting for buffer to empty. Items left: ${u(this,ae).length}`),u(this,Be)||await L(this,ce,Dt).call(this,!0),(t=u(this,St))!=null&&t.signal.aborted){C.debug("Timeout reached, force flushing"),await L(this,ce,Dt).call(this,!0);break}await new Promise(r=>u(this,Me).setTimeout(r,500))}C.debug("Buffer empty. Exiting"),u(this,Me)&&u(this,Je)&&u(this,Me).clearTimeout(u(this,Je))}async forceFlush(){u(this,ae).length>0&&await L(this,ce,Dt).call(this,!0)}}Ht=new WeakMap,bt=new WeakMap,Yt=new WeakMap,Xt=new WeakMap,xt=new WeakMap,ae=new WeakMap,Me=new WeakMap,Je=new WeakMap,Be=new WeakMap,St=new WeakMap,ce=new WeakSet,Mr=async function(e){if(u(this,ae).length+1>u(this,Ht)){C.error("Dropping trace because buffer is full");return}u(this,ae).push(e),u(this,ae).length>u(this,Xt)&&await L(this,ce,Dt).call(this)},jr=function(){y(this,Je,u(this,Me).setTimeout(async()=>{await L(this,ce,Dt).call(this),L(this,ce,jr).call(this)},u(this,Yt))),typeof u(this,Je).unref=="function"&&u(this,Je).unref()},Dt=async function(e=!1){if(u(this,ae).length!==0){if(C.debug(`Exporting batches. Force: ${e}. Buffer size: ${u(this,ae).length}`),e||u(this,ae).length<u(this,bt)){const t=[...u(this,ae)];y(this,ae,[]),y(this,Be,!0),await u(this,xt).export(t),y(this,Be,!1)}else if(u(this,ae).length>0){const t=u(this,ae).splice(0,u(this,bt));y(this,Be,!0),await u(this,xt).export(t),y(this,Be,!1)}}};class Oo{constructor(){T(this,pe,[])}start(){for(const e of u(this,pe))e.start&&e.start()}addTraceProcessor(e){u(this,pe).push(e)}setProcessors(e){C.debug("Shutting down old processors");for(const t of u(this,pe))t.shutdown();y(this,pe,e)}async onTraceStart(e){for(const t of u(this,pe))await t.onTraceStart(e)}async onTraceEnd(e){for(const t of u(this,pe))await t.onTraceEnd(e)}async onSpanStart(e){for(const t of u(this,pe))await t.onSpanStart(e)}async onSpanEnd(e){for(const t of u(this,pe))await t.onSpanEnd(e)}async shutdown(e){for(const t of u(this,pe))await t.shutdown(e)}async forceFlush(){for(const e of u(this,pe))await e.forceFlush()}}pe=new WeakMap;let hr=null,mr=null;function No(){return hr||(hr=new Co),hr}function Ns(){return mr||(mr=new Eo(No())),mr}function Rs(){return new Date().toISOString()}function Ds(){return`trace_${Cs().replace(/-/g,"")}`}function Ro(){return`span_${Cs().replace(/-/g,"").slice(0,24)}`}function Do(n){return Object.fromEntries(Object.entries(n).filter(([e])=>!e.startsWith("_")))}const Or=class Or{constructor(e,t){_(this,"type","trace.span");T(this,Qt);T(this,Kt);T(this,en);T(this,tn);T(this,at);T(this,qe);T(this,Ge);T(this,it);T(this,nn);y(this,Kt,e.traceId),y(this,en,e.spanId??Ro()),y(this,Qt,e.data),y(this,at,t),y(this,tn,e.parentId??null),y(this,it,e.error??null),y(this,qe,e.startedAt??null),y(this,Ge,e.endedAt??null)}get traceId(){return u(this,Kt)}get spanData(){return u(this,Qt)}get spanId(){return u(this,en)}get parentId(){return u(this,tn)}get previousSpan(){return u(this,nn)}set previousSpan(e){y(this,nn,e)}start(){if(u(this,qe)){C.warn("Span already started");return}y(this,qe,Rs()),u(this,at).onSpanStart(this)}end(){if(u(this,Ge)){C.debug("Span already finished",this.spanData);return}y(this,Ge,Rs()),u(this,at).onSpanEnd(this)}setError(e){y(this,it,e)}get error(){return u(this,it)}get startedAt(){return u(this,qe)}get endedAt(){return u(this,Ge)}clone(){var t;const e=new Or({traceId:this.traceId,spanId:this.spanId,parentId:this.parentId??void 0,data:this.spanData,startedAt:u(this,qe)??void 0,endedAt:u(this,Ge)??void 0,error:u(this,it)??void 0},u(this,at));return e.previousSpan=(t=this.previousSpan)==null?void 0:t.clone(),e}toJSON(){return{object:this.type,id:this.spanId,trace_id:this.traceId,parent_id:this.parentId,started_at:this.startedAt,ended_at:this.endedAt,span_data:Do(this.spanData),error:this.error}}};Qt=new WeakMap,Kt=new WeakMap,en=new WeakMap,tn=new WeakMap,at=new WeakMap,qe=new WeakMap,Ge=new WeakMap,it=new WeakMap,nn=new WeakMap;let Bt=Or;class Ue extends Bt{constructor(e,t){super({traceId:"no-op",spanId:"no-op",data:e},t)}start(){}end(){}setError(){}toJSON(){return null}}const Nr=class Nr{constructor(e,t){_(this,"type","trace");_(this,"traceId");_(this,"name");_(this,"groupId",null);_(this,"metadata");T(this,Tt);T(this,je);this.traceId=e.traceId??Ds(),this.name=e.name??"Agent workflow",this.groupId=e.groupId??null,this.metadata=e.metadata??{},y(this,Tt,t??Ns()),y(this,je,e.started??!1)}async start(){u(this,je)||(y(this,je,!0),await u(this,Tt).onTraceStart(this))}async end(){u(this,je)&&(y(this,je,!1),await u(this,Tt).onTraceEnd(this))}clone(){return new Nr({traceId:this.traceId,name:this.name,groupId:this.groupId??void 0,metadata:this.metadata,started:u(this,je)})}toJSON(){return{object:this.type,id:this.traceId,workflow_name:this.name,group_id:this.groupId,metadata:this.metadata}}};Tt=new WeakMap,je=new WeakMap;let qt=Nr;class gr extends qt{constructor(){super({})}async start(){}async end(){}toJSON(){return null}}class Po{constructor(){T(this,Gn);T(this,se);T(this,ot);y(this,se,new Oo),y(this,ot,ds.disabled),L(this,Gn,Ea).call(this)}registerProcessor(e){u(this,se).addTraceProcessor(e)}setProcessors(e){u(this,se).setProcessors(e)}getCurrentTrace(){return Ft()}getCurrentSpan(){return Ut()}setDisabled(e){y(this,ot,e)}startExportLoop(){u(this,se).start()}createTrace(e){if(u(this,ot))return C.debug("Tracing is disabled, Not creating trace %o",e),new gr;const t=e.traceId??Ds(),r=e.name??"Agent workflow";return C.debug("Creating trace %s with name %s",t,r),new qt({...e,name:r,traceId:t},u(this,se))}createSpan(e,t){if(u(this,ot)||e.disabled)return C.debug("Tracing is disabled, Not creating span %o",e),new Ue(e.data,u(this,se));let r,s;if(t){if(t instanceof qt){if(t instanceof gr)return C.debug("Parent trace is no-op, returning NoopSpan"),new Ue(e.data,u(this,se));s=t.traceId}else if(t instanceof Bt){if(t instanceof Ue)return C.debug("Parent span is no-op, returning NoopSpan"),new Ue(e.data,u(this,se));r=t.spanId,s=t.traceId}}else{const a=Ft(),i=Ut();if(!a)return C.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Ue(e.data,u(this,se));if(i instanceof Ue||a instanceof gr)return C.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`),new Ue(e.data,u(this,se));s=a.traceId,i?(C.debug("Using parent span %s",i.spanId),r=i.spanId):C.debug("No parent span, using current trace %s",a.traceId)}return s?(C.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId??s}`),new Bt({...e,traceId:s,parentId:r},u(this,se))):(C.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Ue(e.data,u(this,se)))}async shutdown(e){try{C.debug("Shutting down tracing provider"),await u(this,se).shutdown(e)}catch(t){C.error("Error shutting down tracing provider %o",t)}}async forceFlush(){await u(this,se).forceFlush()}}se=new WeakMap,ot=new WeakMap,Gn=new WeakSet,Ea=function(){if(typeof process<"u"&&typeof process.on=="function"){const e=async()=>{const t=setTimeout(()=>{console.warn("Cleanup timeout, forcing exit"),process.exit(1)},5e3);try{await this.shutdown()}finally{clearTimeout(t)}};process.on("beforeExit",e),process.on("SIGINT",async()=>{await e(),Ps("SIGINT")||process.exit(130)}),process.on("SIGTERM",async()=>{await e(),Ps("SIGTERM")||process.exit(0)}),process.on("unhandledRejection",async(t,r)=>{C.error("Unhandled rejection",t,r),await e(),Mo("unhandledRejection")||process.exit(1)})}};function Ps(n){return process.listeners(n).length>1}function Mo(n){return process.listeners(n).length>1}let _r;function Ie(){return _r||(_r=new Po),_r}function jn(n){return async(e,...t)=>fr(async()=>{const r=n(...t);Mn(r);try{return r.start(),await e(r)}catch(s){throw r.setError({message:s.message,data:s.data}),s}finally{r.end(),Jt()}})}function Ms(n,e){var t;return Ie().createSpan({...n,data:{type:"agent",name:((t=n==null?void 0:n.data)==null?void 0:t.name)??"Agent",...n==null?void 0:n.data}},e)}function jo(n,e){var t,r;return Ie().createSpan({...n,data:{type:"function",input:((t=n==null?void 0:n.data)==null?void 0:t.input)??"",output:((r=n==null?void 0:n.data)==null?void 0:r.output)??"",...n==null?void 0:n.data}},e)}const js=jn(jo);function Zo(n,e){return Ie().createSpan({...n,data:{type:"handoff",...n==null?void 0:n.data}},e)}const $o=jn(Zo);function Lo(n,e){return Ie().createSpan({...n,data:{type:"guardrail",triggered:!1,...n==null?void 0:n.data}},e)}const Zs=jn(Lo);function Fo(n,e){return Ie().createSpan({...n,data:{type:"mcp_tools",...n==null?void 0:n.data}},e)}const Uo=jn(Fo);function Jo(n){Ie().registerProcessor(n)}class yr{on(e,t){return this.eventEmitter.on(e,t),this.eventEmitter}off(e,t){return this.eventEmitter.off(e,t),this.eventEmitter}emit(e,...t){return this.eventEmitter.emit(e,...t)}once(e,t){return this.eventEmitter.once(e,t),this.eventEmitter}}class Bo extends yr{constructor(){super(...arguments);_(this,"eventEmitter",new Pn)}}class qo extends yr{constructor(){super(...arguments);_(this,"eventEmitter",new Pn)}}function $s({name:n,execute:e}){return{type:"input",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"input",name:n},output:await e(t)}}}}function vr({name:n,execute:e}){return{type:"output",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"output",name:n},agent:t.agent,agentOutput:t.agentOutput,output:await e(t)}}}}function Ls(n){return JSON.stringify({assistant:n.name})}function Go(n){return`transfer_to_${wn(n.name)}`}function Vo(n){return`Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription??""}`}class Fs{constructor(e,t){_(this,"toolName");_(this,"toolDescription");_(this,"inputJsonSchema",{type:"object",properties:{},required:[],additionalProperties:!1});_(this,"strictJsonSchema",!0);_(this,"onInvokeHandoff");_(this,"agentName");_(this,"inputFilter");_(this,"agent");this.agentName=e.name,this.onInvokeHandoff=t,this.toolName=Go(e),this.toolDescription=Vo(e),this.agent=e}getHandoffAsFunctionTool(){return{type:"function",name:this.toolName,description:this.toolDescription,parameters:this.inputJsonSchema,strict:this.strictJsonSchema}}}function Us(n,e={}){let t;const r=!!e.onHandoff,s=!!e.inputType;if(!(r===s))throw new K("You must provide either both `onHandoff` and `inputType` or neither.");async function i(d,c){var p;if(t){if(!c)throw _t({message:`Handoff function expected non empty input but got: ${c}`,data:{details:"input is empty"}}),new de("Handoff function expected non empty input");try{const f=await t(c);e.onHandoff&&await e.onHandoff(d,f)}catch(f){throw _t({message:"Invalid JSON provided",data:{}}),C.dontLogToolData||C.error(`Invalid JSON when parsing: ${c}. Error: ${f}`),new de("Invalid JSON provided")}}else await((p=e.onHandoff)==null?void 0:p.call(e,d));return n}const o=new Fs(n,i);if(e.inputType){const d=Kn(e.inputType,o.toolName);o.inputJsonSchema=d.schema,o.strictJsonSchema=!0,t=d.parser}return e.toolNameOverride&&(o.toolName=e.toolNameOverride),e.toolDescriptionOverride&&(o.toolDescription=e.toolDescriptionOverride),e.inputFilter&&(o.inputFilter=e.inputFilter),o}function Zn(n){return n instanceof Fs?n:Us(n)}function zo(){throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.")}const te=g({providerData:ee(l(),F()).optional()}),et=te.extend({id:l().optional()}),Wo=te.extend({type:m("refusal"),refusal:l()}),Ho=te.extend({type:m("output_text"),text:l()}),Js=te.extend({type:m("input_text"),text:l()}),Yo=te.extend({type:m("reasoning_text"),text:l()}),Xo=te.extend({type:m("input_image"),image:l().or(g({id:l()})).describe("Could be a URL, base64 or an object with a file ID.")}),Qo=te.extend({type:m("input_file"),file:l().describe("Either base64 encoded file data or a publicly accessible file URL").or(g({id:l().describe("OpenAI file ID")})).or(g({url:l().describe("Publicly accessible PDF file URL")})).describe("Contents of the file or an object with a file ID.")}),Bs=te.extend({type:m("audio"),audio:l().or(g({id:l()})).describe("Base64 encoded audio data or file id"),format:l().nullable().optional(),transcript:l().nullable().optional()}),Ko=te.extend({type:m("image"),image:l().describe("Base64 encoded image data")}),eu=te.extend({type:m("text"),text:l()}),tu=te.extend({type:m("image"),data:l().describe("Base64 encoded image data"),mediaType:l().describe("IANA media type of the image")}),nu=te.extend({type:m("computer_screenshot"),data:l().describe("Base64 encoded image data or URL")}),ru=le("type",[g({type:m("screenshot")}),g({type:m("click"),x:A(),y:A(),button:ue(["left","right","wheel","back","forward"])}),g({type:m("double_click"),x:A(),y:A()}),g({type:m("scroll"),x:A(),y:A(),scroll_x:A(),scroll_y:A()}),g({type:m("type"),text:l()}),g({type:m("wait")}),g({type:m("move"),x:A(),y:A()}),g({type:m("keypress"),keys:B(l())}),g({type:m("drag"),path:B(g({x:A(),y:A()}))})]),su=le("type",[Ho,Wo,Bs,Ko]),wr=et.extend({type:m("message").optional()}),$n=wr.extend({role:m("assistant"),status:ue(["in_progress","completed","incomplete"]),content:B(su)}),au=le("type",[Js,Xo,Qo,Bs]),qs=wr.extend({role:m("user"),content:B(au).or(l())}),Gs=wr.extend({role:m("system"),content:l()});le("role",[Gs,$n,qs]);const Gt=et.extend({type:m("hosted_tool_call"),name:l().describe("The name of the hosted tool"),arguments:l().describe("The arguments of the hosted tool call").optional(),status:l().optional(),output:l().optional()}),Vt=et.extend({type:m("function_call"),callId:l().describe("The ID of the tool call"),name:l().describe("The name of the function"),status:ue(["in_progress","completed","incomplete"]).optional(),arguments:l()}),br=et.extend({type:m("function_call_result"),name:l().describe("The name of the tool"),callId:l().describe("The ID of the tool call"),status:ue(["in_progress","completed","incomplete"]),output:le("type",[eu,tu])}),xr=et.extend({type:m("computer_call"),callId:l().describe("The ID of the computer call"),status:ue(["in_progress","completed","incomplete"]),action:ru}),iu=et.extend({type:m("computer_call_result"),callId:l().describe("The ID of the computer call"),output:nu}),ou=le("type",[xr,Vt,Gt]),Sr=te.extend({id:l().optional(),type:m("reasoning"),content:B(Js),rawContent:B(Yo).optional()}),Vs=et.extend({type:m("unknown")}),Tr=le("type",[$n,Gt,Vt,xr,Sr,Vs]),uu=Is([qs,$n,Gs,Gt,Vt,xr,br,iu,Sr,Vs]),cu=g({requests:A().optional(),inputTokens:A(),outputTokens:A(),totalTokens:A(),inputTokensDetails:ee(l(),A()).optional(),outputTokensDetails:ee(l(),A()).optional()}),zs=te.extend({type:m("output_text_delta"),delta:l()}),du=te.extend({type:m("response_started")}),Ws=te.extend({type:m("response_done"),response:te.extend({id:l(),usage:cu,output:B(Tr)})}),lu=te.extend({type:m("model"),event:F().describe("The event from the model")});le("type",[zs,Ws,du,lu]);class Ln{constructor(e){_(this,"requests");_(this,"inputTokens");_(this,"outputTokens");_(this,"totalTokens");_(this,"inputTokensDetails",[]);_(this,"outputTokensDetails",[]);if(typeof e>"u")this.requests=0,this.inputTokens=0,this.outputTokens=0,this.totalTokens=0,this.inputTokensDetails=[],this.outputTokensDetails=[];else{this.requests=(e==null?void 0:e.requests)??1,this.inputTokens=(e==null?void 0:e.inputTokens)??(e==null?void 0:e.input_tokens)??0,this.outputTokens=(e==null?void 0:e.outputTokens)??(e==null?void 0:e.output_tokens)??0,this.totalTokens=(e==null?void 0:e.totalTokens)??(e==null?void 0:e.total_tokens)??0;const t=(e==null?void 0:e.inputTokensDetails)??(e==null?void 0:e.input_tokens_details);this.inputTokensDetails=t?[t]:[];const r=(e==null?void 0:e.outputTokensDetails)??(e==null?void 0:e.output_tokens_details);this.outputTokensDetails=r?[r]:[]}}add(e){this.requests+=e.requests,this.inputTokens+=e.inputTokens,this.outputTokens+=e.outputTokens,this.totalTokens+=e.totalTokens,e.inputTokensDetails&&this.inputTokensDetails.push(...e.inputTokensDetails),e.outputTokensDetails&&this.outputTokensDetails.push(...e.outputTokensDetails)}}class yt{constructor(e={}){_(this,"context");_(this,"usage");T(this,fe);this.context=e,this.usage=new Ln,y(this,fe,new Map)}_rebuildApprovals(e){y(this,fe,new Map(Object.entries(e)))}isToolApproved({toolName:e,callId:t}){const r=u(this,fe).get(e);if((r==null?void 0:r.approved)===!0&&r.rejected===!0)return C.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"),!0;if((r==null?void 0:r.approved)===!0)return!0;if((r==null?void 0:r.rejected)===!0)return!1;const s=Array.isArray(r==null?void 0:r.approved)?r.approved.includes(t):!1,a=Array.isArray(r==null?void 0:r.rejected)?r.rejected.includes(t):!1;if(s&&a)return C.warn(`Tool call ${t} is both approved and rejected at the same time. Approval takes precedence`),!0;if(s)return!0;if(a)return!1}approveTool(e,{alwaysApprove:t=!1}={}){const r=e.rawItem.name;if(t){u(this,fe).set(r,{approved:!0,rejected:[]});return}const s=u(this,fe).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.approved)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.approved.push(a)}u(this,fe).set(r,s)}rejectTool(e,{alwaysReject:t=!1}={}){const r=e.rawItem.name;if(t){u(this,fe).set(r,{approved:!1,rejected:!0});return}const s=u(this,fe).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.rejected)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.rejected.push(a)}u(this,fe).set(r,s)}toJSON(){return{context:this.context,usage:this.usage,approvals:Object.fromEntries(u(this,fe).entries())}}}fe=new WeakMap;class Hs{constructor(e){_(this,"state");this.state=e}get history(){return qn(this.input,this.newItems)}get output(){return qn([],this.newItems)}get input(){return this.state._originalInput}get newItems(){return this.state._generatedItems}get rawResponses(){return this.state._modelResponses}get lastResponseId(){const e=this.rawResponses;return e&&e.length>0?e[e.length-1].responseId:void 0}get lastAgent(){return this.state._currentAgent}get inputGuardrailResults(){return this.state._inputGuardrailResults}get outputGuardrailResults(){return this.state._outputGuardrailResults}get interruptions(){var e;return((e=this.state._currentStep)==null?void 0:e.type)==="next_step_interruption"?this.state._currentStep.data.interruptions:[]}get finalOutput(){var e;if(((e=this.state._currentStep)==null?void 0:e.type)==="next_step_final_output")return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);C.warn("Accessed finalOutput before agent run is completed.")}}class kr extends Hs{constructor(e){super(e)}}class pu extends Hs{constructor(t={}){super(t.state);_(this,"currentTurn",0);_(this,"maxTurns");T(this,rn,null);T(this,kt);T(this,xe);T(this,Ve);T(this,It);T(this,sn);T(this,an);T(this,on,!1);y(this,kt,t.signal),u(this,kt)&&u(this,kt).addEventListener("abort",async()=>{await u(this,Ve).cancel()}),y(this,Ve,new wo({start:r=>{y(this,xe,r)},cancel:()=>{y(this,on,!0)}})),y(this,It,new Promise((r,s)=>{y(this,sn,r),y(this,an,s)}))}get currentAgent(){return this.lastAgent}_addItem(t){var r;this.cancelled||(r=u(this,xe))==null||r.enqueue(t)}_done(){var t;!this.cancelled&&u(this,xe)&&(u(this,xe).close(),y(this,xe,void 0),(t=u(this,sn))==null||t.call(this))}_raiseError(t){var r;!this.cancelled&&u(this,xe)&&(u(this,xe).error(t),y(this,xe,void 0)),y(this,rn,t),(r=u(this,an))==null||r.call(this,t),u(this,It).catch(s=>{C.debug(`Resulted in an error: ${s}`)})}get cancelled(){return u(this,on)}toStream(){return u(this,Ve)}get completed(){return u(this,It)}get error(){return u(this,rn)}toTextStream(t={}){const r=u(this,Ve).pipeThrough(new bo({transform(s,a){if(s.type==="raw_model_stream_event"&&s.data.type==="output_text_delta"){const i=zs.parse(s.data);a.enqueue(i.delta)}}}));return t.compatibleWithNodeStreams?vo.fromWeb(r):r}[Symbol.asyncIterator](){return u(this,Ve)[Symbol.asyncIterator]()}}rn=new WeakMap,kt=new WeakMap,xe=new WeakMap,Ve=new WeakMap,It=new WeakMap,sn=new WeakMap,an=new WeakMap,on=new WeakMap;function Ys(n){return n.type==="function"?{type:"function",name:n.name,description:n.description,parameters:n.parameters,strict:n.strict}:n.type==="computer"?{type:"computer",name:n.name,environment:n.computer.environment,dimensions:n.computer.dimensions}:{type:"hosted_tool",name:n.name,providerData:n.providerData}}function Xs(n){return{toolName:n.toolName,toolDescription:n.toolDescription,inputJsonSchema:n.inputJsonSchema,strictJsonSchema:n.strictJsonSchema}}class tt{constructor(){_(this,"type","base_item");_(this,"rawItem")}toJSON(){return{type:this.type,rawItem:this.rawItem}}}class Fn extends tt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","message_output_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}get content(){let t="";for(const r of this.rawItem.content)r.type==="output_text"&&(t+=r.text);return t}}class nt extends tt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class vt extends tt{constructor(t,r,s){super();_(this,"rawItem");_(this,"agent");_(this,"output");_(this,"type","tool_call_output_item");this.rawItem=t,this.agent=r,this.output=s}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON(),output:He(this.output)}}}class Ir extends tt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","reasoning_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Ar extends tt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","handoff_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Cr extends tt{constructor(t,r,s){super();_(this,"rawItem");_(this,"sourceAgent");_(this,"targetAgent");_(this,"type","handoff_output_item");this.rawItem=t,this.sourceAgent=r,this.targetAgent=s}toJSON(){return{...super.toJSON(),sourceAgent:this.sourceAgent.toJSON(),targetAgent:this.targetAgent.toJSON()}}}class Ae extends tt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_approval_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}function Qs(n){if(n.type!=="message"||n.role!=="assistant")return;const e=n.content[n.content.length-1];if(e.type==="output_text")return e.text}function fu(n){return n.output.length===0?"":Qs(n.output[n.output.length-1])||""}class hu{constructor(e){_(this,"data");_(this,"type","raw_model_stream_event");this.data=e}}class mu{constructor(e,t){_(this,"name");_(this,"item");_(this,"type","run_item_stream_event");this.name=e,this.item=t}}class gu{constructor(e){_(this,"agent");_(this,"type","agent_updated_stream_event");this.agent=e}}function Ks(n,e,t,r){var b;const s=[],a=[],i=[],o=[],d=[],c=[],p=new Map(r.map(v=>[v.toolName,v])),f=new Map(t.filter(v=>v.type==="function").map(v=>[v.name,v])),h=t.find(v=>v.type==="computer"),x=new Map(t.filter(v=>{var E;return v.type==="hosted_tool"&&((E=v.providerData)==null?void 0:E.type)==="mcp"}).map(v=>v).map(v=>[v.providerData.server_label,v]));for(const v of n.output){if(v.type==="message")v.role==="assistant"&&s.push(new Fn(v,e));else if(v.type==="hosted_tool_call"){s.push(new nt(v,e));const R=v.name;if(c.push(R),((b=v.providerData)==null?void 0:b.type)==="mcp_approval_request"||v.name==="mcp_approval_request"){const Y=v.providerData,re=Y.server_label,me=x.get(re);if(typeof me>"u"){const _n=`MCP server (${re}) not found in Agent (${e.name})`;throw _t({message:_n,data:{mcp_server_label:re}}),new de(_n)}const ge=new Ae({type:"hosted_tool_call",name:Y.name,id:Y.id,status:"in_progress",providerData:Y},e);d.push({requestItem:ge,mcpTool:me}),me.providerData.on_approval||s.push(ge)}}else if(v.type==="reasoning")s.push(new Ir(v,e));else if(v.type==="computer_call"){if(s.push(new nt(v,e)),c.push("computer_use"),!h)throw _t({message:"Model produced computer action without a computer tool.",data:{agent_name:e.name}}),new de("Model produced computer action without a computer tool.");o.push({toolCall:v,computer:h})}if(v.type!=="function_call")continue;c.push(v.name);const E=p.get(v.name);if(E)s.push(new Ar(v,e)),a.push({toolCall:v,handoff:E});else{const R=f.get(v.name);if(!R)throw _t({message:`Tool ${v.name} not found in agent ${e.name}.`,data:{tool_name:v.name,agent_name:e.name}}),new de(`Tool ${v.name} not found in agent ${e.name}.`);s.push(new nt(v,e)),i.push({toolCall:v,tool:R})}}return{newItems:s,handoffs:a,functions:i,computerActions:o,mcpApprovalRequests:d,toolsUsed:c,hasToolsOrApprovalsToRun(){return a.length>0||i.length>0||d.length>0||o.length>0}}}const _u=le("type",[g({type:m("next_step_handoff"),newAgent:F()}),g({type:m("next_step_final_output"),output:l()}),g({type:m("next_step_run_again")}),g({type:m("next_step_interruption"),data:ee(l(),F())})]);class we{constructor(e,t,r,s,a){_(this,"originalInput");_(this,"modelResponse");_(this,"preStepItems");_(this,"newStepItems");_(this,"nextStep");this.originalInput=e,this.modelResponse=t,this.preStepItems=r,this.newStepItems=s,this.nextStep=a}get generatedItems(){return this.preStepItems.concat(this.newStepItems)}}function ea(n,e,t){return n.resetToolChoice&&e.hasUsedTools(n)?{...t,toolChoice:void 0}:t}async function ta(n,e,t,r,s,a,i){const o=t.filter(b=>b instanceof Ae&&"callId"in b.rawItem&&b.rawItem.type==="function_call").map(b=>b.rawItem.callId),d=s.functions.filter(b=>o.includes(b.toolCall.callId)),c=await ra(n,d,a,i),p=c.map(b=>b.runItem),f=s.mcpApprovalRequests.filter(b=>{var v;return b.requestItem.type==="tool_approval_item"&&b.requestItem.rawItem.type==="hosted_tool_call"&&((v=b.requestItem.rawItem.providerData)==null?void 0:v.type)==="mcp_approval_request"});for(const b of f){const v=b.requestItem.rawItem.id,E=i._context.isToolApproved({toolName:b.requestItem.rawItem.name,callId:v});if(typeof E<"u"){const R={approve:E,approval_request_id:v,reason:void 0};p.push(new nt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:R},n))}}const h=await sa(n,c,i),x=t.filter(b=>!(b instanceof Ae));return h.isFinalOutput?(a.emit("agent_end",i._context,n,h.finalOutput),n.emit("agent_end",i._context,h.finalOutput),new we(e,r,x,p,{type:"next_step_final_output",output:h.finalOutput})):h.isInterrupted?new we(e,r,x,p,{type:"next_step_interruption",data:{interruptions:h.interruptions}}):new we(e,r,x,p,{type:"next_step_run_again"})}async function na(n,e,t,r,s,a,i){const o=t;let d=s.newItems;const[c,p]=await Promise.all([ra(n,s.functions,a,i),vu(n,s.computerActions,a,i._context)]);if(d=d.concat(c.map(b=>b.runItem)),d=d.concat(p),s.mcpApprovalRequests.length>0)for(const b of s.mcpApprovalRequests){const v=b.mcpTool.providerData,E=b.requestItem.rawItem.providerData;if(v.on_approval){const R=await v.on_approval(i._context,b.requestItem),Y={approve:R.approve,approval_request_id:E.id,reason:R.reason};d.push(new nt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:Y},n))}else{d.push(b.requestItem);const R={type:"hosted_mcp_tool_approval",tool:b.mcpTool,runItem:new Ae({type:"hosted_tool_call",name:E.name,id:E.id,arguments:E.arguments,status:"in_progress",providerData:E},n)};c.push(R)}}if(s.handoffs.length>0)return await wu(n,e,o,d,r,s.handoffs,a,i._context);const f=await sa(n,c,i);if(f.isFinalOutput)return a.emit("agent_end",i._context,n,f.finalOutput),n.emit("agent_end",i._context,f.finalOutput),new we(e,r,o,d,{type:"next_step_final_output",output:f.finalOutput});if(f.isInterrupted)return new we(e,r,o,d,{type:"next_step_interruption",data:{interruptions:f.interruptions}});const h=d.filter(b=>b instanceof Fn),x=h.length>0?Qs(h[h.length-1].rawItem):void 0;if(!x)return new we(e,r,o,d,{type:"next_step_run_again"});if(n.outputType==="text"&&!s.hasToolsOrApprovalsToRun())return new we(e,r,o,d,{type:"next_step_final_output",output:x});if(n.outputType!=="text"&&x){const{parser:b}=Kn(n.outputType,"final_output"),[v]=await Yn(()=>b(x));if(v)throw _t({message:"Invalid output type",data:{error:String(v)}}),new de("Invalid output type");return new we(e,r,o,d,{type:"next_step_final_output",output:x})}return new we(e,r,o,d,{type:"next_step_run_again"})}function Un(n,e){return{type:"function_call_result",name:n.name,callId:n.callId,status:"completed",output:{type:"text",text:He(e)}}}async function ra(n,e,t,r){async function s(a){let i=a.toolCall.arguments;if(a.tool.parameters&&(We(a.tool.parameters)?i=a.tool.parameters.parse(i):i=JSON.parse(i)),await a.tool.needsApproval(r._context,i,a.toolCall.callId)){const d=r._context.isToolApproved({toolName:a.tool.name,callId:a.toolCall.callId});if(d===!1)return js(async c=>{const p="Tool execution was not approved.";return c.setError({message:p,data:{tool_name:a.tool.name,error:`Tool execution for ${a.toolCall.callId} was manually rejected by user.`}}),c.spanData.output=p,{type:"function_output",tool:a.tool,output:p,runItem:new vt(Un(a.toolCall,p),n,p)}},{data:{name:a.tool.name}});if(d!==!0)return{type:"function_approval",tool:a.tool,runItem:new Ae(a.toolCall,n)}}return js(async d=>{t.config.traceIncludeSensitiveData&&(d.spanData.input=a.toolCall.arguments);try{t.emit("agent_tool_start",r._context,n,a.tool,{toolCall:a.toolCall}),n.emit("agent_tool_start",r._context,a.tool,{toolCall:a.toolCall});const c=await a.tool.invoke(r._context,a.toolCall.arguments),p=He(c);return t.emit("agent_tool_end",r._context,n,a.tool,p,{toolCall:a.toolCall}),n.emit("agent_tool_end",r._context,a.tool,p,{toolCall:a.toolCall}),t.config.traceIncludeSensitiveData&&(d.spanData.output=p),{type:"function_output",tool:a.tool,output:c,runItem:new vt(Un(a.toolCall,c),n,c)}}catch(c){throw d.setError({message:"Error running tool",data:{tool_name:a.tool.name,error:String(c)}}),c}},{data:{name:a.tool.name}})}try{return await Promise.all(e.map(s))}catch(a){throw new Oi(`Failed to run function tools: ${a}`,a,r)}}async function yu(n,e){const t=e.action;let r;switch(t.type){case"click":await n.click(t.x,t.y,t.button);break;case"double_click":await n.doubleClick(t.x,t.y);break;case"drag":await n.drag(t.path.map(s=>[s.x,s.y]));break;case"keypress":await n.keypress(t.keys);break;case"move":await n.move(t.x,t.y);break;case"screenshot":r=await n.screenshot();break;case"scroll":await n.scroll(t.x,t.y,t.scroll_x,t.scroll_y);break;case"type":await n.type(t.text);break;case"wait":await n.wait();break}if(typeof r<"u"||typeof n.screenshot=="function"&&(r=await n.screenshot(),typeof r<"u"))return r;throw new Error("Computer does not implement screenshot()")}async function vu(n,e,t,r,s=void 0){const a=s??C,i=[];for(const o of e){const d=o.computer.computer,c=o.toolCall;t.emit("agent_tool_start",r,n,o.computer,{toolCall:c}),typeof n.emit=="function"&&n.emit("agent_tool_start",r,o.computer,{toolCall:c});let p;try{p=await yu(d,c)}catch(x){a.error("Failed to execute computer action:",x),p=""}t.emit("agent_tool_end",r,n,o.computer,p,{toolCall:c}),typeof n.emit=="function"&&n.emit("agent_tool_end",r,o.computer,p,{toolCall:c});const f=p?`data:image/png;base64,${p}`:"",h={type:"computer_call_result",callId:c.callId,output:{type:"computer_screenshot",data:f}};i.push(new vt(h,n,f))}return i}async function wu(n,e,t,r,s,a,i,o){if(r=[...r],a.length===0)return C.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."),new we(e,s,t,r,{type:"next_step_run_again"});if(a.length>1){const c="Multiple handoffs detected, ignoring this one.";for(let p=1;p<a.length;p++)r.push(new vt(Un(a[p].toolCall,c),n,c))}const d=a[0];return $o(async c=>{const p=d.handoff,f=await p.onInvokeHandoff(o,d.toolCall.arguments);if(c.spanData.to_agent=f.name,a.length>1){const x=a.map(b=>b.handoff.agentName);c.setError({message:"Multiple handoffs requested",data:{requested_agents:x}})}r.push(new Cr(Un(d.toolCall,Ls(f)),n,f)),i.emit("agent_handoff",o,n,f),n.emit("agent_handoff",o,f);const h=p.inputFilter??i.config.handoffInputFilter;if(h){C.debug("Filtering inputs for handoff"),typeof h!="function"&&c.setError({message:"Invalid input filter",data:{details:"not callable"}});const x={inputHistory:Array.isArray(e)?[...e]:e,preHandoffItems:[...t],newItems:[...r],runContext:o},b=h(x);e=b.inputHistory,t=b.preHandoffItems,r=b.newItems}return new we(e,s,t,r,{type:"next_step_handoff",newAgent:f})},{data:{from_agent:n.name}})}const Jn={isFinalOutput:!1,isInterrupted:void 0};async function sa(n,e,t){if(e.length===0)return Jn;const r=e.filter(i=>i.runItem instanceof Ae).map(i=>i.runItem);if(r.length>0)return{isFinalOutput:!1,isInterrupted:!0,interruptions:r};if(n.toolUseBehavior==="run_llm_again")return Jn;const s=e[0];if(n.toolUseBehavior==="stop_on_first_tool")return(s==null?void 0:s.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:He(s.output)}:Jn;const a=n.toolUseBehavior;if(typeof a=="object"){const i=e.find(o=>a.stopAtToolNames.includes(o.tool.name));return(i==null?void 0:i.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:He(i.output)}:Jn}if(typeof a=="function")return a(t._context,e);throw new K(`Invalid toolUseBehavior: ${a}`,t)}function aa(n,e){for(const t of e.newStepItems){let r;if(t instanceof Fn)r="message_output_created";else if(t instanceof Ar)r="handoff_requested";else if(t instanceof Cr)r="handoff_occurred";else if(t instanceof nt)r="tool_called";else if(t instanceof vt)r="tool_output";else if(t instanceof Ir)r="reasoning_item_created";else if(t instanceof Ae)r="tool_approval_requested";else{C.warn("Unknown item type: ",t);continue}n._addItem(new mu(r,t))}}class ia{constructor(){T(this,At,new Map)}addToolUse(e,t){u(this,At).set(e,t)}hasUsedTools(e){return u(this,At).has(e)}toJSON(){return Object.fromEntries(Array.from(u(this,At).entries()).map(([e,t])=>[e.name,t]))}}At=new WeakMap;const Bn="1.0",bu=m(Bn),Ce=g({name:l()}),oa=g({object:m("trace.span"),id:l(),trace_id:l(),parent_id:l().nullable(),started_at:l().nullable(),ended_at:l().nullable(),error:g({message:l(),data:ee(l(),F()).optional()}).nullable(),span_data:ee(l(),F())}).extend({previous_span:ho(()=>oa).optional()}),ua=g({requests:A(),inputTokens:A(),outputTokens:A(),totalTokens:A()}),ca=g({usage:ua,output:B(Tr),responseId:l().optional(),providerData:ee(l(),F()).optional()}),da=le("type",[g({type:m("message_output_item"),rawItem:$n,agent:Ce}),g({type:m("tool_call_item"),rawItem:ou.or(Gt),agent:Ce}),g({type:m("tool_call_output_item"),rawItem:br,agent:Ce,output:l()}),g({type:m("reasoning_item"),rawItem:Sr,agent:Ce}),g({type:m("handoff_call_item"),rawItem:Vt,agent:Ce}),g({type:m("handoff_output_item"),rawItem:br,sourceAgent:Ce,targetAgent:Ce}),g({type:m("tool_approval_item"),rawItem:Vt.or(Gt),agent:Ce})]),xu=g({object:m("trace"),id:l(),workflow_name:l(),group_id:l().nullable(),metadata:ee(l(),F())}),Su=g({newItems:B(da),toolsUsed:B(l()),handoffs:B(g({toolCall:F(),handoff:F()})),functions:B(g({toolCall:F(),tool:F()})),computerActions:B(g({toolCall:F(),computer:F()})),mcpApprovalRequests:B(g({requestItem:g({rawItem:g({type:m("hosted_tool_call"),name:l(),arguments:l().optional(),status:l().optional(),output:l().optional(),providerData:ee(l(),F()).nullable().optional()})}),mcpTool:g({type:m("hosted_tool"),name:m("hosted_mcp"),providerData:ee(l(),F())})})).optional()}),la=g({tripwireTriggered:Lt(),outputInfo:F()}),Tu=g({guardrail:g({type:m("input"),name:l()}),output:la}),ku=g({guardrail:g({type:m("output"),name:l()}),agentOutput:F(),agent:Ce,output:la}),pa=g({$schemaVersion:bu,currentTurn:A(),currentAgent:Ce,originalInput:l().or(B(uu)),modelResponses:B(ca),context:g({usage:ua,approvals:ee(l(),g({approved:B(l()).or(Lt()),rejected:B(l()).or(Lt())})),context:ee(l(),F())}),toolUseTracker:ee(l(),B(l())),maxTurns:A(),currentAgentSpan:oa.nullable().optional(),noActiveAgentRun:Lt(),inputGuardrailResults:B(Tu),outputGuardrailResults:B(ku),currentStep:_u.optional(),lastModelResponse:ca.optional(),generatedItems:B(da),lastProcessedResponse:Su.optional(),trace:xu.nullable()});class rt{constructor(e,t,r,s){_(this,"_currentTurn",0);_(this,"_currentAgent");_(this,"_originalInput");_(this,"_modelResponses");_(this,"_currentAgentSpan");_(this,"_context");_(this,"_toolUseTracker");_(this,"_generatedItems");_(this,"_maxTurns");_(this,"_noActiveAgentRun",!0);_(this,"_lastTurnResponse");_(this,"_inputGuardrailResults");_(this,"_outputGuardrailResults");_(this,"_currentStep");_(this,"_lastProcessedResponse");_(this,"_trace",null);this._context=e,this._originalInput=structuredClone(t),this._modelResponses=[],this._currentAgentSpan=void 0,this._currentAgent=r,this._toolUseTracker=new ia,this._generatedItems=[],this._maxTurns=s,this._inputGuardrailResults=[],this._outputGuardrailResults=[],this._trace=Ft()}getInterruptions(){var e;return((e=this._currentStep)==null?void 0:e.type)!=="next_step_interruption"?[]:this._currentStep.data.interruptions}approve(e,t={alwaysApprove:!1}){this._context.approveTool(e,t)}reject(e,t={alwaysReject:!1}){this._context.rejectTool(e,t)}toJSON(){var r;const e={$schemaVersion:Bn,currentTurn:this._currentTurn,currentAgent:{name:this._currentAgent.name},originalInput:this._originalInput,modelResponses:this._modelResponses.map(s=>({usage:{requests:s.usage.requests,inputTokens:s.usage.inputTokens,outputTokens:s.usage.outputTokens,totalTokens:s.usage.totalTokens},output:s.output,responseId:s.responseId,providerData:s.providerData})),context:this._context.toJSON(),toolUseTracker:this._toolUseTracker.toJSON(),maxTurns:this._maxTurns,currentAgentSpan:(r=this._currentAgentSpan)==null?void 0:r.toJSON(),noActiveAgentRun:this._noActiveAgentRun,inputGuardrailResults:this._inputGuardrailResults,outputGuardrailResults:this._outputGuardrailResults.map(s=>({...s,agent:s.agent.toJSON()})),currentStep:this._currentStep,lastModelResponse:this._lastTurnResponse,generatedItems:this._generatedItems.map(s=>s.toJSON()),lastProcessedResponse:this._lastProcessedResponse,trace:this._trace?this._trace.toJSON():null},t=pa.safeParse(e);if(!t.success)throw new Ei(`Failed to serialize run state. ${t.error.message}`);return t.data}toString(){return JSON.stringify(this.toJSON())}static async fromString(e,t){var f,h,x,b,v;const[r,s]=await Yn(()=>JSON.parse(t));if(r)throw new K(`Failed to parse run state. ${r instanceof Error?r.message:String(r)}`);const a=s.$schemaVersion;if(!a)throw new K("Run state is missing schema version");if(a!==Bn)throw new K(`Run state schema version ${a} is not supported. Please use version ${Bn}`);const i=pa.parse(JSON.parse(t)),o=Iu(e),d=new yt(i.context.context);d._rebuildApprovals(i.context.approvals);const c=o.get(i.currentAgent.name);if(!c)throw new K(`Agent ${i.currentAgent.name} not found`);const p=new rt(d,"",c,i.maxTurns);p._currentTurn=i.currentTurn,p._toolUseTracker=new ia;for(const[E,R]of Object.entries(i.toolUseTracker))p._toolUseTracker.addToolUse(o.get(E),R);if(i.currentAgentSpan){i.trace||C.warn("Trace is not set, skipping tracing setup");const E=Ie().createTrace({traceId:(f=i.trace)==null?void 0:f.id,name:(h=i.trace)==null?void 0:h.workflow_name,groupId:((x=i.trace)==null?void 0:x.group_id)??void 0,metadata:(b=i.trace)==null?void 0:b.metadata});p._currentAgentSpan=fa(E,i.currentAgentSpan),p._trace=E}return p._noActiveAgentRun=i.noActiveAgentRun,p._inputGuardrailResults=i.inputGuardrailResults,p._outputGuardrailResults=i.outputGuardrailResults.map(E=>({...E,agent:o.get(E.agent.name)})),p._currentStep=i.currentStep,p._originalInput=i.originalInput,p._modelResponses=i.modelResponses.map(ha),p._lastTurnResponse=i.lastModelResponse?ha(i.lastModelResponse):void 0,p._generatedItems=i.generatedItems.map(E=>ma(E,o)),p._lastProcessedResponse=i.lastProcessedResponse?await Au(o,p._currentAgent,p._context,i.lastProcessedResponse):void 0,((v=i.currentStep)==null?void 0:v.type)==="next_step_handoff"&&(p._currentStep={type:"next_step_handoff",newAgent:o.get(i.currentStep.newAgent.name)}),p}}function Iu(n){const e=new Map,t=[n];for(;t.length>0;){const r=t.shift();if(!e.has(r.name)){e.set(r.name,r);for(const s of r.handoffs)s instanceof st?e.has(s.name)||t.push(s):s.agent&&(e.has(s.agent.name)||t.push(s.agent))}}return e}function fa(n,e){const t=e.span_data,r=e.previous_span?fa(n,e.previous_span):void 0,s=Ie().createSpan({spanId:e.id,traceId:e.trace_id,parentId:e.parent_id??void 0,startedAt:e.started_at??void 0,endedAt:e.ended_at??void 0,data:t},n);return s.previousSpan=r,s}function ha(n){const e=new Ln;return e.requests=n.usage.requests,e.inputTokens=n.usage.inputTokens,e.outputTokens=n.usage.outputTokens,e.totalTokens=n.usage.totalTokens,{usage:e,output:n.output.map(t=>Tr.parse(t)),responseId:n.responseId,providerData:n.providerData}}function ma(n,e){switch(n.type){case"message_output_item":return new Fn(n.rawItem,e.get(n.agent.name));case"tool_call_item":return new nt(n.rawItem,e.get(n.agent.name));case"tool_call_output_item":return new vt(n.rawItem,e.get(n.agent.name),n.output);case"reasoning_item":return new Ir(n.rawItem,e.get(n.agent.name));case"handoff_call_item":return new Ar(n.rawItem,e.get(n.agent.name));case"handoff_output_item":return new Cr(n.rawItem,e.get(n.sourceAgent.name),e.get(n.targetAgent.name));case"tool_approval_item":return new Ae(n.rawItem,e.get(n.agent.name))}}async function Au(n,e,t,r){const s=await e.getAllTools(t),a=new Map(s.filter(c=>c.type==="function").map(c=>[c.name,c])),i=new Map(s.filter(c=>c.type==="computer").map(c=>[c.name,c])),o=new Map(e.handoffs.map(c=>c instanceof st?[c.name,Us(c)]:[c.toolName,c])),d={newItems:r.newItems.map(c=>ma(c,n)),toolsUsed:r.toolsUsed,handoffs:r.handoffs.map(c=>{if(!o.has(c.handoff.toolName))throw new K(`Handoff ${c.handoff.toolName} not found`);return{toolCall:c.toolCall,handoff:o.get(c.handoff.toolName)}}),functions:await Promise.all(r.functions.map(async c=>{if(!a.has(c.tool.name))throw new K(`Tool ${c.tool.name} not found`);return{toolCall:c.toolCall,tool:a.get(c.tool.name)}})),computerActions:r.computerActions.map(c=>{const p=c.computer.name;if(!i.has(p))throw new K(`Computer tool ${p} not found`);return{toolCall:c.toolCall,computer:i.get(p)}}),mcpApprovalRequests:(r.mcpApprovalRequests??[]).map(c=>({requestItem:new Ae(c.requestItem.rawItem,e),mcpTool:c.mcpTool}))};return{...d,hasToolsOrApprovalsToRun(){return d.handoffs.length>0||d.functions.length>0||d.mcpApprovalRequests.length>0||d.computerActions.length>0}}}const ga=10;function _a(n,e){return n?!1:e?!0:"enabled_without_data"}function qn(n,e){const t=e.filter(r=>r.type!=="tool_approval_item").map(r=>r.rawItem);return typeof n=="string"&&(n=[{type:"message",role:"user",content:n}]),[...n,...t]}class Cu extends qo{constructor(t={}){super();T(this,ie);_(this,"config");_(this,"inputGuardrailDefs");_(this,"outputGuardrailDefs");this.config={modelProvider:t.modelProvider??zo(),model:t.model,modelSettings:t.modelSettings,handoffInputFilter:t.handoffInputFilter,inputGuardrails:t.inputGuardrails,outputGuardrails:t.outputGuardrails,tracingDisabled:t.tracingDisabled??!1,traceIncludeSensitiveData:t.traceIncludeSensitiveData??!0,workflowName:t.workflowName??"Agent workflow",traceId:t.traceId,groupId:t.groupId,traceMetadata:t.traceMetadata},this.inputGuardrailDefs=(t.inputGuardrails??[]).map($s),this.outputGuardrailDefs=(t.outputGuardrails??[]).map(vr)}run(t,r,s={stream:!1,context:void 0}){return r instanceof rt&&r._trace?ko(r._trace,async()=>(r._currentAgentSpan&&Mn(r._currentAgentSpan),s!=null&&s.stream?L(this,ie,Fr).call(this,t,r,s):L(this,ie,Zr).call(this,t,r,s))):Io(async()=>s!=null&&s.stream?L(this,ie,Fr).call(this,t,r,s):L(this,ie,Zr).call(this,t,r,s),{traceId:this.config.traceId,name:this.config.workflowName,groupId:this.config.groupId,metadata:this.config.traceMetadata})}}ie=new WeakSet,Zr=async function(t,r,s){return fr(async()=>{var i,o;const a=r instanceof rt?r:new rt(s.context instanceof yt?s.context:new yt(s.context),r,t,s.maxTurns??ga);try{for(;;){let d=ya(a._currentAgent.model,this.config.model);if(typeof d=="string"&&(d=await this.config.modelProvider.getModel(d)),a._currentStep=a._currentStep??{type:"next_step_run_again"},a._currentStep.type==="next_step_interruption"){if(C.debug("Continuing from interruption"),!a._lastTurnResponse||!a._lastProcessedResponse)throw new K("No model response found in previous state",a);const c=await ta(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);if(a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=c.originalInput,a._generatedItems=c.generatedItems,a._currentStep=c.nextStep,c.nextStep.type==="next_step_interruption")return new kr(a);continue}if(a._currentStep.type==="next_step_run_again"){const c=[];if(a._currentAgent.handoffs&&c.push(...a._currentAgent.handoffs.map(Zn)),!a._currentAgentSpan){const R=c.map(Y=>Y.agentName);a._currentAgentSpan=Ms({data:{name:a._currentAgent.name,handoffs:R,output_type:a._currentAgent.outputSchemaName}}),a._currentAgentSpan.start(),Mn(a._currentAgentSpan)}const p=await a._currentAgent.getAllTools(a._context),f=p.map(R=>Ys(R)),h=c.map(R=>Xs(R));if(a._currentAgentSpan&&(a._currentAgentSpan.spanData.tools=p.map(R=>R.name)),a._currentTurn++,a._currentTurn>a._maxTurns)throw(i=a._currentAgentSpan)==null||i.setError({message:"Max turns exceeded",data:{max_turns:a._maxTurns}}),new ns(`Max turns (${a._maxTurns}) exceeded`,a);C.debug(`Running agent ${a._currentAgent.name} (turn ${a._currentTurn})`),a._currentTurn===1&&await L(this,ie,$r).call(this,a);const x=qn(a._originalInput,a._generatedItems);a._noActiveAgentRun&&(a._currentAgent.emit("agent_start",a._context,a._currentAgent),this.emit("agent_start",a._context,a._currentAgent));let b={...this.config.modelSettings,...a._currentAgent.modelSettings};b=ea(a._currentAgent,a._toolUseTracker,b),a._lastTurnResponse=await d.getResponse({systemInstructions:await a._currentAgent.getSystemPrompt(a._context),prompt:await a._currentAgent.getPrompt(a._context),input:x,previousResponseId:s.previousResponseId,modelSettings:b,tools:f,outputType:as(a._currentAgent.outputType),handoffs:h,tracing:_a(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:s.signal}),a._modelResponses.push(a._lastTurnResponse),a._context.usage.add(a._lastTurnResponse.usage),a._noActiveAgentRun=!1;const v=Ks(a._lastTurnResponse,a._currentAgent,p,c);a._lastProcessedResponse=v;const E=await na(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=E.originalInput,a._generatedItems=E.generatedItems,a._currentStep=E.nextStep}if(a._currentStep&&a._currentStep.type==="next_step_final_output")return await L(this,ie,Lr).call(this,a,a._currentStep.output),this.emit("agent_end",a._context,a._currentAgent,a._currentStep.output),a._currentAgent.emit("agent_end",a._context,a._currentStep.output),new kr(a);if(a._currentStep&&a._currentStep.type==="next_step_handoff")a._currentAgent=a._currentStep.newAgent,a._currentAgentSpan&&(a._currentAgentSpan.end(),Jt(),a._currentAgentSpan=void 0),a._noActiveAgentRun=!0,a._currentStep={type:"next_step_run_again"};else{if(a._currentStep&&a._currentStep.type==="next_step_interruption")return new kr(a);C.debug("Running next loop")}}}catch(d){throw a._currentAgentSpan&&a._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(d)}}),d}finally{a._currentAgentSpan&&(((o=a._currentStep)==null?void 0:o.type)!=="next_step_interruption"&&a._currentAgentSpan.end(),Jt())}})},$r=async function(t){const r=this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map($s));if(r.length>0){const s={agent:t._currentAgent,input:t._originalInput,context:t._context};try{const a=await Promise.all(r.map(async i=>Zs(async o=>{const d=await i.run(s);return o.spanData.triggered=d.output.tripwireTriggered,d},{data:{name:i.name}},t._currentAgentSpan)));for(const i of a)if(i.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:i.guardrail.name}}),new ss(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`,i,t)}catch(a){throw a instanceof ss?a:(t._currentTurn--,new rs(`Input guardrail failed to complete: ${a}`,a,t))}}},Lr=async function(t,r){const s=this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(vr));if(s.length>0){const a=t._currentAgent.processFinalOutput(r),i={agent:t._currentAgent,agentOutput:a,context:t._context,details:{modelResponse:t._lastTurnResponse}};try{const o=await Promise.all(s.map(async d=>Zs(async c=>{const p=await d.run(i);return c.spanData.triggered=p.output.tripwireTriggered,p},{data:{name:d.name}},t._currentAgentSpan)));for(const d of o)if(d.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:d.guardrail.name}}),new vn(`Output guardrail triggered: ${JSON.stringify(d.output.outputInfo)}`,d,t)}catch(o){throw o instanceof vn?o:new rs(`Output guardrail failed to complete: ${o}`,o,t)}}},Oa=async function(t,r){var s,a,i;try{for(;;){const o=t.state._currentAgent,d=o.handoffs.map(Zn),c=await o.getAllTools(t.state._context),p=c.map(h=>Ys(h)),f=d.map(h=>Xs(h));if(t.state._currentStep=t.state._currentStep??{type:"next_step_run_again"},t.state._currentStep.type==="next_step_interruption"){if(C.debug("Continuing from interruption"),!t.state._lastTurnResponse||!t.state._lastProcessedResponse)throw new K("No model response found in previous state",t.state);const h=await ta(t.state._currentAgent,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);if(aa(t,h),t.state._toolUseTracker.addToolUse(t.state._currentAgent,t.state._lastProcessedResponse.toolsUsed),t.state._originalInput=h.originalInput,t.state._generatedItems=h.generatedItems,t.state._currentStep=h.nextStep,h.nextStep.type==="next_step_interruption")return;continue}if(t.state._currentStep.type==="next_step_run_again"){if(!t.state._currentAgentSpan){const Y=d.map(re=>re.agentName);t.state._currentAgentSpan=Ms({data:{name:o.name,handoffs:Y,tools:c.map(re=>re.name),output_type:o.outputSchemaName}}),t.state._currentAgentSpan.start(),Mn(t.state._currentAgentSpan)}if(t.state._currentTurn++,t.state._currentTurn>t.state._maxTurns)throw(s=t.state._currentAgentSpan)==null||s.setError({message:"Max turns exceeded",data:{max_turns:t.state._maxTurns}}),new ns(`Max turns (${t.state._maxTurns}) exceeded`,t.state);C.debug(`Running agent ${o.name} (turn ${t.state._currentTurn})`);let h=ya(o.model,this.config.model);typeof h=="string"&&(h=await this.config.modelProvider.getModel(h)),t.state._currentTurn===1&&await L(this,ie,$r).call(this,t.state);let x={...this.config.modelSettings,...o.modelSettings};x=ea(o,t.state._toolUseTracker,x);const b=qn(t.input,t.newItems);t.state._noActiveAgentRun&&(o.emit("agent_start",t.state._context,o),this.emit("agent_start",t.state._context,o));let v;for await(const Y of h.getStreamedResponse({systemInstructions:await o.getSystemPrompt(t.state._context),prompt:await o.getPrompt(t.state._context),input:b,previousResponseId:r.previousResponseId,modelSettings:x,tools:p,handoffs:f,outputType:as(o.outputType),tracing:_a(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:r.signal})){if(Y.type==="response_done"){const re=Ws.parse(Y);v={usage:new Ln(re.response.usage),output:re.response.output,responseId:re.response.id}}if(t.cancelled)return;t._addItem(new hu(Y))}if(t.state._noActiveAgentRun=!1,!v)throw new de("Model did not produce a final response!",t.state);t.state._lastTurnResponse=v,t.state._modelResponses.push(t.state._lastTurnResponse);const E=Ks(t.state._lastTurnResponse,o,c,d);t.state._lastProcessedResponse=E;const R=await na(o,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);aa(t,R),t.state._toolUseTracker.addToolUse(o,E.toolsUsed),t.state._originalInput=R.originalInput,t.state._generatedItems=R.generatedItems,t.state._currentStep=R.nextStep}if(t.state._currentStep.type==="next_step_final_output"){await L(this,ie,Lr).call(this,t.state,t.state._currentStep.output);return}else{if(t.state._currentStep.type==="next_step_interruption")return;t.state._currentStep.type==="next_step_handoff"?(t.state._currentAgent=(a=t.state._currentStep)==null?void 0:a.newAgent,t.state._currentAgentSpan&&(t.state._currentAgentSpan.end(),Jt()),t.state._currentAgentSpan=void 0,t._addItem(new gu(t.state._currentAgent)),t.state._noActiveAgentRun=!0,t.state._currentStep={type:"next_step_run_again"}):C.debug("Running next loop")}}}catch(o){throw t.state._currentAgentSpan&&t.state._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(o)}}),o}finally{t.state._currentAgentSpan&&(((i=t.state._currentStep)==null?void 0:i.type)!=="next_step_interruption"&&t.state._currentAgentSpan.end(),Jt())}},Fr=async function(t,r,s){return s=s??{},fr(async()=>{const a=r instanceof rt?r:new rt(s.context instanceof yt?s.context:new yt(s.context),r,t,s.maxTurns??ga),i=new pu({signal:s.signal,state:a});return i.maxTurns=s.maxTurns??a._maxTurns,L(this,ie,Oa).call(this,i,s).then(()=>{i._done()},o=>{i._raiseError(o)}),i})};function ya(n,e){return typeof n=="string"&&n!==st.DEFAULT_MODEL_PLACEHOLDER||n?n:e??n??st.DEFAULT_MODEL_PLACEHOLDER}const Ct=class Ct extends Bo{constructor(t){super();_(this,"name");_(this,"instructions");_(this,"prompt");_(this,"handoffDescription");_(this,"handoffs");_(this,"model");_(this,"modelSettings");_(this,"tools");_(this,"mcpServers");_(this,"inputGuardrails");_(this,"outputGuardrails");_(this,"outputType","text");_(this,"toolUseBehavior");_(this,"resetToolChoice");if(typeof t.name!="string"||t.name.trim()==="")throw new K("Agent must have a name.");if(this.name=t.name,this.instructions=t.instructions??Ct.DEFAULT_MODEL_PLACEHOLDER,this.prompt=t.prompt,this.handoffDescription=t.handoffDescription??"",this.handoffs=t.handoffs??[],this.model=t.model??"",this.modelSettings=t.modelSettings??{},this.tools=t.tools??[],this.mcpServers=t.mcpServers??[],this.inputGuardrails=t.inputGuardrails??[],this.outputGuardrails=t.outputGuardrails??[],t.outputType&&(this.outputType=t.outputType),this.toolUseBehavior=t.toolUseBehavior??"run_llm_again",this.resetToolChoice=t.resetToolChoice??!0,(t.handoffOutputTypeWarningEnabled===void 0||t.handoffOutputTypeWarningEnabled)&&this.handoffs&&this.outputType){const r=new Set([JSON.stringify(this.outputType)]);for(const s of this.handoffs)"outputType"in s&&s.outputType?r.add(JSON.stringify(s.outputType)):"agent"in s&&s.agent.outputType&&r.add(JSON.stringify(s.agent.outputType));r.size>1&&C.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`)}}static create(t){return new Ct({...t,handoffs:t.handoffs,outputType:t.outputType,handoffOutputTypeWarningEnabled:!1})}get outputSchemaName(){if(this.outputType==="text")return"text";if(We(this.outputType))return"ZodOutput";if(typeof this.outputType=="object")return this.outputType.name;throw new Error(`Unknown output type: ${this.outputType}`)}clone(t){return new Ct({...this,...t})}asTool(t){const{toolName:r,toolDescription:s,customOutputExtractor:a}=t;return xn({name:r??wn(this.name),description:s??"",parameters:{type:"object",properties:{input:{type:"string"}},required:["input"],additionalProperties:!1},strict:!0,execute:async(i,o)=>{if(!Ni(i))throw new de("Agent tool called with invalid input");const c=await new Cu().run(this,i.input,{context:o==null?void 0:o.context});return typeof a=="function"?a(c):fu(c.rawResponses[c.rawResponses.length-1])}})}async getSystemPrompt(t){return typeof this.instructions=="function"?await this.instructions(t,this):this.instructions}async getPrompt(t){return typeof this.prompt=="function"?await this.prompt(t,this):this.prompt}async getMcpTools(t){return this.mcpServers.length>0?go({mcpServers:this.mcpServers,runContext:t,agent:this,convertSchemasToStrict:!1}):[]}async getAllTools(t){return[...await this.getMcpTools(t),...this.tools]}processFinalOutput(t){if(this.outputType==="text")return t;if(typeof this.outputType=="object"){const r=JSON.parse(t);return We(this.outputType)?this.outputType.parse(r):r}throw new Error(`Unknown output type: ${this.outputType}`)}toJSON(){return{name:this.name}}};_(Ct,"DEFAULT_MODEL_PLACEHOLDER","");let st=Ct;Jo(Ns());class Eu extends st{constructor(t){super(t);_(this,"voice");this.voice=t.voice??"ash"}}function Ou(n){return{debounceTextLength:n.debounceTextLength??100}}function Nu({policyHint:n,...e}){const t=vr(e),r=n??t.name;return{...t,policyHint:r,run:async s=>{const a=await t.run(s);return{...a,guardrail:{...a.guardrail,policyHint:r}}}}}function Ru(n){return`
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo??{})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim()}const Pe=ps("openai-agents:realtime");g({itemId:l()});const va=le("role",[g({itemId:l(),previousItemId:l().nullable().optional(),type:m("message"),role:m("system"),content:B(g({type:m("input_text"),text:l()}))}),g({itemId:l(),previousItemId:l().nullable().optional(),type:m("message"),role:m("user"),status:ue(["in_progress","completed"]),content:B(g({type:m("input_text"),text:l()}).or(g({type:m("input_audio"),audio:l().nullable().optional(),transcript:l().nullable()})))}),g({itemId:l(),previousItemId:l().nullable().optional(),type:m("message"),role:m("assistant"),status:ue(["in_progress","completed","incomplete"]),content:B(g({type:m("text"),text:l()}).or(g({type:m("audio"),audio:l().nullable().optional(),transcript:l().nullable().optional()})))})]),wa=g({itemId:l(),previousItemId:l().nullable().optional(),type:m("function_call"),status:ue(["in_progress","completed"]),arguments:l(),name:l(),output:l().nullable()}),ba=g({id:l().optional().nullable(),conversation_id:l().optional().nullable(),max_output_tokens:A().or(m("inf")).optional().nullable(),metadata:ee(l(),F()).optional().nullable(),modalities:B(l()).optional().nullable(),object:m("realtime.response").optional().nullable(),output:B(F()).optional().nullable(),output_audio_format:l().optional().nullable(),status:ue(["completed","incomplete","failed","cancelled","in_progress"]).optional().nullable(),status_details:ee(l(),F()).optional().nullable(),usage:g({input_tokens:A().optional(),input_tokens_details:ee(l(),F()).optional().nullable(),output_tokens:A().optional(),output_tokens_details:ee(l(),F()).optional().nullable()}).optional().nullable(),voice:l().optional().nullable()}),Du=g({id:l().optional(),audio:l().nullable().optional(),text:l().nullable().optional(),transcript:l().nullable().optional(),type:Is([m("input_text"),m("input_audio"),m("item_reference"),m("text"),m("audio")])}),zt=g({id:l().optional(),arguments:l().optional(),call_id:l().optional(),content:B(Du).optional(),name:l().optional(),object:m("realtime.item").optional(),output:l().optional(),role:ue(["user","assistant","system"]).optional(),status:ue(["completed","incomplete","in_progress"]).optional(),type:ue(["message","function_call","function_call_output"]).optional()}),Pu=g({type:m("conversation.created"),event_id:l(),conversation:g({id:l().optional(),object:m("realtime.conversation").optional()})}),Mu=g({type:m("conversation.item.created"),event_id:l(),item:zt,previous_item_id:l().nullable().optional()}),ju=g({type:m("conversation.item.deleted"),event_id:l(),item_id:l()}),Zu=g({type:m("conversation.item.input_audio_transcription.completed"),event_id:l(),item_id:l(),content_index:A(),transcript:l(),logprobs:B(F()).nullable().optional()}),$u=g({type:m("conversation.item.input_audio_transcription.delta"),event_id:l(),item_id:l(),content_index:A().optional(),delta:l().optional(),logprobs:B(F()).nullable().optional()}),Lu=g({type:m("conversation.item.input_audio_transcription.failed"),event_id:l(),item_id:l(),content_index:A(),error:g({code:l().optional(),message:l().optional(),param:l().optional(),type:l().optional()})}),Fu=g({type:m("conversation.item.retrieved"),event_id:l(),item:zt}),Uu=g({type:m("conversation.item.truncated"),event_id:l(),item_id:l(),audio_end_ms:A(),content_index:A()}),Ju=g({type:m("conversation.item.create"),item:zt,event_id:l().optional(),previous_item_id:l().nullable().optional()}),Bu=g({type:m("conversation.item.delete"),item_id:l(),event_id:l().optional()}),qu=g({type:m("conversation.item.retrieve"),item_id:l(),event_id:l().optional()}),Gu=g({type:m("conversation.item.truncate"),item_id:l(),audio_end_ms:A(),content_index:A(),event_id:l().optional()}),Vu=g({type:m("error"),event_id:l().optional(),error:F().optional()}),zu=g({type:m("input_audio_buffer.cleared"),event_id:l()}),Wu=g({type:m("input_audio_buffer.append"),audio:l(),event_id:l().optional()}),Hu=g({type:m("input_audio_buffer.clear"),event_id:l().optional()}),Yu=g({type:m("input_audio_buffer.commit"),event_id:l().optional()}),Xu=g({type:m("input_audio_buffer.committed"),event_id:l(),item_id:l(),previous_item_id:l().nullable().optional()}),Qu=g({type:m("input_audio_buffer.speech_started"),event_id:l(),item_id:l(),audio_start_ms:A()}),Ku=g({type:m("input_audio_buffer.speech_stopped"),event_id:l(),item_id:l(),audio_end_ms:A()}),ec=g({type:m("output_audio_buffer.started"),event_id:l()}).passthrough(),tc=g({type:m("output_audio_buffer.stopped"),event_id:l()}).passthrough(),nc=g({type:m("output_audio_buffer.cleared"),event_id:l()}),rc=g({type:m("rate_limits.updated"),event_id:l(),rate_limits:B(g({limit:A().optional(),name:ue(["requests","tokens"]).optional(),remaining:A().optional(),reset_seconds:A().optional()}))}),sc=g({type:m("response.audio.delta"),event_id:l(),item_id:l(),content_index:A(),delta:l(),output_index:A(),response_id:l()}),ac=g({type:m("response.audio.done"),event_id:l(),item_id:l(),content_index:A(),output_index:A(),response_id:l()}),ic=g({type:m("response.audio_transcript.delta"),event_id:l(),item_id:l(),content_index:A(),delta:l(),output_index:A(),response_id:l()}),oc=g({type:m("response.audio_transcript.done"),event_id:l(),item_id:l(),content_index:A(),transcript:l(),output_index:A(),response_id:l()}),uc=g({type:m("response.content_part.added"),event_id:l(),item_id:l(),content_index:A(),output_index:A(),response_id:l(),part:g({audio:l().optional(),text:l().optional(),transcript:l().optional(),type:ue(["text","audio"]).optional()})}),cc=g({type:m("response.content_part.done"),event_id:l(),item_id:l(),content_index:A(),output_index:A(),response_id:l(),part:g({audio:l().optional(),text:l().optional(),transcript:l().optional(),type:ue(["text","audio"]).optional()})}),dc=g({type:m("response.created"),event_id:l(),response:ba}),xa=g({type:m("response.done"),event_id:l(),response:ba}),lc=g({type:m("response.function_call_arguments.delta"),event_id:l(),item_id:l(),call_id:l(),delta:l(),output_index:A(),response_id:l()}),pc=g({type:m("response.function_call_arguments.done"),event_id:l(),item_id:l(),call_id:l(),arguments:l(),output_index:A(),response_id:l()}),fc=g({type:m("response.output_item.added"),event_id:l(),item:zt,output_index:A(),response_id:l()}),hc=g({type:m("response.output_item.done"),event_id:l(),item:zt,output_index:A(),response_id:l()}),mc=g({type:m("response.text.delta"),event_id:l(),item_id:l(),content_index:A(),delta:l(),output_index:A(),response_id:l()}),gc=g({type:m("response.text.done"),event_id:l(),item_id:l(),content_index:A(),text:l(),output_index:A(),response_id:l()}),_c=g({type:m("session.created"),event_id:l(),session:F()}),yc=g({type:m("session.updated"),event_id:l(),session:F()}),vc=g({type:m("response.cancel"),event_id:l().optional(),response_id:l().optional()}),wc=g({type:m("response.create"),event_id:l().optional(),response:F().optional()}),bc=g({type:m("session.update"),event_id:l().optional(),session:F()}),xc=g({type:m("transcription_session.update"),event_id:l().optional(),session:F()}),Sc=g({type:m("transcription_session.updated"),event_id:l(),session:F()}),Tc=g({type:l(),event_id:l().optional().nullable()}).passthrough(),kc=le("type",[Pu,Mu,ju,Zu,$u,Lu,Fu,Uu,Vu,zu,Xu,Qu,Ku,ec,tc,nc,rc,sc,ac,ic,oc,uc,cc,dc,xa,lc,pc,fc,hc,mc,gc,_c,yc,Sc]);le("type",[Ju,Bu,qu,Gu,Wu,Hu,Yu,vc,wc,bc,xc]);function Er(n){const e=JSON.parse(n.data.toString()),t=kc.safeParse(e);if(!t.success){const r=Tc.safeParse(e);return r.success?{data:r.data,isGeneric:!0}:{data:null,isGeneric:!0}}return{data:t.data,isGeneric:!1}}const Sa="gpt-4o-realtime-preview",be={voice:"ash",modalities:["text","audio"],inputAudioFormat:"pcm16",outputAudioFormat:"pcm16",inputAudioTranscription:{model:"gpt-4o-mini-transcribe"},turnDetection:{type:"semantic_vad"},inputAudioNoiseReduction:null,speed:1},Rr=class Rr extends yr{constructor(t={}){super();T(this,ut);T(this,un);T(this,he,null);T(this,cn,null);_(this,"eventEmitter",new Pn);y(this,ut,t.model??Sa),y(this,un,t.apiKey)}get currentModel(){return u(this,ut)}set currentModel(t){y(this,ut,t)}get _rawSessionConfig(){return u(this,cn)??null}async _getApiKey(t){const r=t.apiKey??u(this,un);return typeof r=="function"?await r():r}_onMessage(t){var a,i,o,d,c,p;const{data:r,isGeneric:s}=Er(t);if(r!==null&&(this.emit("*",r),!s)){if(r.type==="error"?this.emit("error",{type:"error",error:r}):this.emit(r.type,r),r.type==="response.created"){this.emit("turn_started",{type:"response_started",providerData:{...r}});return}if(r.type==="session.updated"&&y(this,cn,r.session),r.type==="response.done"){const f=xa.safeParse(r);if(!f.success){Pe.error("Error parsing response done event",f.error);return}const h=((a=f.data.response.usage)==null?void 0:a.input_tokens)??0,x=((i=f.data.response.usage)==null?void 0:i.output_tokens)??0,b=h+x,v=new Ln({inputTokens:h,inputTokensDetails:((o=f.data.response.usage)==null?void 0:o.input_tokens_details)??{},outputTokens:x,outputTokensDetails:((d=f.data.response.usage)==null?void 0:d.output_tokens_details)??{},totalTokens:b});this.emit("usage_update",v),this.emit("turn_done",{type:"response_done",response:{id:f.data.response.id??"",output:f.data.response.output??[],usage:{inputTokens:h,inputTokensDetails:((c=f.data.response.usage)==null?void 0:c.input_tokens_details)??{},outputTokens:x,outputTokensDetails:((p=f.data.response.usage)==null?void 0:p.output_tokens_details)??{},totalTokens:b}}});return}if(r.type==="response.audio.done"){this.emit("audio_done");return}if(r.type==="conversation.item.deleted"){this.emit("item_deleted",{itemId:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.completed"||r.type==="conversation.item.truncated"){this.sendEvent({type:"conversation.item.retrieve",item_id:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.delta"||r.type==="response.text.delta"||r.type==="response.audio_transcript.delta"||r.type==="response.function_call_arguments.delta"){r.type==="response.audio_transcript.delta"&&this.emit("audio_transcript_delta",{type:"transcript_delta",delta:r.delta,itemId:r.item_id,responseId:r.response_id});return}if((r.type==="conversation.item.created"||r.type==="conversation.item.retrieved")&&r.item.type==="message"){const f=r.type==="conversation.item.created"?r.previous_item_id:null,h=va.parse({itemId:r.item.id,previousItemId:f,type:r.item.type,role:r.item.role,content:r.item.content,status:r.item.status});this.emit("item_update",h);return}if(r.type==="response.output_item.done"||r.type==="response.output_item.added"){const f=r.item;if(f.type==="function_call"&&f.status==="completed"){const h=wa.parse({itemId:f.id,type:f.type,status:"in_progress",arguments:f.arguments,name:f.name,output:null});this.emit("item_update",h),this.emit("function_call",{id:f.id,type:"function_call",callId:f.call_id??"",arguments:f.arguments??"",name:f.name??""});return}if(f.type==="message"){const h=va.parse({itemId:r.item.id,type:r.item.type,role:r.item.role,content:r.item.content,status:"in_progress"});this.emit("item_update",h);return}}}}_onError(t){this.emit("error",{type:"error",error:t})}_onOpen(){this.emit("connected")}_onClose(){this.emit("disconnected")}sendMessage(t,r){this.sendEvent({type:"conversation.item.create",item:typeof t=="string"?{type:"message",role:"user",content:[{type:"input_text",text:t}]}:t,...r}),this.sendEvent({type:"response.create"})}_getMergedSessionConfig(t){var s;return{instructions:t.instructions,model:t.model??u(this,ut)??be.model,voice:t.voice??be.voice,speed:t.speed??be.speed,modalities:t.modalities??be.modalities,input_audio_format:t.inputAudioFormat??be.inputAudioFormat,output_audio_format:t.outputAudioFormat??be.outputAudioFormat,input_audio_transcription:t.inputAudioTranscription??be.inputAudioTranscription,input_audio_noise_reduction:t.inputAudioNoiseReduction??be.inputAudioNoiseReduction,turn_detection:Rr.buildTurnDetectionConfig(t.turnDetection)??be.turnDetection,tool_choice:t.toolChoice??be.toolChoice,tools:(s=t.tools)==null?void 0:s.map(a=>({...a,strict:void 0})),...t.providerData??{}}}static buildTurnDetectionConfig(t){if(typeof t>"u")return;const{type:r,createResponse:s,create_response:a,eagerness:i,interruptResponse:o,interrupt_response:d,prefixPaddingMs:c,prefix_padding_ms:p,silenceDurationMs:f,silence_duration_ms:h,threshold:x,...b}=t,v={type:r,create_response:s||a,eagerness:i,interrupt_response:o||d,prefix_padding_ms:c||p,silence_duration_ms:f||h,threshold:x,...b};return Object.keys(v).forEach(E=>{v[E]===void 0&&delete v[E]}),Object.keys(v).length>0?v:void 0}set _tracingConfig(t){y(this,he,t)}_updateTracingConfig(t){var r,s,a;if(typeof u(this,he)>"u"&&y(this,he,null),t==="auto"){this.sendEvent({type:"session.update",session:{tracing:"auto"}});return}if(typeof u(this,he)!="string"&&typeof t!="string"){Pe.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");return}if(t===null){Pe.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."),this.sendEvent({type:"session.update",session:{tracing:null}});return}if(u(this,he)===null||typeof u(this,he)=="string"){this.sendEvent({type:"session.update",session:{tracing:t}});return}if((t==null?void 0:t.group_id)!==((r=u(this,he))==null?void 0:r.group_id)||(t==null?void 0:t.metadata)!==((s=u(this,he))==null?void 0:s.metadata)||(t==null?void 0:t.workflow_name)!==((a=u(this,he))==null?void 0:a.workflow_name)){Pe.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s",JSON.stringify(u(this,he)),JSON.stringify(t));return}this.sendEvent({type:"session.update",session:{tracing:t}})}updateSessionConfig(t){const r=this._getMergedSessionConfig(t);this.sendEvent({type:"session.update",session:r})}sendFunctionCallOutput(t,r,s=!0){this.sendEvent({type:"conversation.item.create",item:{type:"function_call_output",output:r,call_id:t.callId}});try{const a=wa.parse({itemId:t.id,previousItemId:t.previousItemId,type:"function_call",status:"completed",arguments:t.arguments,name:t.name,output:r});this.emit("item_update",a)}catch(a){Pe.error("Error parsing tool call item",a,t)}s&&this.sendEvent({type:"response.create"})}sendAudio(t,{commit:r=!1}={}){this.sendEvent({type:"input_audio_buffer.append",audio:Pt(t)}),r&&this.sendEvent({type:"input_audio_buffer.commit"})}resetHistory(t,r){const{removals:s,additions:a,updates:i}=Ma(t,r),o=new Set(s.map(c=>c.itemId));for(const c of i)o.add(c.itemId);if(o.size>0)for(const c of o)this.sendEvent({type:"conversation.item.delete",item_id:c});const d=[...a,...i];for(const c of d)if(c.type==="message"){const p={type:"message",role:c.role,content:c.content,id:c.itemId};c.role!=="system"&&c.status&&(p.status=c.status),this.sendEvent({type:"conversation.item.create",item:p})}else c.type==="function_call"&&Pe.warn("Function calls cannot be manually added or updated at the moment. Ignoring.")}};ut=new WeakMap,un=new WeakMap,he=new WeakMap,cn=new WeakMap;let Wt=Rr;class Ta extends Wt{constructor(t={}){if(typeof RTCPeerConnection>"u")throw new Error("WebRTC is not supported in this environment");super(t);_(this,"options");T(this,dn);T(this,z,{status:"disconnected",peerConnection:void 0,dataChannel:void 0});T(this,ln);T(this,ct,!1);T(this,pn,!1);this.options=t,y(this,dn,t.baseUrl??"https://api.openai.com/v1/realtime"),y(this,ln,t.useInsecureApiKey??!1)}get status(){return u(this,z).status}get connectionState(){return u(this,z)}get muted(){return u(this,pn)}async connect(t){if(u(this,z).status==="connected")return;u(this,z).status==="connecting"&&Pe.warn("Realtime connection already in progress. Please await original promise");const r=t.model??this.currentModel;this.currentModel=r;const s=t.url??u(this,dn),a=await this._getApiKey(t),i=typeof a=="string"&&a.startsWith("ek_");if(!u(this,ln)&&!i)throw new K("Using the WebRTC connection in a browser environment requires an insecure API key. Please use a WebSocket connection instead or set the useInsecureApiKey option to true.");return new Promise(async(o,d)=>{try{const c={...t.initialSessionConfig||{},model:this.currentModel},p=new URL(s);let f=new RTCPeerConnection;const h=f.createDataChannel("oai-events");y(this,z,{status:"connecting",peerConnection:f,dataChannel:h}),this.emit("connection_change",u(this,z).status),h.addEventListener("open",()=>{y(this,z,{status:"connected",peerConnection:f,dataChannel:h}),this.updateSessionConfig(c),this.emit("connection_change",u(this,z).status),this._onOpen(),o()}),h.addEventListener("error",me=>{this.close(),this._onError(me),d(me)}),h.addEventListener("message",me=>{this._onMessage(me);const{data:ge,isGeneric:_n}=Er(me);!ge||_n||(ge.type==="response.created"?y(this,ct,!0):ge.type==="response.done"&&y(this,ct,!1),ge.type==="session.created"&&(this._tracingConfig=ge.session.tracing,this._updateTracingConfig(c.tracing??"auto")))});const x=this.options.audioElement??document.createElement("audio");x.autoplay=!0,f.ontrack=me=>{x.srcObject=me.streams[0]};const b=this.options.mediaStream??await navigator.mediaDevices.getUserMedia({audio:!0});f.addTrack(b.getAudioTracks()[0]),this.options.changePeerConnection&&(f=await this.options.changePeerConnection(f),y(this,z,{...u(this,z),peerConnection:f}));const v=await f.createOffer();if(await f.setLocalDescription(v),!v.sdp)throw new Error("Failed to create offer");const E={...this._getMergedSessionConfig(c),model:this.currentModel},R=new FormData;R.append("sdp",v.sdp),R.append("session",JSON.stringify(E));const re={type:"answer",sdp:await(await fetch(p,{method:"POST",body:R,headers:{Authorization:`Bearer ${a}`,"X-OpenAI-Agents-SDK":Za["X-OpenAI-Agents-SDK"]}})).text()};await f.setRemoteDescription(re)}catch(c){this.close(),this._onError(c),d(c)}})}sendEvent(t){if(!u(this,z).dataChannel||u(this,z).dataChannel.readyState!=="open")throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");u(this,z).dataChannel.send(JSON.stringify(t))}mute(t){y(this,pn,t),u(this,z).peerConnection&&u(this,z).peerConnection.getSenders().forEach(s=>{s.track&&(s.track.enabled=!t)})}close(){if(u(this,z).dataChannel&&u(this,z).dataChannel.close(),u(this,z).peerConnection){const t=u(this,z).peerConnection;t.getSenders().forEach(r=>{var s;(s=r.track)==null||s.stop()}),t.close()}u(this,z).status!=="disconnected"&&(y(this,z,{status:"disconnected",peerConnection:void 0,dataChannel:void 0}),this.emit("connection_change",u(this,z).status),this._onClose())}interrupt(){u(this,ct)&&(this.sendEvent({type:"response.cancel"}),y(this,ct,!1)),this.sendEvent({type:"output_audio_buffer.clear"})}}dn=new WeakMap,z=new WeakMap,ln=new WeakMap,ct=new WeakMap,pn=new WeakMap;const Ic=globalThis.WebSocket;class ka extends Wt{constructor(t={}){super(t);T(this,Vn);T(this,dt);T(this,lt);T(this,ne,{status:"disconnected",websocket:void 0});T(this,fn);T(this,Ze);T(this,pt);_(this,"_firstAudioTimestamp");_(this,"_audioLengthMs",0);T(this,ft,!1);y(this,lt,t.url),y(this,fn,t.useInsecureApiKey??!1)}get status(){return u(this,ne).status}get connectionState(){return u(this,ne)}get muted(){return null}get currentItemId(){return u(this,Ze)}_onAudio(t){this.emit("audio",t)}async connect(t){const r=t.model??this.currentModel;this.currentModel=r,y(this,dt,await this._getApiKey(t));const s=t.url??u(this,lt)??`wss://api.openai.com/v1/realtime?model=${this.currentModel}`;y(this,lt,s);const a={...t.initialSessionConfig||{},model:this.currentModel};await new Promise((i,o)=>{try{L(this,Vn,Na).call(this,i,o,a)}catch(d){o(d)}}),await this.updateSessionConfig(a)}sendEvent(t){if(!u(this,ne).websocket)throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");u(this,ne).websocket.send(JSON.stringify(t))}close(){var t;(t=u(this,ne).websocket)==null||t.close(),y(this,Ze,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,pt,void 0)}mute(t){throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.")}sendAudio(t,r={}){u(this,ne).status==="connected"&&super.sendAudio(t,r)}_cancelResponse(){u(this,ft)&&(this.sendEvent({type:"response.cancel"}),y(this,ft,!1))}_interrupt(t,r=!0){if(t<0)return;r&&this._cancelResponse();const s=this._audioLengthMs??Number.POSITIVE_INFINITY,a=Math.max(0,Math.min(Math.floor(t),s));this.emit("audio_interrupted"),this.sendEvent({type:"conversation.item.truncate",item_id:u(this,Ze),content_index:u(this,pt),audio_end_ms:a})}interrupt(t=!0){if(!u(this,Ze)||typeof this._firstAudioTimestamp!="number")return;const r=Date.now()-this._firstAudioTimestamp;r>=0&&this._interrupt(r,t),y(this,Ze,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,pt,void 0)}}dt=new WeakMap,lt=new WeakMap,ne=new WeakMap,fn=new WeakMap,Ze=new WeakMap,pt=new WeakMap,ft=new WeakMap,Vn=new WeakSet,Na=function(t,r,s){if(u(this,ne).websocket){t();return}if(!u(this,dt))throw new K("API key is not set. Please call `connect()` with an API key first.");if(!u(this,dt).startsWith("ek_")&&!u(this,fn))throw new K("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");const a=["realtime","openai-insecure-api-key."+u(this,dt),"openai-beta.realtime-v1",$a],i=new Ic(u(this,lt),a);y(this,ne,{status:"connecting",websocket:i}),this.emit("connection_change",u(this,ne).status),i.addEventListener("open",()=>{y(this,ne,{status:"connected",websocket:i}),this.emit("connection_change",u(this,ne).status),this._onOpen(),t()}),i.addEventListener("error",o=>{this._onError(o),y(this,ne,{status:"disconnected",websocket:void 0}),this.emit("connection_change",u(this,ne).status),r(o)}),i.addEventListener("message",o=>{var p,f,h;this._onMessage(o);const{data:d,isGeneric:c}=Er(o);if(!(!d||c))if(d.type==="response.audio.delta"){y(this,pt,d.content_index),y(this,Ze,d.item_id),this._firstAudioTimestamp===void 0&&(this._firstAudioTimestamp=Date.now(),this._audioLengthMs=0);const x=X(d.delta);(((p=this._rawSessionConfig)==null?void 0:p.output_audio_format)??"pcm16").startsWith("g711_")?this._audioLengthMs+=x.byteLength/8:this._audioLengthMs+=x.byteLength/24/2;const v={type:"audio",data:x,responseId:d.response_id};this._onAudio(v)}else if(d.type==="input_audio_buffer.speech_started"){const x=((h=(f=this._rawSessionConfig)==null?void 0:f.turn_detection)==null?void 0:h.interrupt_response)??!1;this.interrupt(!x)}else d.type==="response.created"?y(this,ft,!0):d.type==="response.done"?y(this,ft,!1):d.type==="session.created"&&(this._tracingConfig=d.session.tracing,this._updateTracingConfig(s.tracing??"auto"))}),i.addEventListener("close",()=>{y(this,ne,{status:"disconnected",websocket:void 0}),this.emit("connection_change",u(this,ne).status),this._onClose()})};class Ac extends Pn{constructor(t,r={}){super();T(this,H);_(this,"initialAgent");_(this,"options");T(this,q);T(this,Z);T(this,hn,[]);T(this,P);T(this,Et,[]);T(this,Ot);T(this,mn,{});T(this,W,[]);T(this,Nt);T(this,Rt,{});T(this,Ee,!1);T(this,gn,null);this.initialAgent=t,this.options=r,typeof r.transport>"u"&&ja()||r.transport==="webrtc"?y(this,q,new Ta):r.transport==="websocket"||typeof r.transport>"u"?y(this,q,new ka):y(this,q,r.transport),y(this,Z,t),y(this,P,new yt({...r.context??{},history:u(this,W)})),y(this,Et,(r.outputGuardrails??[]).map(Nu)),y(this,Ot,Ou(r.outputGuardrailSettings??{})),y(this,Nt,r.historyStoreAudio??!1)}get transport(){return u(this,q)}get currentAgent(){return u(this,Z)}get usage(){return u(this,P).usage}get context(){return u(this,P)}get muted(){return u(this,q).muted}get history(){return u(this,W)}async updateAgent(t){return u(this,Z).emit("agent_handoff",u(this,P),t),this.emit("agent_handoff",u(this,P),u(this,Z),t),await L(this,H,zn).call(this,t),await u(this,q).updateSessionConfig(await L(this,H,Wn).call(this)),t}async connect(t){await L(this,H,zn).call(this,this.initialAgent),L(this,H,Pa).call(this),await u(this,q).connect({apiKey:t.apiKey??this.options.apiKey,model:this.options.model,url:t.url,initialSessionConfig:await L(this,H,Wn).call(this,this.options.config)}),y(this,W,[]),this.emit("history_updated",u(this,W))}updateHistory(t){let r;typeof t=="function"?r=t(u(this,W)):r=t,u(this,q).resetHistory(u(this,W),r)}sendMessage(t,r={}){u(this,q).sendMessage(t,r)}mute(t){u(this,q).mute(t)}close(){y(this,Rt,{}),u(this,q).close()}sendAudio(t,r={}){u(this,q).sendAudio(t,r)}interrupt(){u(this,q).interrupt()}async approve(t,r={alwaysApprove:!1}){u(this,P).approveTool(t,r);const s=u(this,Z).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await L(this,H,Hn).call(this,t.rawItem,s);else throw new de(`Tool ${t.rawItem.name} not found`)}async reject(t,r={alwaysReject:!1}){u(this,P).rejectTool(t,r);const s=u(this,Z).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await L(this,H,Hn).call(this,t.rawItem,s);else throw new de(`Tool ${t.rawItem.name} not found`)}}q=new WeakMap,Z=new WeakMap,hn=new WeakMap,P=new WeakMap,Et=new WeakMap,Ot=new WeakMap,mn=new WeakMap,W=new WeakMap,Nt=new WeakMap,Rt=new WeakMap,Ee=new WeakMap,gn=new WeakMap,H=new WeakSet,zn=async function(t){y(this,Z,t);const s=u(this,Z).handoffs.map(Zn).map(i=>i.getHandoffAsFunctionTool()),a=await u(this,Z).getAllTools(u(this,P));y(this,hn,[...a.filter(i=>i.type==="function"),...s])},Wn=async function(t={}){const r=await u(this,Z).getSystemPrompt(u(this,P)),s=this.options.tracingDisabled?null:this.options.workflowName?{workflow_name:this.options.workflowName}:"auto";s!==null&&s!=="auto"?(this.options.groupId&&(s.group_id=this.options.groupId),this.options.traceMetadata&&(s.metadata=this.options.traceMetadata)):(this.options.groupId||this.options.traceMetadata)&&Pe.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");const i={...{...u(this,gn)??{},...this.options.config??{},...t??{}},instructions:r,voice:u(this,Z).voice,model:this.options.model,tools:u(this,hn),tracing:s};return y(this,gn,i),i},Ra=async function(t,r){const s=await r.onInvokeHandoff(u(this,P),t.arguments);u(this,Z).emit("agent_handoff",u(this,P),s),this.emit("agent_handoff",u(this,P),u(this,Z),s),await L(this,H,zn).call(this,s),await u(this,q).updateSessionConfig(await L(this,H,Wn).call(this));const a=Ls(s);return u(this,q).sendFunctionCallOutput(t,a,!0),s},Hn=async function(t,r){u(this,P).context.history=JSON.parse(JSON.stringify(u(this,W)));let s=t.arguments;if(r.parameters&&(We(r.parameters)?s=r.parameters.parse(s):s=JSON.parse(s)),await r.needsApproval(u(this,P),s,t.callId)){const d=this.context.isToolApproved({toolName:r.name,callId:t.callId});if(d===!1){this.emit("agent_tool_start",u(this,P),u(this,Z),r,{toolCall:t}),u(this,Z).emit("agent_tool_start",u(this,P),r,{toolCall:t});const c="Tool execution was not approved.";u(this,q).sendFunctionCallOutput(t,c,!0),this.emit("agent_tool_end",u(this,P),u(this,Z),r,c,{toolCall:t}),u(this,Z).emit("agent_tool_end",u(this,P),r,c,{toolCall:t});return}else if(typeof d>"u"){this.emit("tool_approval_requested",u(this,P),u(this,Z),{type:"function_approval",tool:r,approvalItem:new Ae(t,u(this,Z))});return}}this.emit("agent_tool_start",u(this,P),u(this,Z),r,{toolCall:t}),u(this,Z).emit("agent_tool_start",u(this,P),r,{toolCall:t}),u(this,P).context.history=JSON.parse(JSON.stringify(u(this,W)));const i=await r.invoke(u(this,P),t.arguments),o=He(i);u(this,q).sendFunctionCallOutput(t,o,!0),this.emit("agent_tool_end",u(this,P),u(this,Z),r,o,{toolCall:t}),u(this,Z).emit("agent_tool_end",u(this,P),r,o,{toolCall:t})},Da=async function(t){const r=new Map(u(this,Z).handoffs.map(Zn).map(o=>[o.toolName,o])),s=await u(this,Z).getAllTools(u(this,P)),a=new Map(s.map(o=>[o.name,o])),i=r.get(t.name);if(i)await L(this,H,Ra).call(this,t,i);else{const o=a.get(t.name);if(o&&o.type==="function")await L(this,H,Hn).call(this,t,o);else throw new de(`Tool ${t.name} not found`)}},Ur=async function(t,r,s){if(u(this,Et).length===0)return;const a={agent:u(this,Z),agentOutput:t,context:u(this,P)},o=(await Promise.all(u(this,Et).map(d=>d.run(a)))).find(d=>d.output.tripwireTriggered);if(o){if(u(this,Rt)[r])return;u(this,Rt)[r]=!0;const d=new vn(`Output guardrail triggered: ${JSON.stringify(o.output.outputInfo)}`,o);this.emit("guardrail_tripped",u(this,P),u(this,Z),d,{itemId:s}),this.interrupt();const c=Ru(o);this.sendMessage(c);return}},Pa=function(){u(this,q).on("*",s=>{if(this.emit("transport_event",s),s.type==="conversation.item.input_audio_transcription.completed")try{const a=s;y(this,W,qr(u(this,W),a,u(this,Nt))),u(this,P).context.history=u(this,W),this.emit("history_updated",u(this,W))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,q).on("audio",s=>{u(this,Ee)||(y(this,Ee,!0),this.emit("audio_start",u(this,P),u(this,Z))),this.emit("audio",s)}),u(this,q).on("turn_started",()=>{y(this,Ee,!1),this.emit("agent_start",u(this,P),u(this,Z)),u(this,Z).emit("agent_start",u(this,P),u(this,Z))}),u(this,q).on("turn_done",s=>{const a=s.response.output[s.response.output.length-1],i=Jr(a)??"",o=(a==null?void 0:a.id)??"";this.emit("agent_end",u(this,P),u(this,Z),i),u(this,Z).emit("agent_end",u(this,P),i),L(this,H,Ur).call(this,i,s.response.id,o)}),u(this,q).on("audio_done",()=>{u(this,Ee)&&y(this,Ee,!1),this.emit("audio_stopped",u(this,P),u(this,Z))});let t=0,r;u(this,q).on("audio_transcript_delta",s=>{try{const a=s.delta,i=s.itemId,o=s.responseId;r!==i&&(r=i,t=0);const c=(u(this,mn)[i]??"")+a;if(u(this,mn)[i]=c,u(this,Ot).debounceTextLength<0)return;const p=Math.floor(c.length/u(this,Ot).debounceTextLength);p>t&&(t=p,L(this,H,Ur).call(this,c,o,i))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,q).on("item_update",s=>{try{const a=!u(this,W).some(i=>i.itemId===s.itemId);if(y(this,W,qr(u(this,W),s,u(this,Nt))),u(this,P).context.history=u(this,W),a){const i=u(this,W).find(o=>o.itemId===s.itemId);i&&this.emit("history_added",i)}this.emit("history_updated",u(this,W))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,q).on("item_deleted",s=>{try{y(this,W,u(this,W).filter(a=>a.itemId!==s.itemId)),u(this,P).context.history=u(this,W),this.emit("history_updated",u(this,W))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,q).on("function_call",async s=>{try{await L(this,H,Da).call(this,s)}catch(a){Pe.error("Error handling function call",a),this.emit("error",{type:"error",error:a})}}),u(this,q).on("usage_update",s=>{u(this,P).usage.add(s)}),u(this,q).on("audio_interrupted",()=>{u(this,Ee)&&y(this,Ee,!1),this.emit("audio_interrupted",u(this,P),u(this,Z))}),u(this,q).on("error",s=>{this.emit("error",s)})};const Cc={base64ToArrayBuffer:X,arrayBufferToBase64:Pt,getLastTextFromAudioOutputMessage:Jr};M.DEFAULT_OPENAI_REALTIME_MODEL=Sa,M.DEFAULT_OPENAI_REALTIME_SESSION_CONFIG=be,M.ModelBehaviorError=de,M.OpenAIRealtimeBase=Wt,M.OpenAIRealtimeWebRTC=Ta,M.OpenAIRealtimeWebSocket=ka,M.OutputGuardrailTripwireTriggered=vn,M.RealtimeAgent=Eu,M.RealtimeSession=Ac,M.UserError=K,M.tool=xn,M.utils=Cc,Object.defineProperty(M,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbmFpLXJlYWx0aW1lLWFnZW50cy51bWQuanMiLCJzb3VyY2VzIjpbIi4uL21ldGFkYXRhLm1qcyIsIi4uL3V0aWxzLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdXRpbHMvc2FmZUV4ZWN1dGUubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9saWIvcGFyc2VyLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvT3B0aW9ucy5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3V0aWwubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9SZWZzLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvZXJyb3JNZXNzYWdlcy5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvem9kL2Rpc3QvZXNtL3YzL2hlbHBlcnMvdXRpbC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy96b2QvZGlzdC9lc20vdjMvWm9kRXJyb3IuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvem9kL2Rpc3QvZXNtL3YzL2hlbHBlcnMvZXJyb3JVdGlsLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3pvZC9kaXN0L2VzbS92My90eXBlcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9hbnkubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2FycmF5Lm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9iaWdpbnQubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2Jvb2xlYW4ubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2JyYW5kZWQubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2NhdGNoLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9kYXRlLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9kZWZhdWx0Lm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9lZmZlY3RzLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9lbnVtLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9pbnRlcnNlY3Rpb24ubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2xpdGVyYWwubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3N0cmluZy5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvcmVjb3JkLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9tYXAubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL25hdGl2ZUVudW0ubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL25ldmVyLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9udWxsLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy91bmlvbi5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvbnVsbGFibGUubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL251bWJlci5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvb2JqZWN0Lm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9vcHRpb25hbC5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvcGlwZWxpbmUubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3Byb21pc2UubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3NldC5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvdHVwbGUubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3VuZGVmaW5lZC5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvdW5rbm93bi5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvcmVhZG9ubHkubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZURlZi5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3pvZFRvSnNvblNjaGVtYS5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9SZXNwb25zZXNQYXJzZXIubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9oZWxwZXJzL3pvZC5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L2Vycm9ycy5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3V0aWxzL3R5cGVHdWFyZHMubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC91dGlscy90b29scy5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvY29uZmlnLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvbG9nZ2VyLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdXRpbHMvc21hcnRTdHJpbmcubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC90b29sLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ab3BlbmFpL3pvZC9kaXN0L2VzbS92My9oZWxwZXJzL3V0aWwuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG9wZW5haS96b2QvZGlzdC9lc20vdjMvWm9kRXJyb3IuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG9wZW5haS96b2QvZGlzdC9lc20vdjMvbG9jYWxlcy9lbi5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ab3BlbmFpL3pvZC9kaXN0L2VzbS92My9lcnJvcnMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG9wZW5haS96b2QvZGlzdC9lc20vdjMvaGVscGVycy9wYXJzZVV0aWwuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG9wZW5haS96b2QvZGlzdC9lc20vdjMvaGVscGVycy9lcnJvclV0aWwuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG9wZW5haS96b2QvZGlzdC9lc20vdjMvdHlwZXMuanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L21jcC5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3NoaW1zL3NoaW1zLWJyb3dzZXIubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC90cmFjaW5nL2NvbnRleHQubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC90cmFjaW5nL3Byb2Nlc3Nvci5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3RyYWNpbmcvdXRpbHMubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC90cmFjaW5nL3NwYW5zLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdHJhY2luZy90cmFjZXMubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC90cmFjaW5nL3Byb3ZpZGVyLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdHJhY2luZy9jcmVhdGVTcGFucy5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3RyYWNpbmcvaW5kZXgubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9saWZlY3ljbGUubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9ndWFyZHJhaWwubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9oYW5kb2ZmLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvcHJvdmlkZXJzLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdHlwZXMvcHJvdG9jb2wubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC91c2FnZS5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3J1bkNvbnRleHQubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9yZXN1bHQubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC91dGlscy9zZXJpYWxpemUubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9pdGVtcy5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3V0aWxzL21lc3NhZ2VzLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvZXZlbnRzLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvcnVuSW1wbGVtZW50YXRpb24ubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9ydW5TdGF0ZS5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3J1bi5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L2FnZW50Lm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvaW5kZXgubWpzIiwiLi4vcmVhbHRpbWVBZ2VudC5tanMiLCIuLi9ndWFyZHJhaWwubWpzIiwiLi4vbG9nZ2VyLm1qcyIsIi4uL2l0ZW1zLm1qcyIsIi4uL29wZW5haVJlYWx0aW1lRXZlbnRzLm1qcyIsIi4uL29wZW5haVJlYWx0aW1lQmFzZS5tanMiLCIuLi9vcGVuYWlSZWFsdGltZVdlYlJ0Yy5tanMiLCIuLi9zaGltcy9zaGltcy1icm93c2VyLm1qcyIsIi4uL29wZW5haVJlYWx0aW1lV2Vic29ja2V0Lm1qcyIsIi4uL3JlYWx0aW1lU2Vzc2lvbi5tanMiLCIuLi9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkXG5leHBvcnQgY29uc3QgTUVUQURBVEEgPSB7XG4gICAgXCJuYW1lXCI6IFwiQG9wZW5haS9hZ2VudHMtcmVhbHRpbWVcIixcbiAgICBcInZlcnNpb25cIjogXCIwLjAuMTZcIixcbiAgICBcInZlcnNpb25zXCI6IHtcbiAgICAgICAgXCJAb3BlbmFpL2FnZW50cy1yZWFsdGltZVwiOiBcIjAuMC4xNlwiLFxuICAgICAgICBcIkBvcGVuYWkvYWdlbnRzLWNvcmVcIjogXCJ3b3Jrc3BhY2U6KlwiLFxuICAgICAgICBcIkBvcGVuYWkvem9kXCI6IFwibnBtOnpvZEAzLjI1LjQwIC0gMy4yNS42N1wiXG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IE1FVEFEQVRBO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGEubWpzLm1hcCIsImltcG9ydCBNRVRBREFUQSBmcm9tIFwiLi9tZXRhZGF0YS5tanNcIjtcbi8qKlxuICogQ29udmVydHMgYSBiYXNlNjQgc3RyaW5nIHRvIGFuIEFycmF5QnVmZmVyXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0XG4gKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiYXNlNjRUb0FycmF5QnVmZmVyKGJhc2U2NCkge1xuICAgIGNvbnN0IGJpbmFyeVN0cmluZyA9IGF0b2IoYmFzZTY0KTtcbiAgICBjb25zdCBsZW4gPSBiaW5hcnlTdHJpbmcubGVuZ3RoO1xuICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobGVuKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGJ5dGVzW2ldID0gYmluYXJ5U3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBieXRlcy5idWZmZXI7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIEFycmF5QnVmZmVyIHRvIGEgYmFzZTY0IHN0cmluZ1xuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcnJheUJ1ZmZlclRvQmFzZTY0KGFycmF5QnVmZmVyKSB7XG4gICAgY29uc3QgYmluYXJ5U3RyaW5nID0gU3RyaW5nLmZyb21DaGFyQ29kZSguLi5uZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgIHJldHVybiBidG9hKGJpbmFyeVN0cmluZyk7XG59XG4vKipcbiAqIEdldCB0aGUgbGFzdCB0ZXh0IGZyb20gYW4gYXVkaW8gb3V0cHV0IG1lc3NhZ2VcbiAqIEBwYXJhbSBpdGVtXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFzdFRleHRGcm9tQXVkaW9PdXRwdXRNZXNzYWdlKGl0ZW0pIHtcbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGl0ZW0gPT09IG51bGwgfHxcbiAgICAgICAgdHlwZW9mIGl0ZW0gIT09ICdvYmplY3QnIHx8XG4gICAgICAgICEoJ3R5cGUnIGluIGl0ZW0pIHx8XG4gICAgICAgIHR5cGVvZiBpdGVtLnR5cGUgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICFpdGVtLnR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGl0ZW0udHlwZSAhPT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICghKCdjb250ZW50JyBpbiBpdGVtKSB8fFxuICAgICAgICAhQXJyYXkuaXNBcnJheShpdGVtLmNvbnRlbnQpIHx8XG4gICAgICAgIGl0ZW0uY29udGVudC5sZW5ndGggPCAxKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGxhc3RDb250ZW50SXRlbSA9IGl0ZW0uY29udGVudFtpdGVtLmNvbnRlbnQubGVuZ3RoIC0gMV07XG4gICAgaWYgKCEoJ3R5cGUnIGluIGxhc3RDb250ZW50SXRlbSkgfHxcbiAgICAgICAgdHlwZW9mIGxhc3RDb250ZW50SXRlbS50eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAobGFzdENvbnRlbnRJdGVtLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGxhc3RDb250ZW50SXRlbS50ZXh0ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBsYXN0Q29udGVudEl0ZW0udGV4dFxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChsYXN0Q29udGVudEl0ZW0udHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGxhc3RDb250ZW50SXRlbS50cmFuc2NyaXB0ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBsYXN0Q29udGVudEl0ZW0udHJhbnNjcmlwdFxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG4vKipcbiAqIENvbXBhcmUgdHdvIGNvbnZlcnNhdGlvbiBoaXN0b3JpZXMgdG8gZGV0ZXJtaW5lIHRoZSByZW1vdmFscywgYWRkaXRpb25zLCBhbmQgdXBkYXRlcy5cbiAqIEBwYXJhbSBvbGRIaXN0b3J5IC0gVGhlIG9sZCBoaXN0b3J5LlxuICogQHBhcmFtIG5ld0hpc3RvcnkgLSBUaGUgbmV3IGhpc3RvcnkuXG4gKiBAcmV0dXJucyBBIGRpZmYgb2YgdGhlIHR3byBoaXN0b3JpZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmUmVhbHRpbWVIaXN0b3J5KG9sZEhpc3RvcnksIG5ld0hpc3RvcnkpIHtcbiAgICBjb25zdCByZW1vdmFscyA9IG9sZEhpc3RvcnkuZmlsdGVyKChpdGVtKSA9PiAhbmV3SGlzdG9yeS5zb21lKChuZXdJdGVtKSA9PiBuZXdJdGVtLml0ZW1JZCA9PT0gaXRlbS5pdGVtSWQpKTtcbiAgICBjb25zdCBhZGRpdGlvbnMgPSBuZXdIaXN0b3J5LmZpbHRlcigoaXRlbSkgPT4gIW9sZEhpc3Rvcnkuc29tZSgob2xkSXRlbSkgPT4gb2xkSXRlbS5pdGVtSWQgPT09IGl0ZW0uaXRlbUlkKSk7XG4gICAgY29uc3QgdXBkYXRlcyA9IG5ld0hpc3RvcnkuZmlsdGVyKChpdGVtKSA9PiBvbGRIaXN0b3J5LnNvbWUoKG9sZEl0ZW0pID0+IG9sZEl0ZW0uaXRlbUlkID09PSBpdGVtLml0ZW1JZCAmJlxuICAgICAgICBKU09OLnN0cmluZ2lmeShvbGRJdGVtKSAhPT0gSlNPTi5zdHJpbmdpZnkoaXRlbSkpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmFscyxcbiAgICAgICAgYWRkaXRpb25zLFxuICAgICAgICB1cGRhdGVzLFxuICAgIH07XG59XG4vKipcbiAqIENoZWNrIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIFdlYlJUQy5cbiAqIEByZXR1cm5zIFRydWUgaWYgV2ViUlRDIGlzIHN1cHBvcnRlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzV2ViUlRDU3VwcG9ydCgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvd1snUlRDUGVlckNvbm5lY3Rpb24nXSAhPT0gJ3VuZGVmaW5lZCc7XG59XG4vKipcbiAqIFJlbW92ZXMgdGhlIGF1ZGlvIGRhdGEgZnJvbSBhbGwgY29udGVudCBpbiBhIG1lc3NhZ2UgYnkgc2V0dGluZyBpdCB0byBudWxsLlxuICogQHBhcmFtIGl0ZW1cbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVBdWRpb0Zyb21Db250ZW50KGl0ZW0pIHtcbiAgICBpZiAoaXRlbS5yb2xlID09PSAnc3lzdGVtJykge1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gICAgaWYgKGl0ZW0ucm9sZSA9PT0gJ2Fzc2lzdGFudCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeS50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGl0ZW0ucm9sZSA9PT0gJ3VzZXInKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgY29udGVudDogaXRlbS5jb250ZW50Lm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkudHlwZSA9PT0gJ2lucHV0X2F1ZGlvJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZW50cnksXG4gICAgICAgICAgICAgICAgICAgICAgICBhdWRpbzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgICAgICAgfSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufVxuLyoqXG4gKiBVcGRhdGVzIHRoZSByZWFsdGltZSBoaXN0b3J5IGFycmF5IGJhc2VkIG9uIHRoZSBpbmNvbWluZyBldmVudCBhbmQgb3B0aW9ucy5cbiAqIEBwYXJhbSBoaXN0b3J5IC0gVGhlIGN1cnJlbnQgaGlzdG9yeSBhcnJheS5cbiAqIEBwYXJhbSBldmVudCAtIFRoZSBldmVudCB0byBwcm9jZXNzIChSZWFsdGltZUl0ZW0pLlxuICogQHBhcmFtIHNob3VsZEluY2x1ZGVBdWRpb0RhdGEgLSBXaGV0aGVyIHRvIGluY2x1ZGUgYXVkaW8gZGF0YSBpbiBtZXNzYWdlIGl0ZW1zLlxuICogQHJldHVybnMgVGhlIHVwZGF0ZWQgaGlzdG9yeSBhcnJheS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVJlYWx0aW1lSGlzdG9yeShoaXN0b3J5LCBldmVudCwgc2hvdWxkSW5jbHVkZUF1ZGlvRGF0YSkge1xuICAgIC8vIE1lcmdlIHRyYW5zY3JpcHQgaW50byBwbGFjZWhvbGRlciBpbnB1dF9hdWRpbyBtZXNzYWdlXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5pbnB1dF9hdWRpb190cmFuc2NyaXB0aW9uLmNvbXBsZXRlZCcpIHtcbiAgICAgICAgcmV0dXJuIGhpc3RvcnkubWFwKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS5pdGVtSWQgPT09IGV2ZW50Lml0ZW1faWQgJiZcbiAgICAgICAgICAgICAgICBpdGVtLnR5cGUgPT09ICdtZXNzYWdlJyAmJlxuICAgICAgICAgICAgICAgICdyb2xlJyBpbiBpdGVtICYmXG4gICAgICAgICAgICAgICAgaXRlbS5yb2xlID09PSAndXNlcicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkQ29udGVudCA9IGl0ZW0uY29udGVudC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS50eXBlID09PSAnaW5wdXRfYXVkaW8nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmVudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zY3JpcHQ6IGV2ZW50LnRyYW5zY3JpcHQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB1cGRhdGVkQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnY29tcGxldGVkJyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBuZXdFdmVudCA9ICFzaG91bGRJbmNsdWRlQXVkaW9EYXRhICYmIGV2ZW50LnR5cGUgPT09ICdtZXNzYWdlJ1xuICAgICAgICA/IHJlbW92ZUF1ZGlvRnJvbUNvbnRlbnQoZXZlbnQpXG4gICAgICAgIDogZXZlbnQ7XG4gICAgY29uc3QgZXhpc3RpbmdJbmRleCA9IGhpc3RvcnkuZmluZEluZGV4KChpdGVtKSA9PiBpdGVtLml0ZW1JZCA9PT0gZXZlbnQuaXRlbUlkKTtcbiAgICBpZiAoZXhpc3RpbmdJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIGl0ZW1cbiAgICAgICAgcmV0dXJuIGhpc3RvcnkubWFwKChpdGVtLCBpZHgpID0+IHtcbiAgICAgICAgICAgIGlmIChpZHggPT09IGV4aXN0aW5nSW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3RXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXNob3VsZEluY2x1ZGVBdWRpb0RhdGEgJiYgaXRlbS50eXBlID09PSAnbWVzc2FnZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3ZlQXVkaW9Gcm9tQ29udGVudChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXZlbnQucHJldmlvdXNJdGVtSWQpIHtcbiAgICAgICAgLy8gSW5zZXJ0IGFmdGVyIHByZXZpb3VzSXRlbUlkIGlmIGZvdW5kLCBlbHNlIGF0IGVuZFxuICAgICAgICBjb25zdCBwcmV2SW5kZXggPSBoaXN0b3J5LmZpbmRJbmRleCgoaXRlbSkgPT4gaXRlbS5pdGVtSWQgPT09IGV2ZW50LnByZXZpb3VzSXRlbUlkKTtcbiAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgLi4uaGlzdG9yeS5zbGljZSgwLCBwcmV2SW5kZXggKyAxKSxcbiAgICAgICAgICAgICAgICBuZXdFdmVudCxcbiAgICAgICAgICAgICAgICAuLi5oaXN0b3J5LnNsaWNlKHByZXZJbmRleCArIDEpLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbLi4uaGlzdG9yeSwgbmV3RXZlbnRdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gWy4uLmhpc3RvcnksIG5ld0V2ZW50XTtcbiAgICB9XG59XG4vKipcbiAqIFRoZSBoZWFkZXJzIHRvIHVzZSBmb3IgdGhlIFJlYWx0aW1lIEFQSS5cbiAqL1xuZXhwb3J0IGNvbnN0IEhFQURFUlMgPSB7XG4gICAgJ1VzZXItQWdlbnQnOiBgQWdlbnRzL0phdmFTY3JpcHQgJHtNRVRBREFUQS52ZXJzaW9ufWAsXG4gICAgJ1gtT3BlbkFJLUFnZW50cy1TREsnOiBgb3BlbmFpLWFnZW50cy1zZGsuJHtNRVRBREFUQS52ZXJzaW9ufWAsXG59O1xuLyoqXG4gKiBCcm93c2VyIHdlYnNvY2tldCBoZWFkZXJcbiAqL1xuZXhwb3J0IGNvbnN0IFdFQlNPQ0tFVF9NRVRBID0gYG9wZW5haS1hZ2VudHMtc2RrLiR7TUVUQURBVEEudmVyc2lvbn1gO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMubWpzLm1hcCIsImV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYWZlRXhlY3V0ZShmbikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBbbnVsbCwgYXdhaXQgZm4oKV07XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gW2Vycm9yLCBudWxsXTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYWZlRXhlY3V0ZS5tanMubWFwIiwiaW1wb3J0IHsgQ29udGVudEZpbHRlckZpbmlzaFJlYXNvbkVycm9yLCBMZW5ndGhGaW5pc2hSZWFzb25FcnJvciwgT3BlbkFJRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gbWFrZVBhcnNlYWJsZVJlc3BvbnNlRm9ybWF0KHJlc3BvbnNlX2Zvcm1hdCwgcGFyc2VyKSB7XG4gICAgY29uc3Qgb2JqID0geyAuLi5yZXNwb25zZV9mb3JtYXQgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHtcbiAgICAgICAgJGJyYW5kOiB7XG4gICAgICAgICAgICB2YWx1ZTogJ2F1dG8tcGFyc2VhYmxlLXJlc3BvbnNlLWZvcm1hdCcsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgJHBhcnNlUmF3OiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VyLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUGFyc2VhYmxlVGV4dEZvcm1hdChyZXNwb25zZV9mb3JtYXQsIHBhcnNlcikge1xuICAgIGNvbnN0IG9iaiA9IHsgLi4ucmVzcG9uc2VfZm9ybWF0IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCB7XG4gICAgICAgICRicmFuZDoge1xuICAgICAgICAgICAgdmFsdWU6ICdhdXRvLXBhcnNlYWJsZS1yZXNwb25zZS1mb3JtYXQnLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgICRwYXJzZVJhdzoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlcixcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBdXRvUGFyc2FibGVSZXNwb25zZUZvcm1hdChyZXNwb25zZV9mb3JtYXQpIHtcbiAgICByZXR1cm4gcmVzcG9uc2VfZm9ybWF0Py5bJyRicmFuZCddID09PSAnYXV0by1wYXJzZWFibGUtcmVzcG9uc2UtZm9ybWF0Jztcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUGFyc2VhYmxlVG9vbCh0b29sLCB7IHBhcnNlciwgY2FsbGJhY2ssIH0pIHtcbiAgICBjb25zdCBvYmogPSB7IC4uLnRvb2wgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHtcbiAgICAgICAgJGJyYW5kOiB7XG4gICAgICAgICAgICB2YWx1ZTogJ2F1dG8tcGFyc2VhYmxlLXRvb2wnLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgICRwYXJzZVJhdzoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlcixcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICAkY2FsbGJhY2s6IHtcbiAgICAgICAgICAgIHZhbHVlOiBjYWxsYmFjayxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBdXRvUGFyc2FibGVUb29sKHRvb2wpIHtcbiAgICByZXR1cm4gdG9vbD8uWyckYnJhbmQnXSA9PT0gJ2F1dG8tcGFyc2VhYmxlLXRvb2wnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1heWJlUGFyc2VDaGF0Q29tcGxldGlvbihjb21wbGV0aW9uLCBwYXJhbXMpIHtcbiAgICBpZiAoIXBhcmFtcyB8fCAhaGFzQXV0b1BhcnNlYWJsZUlucHV0KHBhcmFtcykpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNvbXBsZXRpb24sXG4gICAgICAgICAgICBjaG9pY2VzOiBjb21wbGV0aW9uLmNob2ljZXMubWFwKChjaG9pY2UpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uY2hvaWNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY2hvaWNlLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgLi4uKGNob2ljZS5tZXNzYWdlLnRvb2xfY2FsbHMgP1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xfY2FsbHM6IGNob2ljZS5tZXNzYWdlLnRvb2xfY2FsbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlQ2hhdENvbXBsZXRpb24oY29tcGxldGlvbiwgcGFyYW1zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNoYXRDb21wbGV0aW9uKGNvbXBsZXRpb24sIHBhcmFtcykge1xuICAgIGNvbnN0IGNob2ljZXMgPSBjb21wbGV0aW9uLmNob2ljZXMubWFwKChjaG9pY2UpID0+IHtcbiAgICAgICAgaWYgKGNob2ljZS5maW5pc2hfcmVhc29uID09PSAnbGVuZ3RoJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IExlbmd0aEZpbmlzaFJlYXNvbkVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNob2ljZS5maW5pc2hfcmVhc29uID09PSAnY29udGVudF9maWx0ZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ29udGVudEZpbHRlckZpbmlzaFJlYXNvbkVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNob2ljZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICAgICAgICAuLi5jaG9pY2UubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAuLi4oY2hvaWNlLm1lc3NhZ2UudG9vbF9jYWxscyA/XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xfY2FsbHM6IGNob2ljZS5tZXNzYWdlLnRvb2xfY2FsbHM/Lm1hcCgodG9vbENhbGwpID0+IHBhcnNlVG9vbENhbGwocGFyYW1zLCB0b29sQ2FsbCkpID8/IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgcGFyc2VkOiBjaG9pY2UubWVzc2FnZS5jb250ZW50ICYmICFjaG9pY2UubWVzc2FnZS5yZWZ1c2FsID9cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VSZXNwb25zZUZvcm1hdChwYXJhbXMsIGNob2ljZS5tZXNzYWdlLmNvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgLi4uY29tcGxldGlvbiwgY2hvaWNlcyB9O1xufVxuZnVuY3Rpb24gcGFyc2VSZXNwb25zZUZvcm1hdChwYXJhbXMsIGNvbnRlbnQpIHtcbiAgICBpZiAocGFyYW1zLnJlc3BvbnNlX2Zvcm1hdD8udHlwZSAhPT0gJ2pzb25fc2NoZW1hJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5yZXNwb25zZV9mb3JtYXQ/LnR5cGUgPT09ICdqc29uX3NjaGVtYScpIHtcbiAgICAgICAgaWYgKCckcGFyc2VSYXcnIGluIHBhcmFtcy5yZXNwb25zZV9mb3JtYXQpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlX2Zvcm1hdCA9IHBhcmFtcy5yZXNwb25zZV9mb3JtYXQ7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VfZm9ybWF0LiRwYXJzZVJhdyhjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShjb250ZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBwYXJzZVRvb2xDYWxsKHBhcmFtcywgdG9vbENhbGwpIHtcbiAgICBjb25zdCBpbnB1dFRvb2wgPSBwYXJhbXMudG9vbHM/LmZpbmQoKGlucHV0VG9vbCkgPT4gaW5wdXRUb29sLmZ1bmN0aW9uPy5uYW1lID09PSB0b29sQ2FsbC5mdW5jdGlvbi5uYW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi50b29sQ2FsbCxcbiAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICAgIC4uLnRvb2xDYWxsLmZ1bmN0aW9uLFxuICAgICAgICAgICAgcGFyc2VkX2FyZ3VtZW50czogaXNBdXRvUGFyc2FibGVUb29sKGlucHV0VG9vbCkgPyBpbnB1dFRvb2wuJHBhcnNlUmF3KHRvb2xDYWxsLmZ1bmN0aW9uLmFyZ3VtZW50cylcbiAgICAgICAgICAgICAgICA6IGlucHV0VG9vbD8uZnVuY3Rpb24uc3RyaWN0ID8gSlNPTi5wYXJzZSh0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMpXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZFBhcnNlVG9vbENhbGwocGFyYW1zLCB0b29sQ2FsbCkge1xuICAgIGlmICghcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXRUb29sID0gcGFyYW1zLnRvb2xzPy5maW5kKChpbnB1dFRvb2wpID0+IGlucHV0VG9vbC5mdW5jdGlvbj8ubmFtZSA9PT0gdG9vbENhbGwuZnVuY3Rpb24ubmFtZSk7XG4gICAgcmV0dXJuIGlzQXV0b1BhcnNhYmxlVG9vbChpbnB1dFRvb2wpIHx8IGlucHV0VG9vbD8uZnVuY3Rpb24uc3RyaWN0IHx8IGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc0F1dG9QYXJzZWFibGVJbnB1dChwYXJhbXMpIHtcbiAgICBpZiAoaXNBdXRvUGFyc2FibGVSZXNwb25zZUZvcm1hdChwYXJhbXMucmVzcG9uc2VfZm9ybWF0KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIChwYXJhbXMudG9vbHM/LnNvbWUoKHQpID0+IGlzQXV0b1BhcnNhYmxlVG9vbCh0KSB8fCAodC50eXBlID09PSAnZnVuY3Rpb24nICYmIHQuZnVuY3Rpb24uc3RyaWN0ID09PSB0cnVlKSkgPz8gZmFsc2UpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSW5wdXRUb29scyh0b29scykge1xuICAgIGZvciAoY29uc3QgdG9vbCBvZiB0b29scyA/PyBbXSkge1xuICAgICAgICBpZiAodG9vbC50eXBlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYEN1cnJlbnRseSBvbmx5IFxcYGZ1bmN0aW9uXFxgIHRvb2wgdHlwZXMgc3VwcG9ydCBhdXRvLXBhcnNpbmc7IFJlY2VpdmVkIFxcYCR7dG9vbC50eXBlfVxcYGApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b29sLmZ1bmN0aW9uLnN0cmljdCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBUaGUgXFxgJHt0b29sLmZ1bmN0aW9uLm5hbWV9XFxgIHRvb2wgaXMgbm90IG1hcmtlZCB3aXRoIFxcYHN0cmljdDogdHJ1ZVxcYC4gT25seSBzdHJpY3QgZnVuY3Rpb24gdG9vbHMgY2FuIGJlIGF1dG8tcGFyc2VkYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZXIubWpzLm1hcCIsImV4cG9ydCBjb25zdCBpZ25vcmVPdmVycmlkZSA9IFN5bWJvbCgnTGV0IHpvZFRvSnNvblNjaGVtYSBkZWNpZGUgb24gd2hpY2ggcGFyc2VyIHRvIHVzZScpO1xuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgbmFtZTogdW5kZWZpbmVkLFxuICAgICRyZWZTdHJhdGVneTogJ3Jvb3QnLFxuICAgIGVmZmVjdFN0cmF0ZWd5OiAnaW5wdXQnLFxuICAgIHBpcGVTdHJhdGVneTogJ2FsbCcsXG4gICAgZGF0ZVN0cmF0ZWd5OiAnZm9ybWF0OmRhdGUtdGltZScsXG4gICAgbWFwU3RyYXRlZ3k6ICdlbnRyaWVzJyxcbiAgICBudWxsYWJsZVN0cmF0ZWd5OiAnZnJvbS10YXJnZXQnLFxuICAgIHJlbW92ZUFkZGl0aW9uYWxTdHJhdGVneTogJ3Bhc3N0aHJvdWdoJyxcbiAgICBkZWZpbml0aW9uUGF0aDogJ2RlZmluaXRpb25zJyxcbiAgICB0YXJnZXQ6ICdqc29uU2NoZW1hNycsXG4gICAgc3RyaWN0VW5pb25zOiBmYWxzZSxcbiAgICBlcnJvck1lc3NhZ2VzOiBmYWxzZSxcbiAgICBtYXJrZG93bkRlc2NyaXB0aW9uOiBmYWxzZSxcbiAgICBwYXR0ZXJuU3RyYXRlZ3k6ICdlc2NhcGUnLFxuICAgIGFwcGx5UmVnZXhGbGFnczogZmFsc2UsXG4gICAgZW1haWxTdHJhdGVneTogJ2Zvcm1hdDplbWFpbCcsXG4gICAgYmFzZTY0U3RyYXRlZ3k6ICdjb250ZW50RW5jb2Rpbmc6YmFzZTY0JyxcbiAgICBuYW1lU3RyYXRlZ3k6ICdyZWYnLFxufTtcbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0T3B0aW9ucyA9IChvcHRpb25zKSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBhZGQgYGRlZmluaXRpb25zYCBoZXJlIGFzIHdlIG1heSBtdXRhdGUgaXRcbiAgICByZXR1cm4gKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyA/XG4gICAgICAgIHtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAgICAgYmFzZVBhdGg6IFsnIyddLFxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHt9LFxuICAgICAgICAgICAgbmFtZTogb3B0aW9ucyxcbiAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAgICAgYmFzZVBhdGg6IFsnIyddLFxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHt9LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3B0aW9ucy5tanMubWFwIiwiZXhwb3J0IGNvbnN0IHpvZERlZiA9ICh6b2RTY2hlbWEpID0+IHtcbiAgICByZXR1cm4gJ19kZWYnIGluIHpvZFNjaGVtYSA/IHpvZFNjaGVtYS5fZGVmIDogem9kU2NoZW1hO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5T2JqKG9iaikge1xuICAgIGlmICghb2JqKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBmb3IgKGNvbnN0IF9rIGluIG9iailcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5tanMubWFwIiwiaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi9PcHRpb25zLm1qc1wiO1xuaW1wb3J0IHsgem9kRGVmIH0gZnJvbSBcIi4vdXRpbC5tanNcIjtcbmV4cG9ydCBjb25zdCBnZXRSZWZzID0gKG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBfb3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKG9wdGlvbnMpO1xuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gX29wdGlvbnMubmFtZSAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgWy4uLl9vcHRpb25zLmJhc2VQYXRoLCBfb3B0aW9ucy5kZWZpbml0aW9uUGF0aCwgX29wdGlvbnMubmFtZV1cbiAgICAgICAgOiBfb3B0aW9ucy5iYXNlUGF0aDtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5fb3B0aW9ucyxcbiAgICAgICAgY3VycmVudFBhdGg6IGN1cnJlbnRQYXRoLFxuICAgICAgICBwcm9wZXJ0eVBhdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgc2VlblJlZnM6IG5ldyBTZXQoKSxcbiAgICAgICAgc2VlbjogbmV3IE1hcChPYmplY3QuZW50cmllcyhfb3B0aW9ucy5kZWZpbml0aW9ucykubWFwKChbbmFtZSwgZGVmXSkgPT4gW1xuICAgICAgICAgICAgem9kRGVmKGRlZiksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGVmOiB6b2REZWYoZGVmKSxcbiAgICAgICAgICAgICAgICBwYXRoOiBbLi4uX29wdGlvbnMuYmFzZVBhdGgsIF9vcHRpb25zLmRlZmluaXRpb25QYXRoLCBuYW1lXSxcbiAgICAgICAgICAgICAgICAvLyBSZXNvbHV0aW9uIG9mIHJlZmVyZW5jZXMgd2lsbCBiZSBmb3JjZWQgZXZlbiB0aG91Z2ggc2Vlbiwgc28gaXQncyBvayB0aGF0IHRoZSBzY2hlbWEgaXMgdW5kZWZpbmVkIGhlcmUgZm9yIG5vdy5cbiAgICAgICAgICAgICAgICBqc29uU2NoZW1hOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKSksXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWZzLm1qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gYWRkRXJyb3JNZXNzYWdlKHJlcywga2V5LCBlcnJvck1lc3NhZ2UsIHJlZnMpIHtcbiAgICBpZiAoIXJlZnM/LmVycm9yTWVzc2FnZXMpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHJlcy5lcnJvck1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAuLi5yZXMuZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgW2tleV06IGVycm9yTWVzc2FnZSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsIGtleSwgdmFsdWUsIGVycm9yTWVzc2FnZSwgcmVmcykge1xuICAgIHJlc1trZXldID0gdmFsdWU7XG4gICAgYWRkRXJyb3JNZXNzYWdlKHJlcywga2V5LCBlcnJvck1lc3NhZ2UsIHJlZnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JNZXNzYWdlcy5tanMubWFwIiwiZXhwb3J0IHZhciB1dGlsO1xuKGZ1bmN0aW9uICh1dGlsKSB7XG4gICAgdXRpbC5hc3NlcnRFcXVhbCA9IChfKSA9PiB7IH07XG4gICAgZnVuY3Rpb24gYXNzZXJ0SXMoX2FyZykgeyB9XG4gICAgdXRpbC5hc3NlcnRJcyA9IGFzc2VydElzO1xuICAgIGZ1bmN0aW9uIGFzc2VydE5ldmVyKF94KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cbiAgICB1dGlsLmFzc2VydE5ldmVyID0gYXNzZXJ0TmV2ZXI7XG4gICAgdXRpbC5hcnJheVRvRW51bSA9IChpdGVtcykgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgICAgICBvYmpbaXRlbV0gPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcbiAgICB1dGlsLmdldFZhbGlkRW51bVZhbHVlcyA9IChvYmopID0+IHtcbiAgICAgICAgY29uc3QgdmFsaWRLZXlzID0gdXRpbC5vYmplY3RLZXlzKG9iaikuZmlsdGVyKChrKSA9PiB0eXBlb2Ygb2JqW29ialtrXV0gIT09IFwibnVtYmVyXCIpO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGsgb2YgdmFsaWRLZXlzKSB7XG4gICAgICAgICAgICBmaWx0ZXJlZFtrXSA9IG9ialtrXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXRpbC5vYmplY3RWYWx1ZXMoZmlsdGVyZWQpO1xuICAgIH07XG4gICAgdXRpbC5vYmplY3RWYWx1ZXMgPSAob2JqKSA9PiB7XG4gICAgICAgIHJldHVybiB1dGlsLm9iamVjdEtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmpbZV07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdXRpbC5vYmplY3RLZXlzID0gdHlwZW9mIE9iamVjdC5rZXlzID09PSBcImZ1bmN0aW9uXCIgLy8gZXNsaW50LWRpc2FibGUtbGluZSBiYW4vYmFuXG4gICAgICAgID8gKG9iaikgPT4gT2JqZWN0LmtleXMob2JqKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJhbi9iYW5cbiAgICAgICAgOiAob2JqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ga2V5cztcbiAgICAgICAgfTtcbiAgICB1dGlsLmZpbmQgPSAoYXJyLCBjaGVja2VyKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBhcnIpIHtcbiAgICAgICAgICAgIGlmIChjaGVja2VyKGl0ZW0pKVxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICB1dGlsLmlzSW50ZWdlciA9IHR5cGVvZiBOdW1iZXIuaXNJbnRlZ2VyID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyAodmFsKSA9PiBOdW1iZXIuaXNJbnRlZ2VyKHZhbCkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBiYW4vYmFuXG4gICAgICAgIDogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiAmJiBOdW1iZXIuaXNGaW5pdGUodmFsKSAmJiBNYXRoLmZsb29yKHZhbCkgPT09IHZhbDtcbiAgICBmdW5jdGlvbiBqb2luVmFsdWVzKGFycmF5LCBzZXBhcmF0b3IgPSBcIiB8IFwiKSB7XG4gICAgICAgIHJldHVybiBhcnJheS5tYXAoKHZhbCkgPT4gKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgPyBgJyR7dmFsfSdgIDogdmFsKSkuam9pbihzZXBhcmF0b3IpO1xuICAgIH1cbiAgICB1dGlsLmpvaW5WYWx1ZXMgPSBqb2luVmFsdWVzO1xuICAgIHV0aWwuanNvblN0cmluZ2lmeVJlcGxhY2VyID0gKF8sIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYmlnaW50XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xufSkodXRpbCB8fCAodXRpbCA9IHt9KSk7XG5leHBvcnQgdmFyIG9iamVjdFV0aWw7XG4oZnVuY3Rpb24gKG9iamVjdFV0aWwpIHtcbiAgICBvYmplY3RVdGlsLm1lcmdlU2hhcGVzID0gKGZpcnN0LCBzZWNvbmQpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmZpcnN0LFxuICAgICAgICAgICAgLi4uc2Vjb25kLCAvLyBzZWNvbmQgb3ZlcndyaXRlcyBmaXJzdFxuICAgICAgICB9O1xuICAgIH07XG59KShvYmplY3RVdGlsIHx8IChvYmplY3RVdGlsID0ge30pKTtcbmV4cG9ydCBjb25zdCBab2RQYXJzZWRUeXBlID0gdXRpbC5hcnJheVRvRW51bShbXG4gICAgXCJzdHJpbmdcIixcbiAgICBcIm5hblwiLFxuICAgIFwibnVtYmVyXCIsXG4gICAgXCJpbnRlZ2VyXCIsXG4gICAgXCJmbG9hdFwiLFxuICAgIFwiYm9vbGVhblwiLFxuICAgIFwiZGF0ZVwiLFxuICAgIFwiYmlnaW50XCIsXG4gICAgXCJzeW1ib2xcIixcbiAgICBcImZ1bmN0aW9uXCIsXG4gICAgXCJ1bmRlZmluZWRcIixcbiAgICBcIm51bGxcIixcbiAgICBcImFycmF5XCIsXG4gICAgXCJvYmplY3RcIixcbiAgICBcInVua25vd25cIixcbiAgICBcInByb21pc2VcIixcbiAgICBcInZvaWRcIixcbiAgICBcIm5ldmVyXCIsXG4gICAgXCJtYXBcIixcbiAgICBcInNldFwiLFxuXSk7XG5leHBvcnQgY29uc3QgZ2V0UGFyc2VkVHlwZSA9IChkYXRhKSA9PiB7XG4gICAgY29uc3QgdCA9IHR5cGVvZiBkYXRhO1xuICAgIHN3aXRjaCAodCkge1xuICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQ7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnN0cmluZztcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5pc05hTihkYXRhKSA/IFpvZFBhcnNlZFR5cGUubmFuIDogWm9kUGFyc2VkVHlwZS5udW1iZXI7XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5ib29sZWFuO1xuICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmZ1bmN0aW9uO1xuICAgICAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5iaWdpbnQ7XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnN5bWJvbDtcbiAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5hcnJheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUubnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhLnRoZW4gJiYgdHlwZW9mIGRhdGEudGhlbiA9PT0gXCJmdW5jdGlvblwiICYmIGRhdGEuY2F0Y2ggJiYgdHlwZW9mIGRhdGEuY2F0Y2ggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIE1hcCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUubWFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBTZXQgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgRGF0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmRhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5vYmplY3Q7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS51bmtub3duO1xuICAgIH1cbn07XG4iLCJpbXBvcnQgeyB1dGlsIH0gZnJvbSBcIi4vaGVscGVycy91dGlsLmpzXCI7XG5leHBvcnQgY29uc3QgWm9kSXNzdWVDb2RlID0gdXRpbC5hcnJheVRvRW51bShbXG4gICAgXCJpbnZhbGlkX3R5cGVcIixcbiAgICBcImludmFsaWRfbGl0ZXJhbFwiLFxuICAgIFwiY3VzdG9tXCIsXG4gICAgXCJpbnZhbGlkX3VuaW9uXCIsXG4gICAgXCJpbnZhbGlkX3VuaW9uX2Rpc2NyaW1pbmF0b3JcIixcbiAgICBcImludmFsaWRfZW51bV92YWx1ZVwiLFxuICAgIFwidW5yZWNvZ25pemVkX2tleXNcIixcbiAgICBcImludmFsaWRfYXJndW1lbnRzXCIsXG4gICAgXCJpbnZhbGlkX3JldHVybl90eXBlXCIsXG4gICAgXCJpbnZhbGlkX2RhdGVcIixcbiAgICBcImludmFsaWRfc3RyaW5nXCIsXG4gICAgXCJ0b29fc21hbGxcIixcbiAgICBcInRvb19iaWdcIixcbiAgICBcImludmFsaWRfaW50ZXJzZWN0aW9uX3R5cGVzXCIsXG4gICAgXCJub3RfbXVsdGlwbGVfb2ZcIixcbiAgICBcIm5vdF9maW5pdGVcIixcbl0pO1xuZXhwb3J0IGNvbnN0IHF1b3RlbGVzc0pzb24gPSAob2JqKSA9PiB7XG4gICAgY29uc3QganNvbiA9IEpTT04uc3RyaW5naWZ5KG9iaiwgbnVsbCwgMik7XG4gICAgcmV0dXJuIGpzb24ucmVwbGFjZSgvXCIoW15cIl0rKVwiOi9nLCBcIiQxOlwiKTtcbn07XG5leHBvcnQgY2xhc3MgWm9kRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgZ2V0IGVycm9ycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNzdWVzO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihpc3N1ZXMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pc3N1ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5hZGRJc3N1ZSA9IChzdWIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNzdWVzID0gWy4uLnRoaXMuaXNzdWVzLCBzdWJdO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFkZElzc3VlcyA9IChzdWJzID0gW10pID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNzdWVzID0gWy4uLnRoaXMuaXNzdWVzLCAuLi5zdWJzXTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgYWN0dWFsUHJvdG8gPSBuZXcudGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGJhbi9iYW5cbiAgICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBhY3R1YWxQcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9fcHJvdG9fXyA9IGFjdHVhbFByb3RvO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSA9IFwiWm9kRXJyb3JcIjtcbiAgICAgICAgdGhpcy5pc3N1ZXMgPSBpc3N1ZXM7XG4gICAgfVxuICAgIGZvcm1hdChfbWFwcGVyKSB7XG4gICAgICAgIGNvbnN0IG1hcHBlciA9IF9tYXBwZXIgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChpc3N1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc3N1ZS5tZXNzYWdlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZmllbGRFcnJvcnMgPSB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgIGNvbnN0IHByb2Nlc3NFcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpc3N1ZSBvZiBlcnJvci5pc3N1ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX3VuaW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNzdWUudW5pb25FcnJvcnMubWFwKHByb2Nlc3NFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF9yZXR1cm5fdHlwZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NFcnJvcihpc3N1ZS5yZXR1cm5UeXBlRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfYXJndW1lbnRzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0Vycm9yKGlzc3VlLmFyZ3VtZW50c0Vycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUucGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRFcnJvcnMuX2Vycm9ycy5wdXNoKG1hcHBlcihpc3N1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnIgPSBmaWVsZEVycm9ycztcbiAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IGlzc3VlLnBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbCA9IGlzc3VlLnBhdGhbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXJtaW5hbCA9IGkgPT09IGlzc3VlLnBhdGgubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVybWluYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IHsgX2Vycm9yczogW10gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAodHlwZW9mIGVsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IHsgX2Vycm9yczogW10gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9IGVsc2UgaWYgKHR5cGVvZiBlbCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY29uc3QgZXJyb3JBcnJheTogYW55ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBlcnJvckFycmF5Ll9lcnJvcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGN1cnJbZWxdID0gY3VycltlbF0gfHwgZXJyb3JBcnJheTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IHsgX2Vycm9yczogW10gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyW2VsXS5fZXJyb3JzLnB1c2gobWFwcGVyKGlzc3VlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gY3VycltlbF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHByb2Nlc3NFcnJvcih0aGlzKTtcbiAgICAgICAgcmV0dXJuIGZpZWxkRXJyb3JzO1xuICAgIH1cbiAgICBzdGF0aWMgYXNzZXJ0KHZhbHVlKSB7XG4gICAgICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgWm9kRXJyb3IpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vdCBhIFpvZEVycm9yOiAke3ZhbHVlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICAgIH1cbiAgICBnZXQgbWVzc2FnZSgpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuaXNzdWVzLCB1dGlsLmpzb25TdHJpbmdpZnlSZXBsYWNlciwgMik7XG4gICAgfVxuICAgIGdldCBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc3N1ZXMubGVuZ3RoID09PSAwO1xuICAgIH1cbiAgICBmbGF0dGVuKG1hcHBlciA9IChpc3N1ZSkgPT4gaXNzdWUubWVzc2FnZSkge1xuICAgICAgICBjb25zdCBmaWVsZEVycm9ycyA9IHt9O1xuICAgICAgICBjb25zdCBmb3JtRXJyb3JzID0gW107XG4gICAgICAgIGZvciAoY29uc3Qgc3ViIG9mIHRoaXMuaXNzdWVzKSB7XG4gICAgICAgICAgICBpZiAoc3ViLnBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZpZWxkRXJyb3JzW3N1Yi5wYXRoWzBdXSA9IGZpZWxkRXJyb3JzW3N1Yi5wYXRoWzBdXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBmaWVsZEVycm9yc1tzdWIucGF0aFswXV0ucHVzaChtYXBwZXIoc3ViKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3JtRXJyb3JzLnB1c2gobWFwcGVyKHN1YikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGZvcm1FcnJvcnMsIGZpZWxkRXJyb3JzIH07XG4gICAgfVxuICAgIGdldCBmb3JtRXJyb3JzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mbGF0dGVuKCk7XG4gICAgfVxufVxuWm9kRXJyb3IuY3JlYXRlID0gKGlzc3VlcykgPT4ge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IFpvZEVycm9yKGlzc3Vlcyk7XG4gICAgcmV0dXJuIGVycm9yO1xufTtcbiIsImV4cG9ydCB2YXIgZXJyb3JVdGlsO1xuKGZ1bmN0aW9uIChlcnJvclV0aWwpIHtcbiAgICBlcnJvclV0aWwuZXJyVG9PYmogPSAobWVzc2FnZSkgPT4gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2UgfSA6IG1lc3NhZ2UgfHwge307XG4gICAgLy8gYmlvbWUtaWdub3JlIGxpbnQ6XG4gICAgZXJyb3JVdGlsLnRvU3RyaW5nID0gKG1lc3NhZ2UpID0+IHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiID8gbWVzc2FnZSA6IG1lc3NhZ2U/Lm1lc3NhZ2U7XG59KShlcnJvclV0aWwgfHwgKGVycm9yVXRpbCA9IHt9KSk7XG4iLCJpbXBvcnQgeyBab2RFcnJvciwgWm9kSXNzdWVDb2RlLCB9IGZyb20gXCIuL1pvZEVycm9yLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0RXJyb3JNYXAsIGdldEVycm9yTWFwIH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgeyBlcnJvclV0aWwgfSBmcm9tIFwiLi9oZWxwZXJzL2Vycm9yVXRpbC5qc1wiO1xuaW1wb3J0IHsgRElSVFksIElOVkFMSUQsIE9LLCBQYXJzZVN0YXR1cywgYWRkSXNzdWVUb0NvbnRleHQsIGlzQWJvcnRlZCwgaXNBc3luYywgaXNEaXJ0eSwgaXNWYWxpZCwgbWFrZUlzc3VlLCB9IGZyb20gXCIuL2hlbHBlcnMvcGFyc2VVdGlsLmpzXCI7XG5pbXBvcnQgeyB1dGlsLCBab2RQYXJzZWRUeXBlLCBnZXRQYXJzZWRUeXBlIH0gZnJvbSBcIi4vaGVscGVycy91dGlsLmpzXCI7XG5jbGFzcyBQYXJzZUlucHV0TGF6eVBhdGgge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgdmFsdWUsIHBhdGgsIGtleSkge1xuICAgICAgICB0aGlzLl9jYWNoZWRQYXRoID0gW107XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLmRhdGEgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fcGF0aCA9IHBhdGg7XG4gICAgICAgIHRoaXMuX2tleSA9IGtleTtcbiAgICB9XG4gICAgZ2V0IHBhdGgoKSB7XG4gICAgICAgIGlmICghdGhpcy5fY2FjaGVkUGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX2tleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRQYXRoLnB1c2goLi4udGhpcy5fcGF0aCwgLi4udGhpcy5fa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZFBhdGgucHVzaCguLi50aGlzLl9wYXRoLCB0aGlzLl9rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRQYXRoO1xuICAgIH1cbn1cbmNvbnN0IGhhbmRsZVJlc3VsdCA9IChjdHgsIHJlc3VsdCkgPT4ge1xuICAgIGlmIChpc1ZhbGlkKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogcmVzdWx0LnZhbHVlIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIWN0eC5jb21tb24uaXNzdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsaWRhdGlvbiBmYWlsZWQgYnV0IG5vIGlzc3VlcyBkZXRlY3RlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0IGVycm9yKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFpvZEVycm9yKGN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxufTtcbmZ1bmN0aW9uIHByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSB7XG4gICAgaWYgKCFwYXJhbXMpXG4gICAgICAgIHJldHVybiB7fTtcbiAgICBjb25zdCB7IGVycm9yTWFwLCBpbnZhbGlkX3R5cGVfZXJyb3IsIHJlcXVpcmVkX2Vycm9yLCBkZXNjcmlwdGlvbiB9ID0gcGFyYW1zO1xuICAgIGlmIChlcnJvck1hcCAmJiAoaW52YWxpZF90eXBlX2Vycm9yIHx8IHJlcXVpcmVkX2Vycm9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IHVzZSBcImludmFsaWRfdHlwZV9lcnJvclwiIG9yIFwicmVxdWlyZWRfZXJyb3JcIiBpbiBjb25qdW5jdGlvbiB3aXRoIGN1c3RvbSBlcnJvciBtYXAuYCk7XG4gICAgfVxuICAgIGlmIChlcnJvck1hcClcbiAgICAgICAgcmV0dXJuIHsgZXJyb3JNYXA6IGVycm9yTWFwLCBkZXNjcmlwdGlvbiB9O1xuICAgIGNvbnN0IGN1c3RvbU1hcCA9IChpc3MsIGN0eCkgPT4ge1xuICAgICAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IHBhcmFtcztcbiAgICAgICAgaWYgKGlzcy5jb2RlID09PSBcImludmFsaWRfZW51bV92YWx1ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBtZXNzYWdlID8/IGN0eC5kZWZhdWx0RXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGN0eC5kYXRhID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBtZXNzYWdlID8/IHJlcXVpcmVkX2Vycm9yID8/IGN0eC5kZWZhdWx0RXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNzLmNvZGUgIT09IFwiaW52YWxpZF90eXBlXCIpXG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBjdHguZGVmYXVsdEVycm9yIH07XG4gICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IG1lc3NhZ2UgPz8gaW52YWxpZF90eXBlX2Vycm9yID8/IGN0eC5kZWZhdWx0RXJyb3IgfTtcbiAgICB9O1xuICAgIHJldHVybiB7IGVycm9yTWFwOiBjdXN0b21NYXAsIGRlc2NyaXB0aW9uIH07XG59XG5leHBvcnQgY2xhc3MgWm9kVHlwZSB7XG4gICAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmRlc2NyaXB0aW9uO1xuICAgIH1cbiAgICBfZ2V0VHlwZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyc2VkVHlwZShpbnB1dC5kYXRhKTtcbiAgICB9XG4gICAgX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpIHtcbiAgICAgICAgcmV0dXJuIChjdHggfHwge1xuICAgICAgICAgICAgY29tbW9uOiBpbnB1dC5wYXJlbnQuY29tbW9uLFxuICAgICAgICAgICAgZGF0YTogaW5wdXQuZGF0YSxcbiAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoaW5wdXQuZGF0YSksXG4gICAgICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgICAgICAgcGF0aDogaW5wdXQucGF0aCxcbiAgICAgICAgICAgIHBhcmVudDogaW5wdXQucGFyZW50LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdHVzOiBuZXcgUGFyc2VTdGF0dXMoKSxcbiAgICAgICAgICAgIGN0eDoge1xuICAgICAgICAgICAgICAgIGNvbW1vbjogaW5wdXQucGFyZW50LmNvbW1vbixcbiAgICAgICAgICAgICAgICBkYXRhOiBpbnB1dC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoaW5wdXQuZGF0YSksXG4gICAgICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgICAgICBwYXRoOiBpbnB1dC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogaW5wdXQucGFyZW50LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX3BhcnNlU3luYyhpbnB1dCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZShpbnB1dCk7XG4gICAgICAgIGlmIChpc0FzeW5jKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5bmNocm9ub3VzIHBhcnNlIGVuY291bnRlcmVkIHByb21pc2UuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIF9wYXJzZUFzeW5jKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlKGlucHV0KTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgIH1cbiAgICBwYXJzZShkYXRhLCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5zYWZlUGFyc2UoZGF0YSwgcGFyYW1zKTtcbiAgICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xuICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgfVxuICAgIHNhZmVQYXJzZShkYXRhLCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgICAgICBhc3luYzogcGFyYW1zPy5hc3luYyA/PyBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb250ZXh0dWFsRXJyb3JNYXA6IHBhcmFtcz8uZXJyb3JNYXAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aDogcGFyYW1zPy5wYXRoIHx8IFtdLFxuICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGRhdGEpLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZVN5bmMoeyBkYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHggfSk7XG4gICAgICAgIHJldHVybiBoYW5kbGVSZXN1bHQoY3R4LCByZXN1bHQpO1xuICAgIH1cbiAgICBcIn52YWxpZGF0ZVwiKGRhdGEpIHtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgICAgICBhc3luYzogISF0aGlzW1wifnN0YW5kYXJkXCJdLmFzeW5jLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhdGg6IFtdLFxuICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGRhdGEpLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXRoaXNbXCJ+c3RhbmRhcmRcIl0uYXN5bmMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fcGFyc2VTeW5jKHsgZGF0YSwgcGF0aDogW10sIHBhcmVudDogY3R4IH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkKHJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWVzOiBjdHguY29tbW9uLmlzc3VlcyxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyPy5tZXNzYWdlPy50b0xvd2VyQ2FzZSgpPy5pbmNsdWRlcyhcImVuY291bnRlcmVkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbXCJ+c3RhbmRhcmRcIl0uYXN5bmMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdHguY29tbW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJzZUFzeW5jKHsgZGF0YSwgcGF0aDogW10sIHBhcmVudDogY3R4IH0pLnRoZW4oKHJlc3VsdCkgPT4gaXNWYWxpZChyZXN1bHQpXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBjdHguY29tbW9uLmlzc3VlcyxcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBwYXJzZUFzeW5jKGRhdGEsIHBhcmFtcykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNhZmVQYXJzZUFzeW5jKGRhdGEsIHBhcmFtcyk7XG4gICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcylcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgIH1cbiAgICBhc3luYyBzYWZlUGFyc2VBc3luYyhkYXRhLCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgICAgICBjb250ZXh0dWFsRXJyb3JNYXA6IHBhcmFtcz8uZXJyb3JNYXAsXG4gICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aDogcGFyYW1zPy5wYXRoIHx8IFtdLFxuICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGRhdGEpLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBtYXliZUFzeW5jUmVzdWx0ID0gdGhpcy5fcGFyc2UoeyBkYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHggfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IChpc0FzeW5jKG1heWJlQXN5bmNSZXN1bHQpID8gbWF5YmVBc3luY1Jlc3VsdCA6IFByb21pc2UucmVzb2x2ZShtYXliZUFzeW5jUmVzdWx0KSk7XG4gICAgICAgIHJldHVybiBoYW5kbGVSZXN1bHQoY3R4LCByZXN1bHQpO1xuICAgIH1cbiAgICByZWZpbmUoY2hlY2ssIG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgZ2V0SXNzdWVQcm9wZXJ0aWVzID0gKHZhbCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBtZXNzYWdlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbWVzc2FnZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZmluZW1lbnQoKHZhbCwgY3R4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjaGVjayh2YWwpO1xuICAgICAgICAgICAgY29uc3Qgc2V0RXJyb3IgPSAoKSA9PiBjdHguYWRkSXNzdWUoe1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5jdXN0b20sXG4gICAgICAgICAgICAgICAgLi4uZ2V0SXNzdWVQcm9wZXJ0aWVzKHZhbCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiByZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0RXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHNldEVycm9yKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWZpbmVtZW50KGNoZWNrLCByZWZpbmVtZW50RGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudCgodmFsLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmICghY2hlY2sodmFsKSkge1xuICAgICAgICAgICAgICAgIGN0eC5hZGRJc3N1ZSh0eXBlb2YgcmVmaW5lbWVudERhdGEgPT09IFwiZnVuY3Rpb25cIiA/IHJlZmluZW1lbnREYXRhKHZhbCwgY3R4KSA6IHJlZmluZW1lbnREYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9yZWZpbmVtZW50KHJlZmluZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcyxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0cyxcbiAgICAgICAgICAgIGVmZmVjdDogeyB0eXBlOiBcInJlZmluZW1lbnRcIiwgcmVmaW5lbWVudCB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3VwZXJSZWZpbmUocmVmaW5lbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudChyZWZpbmVtZW50KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZGVmKSB7XG4gICAgICAgIC8qKiBBbGlhcyBvZiBzYWZlUGFyc2VBc3luYyAqL1xuICAgICAgICB0aGlzLnNwYSA9IHRoaXMuc2FmZVBhcnNlQXN5bmM7XG4gICAgICAgIHRoaXMuX2RlZiA9IGRlZjtcbiAgICAgICAgdGhpcy5wYXJzZSA9IHRoaXMucGFyc2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zYWZlUGFyc2UgPSB0aGlzLnNhZmVQYXJzZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnBhcnNlQXN5bmMgPSB0aGlzLnBhcnNlQXN5bmMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zYWZlUGFyc2VBc3luYyA9IHRoaXMuc2FmZVBhcnNlQXN5bmMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zcGEgPSB0aGlzLnNwYS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnJlZmluZSA9IHRoaXMucmVmaW5lLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVmaW5lbWVudCA9IHRoaXMucmVmaW5lbWVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnN1cGVyUmVmaW5lID0gdGhpcy5zdXBlclJlZmluZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9wdGlvbmFsID0gdGhpcy5vcHRpb25hbC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm51bGxhYmxlID0gdGhpcy5udWxsYWJsZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm51bGxpc2ggPSB0aGlzLm51bGxpc2guYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5hcnJheSA9IHRoaXMuYXJyYXkuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gdGhpcy5wcm9taXNlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub3IgPSB0aGlzLm9yLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuYW5kID0gdGhpcy5hbmQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSB0aGlzLnRyYW5zZm9ybS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmJyYW5kID0gdGhpcy5icmFuZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmRlZmF1bHQgPSB0aGlzLmRlZmF1bHQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jYXRjaCA9IHRoaXMuY2F0Y2guYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZXNjcmliZSA9IHRoaXMuZGVzY3JpYmUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5waXBlID0gdGhpcy5waXBlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVhZG9ubHkgPSB0aGlzLnJlYWRvbmx5LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaXNOdWxsYWJsZSA9IHRoaXMuaXNOdWxsYWJsZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmlzT3B0aW9uYWwgPSB0aGlzLmlzT3B0aW9uYWwuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpc1tcIn5zdGFuZGFyZFwiXSA9IHtcbiAgICAgICAgICAgIHZlcnNpb246IDEsXG4gICAgICAgICAgICB2ZW5kb3I6IFwiem9kXCIsXG4gICAgICAgICAgICB2YWxpZGF0ZTogKGRhdGEpID0+IHRoaXNbXCJ+dmFsaWRhdGVcIl0oZGF0YSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIG9wdGlvbmFsKCkge1xuICAgICAgICByZXR1cm4gWm9kT3B0aW9uYWwuY3JlYXRlKHRoaXMsIHRoaXMuX2RlZik7XG4gICAgfVxuICAgIG51bGxhYmxlKCkge1xuICAgICAgICByZXR1cm4gWm9kTnVsbGFibGUuY3JlYXRlKHRoaXMsIHRoaXMuX2RlZik7XG4gICAgfVxuICAgIG51bGxpc2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm51bGxhYmxlKCkub3B0aW9uYWwoKTtcbiAgICB9XG4gICAgYXJyYXkoKSB7XG4gICAgICAgIHJldHVybiBab2RBcnJheS5jcmVhdGUodGhpcyk7XG4gICAgfVxuICAgIHByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiBab2RQcm9taXNlLmNyZWF0ZSh0aGlzLCB0aGlzLl9kZWYpO1xuICAgIH1cbiAgICBvcihvcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIFpvZFVuaW9uLmNyZWF0ZShbdGhpcywgb3B0aW9uXSwgdGhpcy5fZGVmKTtcbiAgICB9XG4gICAgYW5kKGluY29taW5nKSB7XG4gICAgICAgIHJldHVybiBab2RJbnRlcnNlY3Rpb24uY3JlYXRlKHRoaXMsIGluY29taW5nLCB0aGlzLl9kZWYpO1xuICAgIH1cbiAgICB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHRoaXMuX2RlZiksXG4gICAgICAgICAgICBzY2hlbWE6IHRoaXMsXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHMsXG4gICAgICAgICAgICBlZmZlY3Q6IHsgdHlwZTogXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkZWZhdWx0KGRlZikge1xuICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWVGdW5jID0gdHlwZW9mIGRlZiA9PT0gXCJmdW5jdGlvblwiID8gZGVmIDogKCkgPT4gZGVmO1xuICAgICAgICByZXR1cm4gbmV3IFpvZERlZmF1bHQoe1xuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlzLl9kZWYpLFxuICAgICAgICAgICAgaW5uZXJUeXBlOiB0aGlzLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWVGdW5jLFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REZWZhdWx0LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYnJhbmQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQnJhbmRlZCh7XG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEJyYW5kZWQsXG4gICAgICAgICAgICB0eXBlOiB0aGlzLFxuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlzLl9kZWYpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2goZGVmKSB7XG4gICAgICAgIGNvbnN0IGNhdGNoVmFsdWVGdW5jID0gdHlwZW9mIGRlZiA9PT0gXCJmdW5jdGlvblwiID8gZGVmIDogKCkgPT4gZGVmO1xuICAgICAgICByZXR1cm4gbmV3IFpvZENhdGNoKHtcbiAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcy5fZGVmKSxcbiAgICAgICAgICAgIGlubmVyVHlwZTogdGhpcyxcbiAgICAgICAgICAgIGNhdGNoVmFsdWU6IGNhdGNoVmFsdWVGdW5jLFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RDYXRjaCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRlc2NyaWJlKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIGNvbnN0IFRoaXMgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICByZXR1cm4gbmV3IFRoaXMoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwaXBlKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gWm9kUGlwZWxpbmUuY3JlYXRlKHRoaXMsIHRhcmdldCk7XG4gICAgfVxuICAgIHJlYWRvbmx5KCkge1xuICAgICAgICByZXR1cm4gWm9kUmVhZG9ubHkuY3JlYXRlKHRoaXMpO1xuICAgIH1cbiAgICBpc09wdGlvbmFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zYWZlUGFyc2UodW5kZWZpbmVkKS5zdWNjZXNzO1xuICAgIH1cbiAgICBpc051bGxhYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zYWZlUGFyc2UobnVsbCkuc3VjY2VzcztcbiAgICB9XG59XG5jb25zdCBjdWlkUmVnZXggPSAvXmNbXlxccy1dezgsfSQvaTtcbmNvbnN0IGN1aWQyUmVnZXggPSAvXlswLTlhLXpdKyQvO1xuY29uc3QgdWxpZFJlZ2V4ID0gL15bMC05QS1ISktNTlAtVFYtWl17MjZ9JC9pO1xuLy8gY29uc3QgdXVpZFJlZ2V4ID1cbi8vICAgL14oW2EtZjAtOV17OH0tW2EtZjAtOV17NH0tWzEtNV1bYS1mMC05XXszfS1bYS1mMC05XXs0fS1bYS1mMC05XXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTtcbmNvbnN0IHV1aWRSZWdleCA9IC9eWzAtOWEtZkEtRl17OH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17MTJ9JC9pO1xuY29uc3QgbmFub2lkUmVnZXggPSAvXlthLXowLTlfLV17MjF9JC9pO1xuY29uc3Qgand0UmVnZXggPSAvXltBLVphLXowLTktX10rXFwuW0EtWmEtejAtOS1fXStcXC5bQS1aYS16MC05LV9dKiQvO1xuY29uc3QgZHVyYXRpb25SZWdleCA9IC9eWy0rXT9QKD8hJCkoPzooPzpbLStdP1xcZCtZKXwoPzpbLStdP1xcZCtbLixdXFxkK1kkKSk/KD86KD86Wy0rXT9cXGQrTSl8KD86Wy0rXT9cXGQrWy4sXVxcZCtNJCkpPyg/Oig/OlstK10/XFxkK1cpfCg/OlstK10/XFxkK1suLF1cXGQrVyQpKT8oPzooPzpbLStdP1xcZCtEKXwoPzpbLStdP1xcZCtbLixdXFxkK0QkKSk/KD86VCg/PVtcXGQrLV0pKD86KD86Wy0rXT9cXGQrSCl8KD86Wy0rXT9cXGQrWy4sXVxcZCtIJCkpPyg/Oig/OlstK10/XFxkK00pfCg/OlstK10/XFxkK1suLF1cXGQrTSQpKT8oPzpbLStdP1xcZCsoPzpbLixdXFxkKyk/Uyk/KT8/JC87XG4vLyBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80NjE4MS8xNTUwMTU1XG4vLyBvbGQgdmVyc2lvbjogdG9vIHNsb3csIGRpZG4ndCBzdXBwb3J0IHVuaWNvZGVcbi8vIGNvbnN0IGVtYWlsUmVnZXggPSAvXigoKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSsoXFwuKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSspKil8KChcXHgyMikoKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPygoW1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4N2ZdfFxceDIxfFtcXHgyMy1cXHg1Yl18W1xceDVkLVxceDdlXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KFxcXFwoW1xceDAxLVxceDA5XFx4MGJcXHgwY1xceDBkLVxceDdmXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKSkqKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPyhcXHgyMikpKUAoKChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSkkL2k7XG4vL29sZCBlbWFpbCByZWdleFxuLy8gY29uc3QgZW1haWxSZWdleCA9IC9eKChbXjw+KClbXFxdLiw7Olxcc0BcIl0rKFxcLltePD4oKVtcXF0uLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoPyEtKShbXjw+KClbXFxdLiw7Olxcc0BcIl0rXFwuKStbXjw+KClbXFxdLiw7Olxcc0BcIl17MSx9KVteLTw+KClbXFxdLiw7Olxcc0BcIl0kL2k7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxuLy8gICAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFxcXCJdKyhcXC5bXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKSopfChcXFwiLitcXFwiKSlAKChcXFsoKCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXC4pezN9KCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXF0pfChcXFtJUHY2OigoW2EtZjAtOV17MSw0fTopezd9fDo6KFthLWYwLTldezEsNH06KXswLDZ9fChbYS1mMC05XXsxLDR9Oil7MX06KFthLWYwLTldezEsNH06KXswLDV9fChbYS1mMC05XXsxLDR9Oil7Mn06KFthLWYwLTldezEsNH06KXswLDR9fChbYS1mMC05XXsxLDR9Oil7M306KFthLWYwLTldezEsNH06KXswLDN9fChbYS1mMC05XXsxLDR9Oil7NH06KFthLWYwLTldezEsNH06KXswLDJ9fChbYS1mMC05XXsxLDR9Oil7NX06KFthLWYwLTldezEsNH06KXswLDF9KShbYS1mMC05XXsxLDR9fCgoKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKVxcLil7M30oKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKSlcXF0pfChbQS1aYS16MC05XShbQS1aYS16MC05LV0qW0EtWmEtejAtOV0pKihcXC5bQS1aYS16XXsyLH0pKykpJC87XG4vLyBjb25zdCBlbWFpbFJlZ2V4ID1cbi8vICAgL15bYS16QS1aMC05XFwuXFwhXFwjXFwkXFwlXFwmXFwnXFwqXFwrXFwvXFw9XFw/XFxeXFxfXFxgXFx7XFx8XFx9XFx+XFwtXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSokLztcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxuLy8gICAvXig/OlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSsoPzpcXC5bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKSp8XCIoPzpbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHgyMVxceDIzLVxceDViXFx4NWQtXFx4N2ZdfFxcXFxbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGUtXFx4N2ZdKSpcIilAKD86KD86W2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1xcLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP3xcXFsoPzooPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldP3xbYS16MC05LV0qW2EtejAtOV06KD86W1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4MjEtXFx4NWFcXHg1My1cXHg3Zl18XFxcXFtcXHgwMS1cXHgwOVxceDBiXFx4MGNcXHgwZS1cXHg3Zl0pKylcXF0pJC9pO1xuY29uc3QgZW1haWxSZWdleCA9IC9eKD8hXFwuKSg/IS4qXFwuXFwuKShbQS1aMC05XycrXFwtXFwuXSopW0EtWjAtOV8rLV1AKFtBLVowLTldW0EtWjAtOVxcLV0qXFwuKStbQS1aXXsyLH0kL2k7XG4vLyBjb25zdCBlbWFpbFJlZ2V4ID1cbi8vICAgL15bYS16MC05LiEjJCUm4oCZKisvPT9eX2B7fH1+LV0rQFthLXowLTktXSsoPzpcXC5bYS16MC05XFwtXSspKiQvaTtcbi8vIGZyb20gaHR0cHM6Ly90aGVrZXZpbnNjb3R0LmNvbS9lbW9qaXMtaW4tamF2YXNjcmlwdC8jd3JpdGluZy1hLXJlZ3VsYXItZXhwcmVzc2lvblxuY29uc3QgX2Vtb2ppUmVnZXggPSBgXihcXFxccHtFeHRlbmRlZF9QaWN0b2dyYXBoaWN9fFxcXFxwe0Vtb2ppX0NvbXBvbmVudH0pKyRgO1xubGV0IGVtb2ppUmVnZXg7XG4vLyBmYXN0ZXIsIHNpbXBsZXIsIHNhZmVyXG5jb25zdCBpcHY0UmVnZXggPSAvXig/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSlcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKSQvO1xuY29uc3QgaXB2NENpZHJSZWdleCA9IC9eKD86KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKVxcLil7M30oPzoyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldWzAtOV18WzAtOV0pXFwvKDNbMC0yXXxbMTJdP1swLTldKSQvO1xuLy8gY29uc3QgaXB2NlJlZ2V4ID1cbi8vIC9eKChbYS1mMC05XXsxLDR9Oil7N318OjooW2EtZjAtOV17MSw0fTopezAsNn18KFthLWYwLTldezEsNH06KXsxfTooW2EtZjAtOV17MSw0fTopezAsNX18KFthLWYwLTldezEsNH06KXsyfTooW2EtZjAtOV17MSw0fTopezAsNH18KFthLWYwLTldezEsNH06KXszfTooW2EtZjAtOV17MSw0fTopezAsM318KFthLWYwLTldezEsNH06KXs0fTooW2EtZjAtOV17MSw0fTopezAsMn18KFthLWYwLTldezEsNH06KXs1fTooW2EtZjAtOV17MSw0fTopezAsMX0pKFthLWYwLTldezEsNH18KCgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpXFwuKXszfSgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpKSQvO1xuY29uc3QgaXB2NlJlZ2V4ID0gL14oKFswLTlhLWZBLUZdezEsNH06KXs3LDd9WzAtOWEtZkEtRl17MSw0fXwoWzAtOWEtZkEtRl17MSw0fTopezEsN306fChbMC05YS1mQS1GXXsxLDR9Oil7MSw2fTpbMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw1fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwyfXwoWzAtOWEtZkEtRl17MSw0fTopezEsNH0oOlswLTlhLWZBLUZdezEsNH0pezEsM318KFswLTlhLWZBLUZdezEsNH06KXsxLDN9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSwyfSg6WzAtOWEtZkEtRl17MSw0fSl7MSw1fXxbMC05YS1mQS1GXXsxLDR9OigoOlswLTlhLWZBLUZdezEsNH0pezEsNn0pfDooKDpbMC05YS1mQS1GXXsxLDR9KXsxLDd9fDopfGZlODA6KDpbMC05YS1mQS1GXXswLDR9KXswLDR9JVswLTlhLXpBLVpdezEsfXw6OihmZmZmKDowezEsNH0pezAsMX06KXswLDF9KCgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSlcXC4pezMsM30oMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pfChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fTooKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSkpJC87XG5jb25zdCBpcHY2Q2lkclJlZ2V4ID0gL14oKFswLTlhLWZBLUZdezEsNH06KXs3LDd9WzAtOWEtZkEtRl17MSw0fXwoWzAtOWEtZkEtRl17MSw0fTopezEsN306fChbMC05YS1mQS1GXXsxLDR9Oil7MSw2fTpbMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw1fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwyfXwoWzAtOWEtZkEtRl17MSw0fTopezEsNH0oOlswLTlhLWZBLUZdezEsNH0pezEsM318KFswLTlhLWZBLUZdezEsNH06KXsxLDN9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSwyfSg6WzAtOWEtZkEtRl17MSw0fSl7MSw1fXxbMC05YS1mQS1GXXsxLDR9OigoOlswLTlhLWZBLUZdezEsNH0pezEsNn0pfDooKDpbMC05YS1mQS1GXXsxLDR9KXsxLDd9fDopfGZlODA6KDpbMC05YS1mQS1GXXswLDR9KXswLDR9JVswLTlhLXpBLVpdezEsfXw6OihmZmZmKDowezEsNH0pezAsMX06KXswLDF9KCgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSlcXC4pezMsM30oMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pfChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fTooKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSkpXFwvKDEyWzAtOF18MVswMV1bMC05XXxbMS05XT9bMC05XSkkLztcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzc4NjAzOTIvZGV0ZXJtaW5lLWlmLXN0cmluZy1pcy1pbi1iYXNlNjQtdXNpbmctamF2YXNjcmlwdFxuY29uc3QgYmFzZTY0UmVnZXggPSAvXihbMC05YS16QS1aKy9dezR9KSooKFswLTlhLXpBLVorL117Mn09PSl8KFswLTlhLXpBLVorL117M309KSk/JC87XG4vLyBodHRwczovL2Jhc2U2NC5ndXJ1L3N0YW5kYXJkcy9iYXNlNjR1cmxcbmNvbnN0IGJhc2U2NHVybFJlZ2V4ID0gL14oWzAtOWEtekEtWi1fXXs0fSkqKChbMC05YS16QS1aLV9dezJ9KD09KT8pfChbMC05YS16QS1aLV9dezN9KD0pPykpPyQvO1xuLy8gc2ltcGxlXG4vLyBjb25zdCBkYXRlUmVnZXhTb3VyY2UgPSBgXFxcXGR7NH0tXFxcXGR7Mn0tXFxcXGR7Mn1gO1xuLy8gbm8gbGVhcCB5ZWFyIHZhbGlkYXRpb25cbi8vIGNvbnN0IGRhdGVSZWdleFNvdXJjZSA9IGBcXFxcZHs0fS0oKDBbMTM1NzhdfDEwfDEyKS0zMXwoMFsxMy05XXwxWzAtMl0pLTMwfCgwWzEtOV18MVswLTJdKS0oMFsxLTldfDFcXFxcZHwyXFxcXGQpKWA7XG4vLyB3aXRoIGxlYXAgeWVhciB2YWxpZGF0aW9uXG5jb25zdCBkYXRlUmVnZXhTb3VyY2UgPSBgKChcXFxcZFxcXFxkWzI0NjhdWzA0OF18XFxcXGRcXFxcZFsxMzU3OV1bMjZdfFxcXFxkXFxcXGQwWzQ4XXxbMDI0NjhdWzA0OF0wMHxbMTM1NzldWzI2XTAwKS0wMi0yOXxcXFxcZHs0fS0oKDBbMTM1NzhdfDFbMDJdKS0oMFsxLTldfFsxMl1cXFxcZHwzWzAxXSl8KDBbNDY5XXwxMSktKDBbMS05XXxbMTJdXFxcXGR8MzApfCgwMiktKDBbMS05XXwxXFxcXGR8MlswLThdKSkpYDtcbmNvbnN0IGRhdGVSZWdleCA9IG5ldyBSZWdFeHAoYF4ke2RhdGVSZWdleFNvdXJjZX0kYCk7XG5mdW5jdGlvbiB0aW1lUmVnZXhTb3VyY2UoYXJncykge1xuICAgIGxldCBzZWNvbmRzUmVnZXhTb3VyY2UgPSBgWzAtNV1cXFxcZGA7XG4gICAgaWYgKGFyZ3MucHJlY2lzaW9uKSB7XG4gICAgICAgIHNlY29uZHNSZWdleFNvdXJjZSA9IGAke3NlY29uZHNSZWdleFNvdXJjZX1cXFxcLlxcXFxkeyR7YXJncy5wcmVjaXNpb259fWA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFyZ3MucHJlY2lzaW9uID09IG51bGwpIHtcbiAgICAgICAgc2Vjb25kc1JlZ2V4U291cmNlID0gYCR7c2Vjb25kc1JlZ2V4U291cmNlfShcXFxcLlxcXFxkKyk/YDtcbiAgICB9XG4gICAgY29uc3Qgc2Vjb25kc1F1YW50aWZpZXIgPSBhcmdzLnByZWNpc2lvbiA/IFwiK1wiIDogXCI/XCI7IC8vIHJlcXVpcmUgc2Vjb25kcyBpZiBwcmVjaXNpb24gaXMgbm9uemVyb1xuICAgIHJldHVybiBgKFswMV1cXFxcZHwyWzAtM10pOlswLTVdXFxcXGQoOiR7c2Vjb25kc1JlZ2V4U291cmNlfSkke3NlY29uZHNRdWFudGlmaWVyfWA7XG59XG5mdW5jdGlvbiB0aW1lUmVnZXgoYXJncykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKGBeJHt0aW1lUmVnZXhTb3VyY2UoYXJncyl9JGApO1xufVxuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zMTQzMjMxXG5leHBvcnQgZnVuY3Rpb24gZGF0ZXRpbWVSZWdleChhcmdzKSB7XG4gICAgbGV0IHJlZ2V4ID0gYCR7ZGF0ZVJlZ2V4U291cmNlfVQke3RpbWVSZWdleFNvdXJjZShhcmdzKX1gO1xuICAgIGNvbnN0IG9wdHMgPSBbXTtcbiAgICBvcHRzLnB1c2goYXJncy5sb2NhbCA/IGBaP2AgOiBgWmApO1xuICAgIGlmIChhcmdzLm9mZnNldClcbiAgICAgICAgb3B0cy5wdXNoKGAoWystXVxcXFxkezJ9Oj9cXFxcZHsyfSlgKTtcbiAgICByZWdleCA9IGAke3JlZ2V4fSgke29wdHMuam9pbihcInxcIil9KWA7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoYF4ke3JlZ2V4fSRgKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRJUChpcCwgdmVyc2lvbikge1xuICAgIGlmICgodmVyc2lvbiA9PT0gXCJ2NFwiIHx8ICF2ZXJzaW9uKSAmJiBpcHY0UmVnZXgudGVzdChpcCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICgodmVyc2lvbiA9PT0gXCJ2NlwiIHx8ICF2ZXJzaW9uKSAmJiBpcHY2UmVnZXgudGVzdChpcCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRKV1Qoand0LCBhbGcpIHtcbiAgICBpZiAoIWp3dFJlZ2V4LnRlc3Qoand0KSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IFtoZWFkZXJdID0gand0LnNwbGl0KFwiLlwiKTtcbiAgICAgICAgLy8gQ29udmVydCBiYXNlNjR1cmwgdG8gYmFzZTY0XG4gICAgICAgIGNvbnN0IGJhc2U2NCA9IGhlYWRlclxuICAgICAgICAgICAgLnJlcGxhY2UoLy0vZywgXCIrXCIpXG4gICAgICAgICAgICAucmVwbGFjZSgvXy9nLCBcIi9cIilcbiAgICAgICAgICAgIC5wYWRFbmQoaGVhZGVyLmxlbmd0aCArICgoNCAtIChoZWFkZXIubGVuZ3RoICUgNCkpICUgNCksIFwiPVwiKTtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IEpTT04ucGFyc2UoYXRvYihiYXNlNjQpKTtcbiAgICAgICAgaWYgKHR5cGVvZiBkZWNvZGVkICE9PSBcIm9iamVjdFwiIHx8IGRlY29kZWQgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChcInR5cFwiIGluIGRlY29kZWQgJiYgZGVjb2RlZD8udHlwICE9PSBcIkpXVFwiKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoIWRlY29kZWQuYWxnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoYWxnICYmIGRlY29kZWQuYWxnICE9PSBhbGcpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc1ZhbGlkQ2lkcihpcCwgdmVyc2lvbikge1xuICAgIGlmICgodmVyc2lvbiA9PT0gXCJ2NFwiIHx8ICF2ZXJzaW9uKSAmJiBpcHY0Q2lkclJlZ2V4LnRlc3QoaXApKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoKHZlcnNpb24gPT09IFwidjZcIiB8fCAhdmVyc2lvbikgJiYgaXB2NkNpZHJSZWdleC50ZXN0KGlwKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGNsYXNzIFpvZFN0cmluZyBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IFN0cmluZyhpbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnN0cmluZykge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5zdHJpbmcsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgbGV0IGN0eCA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA8IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA+IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibGVuZ3RoXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBpbnB1dC5kYXRhLmxlbmd0aCA+IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gaW5wdXQuZGF0YS5sZW5ndGggPCBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vQmlnIHx8IHRvb1NtYWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9vQmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZW1haWxcIikge1xuICAgICAgICAgICAgICAgIGlmICghZW1haWxSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiZW1haWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImVtb2ppXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVtb2ppUmVnZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZW1vamlSZWdleCA9IG5ldyBSZWdFeHAoX2Vtb2ppUmVnZXgsIFwidVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFlbW9qaVJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJlbW9qaVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidXVpZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1dWlkUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInV1aWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm5hbm9pZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFuYW5vaWRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwibmFub2lkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJjdWlkXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWN1aWRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiY3VpZDJcIikge1xuICAgICAgICAgICAgICAgIGlmICghY3VpZDJSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInVsaWRcIikge1xuICAgICAgICAgICAgICAgIGlmICghdWxpZFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ1bGlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ1cmxcIikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBVUkwoaW5wdXQuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ1cmxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInJlZ2V4XCIpIHtcbiAgICAgICAgICAgICAgICBjaGVjay5yZWdleC5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlc3RSZXN1bHQgPSBjaGVjay5yZWdleC50ZXN0KGlucHV0LmRhdGEpO1xuICAgICAgICAgICAgICAgIGlmICghdGVzdFJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInJlZ2V4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0cmltXCIpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5kYXRhID0gaW5wdXQuZGF0YS50cmltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImluY2x1ZGVzXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlucHV0LmRhdGEuaW5jbHVkZXMoY2hlY2sudmFsdWUsIGNoZWNrLnBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7IGluY2x1ZGVzOiBjaGVjay52YWx1ZSwgcG9zaXRpb246IGNoZWNrLnBvc2l0aW9uIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0b0xvd2VyQ2FzZVwiKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuZGF0YSA9IGlucHV0LmRhdGEudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidG9VcHBlckNhc2VcIikge1xuICAgICAgICAgICAgICAgIGlucHV0LmRhdGEgPSBpbnB1dC5kYXRhLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInN0YXJ0c1dpdGhcIikge1xuICAgICAgICAgICAgICAgIGlmICghaW5wdXQuZGF0YS5zdGFydHNXaXRoKGNoZWNrLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7IHN0YXJ0c1dpdGg6IGNoZWNrLnZhbHVlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJlbmRzV2l0aFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5kYXRhLmVuZHNXaXRoKGNoZWNrLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7IGVuZHNXaXRoOiBjaGVjay52YWx1ZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZGF0ZXRpbWVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gZGF0ZXRpbWVSZWdleChjaGVjayk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImRhdGVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gZGF0ZVJlZ2V4O1xuICAgICAgICAgICAgICAgIGlmICghcmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInRpbWVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gdGltZVJlZ2V4KGNoZWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ0aW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJkdXJhdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkdXJhdGlvblJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJkdXJhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiaXBcIikge1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZElQKGlucHV0LmRhdGEsIGNoZWNrLnZlcnNpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiaXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImp3dFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkSldUKGlucHV0LmRhdGEsIGNoZWNrLmFsZykpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJqd3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImNpZHJcIikge1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZENpZHIoaW5wdXQuZGF0YSwgY2hlY2sudmVyc2lvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJjaWRyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJiYXNlNjRcIikge1xuICAgICAgICAgICAgICAgIGlmICghYmFzZTY0UmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImJhc2U2NFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiYmFzZTY0dXJsXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWJhc2U2NHVybFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJiYXNlNjR1cmxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGNoZWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGlucHV0LmRhdGEgfTtcbiAgICB9XG4gICAgX3JlZ2V4KHJlZ2V4LCB2YWxpZGF0aW9uLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmluZW1lbnQoKGRhdGEpID0+IHJlZ2V4LnRlc3QoZGF0YSksIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb24sXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfYWRkQ2hlY2soY2hlY2spIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RTdHJpbmcoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZW1haWwobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImVtYWlsXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgdXJsKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJ1cmxcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBlbW9qaShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiZW1vamlcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICB1dWlkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJ1dWlkXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgbmFub2lkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJuYW5vaWRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBjdWlkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJjdWlkXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgY3VpZDIobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImN1aWQyXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgdWxpZChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwidWxpZFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIGJhc2U2NChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiYmFzZTY0XCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgYmFzZTY0dXJsKG1lc3NhZ2UpIHtcbiAgICAgICAgLy8gYmFzZTY0dXJsIGVuY29kaW5nIGlzIGEgbW9kaWZpY2F0aW9uIG9mIGJhc2U2NCB0aGF0IGNhbiBzYWZlbHkgYmUgdXNlZCBpbiBVUkxzIGFuZCBmaWxlbmFtZXNcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwiYmFzZTY0dXJsXCIsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBqd3Qob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImp3dFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucykgfSk7XG4gICAgfVxuICAgIGlwKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJpcFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucykgfSk7XG4gICAgfVxuICAgIGNpZHIob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImNpZHJcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnMpIH0pO1xuICAgIH1cbiAgICBkYXRldGltZShvcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgICAgICBraW5kOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICAgICAgcHJlY2lzaW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIG9mZnNldDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbG9jYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJkYXRldGltZVwiLFxuICAgICAgICAgICAgcHJlY2lzaW9uOiB0eXBlb2Ygb3B0aW9ucz8ucHJlY2lzaW9uID09PSBcInVuZGVmaW5lZFwiID8gbnVsbCA6IG9wdGlvbnM/LnByZWNpc2lvbixcbiAgICAgICAgICAgIG9mZnNldDogb3B0aW9ucz8ub2Zmc2V0ID8/IGZhbHNlLFxuICAgICAgICAgICAgbG9jYWw6IG9wdGlvbnM/LmxvY2FsID8/IGZhbHNlLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnM/Lm1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGF0ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiZGF0ZVwiLCBtZXNzYWdlIH0pO1xuICAgIH1cbiAgICB0aW1lKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAgICAgIGtpbmQ6IFwidGltZVwiLFxuICAgICAgICAgICAgICAgIHByZWNpc2lvbjogbnVsbCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBvcHRpb25zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwidGltZVwiLFxuICAgICAgICAgICAgcHJlY2lzaW9uOiB0eXBlb2Ygb3B0aW9ucz8ucHJlY2lzaW9uID09PSBcInVuZGVmaW5lZFwiID8gbnVsbCA6IG9wdGlvbnM/LnByZWNpc2lvbixcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zPy5tZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGR1cmF0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJkdXJhdGlvblwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIHJlZ2V4KHJlZ2V4LCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcInJlZ2V4XCIsXG4gICAgICAgICAgICByZWdleDogcmVnZXgsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbmNsdWRlcyh2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJpbmNsdWRlc1wiLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgcG9zaXRpb246IG9wdGlvbnM/LnBvc2l0aW9uLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnM/Lm1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhcnRzV2l0aCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJzdGFydHNXaXRoXCIsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbmRzV2l0aCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJlbmRzV2l0aFwiLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWluKG1pbkxlbmd0aCwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiBtaW5MZW5ndGgsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXgobWF4TGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IG1heExlbmd0aCxcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxlbmd0aChsZW4sIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibGVuZ3RoXCIsXG4gICAgICAgICAgICB2YWx1ZTogbGVuLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBgLm1pbigxKWBcbiAgICAgKi9cbiAgICBub25lbXB0eShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbigxLCBlcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkpO1xuICAgIH1cbiAgICB0cmltKCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCB7IGtpbmQ6IFwidHJpbVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9Mb3dlckNhc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU3RyaW5nKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIHsga2luZDogXCJ0b0xvd2VyQ2FzZVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9VcHBlckNhc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU3RyaW5nKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIHsga2luZDogXCJ0b1VwcGVyQ2FzZVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGlzRGF0ZXRpbWUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZGF0ZXRpbWVcIik7XG4gICAgfVxuICAgIGdldCBpc0RhdGUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZGF0ZVwiKTtcbiAgICB9XG4gICAgZ2V0IGlzVGltZSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ0aW1lXCIpO1xuICAgIH1cbiAgICBnZXQgaXNEdXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJkdXJhdGlvblwiKTtcbiAgICB9XG4gICAgZ2V0IGlzRW1haWwoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZW1haWxcIik7XG4gICAgfVxuICAgIGdldCBpc1VSTCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ1cmxcIik7XG4gICAgfVxuICAgIGdldCBpc0Vtb2ppKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImVtb2ppXCIpO1xuICAgIH1cbiAgICBnZXQgaXNVVUlEKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcInV1aWRcIik7XG4gICAgfVxuICAgIGdldCBpc05BTk9JRCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJuYW5vaWRcIik7XG4gICAgfVxuICAgIGdldCBpc0NVSUQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY3VpZFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQ1VJRDIoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY3VpZDJcIik7XG4gICAgfVxuICAgIGdldCBpc1VMSUQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwidWxpZFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzSVAoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiaXBcIik7XG4gICAgfVxuICAgIGdldCBpc0NJRFIoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY2lkclwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQmFzZTY0KCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImJhc2U2NFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQmFzZTY0dXJsKCkge1xuICAgICAgICAvLyBiYXNlNjR1cmwgZW5jb2RpbmcgaXMgYSBtb2RpZmljYXRpb24gb2YgYmFzZTY0IHRoYXQgY2FuIHNhZmVseSBiZSB1c2VkIGluIFVSTHMgYW5kIGZpbGVuYW1lc1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImJhc2U2NHVybFwiKTtcbiAgICB9XG4gICAgZ2V0IG1pbkxlbmd0aCgpIHtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBnZXQgbWF4TGVuZ3RoKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxufVxuWm9kU3RyaW5nLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XG4gICAgICAgIGNoZWNrczogW10sXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kU3RyaW5nLFxuICAgICAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlID8/IGZhbHNlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzk2NjQ4NC93aHktZG9lcy1tb2R1bHVzLW9wZXJhdG9yLXJldHVybi1mcmFjdGlvbmFsLW51bWJlci1pbi1qYXZhc2NyaXB0LzMxNzExMDM0IzMxNzExMDM0XG5mdW5jdGlvbiBmbG9hdFNhZmVSZW1haW5kZXIodmFsLCBzdGVwKSB7XG4gICAgY29uc3QgdmFsRGVjQ291bnQgPSAodmFsLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aDtcbiAgICBjb25zdCBzdGVwRGVjQ291bnQgPSAoc3RlcC50b1N0cmluZygpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGg7XG4gICAgY29uc3QgZGVjQ291bnQgPSB2YWxEZWNDb3VudCA+IHN0ZXBEZWNDb3VudCA/IHZhbERlY0NvdW50IDogc3RlcERlY0NvdW50O1xuICAgIGNvbnN0IHZhbEludCA9IE51bWJlci5wYXJzZUludCh2YWwudG9GaXhlZChkZWNDb3VudCkucmVwbGFjZShcIi5cIiwgXCJcIikpO1xuICAgIGNvbnN0IHN0ZXBJbnQgPSBOdW1iZXIucGFyc2VJbnQoc3RlcC50b0ZpeGVkKGRlY0NvdW50KS5yZXBsYWNlKFwiLlwiLCBcIlwiKSk7XG4gICAgcmV0dXJuICh2YWxJbnQgJSBzdGVwSW50KSAvIDEwICoqIGRlY0NvdW50O1xufVxuZXhwb3J0IGNsYXNzIFpvZE51bWJlciBleHRlbmRzIFpvZFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm1pbiA9IHRoaXMuZ3RlO1xuICAgICAgICB0aGlzLm1heCA9IHRoaXMubHRlO1xuICAgICAgICB0aGlzLnN0ZXAgPSB0aGlzLm11bHRpcGxlT2Y7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IE51bWJlcihpbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm51bWJlcikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5udW1iZXIsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3R4ID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJpbnRcIikge1xuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0ludGVnZXIoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBcImZsb2F0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlID8gaW5wdXQuZGF0YSA8IGNoZWNrLnZhbHVlIDogaW5wdXQuZGF0YSA8PSBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBjaGVjay5pbmNsdXNpdmUgPyBpbnB1dC5kYXRhID4gY2hlY2sudmFsdWUgOiBpbnB1dC5kYXRhID49IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIGlmIChmbG9hdFNhZmVSZW1haW5kZXIoaW5wdXQuZGF0YSwgY2hlY2sudmFsdWUpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5ub3RfbXVsdGlwbGVfb2YsXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZU9mOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImZpbml0ZVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLm5vdF9maW5pdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhIH07XG4gICAgfVxuICAgIGd0ZSh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgZ3QodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtaW5cIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBsdGUodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIHRydWUsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gICAgfVxuICAgIGx0KHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWF4XCIsIHZhbHVlLCBmYWxzZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgc2V0TGltaXQoa2luZCwgdmFsdWUsIGluY2x1c2l2ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZE51bWJlcih7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFtcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9kZWYuY2hlY2tzLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2luZCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2FkZENoZWNrKGNoZWNrKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIGNoZWNrXSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGludChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImludFwiLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5lZ2F0aXZlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25wb3NpdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25uZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtdWx0aXBsZU9mKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm11bHRpcGxlT2ZcIixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZpbml0ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImZpbml0ZVwiLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2FmZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KS5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBtaW5WYWx1ZSgpIHtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBnZXQgbWF4VmFsdWUoKSB7XG4gICAgICAgIGxldCBtYXggPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gICAgZ2V0IGlzSW50KCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImludFwiIHx8IChjaC5raW5kID09PSBcIm11bHRpcGxlT2ZcIiAmJiB1dGlsLmlzSW50ZWdlcihjaC52YWx1ZSkpKTtcbiAgICB9XG4gICAgZ2V0IGlzRmluaXRlKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwiZmluaXRlXCIgfHwgY2gua2luZCA9PT0gXCJpbnRcIiB8fCBjaC5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2gua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOdW1iZXIuaXNGaW5pdGUobWluKSAmJiBOdW1iZXIuaXNGaW5pdGUobWF4KTtcbiAgICB9XG59XG5ab2ROdW1iZXIuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcbiAgICAgICAgY2hlY2tzOiBbXSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdW1iZXIsXG4gICAgICAgIGNvZXJjZTogcGFyYW1zPy5jb2VyY2UgfHwgZmFsc2UsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kQmlnSW50IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubWluID0gdGhpcy5ndGU7XG4gICAgICAgIHRoaXMubWF4ID0gdGhpcy5sdGU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpbnB1dC5kYXRhID0gQmlnSW50KGlucHV0LmRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRJbnZhbGlkSW5wdXQoaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYmlnaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SW52YWxpZElucHV0KGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3R4ID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlID8gaW5wdXQuZGF0YSA8IGNoZWNrLnZhbHVlIDogaW5wdXQuZGF0YSA8PSBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYmlnaW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBjaGVjay5pbmNsdXNpdmUgPyBpbnB1dC5kYXRhID4gY2hlY2sudmFsdWUgOiBpbnB1dC5kYXRhID49IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJpZ2ludFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhICUgY2hlY2sudmFsdWUgIT09IEJpZ0ludCgwKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUubm90X211bHRpcGxlX29mLFxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGVPZjogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhIH07XG4gICAgfVxuICAgIF9nZXRJbnZhbGlkSW5wdXQoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5iaWdpbnQsXG4gICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgZ3RlKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWluXCIsIHZhbHVlLCB0cnVlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBndCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgZmFsc2UsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gICAgfVxuICAgIGx0ZSh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1heFwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgbHQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBzZXRMaW1pdChraW5kLCB2YWx1ZSwgaW5jbHVzaXZlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQmlnSW50KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogW1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5jaGVja3MsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfYWRkQ2hlY2soY2hlY2spIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RCaWdJbnQoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbmVnYXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbm9ucG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25uZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgdmFsdWU6IEJpZ0ludCgwKSxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG11bHRpcGxlT2YodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibXVsdGlwbGVPZlwiLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgbWluVmFsdWUoKSB7XG4gICAgICAgIGxldCBtaW4gPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICAgICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICB9XG4gICAgZ2V0IG1heFZhbHVlKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxufVxuWm9kQmlnSW50LmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZEJpZ0ludCh7XG4gICAgICAgIGNoZWNrczogW10sXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQmlnSW50LFxuICAgICAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlID8/IGZhbHNlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEJvb2xlYW4gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5jb2VyY2UpIHtcbiAgICAgICAgICAgIGlucHV0LmRhdGEgPSBCb29sZWFuKGlucHV0LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYm9vbGVhbikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5ib29sZWFuLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZEJvb2xlYW4uY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kQm9vbGVhbih7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQm9vbGVhbixcbiAgICAgICAgY29lcmNlOiBwYXJhbXM/LmNvZXJjZSB8fCBmYWxzZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2REYXRlIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLl9kZWYuY29lcmNlKSB7XG4gICAgICAgICAgICBpbnB1dC5kYXRhID0gbmV3IERhdGUoaW5wdXQuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5kYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmRhdGUsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGlucHV0LmRhdGEuZ2V0VGltZSgpKSkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfZGF0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhdHVzID0gbmV3IFBhcnNlU3RhdHVzKCk7XG4gICAgICAgIGxldCBjdHggPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3QgY2hlY2sgb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoZWNrLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZGF0YS5nZXRUaW1lKCkgPCBjaGVjay52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmRhdGEuZ2V0VGltZSgpID4gY2hlY2sudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoY2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXM6IHN0YXR1cy52YWx1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZShpbnB1dC5kYXRhLmdldFRpbWUoKSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9hZGRDaGVjayhjaGVjaykge1xuICAgICAgICByZXR1cm4gbmV3IFpvZERhdGUoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWluKG1pbkRhdGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWluXCIsXG4gICAgICAgICAgICB2YWx1ZTogbWluRGF0ZS5nZXRUaW1lKCksXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXgobWF4RGF0ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBtYXhEYXRlLmdldFRpbWUoKSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBtaW5EYXRlKCkge1xuICAgICAgICBsZXQgbWluID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaW4gIT0gbnVsbCA/IG5ldyBEYXRlKG1pbikgOiBudWxsO1xuICAgIH1cbiAgICBnZXQgbWF4RGF0ZSgpIHtcbiAgICAgICAgbGV0IG1heCA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF4ID09PSBudWxsIHx8IGNoLnZhbHVlIDwgbWF4KVxuICAgICAgICAgICAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4ICE9IG51bGwgPyBuZXcgRGF0ZShtYXgpIDogbnVsbDtcbiAgICB9XG59XG5ab2REYXRlLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZERhdGUoe1xuICAgICAgICBjaGVja3M6IFtdLFxuICAgICAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlIHx8IGZhbHNlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERhdGUsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kU3ltYm9sIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuc3ltYm9sKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnN5bWJvbCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2RTeW1ib2wuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kU3ltYm9sKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTeW1ib2wsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kVW5kZWZpbmVkIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2RVbmRlZmluZWQuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVW5kZWZpbmVkKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmRlZmluZWQsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kTnVsbCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubnVsbCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2ROdWxsLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE51bGwoe1xuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bGwsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kQW55IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIC8vIHRvIHByZXZlbnQgaW5zdGFuY2VzIG9mIG90aGVyIGNsYXNzZXMgZnJvbSBleHRlbmRpbmcgWm9kQW55LiB0aGlzIGNhdXNlcyBpc3N1ZXMgd2l0aCBjYXRjaGFsbCBpbiBab2RPYmplY3QuXG4gICAgICAgIHRoaXMuX2FueSA9IHRydWU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxufVxuWm9kQW55LmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZEFueSh7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQW55LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZFVua25vd24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgLy8gcmVxdWlyZWRcbiAgICAgICAgdGhpcy5fdW5rbm93biA9IHRydWU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxufVxuWm9kVW5rbm93bi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RVbmtub3duKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmtub3duLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZE5ldmVyIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubmV2ZXIsXG4gICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG59XG5ab2ROZXZlci5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROZXZlcih7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmV2ZXIsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kVm9pZCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS52b2lkLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZFZvaWQuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVm9pZCh7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVm9pZCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RBcnJheSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCwgc3RhdHVzIH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBkZWYgPSB0aGlzLl9kZWY7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5hcnJheSkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5hcnJheSxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYuZXhhY3RMZW5ndGggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvb0JpZyA9IGN0eC5kYXRhLmxlbmd0aCA+IGRlZi5leGFjdExlbmd0aC52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY3R4LmRhdGEubGVuZ3RoIDwgZGVmLmV4YWN0TGVuZ3RoLnZhbHVlO1xuICAgICAgICAgICAgaWYgKHRvb0JpZyB8fCB0b29TbWFsbCkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiB0b29CaWcgPyBab2RJc3N1ZUNvZGUudG9vX2JpZyA6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgIG1pbmltdW06ICh0b29TbWFsbCA/IGRlZi5leGFjdExlbmd0aC52YWx1ZSA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgICAgIG1heGltdW06ICh0b29CaWcgPyBkZWYuZXhhY3RMZW5ndGgudmFsdWUgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZi5leGFjdExlbmd0aC5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYubWluTGVuZ3RoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoY3R4LmRhdGEubGVuZ3RoIDwgZGVmLm1pbkxlbmd0aC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBkZWYubWluTGVuZ3RoLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWluTGVuZ3RoLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZi5tYXhMZW5ndGggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdHguZGF0YS5sZW5ndGggPiBkZWYubWF4TGVuZ3RoLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBkZWYubWF4TGVuZ3RoLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWF4TGVuZ3RoLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbLi4uY3R4LmRhdGFdLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWYudHlwZS5fcGFyc2VBc3luYyhuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKTtcbiAgICAgICAgICAgIH0pKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBbLi4uY3R4LmRhdGFdLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRlZi50eXBlLl9wYXJzZVN5bmMobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGl0ZW0sIGN0eC5wYXRoLCBpKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdCk7XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGU7XG4gICAgfVxuICAgIG1pbihtaW5MZW5ndGgsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBtaW5MZW5ndGg6IHsgdmFsdWU6IG1pbkxlbmd0aCwgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXgobWF4TGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQXJyYXkoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgbWF4TGVuZ3RoOiB7IHZhbHVlOiBtYXhMZW5ndGgsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGVuZ3RoKGxlbiwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEFycmF5KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGV4YWN0TGVuZ3RoOiB7IHZhbHVlOiBsZW4sIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbm9uZW1wdHkobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5taW4oMSwgbWVzc2FnZSk7XG4gICAgfVxufVxuWm9kQXJyYXkuY3JlYXRlID0gKHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XG4gICAgICAgIHR5cGU6IHNjaGVtYSxcbiAgICAgICAgbWluTGVuZ3RoOiBudWxsLFxuICAgICAgICBtYXhMZW5ndGg6IG51bGwsXG4gICAgICAgIGV4YWN0TGVuZ3RoOiBudWxsLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEFycmF5LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZnVuY3Rpb24gZGVlcFBhcnRpYWxpZnkoc2NoZW1hKSB7XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZE9iamVjdCkge1xuICAgICAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzY2hlbWEuc2hhcGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkU2NoZW1hID0gc2NoZW1hLnNoYXBlW2tleV07XG4gICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gWm9kT3B0aW9uYWwuY3JlYXRlKGRlZXBQYXJ0aWFsaWZ5KGZpZWxkU2NoZW1hKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4uc2NoZW1hLl9kZWYsXG4gICAgICAgICAgICBzaGFwZTogKCkgPT4gbmV3U2hhcGUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RBcnJheSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEFycmF5KHtcbiAgICAgICAgICAgIC4uLnNjaGVtYS5fZGVmLFxuICAgICAgICAgICAgdHlwZTogZGVlcFBhcnRpYWxpZnkoc2NoZW1hLmVsZW1lbnQpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kT3B0aW9uYWwpIHtcbiAgICAgICAgcmV0dXJuIFpvZE9wdGlvbmFsLmNyZWF0ZShkZWVwUGFydGlhbGlmeShzY2hlbWEudW53cmFwKCkpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kTnVsbGFibGUpIHtcbiAgICAgICAgcmV0dXJuIFpvZE51bGxhYmxlLmNyZWF0ZShkZWVwUGFydGlhbGlmeShzY2hlbWEudW53cmFwKCkpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kVHVwbGUpIHtcbiAgICAgICAgcmV0dXJuIFpvZFR1cGxlLmNyZWF0ZShzY2hlbWEuaXRlbXMubWFwKChpdGVtKSA9PiBkZWVwUGFydGlhbGlmeShpdGVtKSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgWm9kT2JqZWN0IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX2NhY2hlZCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCBJbiBtb3N0IGNhc2VzLCB0aGlzIGlzIG5vIGxvbmdlciBuZWVkZWQgLSB1bmtub3duIHByb3BlcnRpZXMgYXJlIG5vdyBzaWxlbnRseSBzdHJpcHBlZC5cbiAgICAgICAgICogSWYgeW91IHdhbnQgdG8gcGFzcyB0aHJvdWdoIHVua25vd24gcHJvcGVydGllcywgdXNlIGAucGFzc3Rocm91Z2goKWAgaW5zdGVhZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubm9uc3RyaWN0ID0gdGhpcy5wYXNzdGhyb3VnaDtcbiAgICAgICAgLy8gZXh0ZW5kPFxuICAgICAgICAvLyAgIEF1Z21lbnRhdGlvbiBleHRlbmRzIFpvZFJhd1NoYXBlLFxuICAgICAgICAvLyAgIE5ld091dHB1dCBleHRlbmRzIHV0aWwuZmxhdHRlbjx7XG4gICAgICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBPdXRwdXRdOiBrIGV4dGVuZHMga2V5b2YgQXVnbWVudGF0aW9uXG4gICAgICAgIC8vICAgICAgID8gQXVnbWVudGF0aW9uW2tdW1wiX291dHB1dFwiXVxuICAgICAgICAvLyAgICAgICA6IGsgZXh0ZW5kcyBrZXlvZiBPdXRwdXRcbiAgICAgICAgLy8gICAgICAgPyBPdXRwdXRba11cbiAgICAgICAgLy8gICAgICAgOiBuZXZlcjtcbiAgICAgICAgLy8gICB9PixcbiAgICAgICAgLy8gICBOZXdJbnB1dCBleHRlbmRzIHV0aWwuZmxhdHRlbjx7XG4gICAgICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBJbnB1dF06IGsgZXh0ZW5kcyBrZXlvZiBBdWdtZW50YXRpb25cbiAgICAgICAgLy8gICAgICAgPyBBdWdtZW50YXRpb25ba11bXCJfaW5wdXRcIl1cbiAgICAgICAgLy8gICAgICAgOiBrIGV4dGVuZHMga2V5b2YgSW5wdXRcbiAgICAgICAgLy8gICAgICAgPyBJbnB1dFtrXVxuICAgICAgICAvLyAgICAgICA6IG5ldmVyO1xuICAgICAgICAvLyAgIH0+XG4gICAgICAgIC8vID4oXG4gICAgICAgIC8vICAgYXVnbWVudGF0aW9uOiBBdWdtZW50YXRpb25cbiAgICAgICAgLy8gKTogWm9kT2JqZWN0PFxuICAgICAgICAvLyAgIGV4dGVuZFNoYXBlPFQsIEF1Z21lbnRhdGlvbj4sXG4gICAgICAgIC8vICAgVW5rbm93bktleXMsXG4gICAgICAgIC8vICAgQ2F0Y2hhbGwsXG4gICAgICAgIC8vICAgTmV3T3V0cHV0LFxuICAgICAgICAvLyAgIE5ld0lucHV0XG4gICAgICAgIC8vID4ge1xuICAgICAgICAvLyAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgLy8gICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgLy8gICAgIHNoYXBlOiAoKSA9PiAoe1xuICAgICAgICAvLyAgICAgICAuLi50aGlzLl9kZWYuc2hhcGUoKSxcbiAgICAgICAgLy8gICAgICAgLi4uYXVnbWVudGF0aW9uLFxuICAgICAgICAvLyAgICAgfSksXG4gICAgICAgIC8vICAgfSkgYXMgYW55O1xuICAgICAgICAvLyB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCBVc2UgYC5leHRlbmRgIGluc3RlYWRcbiAgICAgICAgICogICovXG4gICAgICAgIHRoaXMuYXVnbWVudCA9IHRoaXMuZXh0ZW5kO1xuICAgIH1cbiAgICBfZ2V0Q2FjaGVkKCkge1xuICAgICAgICBpZiAodGhpcy5fY2FjaGVkICE9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZDtcbiAgICAgICAgY29uc3Qgc2hhcGUgPSB0aGlzLl9kZWYuc2hhcGUoKTtcbiAgICAgICAgY29uc3Qga2V5cyA9IHV0aWwub2JqZWN0S2V5cyhzaGFwZSk7XG4gICAgICAgIHRoaXMuX2NhY2hlZCA9IHsgc2hhcGUsIGtleXMgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZDtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUub2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm9iamVjdCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IHsgc2hhcGUsIGtleXM6IHNoYXBlS2V5cyB9ID0gdGhpcy5fZ2V0Q2FjaGVkKCk7XG4gICAgICAgIGNvbnN0IGV4dHJhS2V5cyA9IFtdO1xuICAgICAgICBpZiAoISh0aGlzLl9kZWYuY2F0Y2hhbGwgaW5zdGFuY2VvZiBab2ROZXZlciAmJiB0aGlzLl9kZWYudW5rbm93bktleXMgPT09IFwic3RyaXBcIikpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGN0eC5kYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzaGFwZUtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBleHRyYUtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWlycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBzaGFwZUtleXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleVZhbGlkYXRvciA9IHNoYXBlW2tleV07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN0eC5kYXRhW2tleV07XG4gICAgICAgICAgICBwYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBrZXk6IHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBrZXkgfSxcbiAgICAgICAgICAgICAgICB2YWx1ZToga2V5VmFsaWRhdG9yLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBrZXkpKSxcbiAgICAgICAgICAgICAgICBhbHdheXNTZXQ6IGtleSBpbiBjdHguZGF0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9kZWYuY2F0Y2hhbGwgaW5zdGFuY2VvZiBab2ROZXZlcikge1xuICAgICAgICAgICAgY29uc3QgdW5rbm93bktleXMgPSB0aGlzLl9kZWYudW5rbm93bktleXM7XG4gICAgICAgICAgICBpZiAodW5rbm93bktleXMgPT09IFwicGFzc3Rocm91Z2hcIikge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGV4dHJhS2V5cykge1xuICAgICAgICAgICAgICAgICAgICBwYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBjdHguZGF0YVtrZXldIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHVua25vd25LZXlzID09PSBcInN0cmljdFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4dHJhS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnVucmVjb2duaXplZF9rZXlzLFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5czogZXh0cmFLZXlzLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodW5rbm93bktleXMgPT09IFwic3RyaXBcIikge1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnRlcm5hbCBab2RPYmplY3QgZXJyb3I6IGludmFsaWQgdW5rbm93bktleXMgdmFsdWUuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBydW4gY2F0Y2hhbGwgdmFsaWRhdGlvblxuICAgICAgICAgICAgY29uc3QgY2F0Y2hhbGwgPSB0aGlzLl9kZWYuY2F0Y2hhbGw7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBleHRyYUtleXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN0eC5kYXRhW2tleV07XG4gICAgICAgICAgICAgICAgcGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGtleTogeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleSB9LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2F0Y2hhbGwuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCB2YWx1ZSwgY3R4LnBhdGgsIGtleSkgLy8sIGN0eC5jaGlsZChrZXkpLCB2YWx1ZSwgZ2V0UGFyc2VkVHlwZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgYWx3YXlzU2V0OiBrZXkgaW4gY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgIC50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzeW5jUGFpcnMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgcGFpci5rZXk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFpci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3luY1BhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHdheXNTZXQ6IHBhaXIuYWx3YXlzU2V0LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bmNQYWlycztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHN5bmNQYWlycykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBzeW5jUGFpcnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgcGFpcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBzaGFwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zaGFwZSgpO1xuICAgIH1cbiAgICBzdHJpY3QobWVzc2FnZSkge1xuICAgICAgICBlcnJvclV0aWwuZXJyVG9PYmo7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxuICAgICAgICAgICAgLi4uKG1lc3NhZ2UgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1hcDogKGlzc3VlLCBjdHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRFcnJvciA9IHRoaXMuX2RlZi5lcnJvck1hcD8uKGlzc3VlLCBjdHgpLm1lc3NhZ2UgPz8gY3R4LmRlZmF1bHRFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3N1ZS5jb2RlID09PSBcInVucmVjb2duaXplZF9rZXlzXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLm1lc3NhZ2UgPz8gZGVmYXVsdEVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZmF1bHRFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDoge30pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RyaXAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwYXNzdGhyb3VnaCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgdW5rbm93bktleXM6IFwicGFzc3Rocm91Z2hcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGNvbnN0IEF1Z21lbnRGYWN0b3J5ID1cbiAgICAvLyAgIDxEZWYgZXh0ZW5kcyBab2RPYmplY3REZWY+KGRlZjogRGVmKSA9PlxuICAgIC8vICAgPEF1Z21lbnRhdGlvbiBleHRlbmRzIFpvZFJhd1NoYXBlPihcbiAgICAvLyAgICAgYXVnbWVudGF0aW9uOiBBdWdtZW50YXRpb25cbiAgICAvLyAgICk6IFpvZE9iamVjdDxcbiAgICAvLyAgICAgZXh0ZW5kU2hhcGU8UmV0dXJuVHlwZTxEZWZbXCJzaGFwZVwiXT4sIEF1Z21lbnRhdGlvbj4sXG4gICAgLy8gICAgIERlZltcInVua25vd25LZXlzXCJdLFxuICAgIC8vICAgICBEZWZbXCJjYXRjaGFsbFwiXVxuICAgIC8vICAgPiA9PiB7XG4gICAgLy8gICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAvLyAgICAgICAuLi5kZWYsXG4gICAgLy8gICAgICAgc2hhcGU6ICgpID0+ICh7XG4gICAgLy8gICAgICAgICAuLi5kZWYuc2hhcGUoKSxcbiAgICAvLyAgICAgICAgIC4uLmF1Z21lbnRhdGlvbixcbiAgICAvLyAgICAgICB9KSxcbiAgICAvLyAgICAgfSkgYXMgYW55O1xuICAgIC8vICAgfTtcbiAgICBleHRlbmQoYXVnbWVudGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5zaGFwZSgpLFxuICAgICAgICAgICAgICAgIC4uLmF1Z21lbnRhdGlvbixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJpb3IgdG8gem9kQDEuMC4xMiB0aGVyZSB3YXMgYSBidWcgaW4gdGhlXG4gICAgICogaW5mZXJyZWQgdHlwZSBvZiBtZXJnZWQgb2JqZWN0cy4gUGxlYXNlXG4gICAgICogdXBncmFkZSBpZiB5b3UgYXJlIGV4cGVyaWVuY2luZyBpc3N1ZXMuXG4gICAgICovXG4gICAgbWVyZ2UobWVyZ2luZykge1xuICAgICAgICBjb25zdCBtZXJnZWQgPSBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gICAgICAgICAgICBjYXRjaGFsbDogbWVyZ2luZy5fZGVmLmNhdGNoYWxsLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5fZGVmLnNoYXBlKCksXG4gICAgICAgICAgICAgICAgLi4ubWVyZ2luZy5fZGVmLnNoYXBlKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICB9XG4gICAgLy8gbWVyZ2U8XG4gICAgLy8gICBJbmNvbWluZyBleHRlbmRzIEFueVpvZE9iamVjdCxcbiAgICAvLyAgIEF1Z21lbnRhdGlvbiBleHRlbmRzIEluY29taW5nW1wic2hhcGVcIl0sXG4gICAgLy8gICBOZXdPdXRwdXQgZXh0ZW5kcyB7XG4gICAgLy8gICAgIFtrIGluIGtleW9mIEF1Z21lbnRhdGlvbiB8IGtleW9mIE91dHB1dF06IGsgZXh0ZW5kcyBrZXlvZiBBdWdtZW50YXRpb25cbiAgICAvLyAgICAgICA/IEF1Z21lbnRhdGlvbltrXVtcIl9vdXRwdXRcIl1cbiAgICAvLyAgICAgICA6IGsgZXh0ZW5kcyBrZXlvZiBPdXRwdXRcbiAgICAvLyAgICAgICA/IE91dHB1dFtrXVxuICAgIC8vICAgICAgIDogbmV2ZXI7XG4gICAgLy8gICB9LFxuICAgIC8vICAgTmV3SW5wdXQgZXh0ZW5kcyB7XG4gICAgLy8gICAgIFtrIGluIGtleW9mIEF1Z21lbnRhdGlvbiB8IGtleW9mIElucHV0XTogayBleHRlbmRzIGtleW9mIEF1Z21lbnRhdGlvblxuICAgIC8vICAgICAgID8gQXVnbWVudGF0aW9uW2tdW1wiX2lucHV0XCJdXG4gICAgLy8gICAgICAgOiBrIGV4dGVuZHMga2V5b2YgSW5wdXRcbiAgICAvLyAgICAgICA/IElucHV0W2tdXG4gICAgLy8gICAgICAgOiBuZXZlcjtcbiAgICAvLyAgIH1cbiAgICAvLyA+KFxuICAgIC8vICAgbWVyZ2luZzogSW5jb21pbmdcbiAgICAvLyApOiBab2RPYmplY3Q8XG4gICAgLy8gICBleHRlbmRTaGFwZTxULCBSZXR1cm5UeXBlPEluY29taW5nW1wiX2RlZlwiXVtcInNoYXBlXCJdPj4sXG4gICAgLy8gICBJbmNvbWluZ1tcIl9kZWZcIl1bXCJ1bmtub3duS2V5c1wiXSxcbiAgICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcImNhdGNoYWxsXCJdLFxuICAgIC8vICAgTmV3T3V0cHV0LFxuICAgIC8vICAgTmV3SW5wdXRcbiAgICAvLyA+IHtcbiAgICAvLyAgIGNvbnN0IG1lcmdlZDogYW55ID0gbmV3IFpvZE9iamVjdCh7XG4gICAgLy8gICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gICAgLy8gICAgIGNhdGNoYWxsOiBtZXJnaW5nLl9kZWYuY2F0Y2hhbGwsXG4gICAgLy8gICAgIHNoYXBlOiAoKSA9PlxuICAgIC8vICAgICAgIG9iamVjdFV0aWwubWVyZ2VTaGFwZXModGhpcy5fZGVmLnNoYXBlKCksIG1lcmdpbmcuX2RlZi5zaGFwZSgpKSxcbiAgICAvLyAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgLy8gICB9KSBhcyBhbnk7XG4gICAgLy8gICByZXR1cm4gbWVyZ2VkO1xuICAgIC8vIH1cbiAgICBzZXRLZXkoa2V5LCBzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXVnbWVudCh7IFtrZXldOiBzY2hlbWEgfSk7XG4gICAgfVxuICAgIC8vIG1lcmdlPEluY29taW5nIGV4dGVuZHMgQW55Wm9kT2JqZWN0PihcbiAgICAvLyAgIG1lcmdpbmc6IEluY29taW5nXG4gICAgLy8gKTogLy9ab2RPYmplY3Q8VCAmIEluY29taW5nW1wiX3NoYXBlXCJdLCBVbmtub3duS2V5cywgQ2F0Y2hhbGw+ID0gKG1lcmdpbmcpID0+IHtcbiAgICAvLyBab2RPYmplY3Q8XG4gICAgLy8gICBleHRlbmRTaGFwZTxULCBSZXR1cm5UeXBlPEluY29taW5nW1wiX2RlZlwiXVtcInNoYXBlXCJdPj4sXG4gICAgLy8gICBJbmNvbWluZ1tcIl9kZWZcIl1bXCJ1bmtub3duS2V5c1wiXSxcbiAgICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcImNhdGNoYWxsXCJdXG4gICAgLy8gPiB7XG4gICAgLy8gICAvLyBjb25zdCBtZXJnZWRTaGFwZSA9IG9iamVjdFV0aWwubWVyZ2VTaGFwZXMoXG4gICAgLy8gICAvLyAgIHRoaXMuX2RlZi5zaGFwZSgpLFxuICAgIC8vICAgLy8gICBtZXJnaW5nLl9kZWYuc2hhcGUoKVxuICAgIC8vICAgLy8gKTtcbiAgICAvLyAgIGNvbnN0IG1lcmdlZDogYW55ID0gbmV3IFpvZE9iamVjdCh7XG4gICAgLy8gICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gICAgLy8gICAgIGNhdGNoYWxsOiBtZXJnaW5nLl9kZWYuY2F0Y2hhbGwsXG4gICAgLy8gICAgIHNoYXBlOiAoKSA9PlxuICAgIC8vICAgICAgIG9iamVjdFV0aWwubWVyZ2VTaGFwZXModGhpcy5fZGVmLnNoYXBlKCksIG1lcmdpbmcuX2RlZi5zaGFwZSgpKSxcbiAgICAvLyAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgLy8gICB9KSBhcyBhbnk7XG4gICAgLy8gICByZXR1cm4gbWVyZ2VkO1xuICAgIC8vIH1cbiAgICBjYXRjaGFsbChpbmRleCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjYXRjaGFsbDogaW5kZXgsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwaWNrKG1hc2spIHtcbiAgICAgICAgY29uc3Qgc2hhcGUgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdXRpbC5vYmplY3RLZXlzKG1hc2spKSB7XG4gICAgICAgICAgICBpZiAobWFza1trZXldICYmIHRoaXMuc2hhcGVba2V5XSkge1xuICAgICAgICAgICAgICAgIHNoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+IHNoYXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgb21pdChtYXNrKSB7XG4gICAgICAgIGNvbnN0IHNoYXBlID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHV0aWwub2JqZWN0S2V5cyh0aGlzLnNoYXBlKSkge1xuICAgICAgICAgICAgaWYgKCFtYXNrW2tleV0pIHtcbiAgICAgICAgICAgICAgICBzaGFwZVtrZXldID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBzaGFwZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgZGVlcFBhcnRpYWwoKSB7XG4gICAgICAgIHJldHVybiBkZWVwUGFydGlhbGlmeSh0aGlzKTtcbiAgICB9XG4gICAgcGFydGlhbChtYXNrKSB7XG4gICAgICAgIGNvbnN0IG5ld1NoYXBlID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHV0aWwub2JqZWN0S2V5cyh0aGlzLnNoYXBlKSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGRTY2hlbWEgPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICBpZiAobWFzayAmJiAhbWFza1trZXldKSB7XG4gICAgICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IGZpZWxkU2NoZW1hO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IGZpZWxkU2NoZW1hLm9wdGlvbmFsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+IG5ld1NoYXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVxdWlyZWQobWFzaykge1xuICAgICAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkpIHtcbiAgICAgICAgICAgIGlmIChtYXNrICYmICFtYXNrW2tleV0pIHtcbiAgICAgICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGRTY2hlbWEgPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICAgICAgbGV0IG5ld0ZpZWxkID0gZmllbGRTY2hlbWE7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG5ld0ZpZWxkIGluc3RhbmNlb2YgWm9kT3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RmllbGQgPSBuZXdGaWVsZC5fZGVmLmlubmVyVHlwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IG5ld0ZpZWxkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBuZXdTaGFwZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGtleW9mKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlWm9kRW51bSh1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkpO1xuICAgIH1cbn1cblpvZE9iamVjdC5jcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgc2hhcGU6ICgpID0+IHNoYXBlLFxuICAgICAgICB1bmtub3duS2V5czogXCJzdHJpcFwiLFxuICAgICAgICBjYXRjaGFsbDogWm9kTmV2ZXIuY3JlYXRlKCksXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuWm9kT2JqZWN0LnN0cmljdENyZWF0ZSA9IChzaGFwZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICBzaGFwZTogKCkgPT4gc2hhcGUsXG4gICAgICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxuICAgICAgICBjYXRjaGFsbDogWm9kTmV2ZXIuY3JlYXRlKCksXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuWm9kT2JqZWN0LmxhenljcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgc2hhcGUsXG4gICAgICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXG4gICAgICAgIGNhdGNoYWxsOiBab2ROZXZlci5jcmVhdGUoKSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kVW5pb24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9kZWYub3B0aW9ucztcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVzdWx0cyhyZXN1bHRzKSB7XG4gICAgICAgICAgICAvLyByZXR1cm4gZmlyc3QgaXNzdWUtZnJlZSB2YWxpZGF0aW9uIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQucmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgaXNzdWVzIGZyb20gZGlydHkgb3B0aW9uXG4gICAgICAgICAgICAgICAgICAgIGN0eC5jb21tb24uaXNzdWVzLnB1c2goLi4ucmVzdWx0LmN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmV0dXJuIGludmFsaWRcbiAgICAgICAgICAgIGNvbnN0IHVuaW9uRXJyb3JzID0gcmVzdWx0cy5tYXAoKHJlc3VsdCkgPT4gbmV3IFpvZEVycm9yKHJlc3VsdC5jdHguY29tbW9uLmlzc3VlcykpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb24sXG4gICAgICAgICAgICAgICAgdW5pb25FcnJvcnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwob3B0aW9ucy5tYXAoYXN5bmMgKG9wdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkQ3R4ID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5jdHgsXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uY3R4LmNvbW1vbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogYXdhaXQgb3B0aW9uLl9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGNoaWxkQ3R4LFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgY3R4OiBjaGlsZEN0eCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkpLnRoZW4oaGFuZGxlUmVzdWx0cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZGlydHkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBpc3N1ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZEN0eCA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY3R4LFxuICAgICAgICAgICAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmN0eC5jb21tb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBvcHRpb24uX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjaGlsZEN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIiAmJiAhZGlydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB7IHJlc3VsdCwgY3R4OiBjaGlsZEN0eCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRDdHguY29tbW9uLmlzc3Vlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNzdWVzLnB1c2goY2hpbGRDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRpcnR5KSB7XG4gICAgICAgICAgICAgICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaCguLi5kaXJ0eS5jdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpcnR5LnJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHVuaW9uRXJyb3JzID0gaXNzdWVzLm1hcCgoaXNzdWVzKSA9PiBuZXcgWm9kRXJyb3IoaXNzdWVzKSk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbixcbiAgICAgICAgICAgICAgICB1bmlvbkVycm9ycyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYub3B0aW9ucztcbiAgICB9XG59XG5ab2RVbmlvbi5jcmVhdGUgPSAodHlwZXMsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVW5pb24oe1xuICAgICAgICBvcHRpb25zOiB0eXBlcyxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmlvbixcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy9cbi8vLy8vLy8vLy8gICAgICBab2REaXNjcmltaW5hdGVkVW5pb24gICAgICAvLy8vLy8vLy8vXG4vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5jb25zdCBnZXREaXNjcmltaW5hdG9yID0gKHR5cGUpID0+IHtcbiAgICBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZExhenkpIHtcbiAgICAgICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS5zY2hlbWEpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kRWZmZWN0cykge1xuICAgICAgICByZXR1cm4gZ2V0RGlzY3JpbWluYXRvcih0eXBlLmlubmVyVHlwZSgpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZExpdGVyYWwpIHtcbiAgICAgICAgcmV0dXJuIFt0eXBlLnZhbHVlXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZEVudW0pIHtcbiAgICAgICAgcmV0dXJuIHR5cGUub3B0aW9ucztcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE5hdGl2ZUVudW0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGJhbi9iYW5cbiAgICAgICAgcmV0dXJuIHV0aWwub2JqZWN0VmFsdWVzKHR5cGUuZW51bSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2REZWZhdWx0KSB7XG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUuX2RlZi5pbm5lclR5cGUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kVW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBbdW5kZWZpbmVkXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtudWxsXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE9wdGlvbmFsKSB7XG4gICAgICAgIHJldHVybiBbdW5kZWZpbmVkLCAuLi5nZXREaXNjcmltaW5hdG9yKHR5cGUudW53cmFwKCkpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE51bGxhYmxlKSB7XG4gICAgICAgIHJldHVybiBbbnVsbCwgLi4uZ2V0RGlzY3JpbWluYXRvcih0eXBlLnVud3JhcCgpKV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RCcmFuZGVkKSB7XG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUudW53cmFwKCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kUmVhZG9ubHkpIHtcbiAgICAgICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS51bndyYXAoKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RDYXRjaCkge1xuICAgICAgICByZXR1cm4gZ2V0RGlzY3JpbWluYXRvcih0eXBlLl9kZWYuaW5uZXJUeXBlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59O1xuZXhwb3J0IGNsYXNzIFpvZERpc2NyaW1pbmF0ZWRVbmlvbiBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm9iamVjdCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5vYmplY3QsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXNjcmltaW5hdG9yID0gdGhpcy5kaXNjcmltaW5hdG9yO1xuICAgICAgICBjb25zdCBkaXNjcmltaW5hdG9yVmFsdWUgPSBjdHguZGF0YVtkaXNjcmltaW5hdG9yXTtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5vcHRpb25zTWFwLmdldChkaXNjcmltaW5hdG9yVmFsdWUpO1xuICAgICAgICBpZiAoIW9wdGlvbikge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvcixcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBBcnJheS5mcm9tKHRoaXMub3B0aW9uc01hcC5rZXlzKCkpLFxuICAgICAgICAgICAgICAgIHBhdGg6IFtkaXNjcmltaW5hdG9yXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb24uX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9uLl9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGRpc2NyaW1pbmF0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuZGlzY3JpbWluYXRvcjtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYub3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnNNYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYub3B0aW9uc01hcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBkaXNjcmltaW5hdGVkIHVuaW9uIHNjaGVtYS4gSXRzIGJlaGF2aW91ciBpcyB2ZXJ5IHNpbWlsYXIgdG8gdGhhdCBvZiB0aGUgbm9ybWFsIHoudW5pb24oKSBjb25zdHJ1Y3Rvci5cbiAgICAgKiBIb3dldmVyLCBpdCBvbmx5IGFsbG93cyBhIHVuaW9uIG9mIG9iamVjdHMsIGFsbCBvZiB3aGljaCBuZWVkIHRvIHNoYXJlIGEgZGlzY3JpbWluYXRvciBwcm9wZXJ0eS4gVGhpcyBwcm9wZXJ0eSBtdXN0XG4gICAgICogaGF2ZSBhIGRpZmZlcmVudCB2YWx1ZSBmb3IgZWFjaCBvYmplY3QgaW4gdGhlIHVuaW9uLlxuICAgICAqIEBwYXJhbSBkaXNjcmltaW5hdG9yIHRoZSBuYW1lIG9mIHRoZSBkaXNjcmltaW5hdG9yIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHR5cGVzIGFuIGFycmF5IG9mIG9iamVjdCBzY2hlbWFzXG4gICAgICogQHBhcmFtIHBhcmFtc1xuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGUoZGlzY3JpbWluYXRvciwgb3B0aW9ucywgcGFyYW1zKSB7XG4gICAgICAgIC8vIEdldCBhbGwgdGhlIHZhbGlkIGRpc2NyaW1pbmF0b3IgdmFsdWVzXG4gICAgICAgIGNvbnN0IG9wdGlvbnNNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIHRyeSB7XG4gICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBvcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBkaXNjcmltaW5hdG9yVmFsdWVzID0gZ2V0RGlzY3JpbWluYXRvcih0eXBlLnNoYXBlW2Rpc2NyaW1pbmF0b3JdKTtcbiAgICAgICAgICAgIGlmICghZGlzY3JpbWluYXRvclZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgZGlzY3JpbWluYXRvciB2YWx1ZSBmb3Iga2V5IFxcYCR7ZGlzY3JpbWluYXRvcn1cXGAgY291bGQgbm90IGJlIGV4dHJhY3RlZCBmcm9tIGFsbCBzY2hlbWEgb3B0aW9uc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBkaXNjcmltaW5hdG9yVmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNNYXAuaGFzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERpc2NyaW1pbmF0b3IgcHJvcGVydHkgJHtTdHJpbmcoZGlzY3JpbWluYXRvcil9IGhhcyBkdXBsaWNhdGUgdmFsdWUgJHtTdHJpbmcodmFsdWUpfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRpb25zTWFwLnNldCh2YWx1ZSwgdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2REaXNjcmltaW5hdGVkVW5pb24oe1xuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REaXNjcmltaW5hdGVkVW5pb24sXG4gICAgICAgICAgICBkaXNjcmltaW5hdG9yLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnNNYXAsXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1lcmdlVmFsdWVzKGEsIGIpIHtcbiAgICBjb25zdCBhVHlwZSA9IGdldFBhcnNlZFR5cGUoYSk7XG4gICAgY29uc3QgYlR5cGUgPSBnZXRQYXJzZWRUeXBlKGIpO1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBkYXRhOiBhIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGFUeXBlID09PSBab2RQYXJzZWRUeXBlLm9iamVjdCAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5vYmplY3QpIHtcbiAgICAgICAgY29uc3QgYktleXMgPSB1dGlsLm9iamVjdEtleXMoYik7XG4gICAgICAgIGNvbnN0IHNoYXJlZEtleXMgPSB1dGlsLm9iamVjdEtleXMoYSkuZmlsdGVyKChrZXkpID0+IGJLZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTEpO1xuICAgICAgICBjb25zdCBuZXdPYmogPSB7IC4uLmEsIC4uLmIgfTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2Ygc2hhcmVkS2V5cykge1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlcyhhW2tleV0sIGJba2V5XSk7XG4gICAgICAgICAgICBpZiAoIXNoYXJlZFZhbHVlLnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdPYmpba2V5XSA9IHNoYXJlZFZhbHVlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGRhdGE6IG5ld09iaiB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChhVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSkge1xuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdBcnJheSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1BID0gYVtpbmRleF07XG4gICAgICAgICAgICBjb25zdCBpdGVtQiA9IGJbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlcyhpdGVtQSwgaXRlbUIpO1xuICAgICAgICAgICAgaWYgKCFzaGFyZWRWYWx1ZS52YWxpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbGlkOiBmYWxzZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3QXJyYXkucHVzaChzaGFyZWRWYWx1ZS5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogbmV3QXJyYXkgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYVR5cGUgPT09IFpvZFBhcnNlZFR5cGUuZGF0ZSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5kYXRlICYmICthID09PSArYikge1xuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogYSB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFpvZEludGVyc2VjdGlvbiBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBoYW5kbGVQYXJzZWQgPSAocGFyc2VkTGVmdCwgcGFyc2VkUmlnaHQpID0+IHtcbiAgICAgICAgICAgIGlmIChpc0Fib3J0ZWQocGFyc2VkTGVmdCkgfHwgaXNBYm9ydGVkKHBhcnNlZFJpZ2h0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gbWVyZ2VWYWx1ZXMocGFyc2VkTGVmdC52YWx1ZSwgcGFyc2VkUmlnaHQudmFsdWUpO1xuICAgICAgICAgICAgaWYgKCFtZXJnZWQudmFsaWQpIHtcbiAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfaW50ZXJzZWN0aW9uX3R5cGVzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRGlydHkocGFyc2VkTGVmdCkgfHwgaXNEaXJ0eShwYXJzZWRSaWdodCkpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogbWVyZ2VkLmRhdGEgfTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmLmxlZnQuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHRoaXMuX2RlZi5yaWdodC5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdKS50aGVuKChbbGVmdCwgcmlnaHRdKSA9PiBoYW5kbGVQYXJzZWQobGVmdCwgcmlnaHQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVQYXJzZWQodGhpcy5fZGVmLmxlZnQuX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICB9KSwgdGhpcy5fZGVmLnJpZ2h0Ll9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuWm9kSW50ZXJzZWN0aW9uLmNyZWF0ZSA9IChsZWZ0LCByaWdodCwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RJbnRlcnNlY3Rpb24oe1xuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kSW50ZXJzZWN0aW9uLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuLy8gdHlwZSBab2RUdXBsZUl0ZW1zID0gW1pvZFR5cGVBbnksIC4uLlpvZFR5cGVBbnlbXV07XG5leHBvcnQgY2xhc3MgWm9kVHVwbGUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmFycmF5KSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmFycmF5LFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5kYXRhLmxlbmd0aCA8IHRoaXMuX2RlZi5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgbWluaW11bTogdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdCA9IHRoaXMuX2RlZi5yZXN0O1xuICAgICAgICBpZiAoIXJlc3QgJiYgY3R4LmRhdGEubGVuZ3RoID4gdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgbWF4aW11bTogdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbXMgPSBbLi4uY3R4LmRhdGFdXG4gICAgICAgICAgICAubWFwKChpdGVtLCBpdGVtSW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuX2RlZi5pdGVtc1tpdGVtSW5kZXhdIHx8IHRoaXMuX2RlZi5yZXN0O1xuICAgICAgICAgICAgaWYgKCFzY2hlbWEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGl0ZW1JbmRleCkpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbHRlcigoeCkgPT4gISF4KTsgLy8gZmlsdGVyIG51bGxzXG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoaXRlbXMpLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIGl0ZW1zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaXRlbXM7XG4gICAgfVxuICAgIHJlc3QocmVzdCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFR1cGxlKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHJlc3QsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblpvZFR1cGxlLmNyZWF0ZSA9IChzY2hlbWFzLCBwYXJhbXMpID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2NoZW1hcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhbiBhcnJheSBvZiBzY2hlbWFzIHRvIHoudHVwbGUoWyAuLi4gXSlcIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgWm9kVHVwbGUoe1xuICAgICAgICBpdGVtczogc2NoZW1hcyxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RUdXBsZSxcbiAgICAgICAgcmVzdDogbnVsbCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RSZWNvcmQgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBnZXQga2V5U2NoZW1hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgfVxuICAgIGdldCB2YWx1ZVNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUub2JqZWN0KSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm9iamVjdCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhaXJzID0gW107XG4gICAgICAgIGNvbnN0IGtleVR5cGUgPSB0aGlzLl9kZWYua2V5VHlwZTtcbiAgICAgICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY3R4LmRhdGEpIHtcbiAgICAgICAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIGtleToga2V5VHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGtleSwgY3R4LnBhdGgsIGtleSkpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBjdHguZGF0YVtrZXldLCBjdHgucGF0aCwga2V5KSksXG4gICAgICAgICAgICAgICAgYWx3YXlzU2V0OiBrZXkgaW4gY3R4LmRhdGEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0QXN5bmMoc3RhdHVzLCBwYWlycyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgcGFpcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZShmaXJzdCwgc2Vjb25kLCB0aGlyZCkge1xuICAgICAgICBpZiAoc2Vjb25kIGluc3RhbmNlb2YgWm9kVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RSZWNvcmQoe1xuICAgICAgICAgICAgICAgIGtleVR5cGU6IGZpcnN0LFxuICAgICAgICAgICAgICAgIHZhbHVlVHlwZTogc2Vjb25kLFxuICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUmVjb3JkLFxuICAgICAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcmQpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RSZWNvcmQoe1xuICAgICAgICAgICAga2V5VHlwZTogWm9kU3RyaW5nLmNyZWF0ZSgpLFxuICAgICAgICAgICAgdmFsdWVUeXBlOiBmaXJzdCxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUmVjb3JkLFxuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhzZWNvbmQpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgWm9kTWFwIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgZ2V0IGtleVNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5rZXlUeXBlO1xuICAgIH1cbiAgICBnZXQgdmFsdWVTY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVUeXBlO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm1hcCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5tYXAsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlUeXBlID0gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgICAgIGNvbnN0IHBhaXJzID0gWy4uLmN0eC5kYXRhLmVudHJpZXMoKV0ubWFwKChba2V5LCB2YWx1ZV0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtleToga2V5VHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGtleSwgY3R4LnBhdGgsIFtpbmRleCwgXCJrZXlcIl0pKSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBbaW5kZXgsIFwidmFsdWVcIl0pKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgY29uc3QgZmluYWxNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHBhaXIua2V5O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhaXIudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImFib3J0ZWRcIiB8fCB2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJkaXJ0eVwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbE1hcC5zZXQoa2V5LnZhbHVlLCB2YWx1ZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxNYXAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZmluYWxNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBwYWlyLmtleTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhaXIudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImRpcnR5XCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsTWFwLnNldChrZXkudmFsdWUsIHZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxNYXAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cblpvZE1hcC5jcmVhdGUgPSAoa2V5VHlwZSwgdmFsdWVUeXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE1hcCh7XG4gICAgICAgIHZhbHVlVHlwZSxcbiAgICAgICAga2V5VHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RNYXAsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kU2V0IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5zZXQpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuc2V0LFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVmID0gdGhpcy5fZGVmO1xuICAgICAgICBpZiAoZGVmLm1pblNpemUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdHguZGF0YS5zaXplIDwgZGVmLm1pblNpemUudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgbWluaW11bTogZGVmLm1pblNpemUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWluU2l6ZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYubWF4U2l6ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGN0eC5kYXRhLnNpemUgPiBkZWYubWF4U2l6ZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogZGVmLm1heFNpemUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWF4U2l6ZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgICAgIGZ1bmN0aW9uIGZpbmFsaXplU2V0KGVsZW1lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRTZXQgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgcGFyc2VkU2V0LmFkZChlbGVtZW50LnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogcGFyc2VkU2V0IH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBbLi4uY3R4LmRhdGEudmFsdWVzKCldLm1hcCgoaXRlbSwgaSkgPT4gdmFsdWVUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKSk7XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZWxlbWVudHMpLnRoZW4oKGVsZW1lbnRzKSA9PiBmaW5hbGl6ZVNldChlbGVtZW50cykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZpbmFsaXplU2V0KGVsZW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtaW4obWluU2l6ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFNldCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBtaW5TaXplOiB7IHZhbHVlOiBtaW5TaXplLCBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG1heChtYXhTaXplLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU2V0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIG1heFNpemU6IHsgdmFsdWU6IG1heFNpemUsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2l6ZShzaXplLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbihzaXplLCBtZXNzYWdlKS5tYXgoc2l6ZSwgbWVzc2FnZSk7XG4gICAgfVxuICAgIG5vbmVtcHR5KG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluKDEsIG1lc3NhZ2UpO1xuICAgIH1cbn1cblpvZFNldC5jcmVhdGUgPSAodmFsdWVUeXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFNldCh7XG4gICAgICAgIHZhbHVlVHlwZSxcbiAgICAgICAgbWluU2l6ZTogbnVsbCxcbiAgICAgICAgbWF4U2l6ZTogbnVsbCxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTZXQsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kRnVuY3Rpb24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy52YWxpZGF0ZSA9IHRoaXMuaW1wbGVtZW50O1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5mdW5jdGlvbikge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5mdW5jdGlvbixcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1ha2VBcmdzSXNzdWUoYXJncywgZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBtYWtlSXNzdWUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGFyZ3MsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgZXJyb3JNYXBzOiBbY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAsIGN0eC5zY2hlbWFFcnJvck1hcCwgZ2V0RXJyb3JNYXAoKSwgZGVmYXVsdEVycm9yTWFwXS5maWx0ZXIoKHgpID0+ICEheCksXG4gICAgICAgICAgICAgICAgaXNzdWVEYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX2FyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzRXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYWtlUmV0dXJuc0lzc3VlKHJldHVybnMsIGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFrZUlzc3VlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiByZXR1cm5zLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIGVycm9yTWFwczogW2N0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLCBjdHguc2NoZW1hRXJyb3JNYXAsIGdldEVycm9yTWFwKCksIGRlZmF1bHRFcnJvck1hcF0uZmlsdGVyKCh4KSA9PiAhIXgpLFxuICAgICAgICAgICAgICAgIGlzc3VlRGF0YToge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9yZXR1cm5fdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZUVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyYW1zID0geyBlcnJvck1hcDogY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAgfTtcbiAgICAgICAgY29uc3QgZm4gPSBjdHguZGF0YTtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5yZXR1cm5zIGluc3RhbmNlb2YgWm9kUHJvbWlzZSkge1xuICAgICAgICAgICAgLy8gV291bGQgbG92ZSBhIHdheSB0byBhdm9pZCBkaXNhYmxpbmcgdGhpcyBydWxlLCBidXQgd2UgbmVlZFxuICAgICAgICAgICAgLy8gYW4gYWxpYXMgKHVzaW5nIGFuIGFycm93IGZ1bmN0aW9uIHdhcyB3aGF0IGNhdXNlZCAyNjUxKS5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuICAgICAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIE9LKGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IoW10pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFyZ3MgPSBhd2FpdCBtZS5fZGVmLmFyZ3MucGFyc2VBc3luYyhhcmdzLCBwYXJhbXMpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmFkZElzc3VlKG1ha2VBcmdzSXNzdWUoYXJncywgZSkpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBSZWZsZWN0LmFwcGx5KGZuLCB0aGlzLCBwYXJzZWRBcmdzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRSZXR1cm5zID0gYXdhaXQgbWUuX2RlZi5yZXR1cm5zLl9kZWYudHlwZVxuICAgICAgICAgICAgICAgICAgICAucGFyc2VBc3luYyhyZXN1bHQsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmFkZElzc3VlKG1ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBlKSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWRSZXR1cm5zO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBXb3VsZCBsb3ZlIGEgd2F5IHRvIGF2b2lkIGRpc2FibGluZyB0aGlzIHJ1bGUsIGJ1dCB3ZSBuZWVkXG4gICAgICAgICAgICAvLyBhbiBhbGlhcyAodXNpbmcgYW4gYXJyb3cgZnVuY3Rpb24gd2FzIHdoYXQgY2F1c2VkIDI2NTEpLlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgICAgICAgICBjb25zdCBtZSA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gT0soZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRBcmdzID0gbWUuX2RlZi5hcmdzLnNhZmVQYXJzZShhcmdzLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIGlmICghcGFyc2VkQXJncy5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBab2RFcnJvcihbbWFrZUFyZ3NJc3N1ZShhcmdzLCBwYXJzZWRBcmdzLmVycm9yKV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LmFwcGx5KGZuLCB0aGlzLCBwYXJzZWRBcmdzLmRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFJldHVybnMgPSBtZS5fZGVmLnJldHVybnMuc2FmZVBhcnNlKHJlc3VsdCwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICBpZiAoIXBhcnNlZFJldHVybnMuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgWm9kRXJyb3IoW21ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBwYXJzZWRSZXR1cm5zLmVycm9yKV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkUmV0dXJucy5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFyYW1ldGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5hcmdzO1xuICAgIH1cbiAgICByZXR1cm5UeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnJldHVybnM7XG4gICAgfVxuICAgIGFyZ3MoLi4uaXRlbXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbih7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBhcmdzOiBab2RUdXBsZS5jcmVhdGUoaXRlbXMpLnJlc3QoWm9kVW5rbm93bi5jcmVhdGUoKSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm5zKHJldHVyblR5cGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbih7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICByZXR1cm5zOiByZXR1cm5UeXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW1wbGVtZW50KGZ1bmMpIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdGVkRnVuYyA9IHRoaXMucGFyc2UoZnVuYyk7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZWRGdW5jO1xuICAgIH1cbiAgICBzdHJpY3RJbXBsZW1lbnQoZnVuYykge1xuICAgICAgICBjb25zdCB2YWxpZGF0ZWRGdW5jID0gdGhpcy5wYXJzZShmdW5jKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlZEZ1bmM7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGUoYXJncywgcmV0dXJucywgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kRnVuY3Rpb24oe1xuICAgICAgICAgICAgYXJnczogKGFyZ3MgPyBhcmdzIDogWm9kVHVwbGUuY3JlYXRlKFtdKS5yZXN0KFpvZFVua25vd24uY3JlYXRlKCkpKSxcbiAgICAgICAgICAgIHJldHVybnM6IHJldHVybnMgfHwgWm9kVW5rbm93bi5jcmVhdGUoKSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRnVuY3Rpb24sXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBab2RMYXp5IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgZ2V0IHNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5nZXR0ZXIoKTtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBsYXp5U2NoZW1hID0gdGhpcy5fZGVmLmdldHRlcigpO1xuICAgICAgICByZXR1cm4gbGF6eVNjaGVtYS5fcGFyc2UoeyBkYXRhOiBjdHguZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4IH0pO1xuICAgIH1cbn1cblpvZExhenkuY3JlYXRlID0gKGdldHRlciwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RMYXp5KHtcbiAgICAgICAgZ2V0dGVyOiBnZXR0ZXIsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTGF6eSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RMaXRlcmFsIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5kYXRhICE9PSB0aGlzLl9kZWYudmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9saXRlcmFsLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiB0aGlzLl9kZWYudmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogaW5wdXQuZGF0YSB9O1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWU7XG4gICAgfVxufVxuWm9kTGl0ZXJhbC5jcmVhdGUgPSAodmFsdWUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTGl0ZXJhbCh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RMaXRlcmFsLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZnVuY3Rpb24gY3JlYXRlWm9kRW51bSh2YWx1ZXMsIHBhcmFtcykge1xuICAgIHJldHVybiBuZXcgWm9kRW51bSh7XG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFbnVtLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59XG5leHBvcnQgY2xhc3MgWm9kRW51bSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0LmRhdGEgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdGhpcy5fZGVmLnZhbHVlcztcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiB1dGlsLmpvaW5WYWx1ZXMoZXhwZWN0ZWRWYWx1ZXMpLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2NhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZSA9IG5ldyBTZXQodGhpcy5fZGVmLnZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZS5oYXMoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdGhpcy5fZGVmLnZhbHVlcztcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV4cGVjdGVkVmFsdWVzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlcztcbiAgICB9XG4gICAgZ2V0IGVudW0oKSB7XG4gICAgICAgIGNvbnN0IGVudW1WYWx1ZXMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xuICAgICAgICAgICAgZW51bVZhbHVlc1t2YWxdID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnVtVmFsdWVzO1xuICAgIH1cbiAgICBnZXQgVmFsdWVzKCkge1xuICAgICAgICBjb25zdCBlbnVtVmFsdWVzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgdmFsIG9mIHRoaXMuX2RlZi52YWx1ZXMpIHtcbiAgICAgICAgICAgIGVudW1WYWx1ZXNbdmFsXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW51bVZhbHVlcztcbiAgICB9XG4gICAgZ2V0IEVudW0oKSB7XG4gICAgICAgIGNvbnN0IGVudW1WYWx1ZXMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xuICAgICAgICAgICAgZW51bVZhbHVlc1t2YWxdID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnVtVmFsdWVzO1xuICAgIH1cbiAgICBleHRyYWN0KHZhbHVlcywgbmV3RGVmID0gdGhpcy5fZGVmKSB7XG4gICAgICAgIHJldHVybiBab2RFbnVtLmNyZWF0ZSh2YWx1ZXMsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIC4uLm5ld0RlZixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGV4Y2x1ZGUodmFsdWVzLCBuZXdEZWYgPSB0aGlzLl9kZWYpIHtcbiAgICAgICAgcmV0dXJuIFpvZEVudW0uY3JlYXRlKHRoaXMub3B0aW9ucy5maWx0ZXIoKG9wdCkgPT4gIXZhbHVlcy5pbmNsdWRlcyhvcHQpKSwge1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgLi4ubmV3RGVmLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5ab2RFbnVtLmNyZWF0ZSA9IGNyZWF0ZVpvZEVudW07XG5leHBvcnQgY2xhc3MgWm9kTmF0aXZlRW51bSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBuYXRpdmVFbnVtVmFsdWVzID0gdXRpbC5nZXRWYWxpZEVudW1WYWx1ZXModGhpcy5fZGVmLnZhbHVlcyk7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnN0cmluZyAmJiBjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5udW1iZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdXRpbC5vYmplY3RWYWx1ZXMobmF0aXZlRW51bVZhbHVlcyk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogdXRpbC5qb2luVmFsdWVzKGV4cGVjdGVkVmFsdWVzKSxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZSkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGUgPSBuZXcgU2V0KHV0aWwuZ2V0VmFsaWRFbnVtVmFsdWVzKHRoaXMuX2RlZi52YWx1ZXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2NhY2hlLmhhcyhpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB1dGlsLm9iamVjdFZhbHVlcyhuYXRpdmVFbnVtVmFsdWVzKTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV4cGVjdGVkVmFsdWVzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxuICAgIGdldCBlbnVtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlcztcbiAgICB9XG59XG5ab2ROYXRpdmVFbnVtLmNyZWF0ZSA9ICh2YWx1ZXMsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTmF0aXZlRW51bSh7XG4gICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hdGl2ZUVudW0sXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kUHJvbWlzZSBleHRlbmRzIFpvZFR5cGUge1xuICAgIHVud3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi50eXBlO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5wcm9taXNlICYmIGN0eC5jb21tb24uYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnByb21pc2UsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm9taXNpZmllZCA9IGN0eC5wYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlLnByb21pc2UgPyBjdHguZGF0YSA6IFByb21pc2UucmVzb2x2ZShjdHguZGF0YSk7XG4gICAgICAgIHJldHVybiBPSyhwcm9taXNpZmllZC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGUucGFyc2VBc3luYyhkYXRhLCB7XG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgZXJyb3JNYXA6IGN0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5ab2RQcm9taXNlLmNyZWF0ZSA9IChzY2hlbWEsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kUHJvbWlzZSh7XG4gICAgICAgIHR5cGU6IHNjaGVtYSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RQcm9taXNlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEVmZmVjdHMgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBpbm5lclR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hO1xuICAgIH1cbiAgICBzb3VyY2VUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnNjaGVtYS5fZGVmLnR5cGVOYW1lID09PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0c1xuICAgICAgICAgICAgPyB0aGlzLl9kZWYuc2NoZW1hLnNvdXJjZVR5cGUoKVxuICAgICAgICAgICAgOiB0aGlzLl9kZWYuc2NoZW1hO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgY29uc3QgZWZmZWN0ID0gdGhpcy5fZGVmLmVmZmVjdCB8fCBudWxsO1xuICAgICAgICBjb25zdCBjaGVja0N0eCA9IHtcbiAgICAgICAgICAgIGFkZElzc3VlOiAoYXJnKSA9PiB7XG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCBhcmcpO1xuICAgICAgICAgICAgICAgIGlmIChhcmcuZmF0YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IHBhdGgoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eC5wYXRoO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY2hlY2tDdHguYWRkSXNzdWUgPSBjaGVja0N0eC5hZGRJc3N1ZS5iaW5kKGNoZWNrQ3R4KTtcbiAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBcInByZXByb2Nlc3NcIikge1xuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc2VkID0gZWZmZWN0LnRyYW5zZm9ybShjdHguZGF0YSwgY2hlY2tDdHgpO1xuICAgICAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHByb2Nlc3NlZCkudGhlbihhc3luYyAocHJvY2Vzc2VkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMudmFsdWUgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcHJvY2Vzc2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERJUlRZKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMudmFsdWUgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBESVJUWShyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHByb2Nlc3NlZCxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERJUlRZKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRElSVFkocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlZmZlY3QudHlwZSA9PT0gXCJyZWZpbmVtZW50XCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4ZWN1dGVSZWZpbmVtZW50ID0gKGFjYykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGVmZmVjdC5yZWZpbmVtZW50KGFjYywgY2hlY2tDdHgpO1xuICAgICAgICAgICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXN5bmMgcmVmaW5lbWVudCBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5uZXIgPSB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkXG4gICAgICAgICAgICAgICAgZXhlY3V0ZVJlZmluZW1lbnQoaW5uZXIudmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZUFzeW5jKHsgZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KS50aGVuKChpbm5lcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGVSZWZpbmVtZW50KGlubmVyLnZhbHVlKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWUgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlID0gdGhpcy5fZGVmLnNjaGVtYS5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQoYmFzZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGVmZmVjdC50cmFuc2Zvcm0oYmFzZS52YWx1ZSwgY2hlY2tDdHgpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQXN5bmNocm9ub3VzIHRyYW5zZm9ybSBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiByZXN1bHQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZUFzeW5jKHsgZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KS50aGVuKChiYXNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZChiYXNlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGVmZmVjdC50cmFuc2Zvcm0oYmFzZS52YWx1ZSwgY2hlY2tDdHgpKS50aGVuKChyZXN1bHQpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHN0YXR1cy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGVmZmVjdCk7XG4gICAgfVxufVxuWm9kRWZmZWN0cy5jcmVhdGUgPSAoc2NoZW1hLCBlZmZlY3QsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzLFxuICAgICAgICBlZmZlY3QsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5ab2RFZmZlY3RzLmNyZWF0ZVdpdGhQcmVwcm9jZXNzID0gKHByZXByb2Nlc3MsIHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBlZmZlY3Q6IHsgdHlwZTogXCJwcmVwcm9jZXNzXCIsIHRyYW5zZm9ybTogcHJlcHJvY2VzcyB9LFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHMsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgeyBab2RFZmZlY3RzIGFzIFpvZFRyYW5zZm9ybWVyIH07XG5leHBvcnQgY2xhc3MgWm9kT3B0aW9uYWwgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBPSyh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gICAgfVxuICAgIHVud3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gICAgfVxufVxuWm9kT3B0aW9uYWwuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT3B0aW9uYWwoe1xuICAgICAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT3B0aW9uYWwsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kTnVsbGFibGUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5udWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gT0sobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKGlucHV0KTtcbiAgICB9XG4gICAgdW53cmFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZTtcbiAgICB9XG59XG5ab2ROdWxsYWJsZS5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROdWxsYWJsZSh7XG4gICAgICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdWxsYWJsZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2REZWZhdWx0IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBsZXQgZGF0YSA9IGN0eC5kYXRhO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgPT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkYXRhID0gdGhpcy5fZGVmLmRlZmF1bHRWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZSh7XG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbW92ZURlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZERlZmF1bHQuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kRGVmYXVsdCh7XG4gICAgICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REZWZhdWx0LFxuICAgICAgICBkZWZhdWx0VmFsdWU6IHR5cGVvZiBwYXJhbXMuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiID8gcGFyYW1zLmRlZmF1bHQgOiAoKSA9PiBwYXJhbXMuZGVmYXVsdCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RDYXRjaCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgLy8gbmV3Q3R4IGlzIHVzZWQgdG8gbm90IGNvbGxlY3QgaXNzdWVzIGZyb20gaW5uZXIgdHlwZXMgaW4gY3R4XG4gICAgICAgIGNvbnN0IG5ld0N0eCA9IHtcbiAgICAgICAgICAgIC4uLmN0eCxcbiAgICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgICAgIC4uLmN0eC5jb21tb24sXG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKHtcbiAgICAgICAgICAgIGRhdGE6IG5ld0N0eC5kYXRhLFxuICAgICAgICAgICAgcGF0aDogbmV3Q3R4LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IHtcbiAgICAgICAgICAgICAgICAuLi5uZXdDdHgsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGlzQXN5bmMocmVzdWx0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IFwidmFsaWRcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdC5zdGF0dXMgPT09IFwidmFsaWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZXN1bHQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5fZGVmLmNhdGNoVmFsdWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBlcnJvcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RFcnJvcihuZXdDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogbmV3Q3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogXCJ2YWxpZFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQuc3RhdHVzID09PSBcInZhbGlkXCJcbiAgICAgICAgICAgICAgICAgICAgPyByZXN1bHQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9kZWYuY2F0Y2hWYWx1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQgZXJyb3IoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RFcnJvcihuZXdDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IG5ld0N0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlQ2F0Y2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZENhdGNoLmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZENhdGNoKHtcbiAgICAgICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZENhdGNoLFxuICAgICAgICBjYXRjaFZhbHVlOiB0eXBlb2YgcGFyYW1zLmNhdGNoID09PSBcImZ1bmN0aW9uXCIgPyBwYXJhbXMuY2F0Y2ggOiAoKSA9PiBwYXJhbXMuY2F0Y2gsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kTmFOIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubmFuKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm5hbixcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogaW5wdXQuZGF0YSB9O1xuICAgIH1cbn1cblpvZE5hTi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROYU4oe1xuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hTixcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjb25zdCBCUkFORCA9IFN5bWJvbChcInpvZF9icmFuZFwiKTtcbmV4cG9ydCBjbGFzcyBab2RCcmFuZGVkIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBkYXRhID0gY3R4LmRhdGE7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZS5fcGFyc2Uoe1xuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1bndyYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgWm9kUGlwZWxpbmUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZUFzeW5jID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluUmVzdWx0ID0gYXdhaXQgdGhpcy5fZGVmLmluLl9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRElSVFkoaW5SZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vdXQuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogaW5SZXN1bHQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUFzeW5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpblJlc3VsdCA9IHRoaXMuX2RlZi5pbi5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IFwiZGlydHlcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGluUmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmLm91dC5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogaW5SZXN1bHQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RQaXBlbGluZSh7XG4gICAgICAgICAgICBpbjogYSxcbiAgICAgICAgICAgIG91dDogYixcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUGlwZWxpbmUsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBab2RSZWFkb25seSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gICAgICAgIGNvbnN0IGZyZWV6ZSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZChkYXRhKSkge1xuICAgICAgICAgICAgICAgIGRhdGEudmFsdWUgPSBPYmplY3QuZnJlZXplKGRhdGEudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpc0FzeW5jKHJlc3VsdCkgPyByZXN1bHQudGhlbigoZGF0YSkgPT4gZnJlZXplKGRhdGEpKSA6IGZyZWV6ZShyZXN1bHQpO1xuICAgIH1cbiAgICB1bndyYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZFJlYWRvbmx5LmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFJlYWRvbmx5KHtcbiAgICAgICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFJlYWRvbmx5LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgIHouY3VzdG9tICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZnVuY3Rpb24gY2xlYW5QYXJhbXMocGFyYW1zLCBkYXRhKSB7XG4gICAgY29uc3QgcCA9IHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcyhkYXRhKSA6IHR5cGVvZiBwYXJhbXMgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2U6IHBhcmFtcyB9IDogcGFyYW1zO1xuICAgIGNvbnN0IHAyID0gdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2U6IHAgfSA6IHA7XG4gICAgcmV0dXJuIHAyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbShjaGVjaywgX3BhcmFtcyA9IHt9LCBcbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiBQYXNzIGBmYXRhbGAgaW50byB0aGUgcGFyYW1zIG9iamVjdCBpbnN0ZWFkOlxuICpcbiAqIGBgYHRzXG4gKiB6LnN0cmluZygpLmN1c3RvbSgodmFsKSA9PiB2YWwubGVuZ3RoID4gNSwgeyBmYXRhbDogZmFsc2UgfSlcbiAqIGBgYFxuICpcbiAqL1xuZmF0YWwpIHtcbiAgICBpZiAoY2hlY2spXG4gICAgICAgIHJldHVybiBab2RBbnkuY3JlYXRlKCkuc3VwZXJSZWZpbmUoKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgciA9IGNoZWNrKGRhdGEpO1xuICAgICAgICAgICAgaWYgKHIgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIudGhlbigocikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IGNsZWFuUGFyYW1zKF9wYXJhbXMsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgX2ZhdGFsID0gcGFyYW1zLmZhdGFsID8/IGZhdGFsID8/IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYWRkSXNzdWUoeyBjb2RlOiBcImN1c3RvbVwiLCAuLi5wYXJhbXMsIGZhdGFsOiBfZmF0YWwgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IGNsZWFuUGFyYW1zKF9wYXJhbXMsIGRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IF9mYXRhbCA9IHBhcmFtcy5mYXRhbCA/PyBmYXRhbCA/PyB0cnVlO1xuICAgICAgICAgICAgICAgIGN0eC5hZGRJc3N1ZSh7IGNvZGU6IFwiY3VzdG9tXCIsIC4uLnBhcmFtcywgZmF0YWw6IF9mYXRhbCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIFpvZEFueS5jcmVhdGUoKTtcbn1cbmV4cG9ydCB7IFpvZFR5cGUgYXMgU2NoZW1hLCBab2RUeXBlIGFzIFpvZFNjaGVtYSB9O1xuZXhwb3J0IGNvbnN0IGxhdGUgPSB7XG4gICAgb2JqZWN0OiBab2RPYmplY3QubGF6eWNyZWF0ZSxcbn07XG5leHBvcnQgdmFyIFpvZEZpcnN0UGFydHlUeXBlS2luZDtcbihmdW5jdGlvbiAoWm9kRmlyc3RQYXJ0eVR5cGVLaW5kKSB7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kU3RyaW5nXCJdID0gXCJab2RTdHJpbmdcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROdW1iZXJcIl0gPSBcIlpvZE51bWJlclwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE5hTlwiXSA9IFwiWm9kTmFOXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kQmlnSW50XCJdID0gXCJab2RCaWdJbnRcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RCb29sZWFuXCJdID0gXCJab2RCb29sZWFuXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRGF0ZVwiXSA9IFwiWm9kRGF0ZVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFN5bWJvbFwiXSA9IFwiWm9kU3ltYm9sXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVW5kZWZpbmVkXCJdID0gXCJab2RVbmRlZmluZWRcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROdWxsXCJdID0gXCJab2ROdWxsXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kQW55XCJdID0gXCJab2RBbnlcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RVbmtub3duXCJdID0gXCJab2RVbmtub3duXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTmV2ZXJcIl0gPSBcIlpvZE5ldmVyXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVm9pZFwiXSA9IFwiWm9kVm9pZFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEFycmF5XCJdID0gXCJab2RBcnJheVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE9iamVjdFwiXSA9IFwiWm9kT2JqZWN0XCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVW5pb25cIl0gPSBcIlpvZFVuaW9uXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRGlzY3JpbWluYXRlZFVuaW9uXCJdID0gXCJab2REaXNjcmltaW5hdGVkVW5pb25cIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RJbnRlcnNlY3Rpb25cIl0gPSBcIlpvZEludGVyc2VjdGlvblwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFR1cGxlXCJdID0gXCJab2RUdXBsZVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFJlY29yZFwiXSA9IFwiWm9kUmVjb3JkXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTWFwXCJdID0gXCJab2RNYXBcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RTZXRcIl0gPSBcIlpvZFNldFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEZ1bmN0aW9uXCJdID0gXCJab2RGdW5jdGlvblwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZExhenlcIl0gPSBcIlpvZExhenlcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RMaXRlcmFsXCJdID0gXCJab2RMaXRlcmFsXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRW51bVwiXSA9IFwiWm9kRW51bVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEVmZmVjdHNcIl0gPSBcIlpvZEVmZmVjdHNcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROYXRpdmVFbnVtXCJdID0gXCJab2ROYXRpdmVFbnVtXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kT3B0aW9uYWxcIl0gPSBcIlpvZE9wdGlvbmFsXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTnVsbGFibGVcIl0gPSBcIlpvZE51bGxhYmxlXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRGVmYXVsdFwiXSA9IFwiWm9kRGVmYXVsdFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZENhdGNoXCJdID0gXCJab2RDYXRjaFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFByb21pc2VcIl0gPSBcIlpvZFByb21pc2VcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RCcmFuZGVkXCJdID0gXCJab2RCcmFuZGVkXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kUGlwZWxpbmVcIl0gPSBcIlpvZFBpcGVsaW5lXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kUmVhZG9ubHlcIl0gPSBcIlpvZFJlYWRvbmx5XCI7XG59KShab2RGaXJzdFBhcnR5VHlwZUtpbmQgfHwgKFpvZEZpcnN0UGFydHlUeXBlS2luZCA9IHt9KSk7XG4vLyByZXF1aXJlcyBUUyA0LjQrXG5jbGFzcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoLi4uXykgeyB9XG59XG5jb25zdCBpbnN0YW5jZU9mVHlwZSA9IChcbi8vIGNvbnN0IGluc3RhbmNlT2ZUeXBlID0gPFQgZXh0ZW5kcyBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KFxuY2xzLCBwYXJhbXMgPSB7XG4gICAgbWVzc2FnZTogYElucHV0IG5vdCBpbnN0YW5jZSBvZiAke2Nscy5uYW1lfWAsXG59KSA9PiBjdXN0b20oKGRhdGEpID0+IGRhdGEgaW5zdGFuY2VvZiBjbHMsIHBhcmFtcyk7XG5jb25zdCBzdHJpbmdUeXBlID0gWm9kU3RyaW5nLmNyZWF0ZTtcbmNvbnN0IG51bWJlclR5cGUgPSBab2ROdW1iZXIuY3JlYXRlO1xuY29uc3QgbmFuVHlwZSA9IFpvZE5hTi5jcmVhdGU7XG5jb25zdCBiaWdJbnRUeXBlID0gWm9kQmlnSW50LmNyZWF0ZTtcbmNvbnN0IGJvb2xlYW5UeXBlID0gWm9kQm9vbGVhbi5jcmVhdGU7XG5jb25zdCBkYXRlVHlwZSA9IFpvZERhdGUuY3JlYXRlO1xuY29uc3Qgc3ltYm9sVHlwZSA9IFpvZFN5bWJvbC5jcmVhdGU7XG5jb25zdCB1bmRlZmluZWRUeXBlID0gWm9kVW5kZWZpbmVkLmNyZWF0ZTtcbmNvbnN0IG51bGxUeXBlID0gWm9kTnVsbC5jcmVhdGU7XG5jb25zdCBhbnlUeXBlID0gWm9kQW55LmNyZWF0ZTtcbmNvbnN0IHVua25vd25UeXBlID0gWm9kVW5rbm93bi5jcmVhdGU7XG5jb25zdCBuZXZlclR5cGUgPSBab2ROZXZlci5jcmVhdGU7XG5jb25zdCB2b2lkVHlwZSA9IFpvZFZvaWQuY3JlYXRlO1xuY29uc3QgYXJyYXlUeXBlID0gWm9kQXJyYXkuY3JlYXRlO1xuY29uc3Qgb2JqZWN0VHlwZSA9IFpvZE9iamVjdC5jcmVhdGU7XG5jb25zdCBzdHJpY3RPYmplY3RUeXBlID0gWm9kT2JqZWN0LnN0cmljdENyZWF0ZTtcbmNvbnN0IHVuaW9uVHlwZSA9IFpvZFVuaW9uLmNyZWF0ZTtcbmNvbnN0IGRpc2NyaW1pbmF0ZWRVbmlvblR5cGUgPSBab2REaXNjcmltaW5hdGVkVW5pb24uY3JlYXRlO1xuY29uc3QgaW50ZXJzZWN0aW9uVHlwZSA9IFpvZEludGVyc2VjdGlvbi5jcmVhdGU7XG5jb25zdCB0dXBsZVR5cGUgPSBab2RUdXBsZS5jcmVhdGU7XG5jb25zdCByZWNvcmRUeXBlID0gWm9kUmVjb3JkLmNyZWF0ZTtcbmNvbnN0IG1hcFR5cGUgPSBab2RNYXAuY3JlYXRlO1xuY29uc3Qgc2V0VHlwZSA9IFpvZFNldC5jcmVhdGU7XG5jb25zdCBmdW5jdGlvblR5cGUgPSBab2RGdW5jdGlvbi5jcmVhdGU7XG5jb25zdCBsYXp5VHlwZSA9IFpvZExhenkuY3JlYXRlO1xuY29uc3QgbGl0ZXJhbFR5cGUgPSBab2RMaXRlcmFsLmNyZWF0ZTtcbmNvbnN0IGVudW1UeXBlID0gWm9kRW51bS5jcmVhdGU7XG5jb25zdCBuYXRpdmVFbnVtVHlwZSA9IFpvZE5hdGl2ZUVudW0uY3JlYXRlO1xuY29uc3QgcHJvbWlzZVR5cGUgPSBab2RQcm9taXNlLmNyZWF0ZTtcbmNvbnN0IGVmZmVjdHNUeXBlID0gWm9kRWZmZWN0cy5jcmVhdGU7XG5jb25zdCBvcHRpb25hbFR5cGUgPSBab2RPcHRpb25hbC5jcmVhdGU7XG5jb25zdCBudWxsYWJsZVR5cGUgPSBab2ROdWxsYWJsZS5jcmVhdGU7XG5jb25zdCBwcmVwcm9jZXNzVHlwZSA9IFpvZEVmZmVjdHMuY3JlYXRlV2l0aFByZXByb2Nlc3M7XG5jb25zdCBwaXBlbGluZVR5cGUgPSBab2RQaXBlbGluZS5jcmVhdGU7XG5jb25zdCBvc3RyaW5nID0gKCkgPT4gc3RyaW5nVHlwZSgpLm9wdGlvbmFsKCk7XG5jb25zdCBvbnVtYmVyID0gKCkgPT4gbnVtYmVyVHlwZSgpLm9wdGlvbmFsKCk7XG5jb25zdCBvYm9vbGVhbiA9ICgpID0+IGJvb2xlYW5UeXBlKCkub3B0aW9uYWwoKTtcbmV4cG9ydCBjb25zdCBjb2VyY2UgPSB7XG4gICAgc3RyaW5nOiAoKGFyZykgPT4gWm9kU3RyaW5nLmNyZWF0ZSh7IC4uLmFyZywgY29lcmNlOiB0cnVlIH0pKSxcbiAgICBudW1iZXI6ICgoYXJnKSA9PiBab2ROdW1iZXIuY3JlYXRlKHsgLi4uYXJnLCBjb2VyY2U6IHRydWUgfSkpLFxuICAgIGJvb2xlYW46ICgoYXJnKSA9PiBab2RCb29sZWFuLmNyZWF0ZSh7XG4gICAgICAgIC4uLmFyZyxcbiAgICAgICAgY29lcmNlOiB0cnVlLFxuICAgIH0pKSxcbiAgICBiaWdpbnQ6ICgoYXJnKSA9PiBab2RCaWdJbnQuY3JlYXRlKHsgLi4uYXJnLCBjb2VyY2U6IHRydWUgfSkpLFxuICAgIGRhdGU6ICgoYXJnKSA9PiBab2REYXRlLmNyZWF0ZSh7IC4uLmFyZywgY29lcmNlOiB0cnVlIH0pKSxcbn07XG5leHBvcnQgeyBhbnlUeXBlIGFzIGFueSwgYXJyYXlUeXBlIGFzIGFycmF5LCBiaWdJbnRUeXBlIGFzIGJpZ2ludCwgYm9vbGVhblR5cGUgYXMgYm9vbGVhbiwgZGF0ZVR5cGUgYXMgZGF0ZSwgZGlzY3JpbWluYXRlZFVuaW9uVHlwZSBhcyBkaXNjcmltaW5hdGVkVW5pb24sIGVmZmVjdHNUeXBlIGFzIGVmZmVjdCwgZW51bVR5cGUgYXMgZW51bSwgZnVuY3Rpb25UeXBlIGFzIGZ1bmN0aW9uLCBpbnN0YW5jZU9mVHlwZSBhcyBpbnN0YW5jZW9mLCBpbnRlcnNlY3Rpb25UeXBlIGFzIGludGVyc2VjdGlvbiwgbGF6eVR5cGUgYXMgbGF6eSwgbGl0ZXJhbFR5cGUgYXMgbGl0ZXJhbCwgbWFwVHlwZSBhcyBtYXAsIG5hblR5cGUgYXMgbmFuLCBuYXRpdmVFbnVtVHlwZSBhcyBuYXRpdmVFbnVtLCBuZXZlclR5cGUgYXMgbmV2ZXIsIG51bGxUeXBlIGFzIG51bGwsIG51bGxhYmxlVHlwZSBhcyBudWxsYWJsZSwgbnVtYmVyVHlwZSBhcyBudW1iZXIsIG9iamVjdFR5cGUgYXMgb2JqZWN0LCBvYm9vbGVhbiwgb251bWJlciwgb3B0aW9uYWxUeXBlIGFzIG9wdGlvbmFsLCBvc3RyaW5nLCBwaXBlbGluZVR5cGUgYXMgcGlwZWxpbmUsIHByZXByb2Nlc3NUeXBlIGFzIHByZXByb2Nlc3MsIHByb21pc2VUeXBlIGFzIHByb21pc2UsIHJlY29yZFR5cGUgYXMgcmVjb3JkLCBzZXRUeXBlIGFzIHNldCwgc3RyaWN0T2JqZWN0VHlwZSBhcyBzdHJpY3RPYmplY3QsIHN0cmluZ1R5cGUgYXMgc3RyaW5nLCBzeW1ib2xUeXBlIGFzIHN5bWJvbCwgZWZmZWN0c1R5cGUgYXMgdHJhbnNmb3JtZXIsIHR1cGxlVHlwZSBhcyB0dXBsZSwgdW5kZWZpbmVkVHlwZSBhcyB1bmRlZmluZWQsIHVuaW9uVHlwZSBhcyB1bmlvbiwgdW5rbm93blR5cGUgYXMgdW5rbm93biwgdm9pZFR5cGUgYXMgdm9pZCwgfTtcbmV4cG9ydCBjb25zdCBORVZFUiA9IElOVkFMSUQ7XG4iLCJleHBvcnQgZnVuY3Rpb24gcGFyc2VBbnlEZWYoKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW55Lm1qcy5tYXAiLCJpbXBvcnQgeyBab2RGaXJzdFBhcnR5VHlwZUtpbmQgfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyB9IGZyb20gXCIuLi9lcnJvck1lc3NhZ2VzLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBcnJheURlZihkZWYsIHJlZnMpIHtcbiAgICBjb25zdCByZXMgPSB7XG4gICAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgfTtcbiAgICBpZiAoZGVmLnR5cGU/Ll9kZWY/LnR5cGVOYW1lICE9PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQW55KSB7XG4gICAgICAgIHJlcy5pdGVtcyA9IHBhcnNlRGVmKGRlZi50eXBlLl9kZWYsIHtcbiAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdpdGVtcyddLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGRlZi5taW5MZW5ndGgpIHtcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtaW5JdGVtcycsIGRlZi5taW5MZW5ndGgudmFsdWUsIGRlZi5taW5MZW5ndGgubWVzc2FnZSwgcmVmcyk7XG4gICAgfVxuICAgIGlmIChkZWYubWF4TGVuZ3RoKSB7XG4gICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWF4SXRlbXMnLCBkZWYubWF4TGVuZ3RoLnZhbHVlLCBkZWYubWF4TGVuZ3RoLm1lc3NhZ2UsIHJlZnMpO1xuICAgIH1cbiAgICBpZiAoZGVmLmV4YWN0TGVuZ3RoKSB7XG4gICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWluSXRlbXMnLCBkZWYuZXhhY3RMZW5ndGgudmFsdWUsIGRlZi5leGFjdExlbmd0aC5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtYXhJdGVtcycsIGRlZi5leGFjdExlbmd0aC52YWx1ZSwgZGVmLmV4YWN0TGVuZ3RoLm1lc3NhZ2UsIHJlZnMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyYXkubWpzLm1hcCIsImltcG9ydCB7IHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMgfSBmcm9tIFwiLi4vZXJyb3JNZXNzYWdlcy5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUJpZ2ludERlZihkZWYsIHJlZnMpIHtcbiAgICBjb25zdCByZXMgPSB7XG4gICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgZm9ybWF0OiAnaW50NjQnLFxuICAgIH07XG4gICAgaWYgKCFkZWYuY2hlY2tzKVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgICAgICBzd2l0Y2ggKGNoZWNrLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ21pbic6XG4gICAgICAgICAgICAgICAgaWYgKHJlZnMudGFyZ2V0ID09PSAnanNvblNjaGVtYTcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVjay5pbmNsdXNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWluaW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnZXhjbHVzaXZlTWluaW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGVjay5pbmNsdXNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5leGNsdXNpdmVNaW5pbXVtID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ21pbmltdW0nLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWF4JzpcbiAgICAgICAgICAgICAgICBpZiAocmVmcy50YXJnZXQgPT09ICdqc29uU2NoZW1hNycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtYXhpbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdleGNsdXNpdmVNYXhpbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmV4Y2x1c2l2ZU1heGltdW0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWF4aW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtdWx0aXBsZU9mJzpcbiAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ211bHRpcGxlT2YnLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpZ2ludC5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQm9vbGVhbkRlZigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJvb2xlYW4ubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQnJhbmRlZERlZihfZGVmLCByZWZzKSB7XG4gICAgcmV0dXJuIHBhcnNlRGVmKF9kZWYudHlwZS5fZGVmLCByZWZzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyYW5kZWQubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGNvbnN0IHBhcnNlQ2F0Y2hEZWYgPSAoZGVmLCByZWZzKSA9PiB7XG4gICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5pbm5lclR5cGUuX2RlZiwgcmVmcyk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2F0Y2gubWpzLm1hcCIsImltcG9ydCB7IHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMgfSBmcm9tIFwiLi4vZXJyb3JNZXNzYWdlcy5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURhdGVEZWYoZGVmLCByZWZzLCBvdmVycmlkZURhdGVTdHJhdGVneSkge1xuICAgIGNvbnN0IHN0cmF0ZWd5ID0gb3ZlcnJpZGVEYXRlU3RyYXRlZ3kgPz8gcmVmcy5kYXRlU3RyYXRlZ3k7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3RyYXRlZ3kpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhbnlPZjogc3RyYXRlZ3kubWFwKChpdGVtLCBpKSA9PiBwYXJzZURhdGVEZWYoZGVmLCByZWZzLCBpdGVtKSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN3aXRjaCAoc3RyYXRlZ3kpIHtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgY2FzZSAnZm9ybWF0OmRhdGUtdGltZSc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogJ2RhdGUtdGltZScsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdmb3JtYXQ6ZGF0ZSc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogJ2RhdGUnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSAnaW50ZWdlcic6XG4gICAgICAgICAgICByZXR1cm4gaW50ZWdlckRhdGVQYXJzZXIoZGVmLCByZWZzKTtcbiAgICB9XG59XG5jb25zdCBpbnRlZ2VyRGF0ZVBhcnNlciA9IChkZWYsIHJlZnMpID0+IHtcbiAgICBjb25zdCByZXMgPSB7XG4gICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgZm9ybWF0OiAndW5peC10aW1lJyxcbiAgICB9O1xuICAgIGlmIChyZWZzLnRhcmdldCA9PT0gJ29wZW5BcGkzJykge1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIGRlZi5jaGVja3MpIHtcbiAgICAgICAgc3dpdGNoIChjaGVjay5raW5kKSB7XG4gICAgICAgICAgICBjYXNlICdtaW4nOlxuICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWluaW11bScsIGNoZWNrLnZhbHVlLCAvLyBUaGlzIGlzIGluIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgICAgIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWF4JzpcbiAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ21heGltdW0nLCBjaGVjay52YWx1ZSwgLy8gVGhpcyBpcyBpbiBtaWxsaXNlY29uZHNcbiAgICAgICAgICAgICAgICBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGUubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRGVmYXVsdERlZihfZGVmLCByZWZzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucGFyc2VEZWYoX2RlZi5pbm5lclR5cGUuX2RlZiwgcmVmcyksXG4gICAgICAgIGRlZmF1bHQ6IF9kZWYuZGVmYXVsdFZhbHVlKCksXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHQubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRWZmZWN0c0RlZihfZGVmLCByZWZzLCBmb3JjZVJlc29sdXRpb24pIHtcbiAgICByZXR1cm4gcmVmcy5lZmZlY3RTdHJhdGVneSA9PT0gJ2lucHV0JyA/IHBhcnNlRGVmKF9kZWYuc2NoZW1hLl9kZWYsIHJlZnMsIGZvcmNlUmVzb2x1dGlvbikgOiB7fTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVmZmVjdHMubWpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBwYXJzZUVudW1EZWYoZGVmKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGVudW06IFsuLi5kZWYudmFsdWVzXSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW51bS5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5jb25zdCBpc0pzb25TY2hlbWE3QWxsT2ZUeXBlID0gKHR5cGUpID0+IHtcbiAgICBpZiAoJ3R5cGUnIGluIHR5cGUgJiYgdHlwZS50eXBlID09PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAnYWxsT2YnIGluIHR5cGU7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSW50ZXJzZWN0aW9uRGVmKGRlZiwgcmVmcykge1xuICAgIGNvbnN0IGFsbE9mID0gW1xuICAgICAgICBwYXJzZURlZihkZWYubGVmdC5fZGVmLCB7XG4gICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAnYWxsT2YnLCAnMCddLFxuICAgICAgICB9KSxcbiAgICAgICAgcGFyc2VEZWYoZGVmLnJpZ2h0Ll9kZWYsIHtcbiAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdhbGxPZicsICcxJ10sXG4gICAgICAgIH0pLFxuICAgIF0uZmlsdGVyKCh4KSA9PiAhIXgpO1xuICAgIGxldCB1bmV2YWx1YXRlZFByb3BlcnRpZXMgPSByZWZzLnRhcmdldCA9PT0gJ2pzb25TY2hlbWEyMDE5LTA5JyA/IHsgdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzOiBmYWxzZSB9IDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IG1lcmdlZEFsbE9mID0gW107XG4gICAgLy8gSWYgZWl0aGVyIG9mIHRoZSBzY2hlbWFzIGlzIGFuIGFsbE9mLCBtZXJnZSB0aGVtIGludG8gYSBzaW5nbGUgYWxsT2ZcbiAgICBhbGxPZi5mb3JFYWNoKChzY2hlbWEpID0+IHtcbiAgICAgICAgaWYgKGlzSnNvblNjaGVtYTdBbGxPZlR5cGUoc2NoZW1hKSkge1xuICAgICAgICAgICAgbWVyZ2VkQWxsT2YucHVzaCguLi5zY2hlbWEuYWxsT2YpO1xuICAgICAgICAgICAgaWYgKHNjaGVtYS51bmV2YWx1YXRlZFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIElmIG9uZSBvZiB0aGUgc2NoZW1hcyBoYXMgbm8gdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzIHNldCxcbiAgICAgICAgICAgICAgICAvLyB0aGUgbWVyZ2VkIHNjaGVtYSBzaG91bGQgYWxzbyBoYXZlIG5vIHVuZXZhbHVhdGVkUHJvcGVydGllcyBzZXRcbiAgICAgICAgICAgICAgICB1bmV2YWx1YXRlZFByb3BlcnRpZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgbmVzdGVkU2NoZW1hID0gc2NoZW1hO1xuICAgICAgICAgICAgaWYgKCdhZGRpdGlvbmFsUHJvcGVydGllcycgaW4gc2NoZW1hICYmIHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGFkZGl0aW9uYWxQcm9wZXJ0aWVzLCAuLi5yZXN0IH0gPSBzY2hlbWE7XG4gICAgICAgICAgICAgICAgbmVzdGVkU2NoZW1hID0gcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEFzIHNvb24gYXMgb25lIG9mIHRoZSBzY2hlbWFzIGhhcyBhZGRpdGlvbmFsUHJvcGVydGllcyBzZXQgbm90IHRvIGZhbHNlLCB3ZSBhbGxvdyB1bmV2YWx1YXRlZFByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICB1bmV2YWx1YXRlZFByb3BlcnRpZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXJnZWRBbGxPZi5wdXNoKG5lc3RlZFNjaGVtYSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbWVyZ2VkQWxsT2YubGVuZ3RoID9cbiAgICAgICAge1xuICAgICAgICAgICAgYWxsT2Y6IG1lcmdlZEFsbE9mLFxuICAgICAgICAgICAgLi4udW5ldmFsdWF0ZWRQcm9wZXJ0aWVzLFxuICAgICAgICB9XG4gICAgICAgIDogdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJzZWN0aW9uLm1qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gcGFyc2VMaXRlcmFsRGVmKGRlZiwgcmVmcykge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0eXBlb2YgZGVmLnZhbHVlO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSAnYmlnaW50JyAmJlxuICAgICAgICBwYXJzZWRUeXBlICE9PSAnbnVtYmVyJyAmJlxuICAgICAgICBwYXJzZWRUeXBlICE9PSAnYm9vbGVhbicgJiZcbiAgICAgICAgcGFyc2VkVHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IEFycmF5LmlzQXJyYXkoZGVmLnZhbHVlKSA/ICdhcnJheScgOiAnb2JqZWN0JyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHJlZnMudGFyZ2V0ID09PSAnb3BlbkFwaTMnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBwYXJzZWRUeXBlID09PSAnYmlnaW50JyA/ICdpbnRlZ2VyJyA6IHBhcnNlZFR5cGUsXG4gICAgICAgICAgICBlbnVtOiBbZGVmLnZhbHVlXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcGFyc2VkVHlwZSA9PT0gJ2JpZ2ludCcgPyAnaW50ZWdlcicgOiBwYXJzZWRUeXBlLFxuICAgICAgICBjb25zdDogZGVmLnZhbHVlLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXRlcmFsLm1qcy5tYXAiLCJpbXBvcnQgeyBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzIH0gZnJvbSBcIi4uL2Vycm9yTWVzc2FnZXMubWpzXCI7XG5sZXQgZW1vamlSZWdleDtcbi8qKlxuICogR2VuZXJhdGVkIGZyb20gdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZm91bmQgaGVyZSBhcyBvZiAyMDI0LTA1LTIyOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2NvbGluaGFja3Mvem9kL2Jsb2IvbWFzdGVyL3NyYy90eXBlcy50cy5cbiAqXG4gKiBFeHByZXNzaW9ucyB3aXRoIC9pIGZsYWcgaGF2ZSBiZWVuIGNoYW5nZWQgYWNjb3JkaW5nbHkuXG4gKi9cbmV4cG9ydCBjb25zdCB6b2RQYXR0ZXJucyA9IHtcbiAgICAvKipcbiAgICAgKiBgY2Agd2FzIGNoYW5nZWQgdG8gYFtjQ11gIHRvIHJlcGxpY2F0ZSAvaSBmbGFnXG4gICAgICovXG4gICAgY3VpZDogL15bY0NdW15cXHMtXXs4LH0kLyxcbiAgICBjdWlkMjogL15bMC05YS16XSskLyxcbiAgICB1bGlkOiAvXlswLTlBLUhKS01OUC1UVi1aXXsyNn0kLyxcbiAgICAvKipcbiAgICAgKiBgYS16YCB3YXMgYWRkZWQgdG8gcmVwbGljYXRlIC9pIGZsYWdcbiAgICAgKi9cbiAgICBlbWFpbDogL14oPyFcXC4pKD8hLipcXC5cXC4pKFthLXpBLVowLTlfJytcXC1cXC5dKilbYS16QS1aMC05XystXUAoW2EtekEtWjAtOV1bYS16QS1aMC05XFwtXSpcXC4pK1thLXpBLVpdezIsfSQvLFxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdGVkIGEgdmFsaWQgVW5pY29kZSBSZWdFeHBcbiAgICAgKlxuICAgICAqIExhemlseSBpbnN0YW50aWF0ZSBzaW5jZSB0aGlzIHR5cGUgb2YgcmVnZXggaXNuJ3Qgc3VwcG9ydGVkXG4gICAgICogaW4gYWxsIGVudnMgKGUuZy4gUmVhY3QgTmF0aXZlKS5cbiAgICAgKlxuICAgICAqIFNlZTpcbiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vY29saW5oYWNrcy96b2QvaXNzdWVzLzI0MzNcbiAgICAgKiBGaXggaW4gWm9kOlxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jb2xpbmhhY2tzL3pvZC9jb21taXQvOTM0MGZkNTFlNDg1NzZhNzVhZGM5MTliZmY2NWRiYzRhNWQ0Yzk5YlxuICAgICAqL1xuICAgIGVtb2ppOiAoKSA9PiB7XG4gICAgICAgIGlmIChlbW9qaVJlZ2V4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVtb2ppUmVnZXggPSBSZWdFeHAoJ14oXFxcXHB7RXh0ZW5kZWRfUGljdG9ncmFwaGljfXxcXFxccHtFbW9qaV9Db21wb25lbnR9KSskJywgJ3UnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW1vamlSZWdleDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFVudXNlZFxuICAgICAqL1xuICAgIHV1aWQ6IC9eWzAtOWEtZkEtRl17OH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17MTJ9JC8sXG4gICAgLyoqXG4gICAgICogVW51c2VkXG4gICAgICovXG4gICAgaXB2NDogL14oPzooPzoyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldWzAtOV18WzAtOV0pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSkkLyxcbiAgICAvKipcbiAgICAgKiBVbnVzZWRcbiAgICAgKi9cbiAgICBpcHY2OiAvXigoW2EtZjAtOV17MSw0fTopezd9fDo6KFthLWYwLTldezEsNH06KXswLDZ9fChbYS1mMC05XXsxLDR9Oil7MX06KFthLWYwLTldezEsNH06KXswLDV9fChbYS1mMC05XXsxLDR9Oil7Mn06KFthLWYwLTldezEsNH06KXswLDR9fChbYS1mMC05XXsxLDR9Oil7M306KFthLWYwLTldezEsNH06KXswLDN9fChbYS1mMC05XXsxLDR9Oil7NH06KFthLWYwLTldezEsNH06KXswLDJ9fChbYS1mMC05XXsxLDR9Oil7NX06KFthLWYwLTldezEsNH06KXswLDF9KShbYS1mMC05XXsxLDR9fCgoKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKVxcLil7M30oKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKSkkLyxcbiAgICBiYXNlNjQ6IC9eKFswLTlhLXpBLVorL117NH0pKigoWzAtOWEtekEtWisvXXsyfT09KXwoWzAtOWEtekEtWisvXXszfT0pKT8kLyxcbiAgICBuYW5vaWQ6IC9eW2EtekEtWjAtOV8tXXsyMX0kLyxcbn07XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdHJpbmdEZWYoZGVmLCByZWZzKSB7XG4gICAgY29uc3QgcmVzID0ge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHByb2Nlc3NQYXR0ZXJuKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiByZWZzLnBhdHRlcm5TdHJhdGVneSA9PT0gJ2VzY2FwZScgPyBlc2NhcGVOb25BbHBoYU51bWVyaWModmFsdWUpIDogdmFsdWU7XG4gICAgfVxuICAgIGlmIChkZWYuY2hlY2tzKSB7XG4gICAgICAgIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgc3dpdGNoIChjaGVjay5raW5kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWluJzpcbiAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtaW5MZW5ndGgnLCB0eXBlb2YgcmVzLm1pbkxlbmd0aCA9PT0gJ251bWJlcicgPyBNYXRoLm1heChyZXMubWluTGVuZ3RoLCBjaGVjay52YWx1ZSkgOiBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21heCc6XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWF4TGVuZ3RoJywgdHlwZW9mIHJlcy5tYXhMZW5ndGggPT09ICdudW1iZXInID8gTWF0aC5taW4ocmVzLm1heExlbmd0aCwgY2hlY2sudmFsdWUpIDogY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdlbWFpbCc6XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocmVmcy5lbWFpbFN0cmF0ZWd5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmb3JtYXQ6ZW1haWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEZvcm1hdChyZXMsICdlbWFpbCcsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZm9ybWF0Omlkbi1lbWFpbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ2lkbi1lbWFpbCcsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncGF0dGVybjp6b2QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5lbWFpbCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndXJsJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ3VyaScsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1dWlkJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ3V1aWQnLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmVnZXgnOlxuICAgICAgICAgICAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgY2hlY2sucmVnZXgsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjdWlkJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLmN1aWQsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjdWlkMic6XG4gICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5jdWlkMiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0YXJ0c1dpdGgnOlxuICAgICAgICAgICAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgUmVnRXhwKGBeJHtwcm9jZXNzUGF0dGVybihjaGVjay52YWx1ZSl9YCksIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdlbmRzV2l0aCc6XG4gICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCBSZWdFeHAoYCR7cHJvY2Vzc1BhdHRlcm4oY2hlY2sudmFsdWUpfSRgKSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RhdGV0aW1lJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ2RhdGUtdGltZScsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ2RhdGUnLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndGltZSc6XG4gICAgICAgICAgICAgICAgICAgIGFkZEZvcm1hdChyZXMsICd0aW1lJywgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2R1cmF0aW9uJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ2R1cmF0aW9uJywgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xlbmd0aCc6XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWluTGVuZ3RoJywgdHlwZW9mIHJlcy5taW5MZW5ndGggPT09ICdudW1iZXInID8gTWF0aC5tYXgocmVzLm1pbkxlbmd0aCwgY2hlY2sudmFsdWUpIDogY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ21heExlbmd0aCcsIHR5cGVvZiByZXMubWF4TGVuZ3RoID09PSAnbnVtYmVyJyA/IE1hdGgubWluKHJlcy5tYXhMZW5ndGgsIGNoZWNrLnZhbHVlKSA6IGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW5jbHVkZXMnOiB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCBSZWdFeHAocHJvY2Vzc1BhdHRlcm4oY2hlY2sudmFsdWUpKSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdpcCc6IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrLnZlcnNpb24gIT09ICd2NicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEZvcm1hdChyZXMsICdpcHY0JywgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrLnZlcnNpb24gIT09ICd2NCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEZvcm1hdChyZXMsICdpcHY2JywgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2Vtb2ppJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLmVtb2ppLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndWxpZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLnVsaWQsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnYmFzZTY0Jzoge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHJlZnMuYmFzZTY0U3RyYXRlZ3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Zvcm1hdDpiaW5hcnknOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ2JpbmFyeScsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29udGVudEVuY29kaW5nOmJhc2U2NCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ2NvbnRlbnRFbmNvZGluZycsICdiYXNlNjQnLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BhdHRlcm46em9kJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5iYXNlNjQsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICduYW5vaWQnOiB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5uYW5vaWQsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICd0b0xvd2VyQ2FzZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAndG9VcHBlckNhc2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3RyaW0nOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAoKF8pID0+IHsgfSkoY2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5jb25zdCBlc2NhcGVOb25BbHBoYU51bWVyaWMgPSAodmFsdWUpID0+IEFycmF5LmZyb20odmFsdWUpXG4gICAgLm1hcCgoYykgPT4gKC9bYS16QS1aMC05XS8udGVzdChjKSA/IGMgOiBgXFxcXCR7Y31gKSlcbiAgICAuam9pbignJyk7XG5jb25zdCBhZGRGb3JtYXQgPSAoc2NoZW1hLCB2YWx1ZSwgbWVzc2FnZSwgcmVmcykgPT4ge1xuICAgIGlmIChzY2hlbWEuZm9ybWF0IHx8IHNjaGVtYS5hbnlPZj8uc29tZSgoeCkgPT4geC5mb3JtYXQpKSB7XG4gICAgICAgIGlmICghc2NoZW1hLmFueU9mKSB7XG4gICAgICAgICAgICBzY2hlbWEuYW55T2YgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZW1hLmZvcm1hdCkge1xuICAgICAgICAgICAgc2NoZW1hLmFueU9mLnB1c2goe1xuICAgICAgICAgICAgICAgIGZvcm1hdDogc2NoZW1hLmZvcm1hdCxcbiAgICAgICAgICAgICAgICAuLi4oc2NoZW1hLmVycm9yTWVzc2FnZSAmJlxuICAgICAgICAgICAgICAgICAgICByZWZzLmVycm9yTWVzc2FnZXMgJiYge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IHsgZm9ybWF0OiBzY2hlbWEuZXJyb3JNZXNzYWdlLmZvcm1hdCB9LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZWxldGUgc2NoZW1hLmZvcm1hdDtcbiAgICAgICAgICAgIGlmIChzY2hlbWEuZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNjaGVtYS5lcnJvck1lc3NhZ2UuZm9ybWF0O1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhzY2hlbWEuZXJyb3JNZXNzYWdlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNjaGVtYS5lcnJvck1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNjaGVtYS5hbnlPZi5wdXNoKHtcbiAgICAgICAgICAgIGZvcm1hdDogdmFsdWUsXG4gICAgICAgICAgICAuLi4obWVzc2FnZSAmJiByZWZzLmVycm9yTWVzc2FnZXMgJiYgeyBlcnJvck1lc3NhZ2U6IHsgZm9ybWF0OiBtZXNzYWdlIH0gfSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhzY2hlbWEsICdmb3JtYXQnLCB2YWx1ZSwgbWVzc2FnZSwgcmVmcyk7XG4gICAgfVxufTtcbmNvbnN0IGFkZFBhdHRlcm4gPSAoc2NoZW1hLCByZWdleCwgbWVzc2FnZSwgcmVmcykgPT4ge1xuICAgIGlmIChzY2hlbWEucGF0dGVybiB8fCBzY2hlbWEuYWxsT2Y/LnNvbWUoKHgpID0+IHgucGF0dGVybikpIHtcbiAgICAgICAgaWYgKCFzY2hlbWEuYWxsT2YpIHtcbiAgICAgICAgICAgIHNjaGVtYS5hbGxPZiA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlbWEucGF0dGVybikge1xuICAgICAgICAgICAgc2NoZW1hLmFsbE9mLnB1c2goe1xuICAgICAgICAgICAgICAgIHBhdHRlcm46IHNjaGVtYS5wYXR0ZXJuLFxuICAgICAgICAgICAgICAgIC4uLihzY2hlbWEuZXJyb3JNZXNzYWdlICYmXG4gICAgICAgICAgICAgICAgICAgIHJlZnMuZXJyb3JNZXNzYWdlcyAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogeyBwYXR0ZXJuOiBzY2hlbWEuZXJyb3JNZXNzYWdlLnBhdHRlcm4gfSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGVsZXRlIHNjaGVtYS5wYXR0ZXJuO1xuICAgICAgICAgICAgaWYgKHNjaGVtYS5lcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgc2NoZW1hLmVycm9yTWVzc2FnZS5wYXR0ZXJuO1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhzY2hlbWEuZXJyb3JNZXNzYWdlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNjaGVtYS5lcnJvck1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNjaGVtYS5hbGxPZi5wdXNoKHtcbiAgICAgICAgICAgIHBhdHRlcm46IHByb2Nlc3NSZWdFeHAocmVnZXgsIHJlZnMpLFxuICAgICAgICAgICAgLi4uKG1lc3NhZ2UgJiYgcmVmcy5lcnJvck1lc3NhZ2VzICYmIHsgZXJyb3JNZXNzYWdlOiB7IHBhdHRlcm46IG1lc3NhZ2UgfSB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHNjaGVtYSwgJ3BhdHRlcm4nLCBwcm9jZXNzUmVnRXhwKHJlZ2V4LCByZWZzKSwgbWVzc2FnZSwgcmVmcyk7XG4gICAgfVxufTtcbi8vIE11dGF0ZSB6LnN0cmluZy5yZWdleCgpIGluIGEgYmVzdCBhdHRlbXB0IHRvIGFjY29tbW9kYXRlIGZvciByZWdleCBmbGFncyB3aGVuIGFwcGx5UmVnZXhGbGFncyBpcyB0cnVlXG5jb25zdCBwcm9jZXNzUmVnRXhwID0gKHJlZ2V4T3JGdW5jdGlvbiwgcmVmcykgPT4ge1xuICAgIGNvbnN0IHJlZ2V4ID0gdHlwZW9mIHJlZ2V4T3JGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHJlZ2V4T3JGdW5jdGlvbigpIDogcmVnZXhPckZ1bmN0aW9uO1xuICAgIGlmICghcmVmcy5hcHBseVJlZ2V4RmxhZ3MgfHwgIXJlZ2V4LmZsYWdzKVxuICAgICAgICByZXR1cm4gcmVnZXguc291cmNlO1xuICAgIC8vIEN1cnJlbnRseSBoYW5kbGVkIGZsYWdzXG4gICAgY29uc3QgZmxhZ3MgPSB7XG4gICAgICAgIGk6IHJlZ2V4LmZsYWdzLmluY2x1ZGVzKCdpJyksIC8vIENhc2UtaW5zZW5zaXRpdmVcbiAgICAgICAgbTogcmVnZXguZmxhZ3MuaW5jbHVkZXMoJ20nKSwgLy8gYF5gIGFuZCBgJGAgbWF0Y2hlcyBhZGphY2VudCB0byBuZXdsaW5lIGNoYXJhY3RlcnNcbiAgICAgICAgczogcmVnZXguZmxhZ3MuaW5jbHVkZXMoJ3MnKSwgLy8gYC5gIG1hdGNoZXMgbmV3bGluZXNcbiAgICB9O1xuICAgIC8vIFRoZSBnZW5lcmFsIHByaW5jaXBsZSBoZXJlIGlzIHRvIHN0ZXAgdGhyb3VnaCBlYWNoIGNoYXJhY3Rlciwgb25lIGF0IGEgdGltZSwgYXBwbHlpbmcgbXV0YXRpb25zIGFzIGZsYWdzIHJlcXVpcmUuIFdlIGtlZXAgdHJhY2sgd2hlbiB0aGUgY3VycmVudCBjaGFyYWN0ZXIgaXMgZXNjYXBlZCwgYW5kIHdoZW4gaXQncyBpbnNpZGUgYSBncm91cCAvbGlrZSBbdGhpc10vIG9yIChhbHNvKSBhIHJhbmdlIGxpa2UgL1thLXpdLy4gVGhlIGZvbGxvd2luZyBpcyBmYWlybHkgYnJpdHRsZSBpbXBlcmF0aXZlIGNvZGU7IGVkaXQgYXQgeW91ciBwZXJpbCFcbiAgICBjb25zdCBzb3VyY2UgPSBmbGFncy5pID8gcmVnZXguc291cmNlLnRvTG93ZXJDYXNlKCkgOiByZWdleC5zb3VyY2U7XG4gICAgbGV0IHBhdHRlcm4gPSAnJztcbiAgICBsZXQgaXNFc2NhcGVkID0gZmFsc2U7XG4gICAgbGV0IGluQ2hhckdyb3VwID0gZmFsc2U7XG4gICAgbGV0IGluQ2hhclJhbmdlID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzRXNjYXBlZCkge1xuICAgICAgICAgICAgcGF0dGVybiArPSBzb3VyY2VbaV07XG4gICAgICAgICAgICBpc0VzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmbGFncy5pKSB7XG4gICAgICAgICAgICBpZiAoaW5DaGFyR3JvdXApIHtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlW2ldLm1hdGNoKC9bYS16XS8pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbkNoYXJSYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiArPSBzb3VyY2VbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IGAke3NvdXJjZVtpIC0gMl19LSR7c291cmNlW2ldfWAudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluQ2hhclJhbmdlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc291cmNlW2kgKyAxXSA9PT0gJy0nICYmIHNvdXJjZVtpICsgMl0/Lm1hdGNoKC9bYS16XS8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IHNvdXJjZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluQ2hhclJhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm4gKz0gYCR7c291cmNlW2ldfSR7c291cmNlW2ldLnRvVXBwZXJDYXNlKCl9YDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzb3VyY2VbaV0ubWF0Y2goL1thLXpdLykpIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IGBbJHtzb3VyY2VbaV19JHtzb3VyY2VbaV0udG9VcHBlckNhc2UoKX1dYDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZmxhZ3MubSkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZVtpXSA9PT0gJ14nKSB7XG4gICAgICAgICAgICAgICAgcGF0dGVybiArPSBgKF58KD88PVtcXHJcXG5dKSlgO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc291cmNlW2ldID09PSAnJCcpIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IGAoJHwoPz1bXFxyXFxuXSkpYDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZmxhZ3MucyAmJiBzb3VyY2VbaV0gPT09ICcuJykge1xuICAgICAgICAgICAgcGF0dGVybiArPSBpbkNoYXJHcm91cCA/IGAke3NvdXJjZVtpXX1cXHJcXG5gIDogYFske3NvdXJjZVtpXX1cXHJcXG5dYDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHBhdHRlcm4gKz0gc291cmNlW2ldO1xuICAgICAgICBpZiAoc291cmNlW2ldID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGlzRXNjYXBlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5DaGFyR3JvdXAgJiYgc291cmNlW2ldID09PSAnXScpIHtcbiAgICAgICAgICAgIGluQ2hhckdyb3VwID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluQ2hhckdyb3VwICYmIHNvdXJjZVtpXSA9PT0gJ1snKSB7XG4gICAgICAgICAgICBpbkNoYXJHcm91cCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVnZXhUZXN0ID0gbmV3IFJlZ0V4cChwYXR0ZXJuKTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICBjb25zb2xlLndhcm4oYENvdWxkIG5vdCBjb252ZXJ0IHJlZ2V4IHBhdHRlcm4gYXQgJHtyZWZzLmN1cnJlbnRQYXRoLmpvaW4oJy8nKX0gdG8gYSBmbGFnLWluZGVwZW5kZW50IGZvcm0hIEZhbGxpbmcgYmFjayB0byB0aGUgZmxhZy1pZ25vcmFudCBzb3VyY2VgKTtcbiAgICAgICAgcmV0dXJuIHJlZ2V4LnNvdXJjZTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdHRlcm47XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5nLm1qcy5tYXAiLCJpbXBvcnQgeyBab2RGaXJzdFBhcnR5VHlwZUtpbmQgfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVN0cmluZ0RlZiB9IGZyb20gXCIuL3N0cmluZy5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJlY29yZERlZihkZWYsIHJlZnMpIHtcbiAgICBpZiAocmVmcy50YXJnZXQgPT09ICdvcGVuQXBpMycgJiYgZGVmLmtleVR5cGU/Ll9kZWYudHlwZU5hbWUgPT09IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFbnVtKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgIHJlcXVpcmVkOiBkZWYua2V5VHlwZS5fZGVmLnZhbHVlcyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IGRlZi5rZXlUeXBlLl9kZWYudmFsdWVzLnJlZHVjZSgoYWNjLCBrZXkpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uYWNjLFxuICAgICAgICAgICAgICAgIFtrZXldOiBwYXJzZURlZihkZWYudmFsdWVUeXBlLl9kZWYsIHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAncHJvcGVydGllcycsIGtleV0sXG4gICAgICAgICAgICAgICAgfSkgPz8ge30sXG4gICAgICAgICAgICB9KSwge30pLFxuICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBzY2hlbWEgPSB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogcGFyc2VEZWYoZGVmLnZhbHVlVHlwZS5fZGVmLCB7XG4gICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAnYWRkaXRpb25hbFByb3BlcnRpZXMnXSxcbiAgICAgICAgfSkgPz8ge30sXG4gICAgfTtcbiAgICBpZiAocmVmcy50YXJnZXQgPT09ICdvcGVuQXBpMycpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG4gICAgaWYgKGRlZi5rZXlUeXBlPy5fZGVmLnR5cGVOYW1lID09PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kU3RyaW5nICYmIGRlZi5rZXlUeXBlLl9kZWYuY2hlY2tzPy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3Qga2V5VHlwZSA9IE9iamVjdC5lbnRyaWVzKHBhcnNlU3RyaW5nRGVmKGRlZi5rZXlUeXBlLl9kZWYsIHJlZnMpKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiAoa2V5ID09PSAndHlwZScgPyBhY2MgOiB7IC4uLmFjYywgW2tleV06IHZhbHVlIH0pLCB7fSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zY2hlbWEsXG4gICAgICAgICAgICBwcm9wZXJ0eU5hbWVzOiBrZXlUeXBlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChkZWYua2V5VHlwZT8uX2RlZi50eXBlTmFtZSA9PT0gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVudW0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnNjaGVtYSxcbiAgICAgICAgICAgIHByb3BlcnR5TmFtZXM6IHtcbiAgICAgICAgICAgICAgICBlbnVtOiBkZWYua2V5VHlwZS5fZGVmLnZhbHVlcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBzY2hlbWE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWNvcmQubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VSZWNvcmREZWYgfSBmcm9tIFwiLi9yZWNvcmQubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNYXBEZWYoZGVmLCByZWZzKSB7XG4gICAgaWYgKHJlZnMubWFwU3RyYXRlZ3kgPT09ICdyZWNvcmQnKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVJlY29yZERlZihkZWYsIHJlZnMpO1xuICAgIH1cbiAgICBjb25zdCBrZXlzID0gcGFyc2VEZWYoZGVmLmtleVR5cGUuX2RlZiwge1xuICAgICAgICAuLi5yZWZzLFxuICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdpdGVtcycsICdpdGVtcycsICcwJ10sXG4gICAgfSkgfHwge307XG4gICAgY29uc3QgdmFsdWVzID0gcGFyc2VEZWYoZGVmLnZhbHVlVHlwZS5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2l0ZW1zJywgJ2l0ZW1zJywgJzEnXSxcbiAgICB9KSB8fCB7fTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICBtYXhJdGVtczogMTI1LFxuICAgICAgICBpdGVtczoge1xuICAgICAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgICAgIGl0ZW1zOiBba2V5cywgdmFsdWVzXSxcbiAgICAgICAgICAgIG1pbkl0ZW1zOiAyLFxuICAgICAgICAgICAgbWF4SXRlbXM6IDIsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTmF0aXZlRW51bURlZihkZWYpIHtcbiAgICBjb25zdCBvYmplY3QgPSBkZWYudmFsdWVzO1xuICAgIGNvbnN0IGFjdHVhbEtleXMgPSBPYmplY3Qua2V5cyhkZWYudmFsdWVzKS5maWx0ZXIoKGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iamVjdFtvYmplY3Rba2V5XV0gIT09ICdudW1iZXInO1xuICAgIH0pO1xuICAgIGNvbnN0IGFjdHVhbFZhbHVlcyA9IGFjdHVhbEtleXMubWFwKChrZXkpID0+IG9iamVjdFtrZXldKTtcbiAgICBjb25zdCBwYXJzZWRUeXBlcyA9IEFycmF5LmZyb20obmV3IFNldChhY3R1YWxWYWx1ZXMubWFwKCh2YWx1ZXMpID0+IHR5cGVvZiB2YWx1ZXMpKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcGFyc2VkVHlwZXMubGVuZ3RoID09PSAxID9cbiAgICAgICAgICAgIHBhcnNlZFR5cGVzWzBdID09PSAnc3RyaW5nJyA/XG4gICAgICAgICAgICAgICAgJ3N0cmluZydcbiAgICAgICAgICAgICAgICA6ICdudW1iZXInXG4gICAgICAgICAgICA6IFsnc3RyaW5nJywgJ251bWJlciddLFxuICAgICAgICBlbnVtOiBhY3R1YWxWYWx1ZXMsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5hdGl2ZUVudW0ubWpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBwYXJzZU5ldmVyRGVmKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5vdDoge30sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5ldmVyLm1qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gcGFyc2VOdWxsRGVmKHJlZnMpIHtcbiAgICByZXR1cm4gcmVmcy50YXJnZXQgPT09ICdvcGVuQXBpMycgP1xuICAgICAgICB7XG4gICAgICAgICAgICBlbnVtOiBbJ251bGwnXSxcbiAgICAgICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgdHlwZTogJ251bGwnLFxuICAgICAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bnVsbC5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5leHBvcnQgY29uc3QgcHJpbWl0aXZlTWFwcGluZ3MgPSB7XG4gICAgWm9kU3RyaW5nOiAnc3RyaW5nJyxcbiAgICBab2ROdW1iZXI6ICdudW1iZXInLFxuICAgIFpvZEJpZ0ludDogJ2ludGVnZXInLFxuICAgIFpvZEJvb2xlYW46ICdib29sZWFuJyxcbiAgICBab2ROdWxsOiAnbnVsbCcsXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVW5pb25EZWYoZGVmLCByZWZzKSB7XG4gICAgaWYgKHJlZnMudGFyZ2V0ID09PSAnb3BlbkFwaTMnKVxuICAgICAgICByZXR1cm4gYXNBbnlPZihkZWYsIHJlZnMpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSBkZWYub3B0aW9ucyBpbnN0YW5jZW9mIE1hcCA/IEFycmF5LmZyb20oZGVmLm9wdGlvbnMudmFsdWVzKCkpIDogZGVmLm9wdGlvbnM7XG4gICAgLy8gVGhpcyBibG9ja3MgdHJpZXMgdG8gbG9vayBhaGVhZCBhIGJpdCB0byBwcm9kdWNlIG5pY2VyIGxvb2tpbmcgc2NoZW1hcyB3aXRoIHR5cGUgYXJyYXkgaW5zdGVhZCBvZiBhbnlPZi5cbiAgICBpZiAob3B0aW9ucy5ldmVyeSgoeCkgPT4geC5fZGVmLnR5cGVOYW1lIGluIHByaW1pdGl2ZU1hcHBpbmdzICYmICgheC5fZGVmLmNoZWNrcyB8fCAheC5fZGVmLmNoZWNrcy5sZW5ndGgpKSkge1xuICAgICAgICAvLyBhbGwgdHlwZXMgaW4gdW5pb24gYXJlIHByaW1pdGl2ZSBhbmQgbGFjayBjaGVja3MsIHNvIG1pZ2h0IGFzIHdlbGwgc3F1YXNoIGludG8ge3R5cGU6IFsuLi5dfVxuICAgICAgICBjb25zdCB0eXBlcyA9IG9wdGlvbnMucmVkdWNlKCh0eXBlcywgeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHByaW1pdGl2ZU1hcHBpbmdzW3guX2RlZi50eXBlTmFtZV07IC8vQ2FuIGJlIHNhZmVseSBjYXN0ZWQgZHVlIHRvIHJvdyA0M1xuICAgICAgICAgICAgcmV0dXJuIHR5cGUgJiYgIXR5cGVzLmluY2x1ZGVzKHR5cGUpID8gWy4uLnR5cGVzLCB0eXBlXSA6IHR5cGVzO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiB0eXBlcy5sZW5ndGggPiAxID8gdHlwZXMgOiB0eXBlc1swXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3B0aW9ucy5ldmVyeSgoeCkgPT4geC5fZGVmLnR5cGVOYW1lID09PSAnWm9kTGl0ZXJhbCcgJiYgIXguZGVzY3JpcHRpb24pKSB7XG4gICAgICAgIC8vIGFsbCBvcHRpb25zIGxpdGVyYWxzXG4gICAgICAgIGNvbnN0IHR5cGVzID0gb3B0aW9ucy5yZWR1Y2UoKGFjYywgeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiB4Ll9kZWYudmFsdWU7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbLi4uYWNjLCB0eXBlXTtcbiAgICAgICAgICAgICAgICBjYXNlICdiaWdpbnQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWy4uLmFjYywgJ2ludGVnZXInXTtcbiAgICAgICAgICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoeC5fZGVmLnZhbHVlID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsuLi5hY2MsICdudWxsJ107XG4gICAgICAgICAgICAgICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgICAgICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbXSk7XG4gICAgICAgIGlmICh0eXBlcy5sZW5ndGggPT09IG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBhbGwgdGhlIGxpdGVyYWxzIGFyZSBwcmltaXRpdmUsIGFzIGZhciBhcyBudWxsIGNhbiBiZSBjb25zaWRlcmVkIHByaW1pdGl2ZVxuICAgICAgICAgICAgY29uc3QgdW5pcXVlVHlwZXMgPSB0eXBlcy5maWx0ZXIoKHgsIGksIGEpID0+IGEuaW5kZXhPZih4KSA9PT0gaSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHVuaXF1ZVR5cGVzLmxlbmd0aCA+IDEgPyB1bmlxdWVUeXBlcyA6IHVuaXF1ZVR5cGVzWzBdLFxuICAgICAgICAgICAgICAgIGVudW06IG9wdGlvbnMucmVkdWNlKChhY2MsIHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYy5pbmNsdWRlcyh4Ll9kZWYudmFsdWUpID8gYWNjIDogWy4uLmFjYywgeC5fZGVmLnZhbHVlXTtcbiAgICAgICAgICAgICAgICB9LCBbXSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMuZXZlcnkoKHgpID0+IHguX2RlZi50eXBlTmFtZSA9PT0gJ1pvZEVudW0nKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBlbnVtOiBvcHRpb25zLnJlZHVjZSgoYWNjLCB4KSA9PiBbLi4uYWNjLCAuLi54Ll9kZWYudmFsdWVzLmZpbHRlcigoeCkgPT4gIWFjYy5pbmNsdWRlcyh4KSldLCBbXSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBhc0FueU9mKGRlZiwgcmVmcyk7XG59XG5jb25zdCBhc0FueU9mID0gKGRlZiwgcmVmcykgPT4ge1xuICAgIGNvbnN0IGFueU9mID0gKGRlZi5vcHRpb25zIGluc3RhbmNlb2YgTWFwID8gQXJyYXkuZnJvbShkZWYub3B0aW9ucy52YWx1ZXMoKSkgOiBkZWYub3B0aW9ucylcbiAgICAgICAgLm1hcCgoeCwgaSkgPT4gcGFyc2VEZWYoeC5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FueU9mJywgYCR7aX1gXSxcbiAgICB9KSlcbiAgICAgICAgLmZpbHRlcigoeCkgPT4gISF4ICYmICghcmVmcy5zdHJpY3RVbmlvbnMgfHwgKHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyh4KS5sZW5ndGggPiAwKSkpO1xuICAgIHJldHVybiBhbnlPZi5sZW5ndGggPyB7IGFueU9mIH0gOiB1bmRlZmluZWQ7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pb24ubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuaW1wb3J0IHsgcHJpbWl0aXZlTWFwcGluZ3MgfSBmcm9tIFwiLi91bmlvbi5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU51bGxhYmxlRGVmKGRlZiwgcmVmcykge1xuICAgIGlmIChbJ1pvZFN0cmluZycsICdab2ROdW1iZXInLCAnWm9kQmlnSW50JywgJ1pvZEJvb2xlYW4nLCAnWm9kTnVsbCddLmluY2x1ZGVzKGRlZi5pbm5lclR5cGUuX2RlZi50eXBlTmFtZSkgJiZcbiAgICAgICAgKCFkZWYuaW5uZXJUeXBlLl9kZWYuY2hlY2tzIHx8ICFkZWYuaW5uZXJUeXBlLl9kZWYuY2hlY2tzLmxlbmd0aCkpIHtcbiAgICAgICAgaWYgKHJlZnMudGFyZ2V0ID09PSAnb3BlbkFwaTMnIHx8IHJlZnMubnVsbGFibGVTdHJhdGVneSA9PT0gJ3Byb3BlcnR5Jykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBwcmltaXRpdmVNYXBwaW5nc1tkZWYuaW5uZXJUeXBlLl9kZWYudHlwZU5hbWVdLFxuICAgICAgICAgICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogW3ByaW1pdGl2ZU1hcHBpbmdzW2RlZi5pbm5lclR5cGUuX2RlZi50eXBlTmFtZV0sICdudWxsJ10sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChyZWZzLnRhcmdldCA9PT0gJ29wZW5BcGkzJykge1xuICAgICAgICBjb25zdCBiYXNlID0gcGFyc2VEZWYoZGVmLmlubmVyVHlwZS5fZGVmLCB7XG4gICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChiYXNlICYmICckcmVmJyBpbiBiYXNlKVxuICAgICAgICAgICAgcmV0dXJuIHsgYWxsT2Y6IFtiYXNlXSwgbnVsbGFibGU6IHRydWUgfTtcbiAgICAgICAgcmV0dXJuIGJhc2UgJiYgeyAuLi5iYXNlLCBudWxsYWJsZTogdHJ1ZSB9O1xuICAgIH1cbiAgICBjb25zdCBiYXNlID0gcGFyc2VEZWYoZGVmLmlubmVyVHlwZS5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FueU9mJywgJzAnXSxcbiAgICB9KTtcbiAgICByZXR1cm4gYmFzZSAmJiB7IGFueU9mOiBbYmFzZSwgeyB0eXBlOiAnbnVsbCcgfV0gfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bGxhYmxlLm1qcy5tYXAiLCJpbXBvcnQgeyBhZGRFcnJvck1lc3NhZ2UsIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMgfSBmcm9tIFwiLi4vZXJyb3JNZXNzYWdlcy5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU51bWJlckRlZihkZWYsIHJlZnMpIHtcbiAgICBjb25zdCByZXMgPSB7XG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgIH07XG4gICAgaWYgKCFkZWYuY2hlY2tzKVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgICAgICBzd2l0Y2ggKGNoZWNrLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2ludCc6XG4gICAgICAgICAgICAgICAgcmVzLnR5cGUgPSAnaW50ZWdlcic7XG4gICAgICAgICAgICAgICAgYWRkRXJyb3JNZXNzYWdlKHJlcywgJ3R5cGUnLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbic6XG4gICAgICAgICAgICAgICAgaWYgKHJlZnMudGFyZ2V0ID09PSAnanNvblNjaGVtYTcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVjay5pbmNsdXNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWluaW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnZXhjbHVzaXZlTWluaW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGVjay5pbmNsdXNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5leGNsdXNpdmVNaW5pbXVtID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ21pbmltdW0nLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWF4JzpcbiAgICAgICAgICAgICAgICBpZiAocmVmcy50YXJnZXQgPT09ICdqc29uU2NoZW1hNycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtYXhpbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdleGNsdXNpdmVNYXhpbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmV4Y2x1c2l2ZU1heGltdW0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWF4aW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtdWx0aXBsZU9mJzpcbiAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ211bHRpcGxlT2YnLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bWJlci5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5mdW5jdGlvbiBkZWNpZGVBZGRpdGlvbmFsUHJvcGVydGllcyhkZWYsIHJlZnMpIHtcbiAgICBpZiAocmVmcy5yZW1vdmVBZGRpdGlvbmFsU3RyYXRlZ3kgPT09ICdzdHJpY3QnKSB7XG4gICAgICAgIHJldHVybiBkZWYuY2F0Y2hhbGwuX2RlZi50eXBlTmFtZSA9PT0gJ1pvZE5ldmVyJyA/XG4gICAgICAgICAgICBkZWYudW5rbm93bktleXMgIT09ICdzdHJpY3QnXG4gICAgICAgICAgICA6IHBhcnNlRGVmKGRlZi5jYXRjaGFsbC5fZGVmLCB7XG4gICAgICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdhZGRpdGlvbmFsUHJvcGVydGllcyddLFxuICAgICAgICAgICAgfSkgPz8gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWYuY2F0Y2hhbGwuX2RlZi50eXBlTmFtZSA9PT0gJ1pvZE5ldmVyJyA/XG4gICAgICAgICAgICBkZWYudW5rbm93bktleXMgPT09ICdwYXNzdGhyb3VnaCdcbiAgICAgICAgICAgIDogcGFyc2VEZWYoZGVmLmNhdGNoYWxsLl9kZWYsIHtcbiAgICAgICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FkZGl0aW9uYWxQcm9wZXJ0aWVzJ10sXG4gICAgICAgICAgICB9KSA/PyB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU9iamVjdERlZihkZWYsIHJlZnMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAuLi5PYmplY3QuZW50cmllcyhkZWYuc2hhcGUoKSkucmVkdWNlKChhY2MsIFtwcm9wTmFtZSwgcHJvcERlZl0pID0+IHtcbiAgICAgICAgICAgIGlmIChwcm9wRGVmID09PSB1bmRlZmluZWQgfHwgcHJvcERlZi5fZGVmID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5UGF0aCA9IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAncHJvcGVydGllcycsIHByb3BOYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZERlZiA9IHBhcnNlRGVmKHByb3BEZWYuX2RlZiwge1xuICAgICAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICAgICAgY3VycmVudFBhdGg6IHByb3BlcnR5UGF0aCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eVBhdGgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChwYXJzZWREZWYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgaWYgKHJlZnMub3BlbmFpU3RyaWN0TW9kZSAmJlxuICAgICAgICAgICAgICAgIHByb3BEZWYuaXNPcHRpb25hbCgpICYmXG4gICAgICAgICAgICAgICAgIXByb3BEZWYuaXNOdWxsYWJsZSgpICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHByb3BEZWYuX2RlZj8uZGVmYXVsdFZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgWm9kIGZpZWxkIGF0IFxcYCR7cHJvcGVydHlQYXRoLmpvaW4oJy8nKX1cXGAgdXNlcyBcXGAub3B0aW9uYWwoKVxcYCB3aXRob3V0IFxcYC5udWxsYWJsZSgpXFxgIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIEFQSS4gU2VlOiBodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc3RydWN0dXJlZC1vdXRwdXRzP2FwaS1tb2RlPXJlc3BvbnNlcyNhbGwtZmllbGRzLW11c3QtYmUtcmVxdWlyZWRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgICAgICAuLi5hY2MucHJvcGVydGllcyxcbiAgICAgICAgICAgICAgICAgICAgW3Byb3BOYW1lXTogcGFyc2VkRGVmLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHByb3BEZWYuaXNPcHRpb25hbCgpICYmICFyZWZzLm9wZW5haVN0cmljdE1vZGUgPyBhY2MucmVxdWlyZWQgOiBbLi4uYWNjLnJlcXVpcmVkLCBwcm9wTmFtZV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LCB7IHByb3BlcnRpZXM6IHt9LCByZXF1aXJlZDogW10gfSksXG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBkZWNpZGVBZGRpdGlvbmFsUHJvcGVydGllcyhkZWYsIHJlZnMpLFxuICAgIH07XG4gICAgaWYgKCFyZXN1bHQucmVxdWlyZWQubGVuZ3RoKVxuICAgICAgICBkZWxldGUgcmVzdWx0LnJlcXVpcmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYmplY3QubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGNvbnN0IHBhcnNlT3B0aW9uYWxEZWYgPSAoZGVmLCByZWZzKSA9PiB7XG4gICAgaWYgKHJlZnMuY3VycmVudFBhdGgudG9TdHJpbmcoKSA9PT0gcmVmcy5wcm9wZXJ0eVBhdGg/LnRvU3RyaW5nKCkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5pbm5lclR5cGUuX2RlZiwgcmVmcyk7XG4gICAgfVxuICAgIGNvbnN0IGlubmVyU2NoZW1hID0gcGFyc2VEZWYoZGVmLmlubmVyVHlwZS5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FueU9mJywgJzEnXSxcbiAgICB9KTtcbiAgICByZXR1cm4gaW5uZXJTY2hlbWEgP1xuICAgICAgICB7XG4gICAgICAgICAgICBhbnlPZjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbm90OiB7fSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlubmVyU2NoZW1hLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfVxuICAgICAgICA6IHt9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wdGlvbmFsLm1qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5tanNcIjtcbmV4cG9ydCBjb25zdCBwYXJzZVBpcGVsaW5lRGVmID0gKGRlZiwgcmVmcykgPT4ge1xuICAgIGlmIChyZWZzLnBpcGVTdHJhdGVneSA9PT0gJ2lucHV0Jykge1xuICAgICAgICByZXR1cm4gcGFyc2VEZWYoZGVmLmluLl9kZWYsIHJlZnMpO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZWZzLnBpcGVTdHJhdGVneSA9PT0gJ291dHB1dCcpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5vdXQuX2RlZiwgcmVmcyk7XG4gICAgfVxuICAgIGNvbnN0IGEgPSBwYXJzZURlZihkZWYuaW4uX2RlZiwge1xuICAgICAgICAuLi5yZWZzLFxuICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdhbGxPZicsICcwJ10sXG4gICAgfSk7XG4gICAgY29uc3QgYiA9IHBhcnNlRGVmKGRlZi5vdXQuX2RlZiwge1xuICAgICAgICAuLi5yZWZzLFxuICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdhbGxPZicsIGEgPyAnMScgOiAnMCddLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFsbE9mOiBbYSwgYl0uZmlsdGVyKCh4KSA9PiB4ICE9PSB1bmRlZmluZWQpLFxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZWxpbmUubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUHJvbWlzZURlZihkZWYsIHJlZnMpIHtcbiAgICByZXR1cm4gcGFyc2VEZWYoZGVmLnR5cGUuX2RlZiwgcmVmcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9taXNlLm1qcy5tYXAiLCJpbXBvcnQgeyBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzIH0gZnJvbSBcIi4uL2Vycm9yTWVzc2FnZXMubWpzXCI7XG5pbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNldERlZihkZWYsIHJlZnMpIHtcbiAgICBjb25zdCBpdGVtcyA9IHBhcnNlRGVmKGRlZi52YWx1ZVR5cGUuX2RlZiwge1xuICAgICAgICAuLi5yZWZzLFxuICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdpdGVtcyddLFxuICAgIH0pO1xuICAgIGNvbnN0IHNjaGVtYSA9IHtcbiAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgdW5pcXVlSXRlbXM6IHRydWUsXG4gICAgICAgIGl0ZW1zLFxuICAgIH07XG4gICAgaWYgKGRlZi5taW5TaXplKSB7XG4gICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMoc2NoZW1hLCAnbWluSXRlbXMnLCBkZWYubWluU2l6ZS52YWx1ZSwgZGVmLm1pblNpemUubWVzc2FnZSwgcmVmcyk7XG4gICAgfVxuICAgIGlmIChkZWYubWF4U2l6ZSkge1xuICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHNjaGVtYSwgJ21heEl0ZW1zJywgZGVmLm1heFNpemUudmFsdWUsIGRlZi5tYXhTaXplLm1lc3NhZ2UsIHJlZnMpO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZW1hO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0Lm1qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVR1cGxlRGVmKGRlZiwgcmVmcykge1xuICAgIGlmIChkZWYucmVzdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgICAgIG1pbkl0ZW1zOiBkZWYuaXRlbXMubGVuZ3RoLFxuICAgICAgICAgICAgaXRlbXM6IGRlZi5pdGVtc1xuICAgICAgICAgICAgICAgIC5tYXAoKHgsIGkpID0+IHBhcnNlRGVmKHguX2RlZiwge1xuICAgICAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAnaXRlbXMnLCBgJHtpfWBdLFxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgLnJlZHVjZSgoYWNjLCB4KSA9PiAoeCA9PT0gdW5kZWZpbmVkID8gYWNjIDogWy4uLmFjYywgeF0pLCBbXSksXG4gICAgICAgICAgICBhZGRpdGlvbmFsSXRlbXM6IHBhcnNlRGVmKGRlZi5yZXN0Ll9kZWYsIHtcbiAgICAgICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FkZGl0aW9uYWxJdGVtcyddLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgICAgIG1pbkl0ZW1zOiBkZWYuaXRlbXMubGVuZ3RoLFxuICAgICAgICAgICAgbWF4SXRlbXM6IGRlZi5pdGVtcy5sZW5ndGgsXG4gICAgICAgICAgICBpdGVtczogZGVmLml0ZW1zXG4gICAgICAgICAgICAgICAgLm1hcCgoeCwgaSkgPT4gcGFyc2VEZWYoeC5fZGVmLCB7XG4gICAgICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdpdGVtcycsIGAke2l9YF0sXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAucmVkdWNlKChhY2MsIHgpID0+ICh4ID09PSB1bmRlZmluZWQgPyBhY2MgOiBbLi4uYWNjLCB4XSksIFtdKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10dXBsZS5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVW5kZWZpbmVkRGVmKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5vdDoge30sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuZGVmaW5lZC5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVW5rbm93bkRlZigpIHtcbiAgICByZXR1cm4ge307XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmtub3duLm1qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5tanNcIjtcbmV4cG9ydCBjb25zdCBwYXJzZVJlYWRvbmx5RGVmID0gKGRlZiwgcmVmcykgPT4ge1xuICAgIHJldHVybiBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHJlZnMpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWRvbmx5Lm1qcy5tYXAiLCJpbXBvcnQgeyBab2RGaXJzdFBhcnR5VHlwZUtpbmQgfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgcGFyc2VBbnlEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2FueS5tanNcIjtcbmltcG9ydCB7IHBhcnNlQXJyYXlEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2FycmF5Lm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VCaWdpbnREZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2JpZ2ludC5tanNcIjtcbmltcG9ydCB7IHBhcnNlQm9vbGVhbkRlZiB9IGZyb20gXCIuL3BhcnNlcnMvYm9vbGVhbi5tanNcIjtcbmltcG9ydCB7IHBhcnNlQnJhbmRlZERlZiB9IGZyb20gXCIuL3BhcnNlcnMvYnJhbmRlZC5tanNcIjtcbmltcG9ydCB7IHBhcnNlQ2F0Y2hEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2NhdGNoLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VEYXRlRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9kYXRlLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VEZWZhdWx0RGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9kZWZhdWx0Lm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VFZmZlY3RzRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9lZmZlY3RzLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VFbnVtRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9lbnVtLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VJbnRlcnNlY3Rpb25EZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2ludGVyc2VjdGlvbi5tanNcIjtcbmltcG9ydCB7IHBhcnNlTGl0ZXJhbERlZiB9IGZyb20gXCIuL3BhcnNlcnMvbGl0ZXJhbC5tanNcIjtcbmltcG9ydCB7IHBhcnNlTWFwRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9tYXAubWpzXCI7XG5pbXBvcnQgeyBwYXJzZU5hdGl2ZUVudW1EZWYgfSBmcm9tIFwiLi9wYXJzZXJzL25hdGl2ZUVudW0ubWpzXCI7XG5pbXBvcnQgeyBwYXJzZU5ldmVyRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9uZXZlci5tanNcIjtcbmltcG9ydCB7IHBhcnNlTnVsbERlZiB9IGZyb20gXCIuL3BhcnNlcnMvbnVsbC5tanNcIjtcbmltcG9ydCB7IHBhcnNlTnVsbGFibGVEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL251bGxhYmxlLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VOdW1iZXJEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL251bWJlci5tanNcIjtcbmltcG9ydCB7IHBhcnNlT2JqZWN0RGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9vYmplY3QubWpzXCI7XG5pbXBvcnQgeyBwYXJzZU9wdGlvbmFsRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9vcHRpb25hbC5tanNcIjtcbmltcG9ydCB7IHBhcnNlUGlwZWxpbmVEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL3BpcGVsaW5lLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VQcm9taXNlRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9wcm9taXNlLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VSZWNvcmREZWYgfSBmcm9tIFwiLi9wYXJzZXJzL3JlY29yZC5tanNcIjtcbmltcG9ydCB7IHBhcnNlU2V0RGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9zZXQubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVN0cmluZ0RlZiB9IGZyb20gXCIuL3BhcnNlcnMvc3RyaW5nLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VUdXBsZURlZiB9IGZyb20gXCIuL3BhcnNlcnMvdHVwbGUubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVVuZGVmaW5lZERlZiB9IGZyb20gXCIuL3BhcnNlcnMvdW5kZWZpbmVkLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VVbmlvbkRlZiB9IGZyb20gXCIuL3BhcnNlcnMvdW5pb24ubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVVua25vd25EZWYgfSBmcm9tIFwiLi9wYXJzZXJzL3Vua25vd24ubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVJlYWRvbmx5RGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9yZWFkb25seS5tanNcIjtcbmltcG9ydCB7IGlnbm9yZU92ZXJyaWRlIH0gZnJvbSBcIi4vT3B0aW9ucy5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURlZihkZWYsIHJlZnMsIGZvcmNlUmVzb2x1dGlvbiA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc2Vlbkl0ZW0gPSByZWZzLnNlZW4uZ2V0KGRlZik7XG4gICAgaWYgKHJlZnMub3ZlcnJpZGUpIHtcbiAgICAgICAgY29uc3Qgb3ZlcnJpZGVSZXN1bHQgPSByZWZzLm92ZXJyaWRlPy4oZGVmLCByZWZzLCBzZWVuSXRlbSwgZm9yY2VSZXNvbHV0aW9uKTtcbiAgICAgICAgaWYgKG92ZXJyaWRlUmVzdWx0ICE9PSBpZ25vcmVPdmVycmlkZSkge1xuICAgICAgICAgICAgcmV0dXJuIG92ZXJyaWRlUmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzZWVuSXRlbSAmJiAhZm9yY2VSZXNvbHV0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNlZW5TY2hlbWEgPSBnZXQkcmVmKHNlZW5JdGVtLCByZWZzKTtcbiAgICAgICAgaWYgKHNlZW5TY2hlbWEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCckcmVmJyBpbiBzZWVuU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgcmVmcy5zZWVuUmVmcy5hZGQoc2VlblNjaGVtYS4kcmVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZWVuU2NoZW1hO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG5ld0l0ZW0gPSB7IGRlZiwgcGF0aDogcmVmcy5jdXJyZW50UGF0aCwganNvblNjaGVtYTogdW5kZWZpbmVkIH07XG4gICAgcmVmcy5zZWVuLnNldChkZWYsIG5ld0l0ZW0pO1xuICAgIGNvbnN0IGpzb25TY2hlbWEgPSBzZWxlY3RQYXJzZXIoZGVmLCBkZWYudHlwZU5hbWUsIHJlZnMsIGZvcmNlUmVzb2x1dGlvbik7XG4gICAgaWYgKGpzb25TY2hlbWEpIHtcbiAgICAgICAgYWRkTWV0YShkZWYsIHJlZnMsIGpzb25TY2hlbWEpO1xuICAgIH1cbiAgICBuZXdJdGVtLmpzb25TY2hlbWEgPSBqc29uU2NoZW1hO1xuICAgIHJldHVybiBqc29uU2NoZW1hO1xufVxuY29uc3QgZ2V0JHJlZiA9IChpdGVtLCByZWZzKSA9PiB7XG4gICAgc3dpdGNoIChyZWZzLiRyZWZTdHJhdGVneSkge1xuICAgICAgICBjYXNlICdyb290JzpcbiAgICAgICAgICAgIHJldHVybiB7ICRyZWY6IGl0ZW0ucGF0aC5qb2luKCcvJykgfTtcbiAgICAgICAgLy8gdGhpcyBjYXNlIGlzIG5lZWRlZCBhcyBPcGVuQUkgc3RyaWN0IG1vZGUgZG9lc24ndCBzdXBwb3J0IHRvcC1sZXZlbCBgJHJlZmBzLCBpLmUuXG4gICAgICAgIC8vIHRoZSB0b3AtbGV2ZWwgc2NoZW1hICptdXN0KiBiZSBge1widHlwZVwiOiBcIm9iamVjdFwiLCBcInByb3BlcnRpZXNcIjogey4uLn19YCBidXQgaWYgd2UgZXZlclxuICAgICAgICAvLyBuZWVkIHRvIGRlZmluZSBhIGAkcmVmYCwgcmVsYXRpdmUgYCRyZWZgcyBhcmVuJ3Qgc3VwcG9ydGVkLCBzbyB3ZSBuZWVkIHRvIGV4dHJhY3RcbiAgICAgICAgLy8gdGhlIHNjaGVtYSB0byBgIy9kZWZpbml0aW9ucy9gIGFuZCByZWZlcmVuY2UgdGhhdC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gZS5nLiBpZiB3ZSBuZWVkIHRvIHJlZmVyZW5jZSBhIHNjaGVtYSBhdFxuICAgICAgICAvLyBgW1wiI1wiLFwiZGVmaW5pdGlvbnNcIixcImNvbnRhY3RQZXJzb25cIixcInByb3BlcnRpZXNcIixcInBlcnNvbjFcIixcInByb3BlcnRpZXNcIixcIm5hbWVcIl1gXG4gICAgICAgIC8vIHRoZW4gd2UnbGwgZXh0cmFjdCBpdCBvdXQgdG8gYGNvbnRhY3RQZXJzb25fcHJvcGVydGllc19wZXJzb24xX3Byb3BlcnRpZXNfbmFtZWBcbiAgICAgICAgY2FzZSAnZXh0cmFjdC10by1yb290JzpcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBpdGVtLnBhdGguc2xpY2UocmVmcy5iYXNlUGF0aC5sZW5ndGggKyAxKS5qb2luKCdfJyk7XG4gICAgICAgICAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIGV4dHJhY3QgdGhlIHJvb3Qgc2NoZW1hIGluIHRoaXMgY2FzZSwgYXMgaXQncyBhbHJlYWR5XG4gICAgICAgICAgICAvLyBiZWVuIGFkZGVkIHRvIHRoZSBkZWZpbml0aW9uc1xuICAgICAgICAgICAgaWYgKG5hbWUgIT09IHJlZnMubmFtZSAmJiByZWZzLm5hbWVTdHJhdGVneSA9PT0gJ2R1cGxpY2F0ZS1yZWYnKSB7XG4gICAgICAgICAgICAgICAgcmVmcy5kZWZpbml0aW9uc1tuYW1lXSA9IGl0ZW0uZGVmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgJHJlZjogWy4uLnJlZnMuYmFzZVBhdGgsIHJlZnMuZGVmaW5pdGlvblBhdGgsIG5hbWVdLmpvaW4oJy8nKSB9O1xuICAgICAgICBjYXNlICdyZWxhdGl2ZSc6XG4gICAgICAgICAgICByZXR1cm4geyAkcmVmOiBnZXRSZWxhdGl2ZVBhdGgocmVmcy5jdXJyZW50UGF0aCwgaXRlbS5wYXRoKSB9O1xuICAgICAgICBjYXNlICdub25lJzpcbiAgICAgICAgY2FzZSAnc2Vlbic6IHtcbiAgICAgICAgICAgIGlmIChpdGVtLnBhdGgubGVuZ3RoIDwgcmVmcy5jdXJyZW50UGF0aC5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICBpdGVtLnBhdGguZXZlcnkoKHZhbHVlLCBpbmRleCkgPT4gcmVmcy5jdXJyZW50UGF0aFtpbmRleF0gPT09IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgUmVjdXJzaXZlIHJlZmVyZW5jZSBkZXRlY3RlZCBhdCAke3JlZnMuY3VycmVudFBhdGguam9pbignLycpfSEgRGVmYXVsdGluZyB0byBhbnlgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVmcy4kcmVmU3RyYXRlZ3kgPT09ICdzZWVuJyA/IHt9IDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IGdldFJlbGF0aXZlUGF0aCA9IChwYXRoQSwgcGF0aEIpID0+IHtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBwYXRoQS5sZW5ndGggJiYgaSA8IHBhdGhCLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwYXRoQVtpXSAhPT0gcGF0aEJbaV0pXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIFsocGF0aEEubGVuZ3RoIC0gaSkudG9TdHJpbmcoKSwgLi4ucGF0aEIuc2xpY2UoaSldLmpvaW4oJy8nKTtcbn07XG5jb25zdCBzZWxlY3RQYXJzZXIgPSAoZGVmLCB0eXBlTmFtZSwgcmVmcywgZm9yY2VSZXNvbHV0aW9uKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlTmFtZSkge1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTdHJpbmc6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VTdHJpbmdEZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTnVtYmVyOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlTnVtYmVyRGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE9iamVjdDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU9iamVjdERlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RCaWdJbnQ6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VCaWdpbnREZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQm9vbGVhbjpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUJvb2xlYW5EZWYoKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRGF0ZTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZURhdGVEZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVW5kZWZpbmVkOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlVW5kZWZpbmVkRGVmKCk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bGw6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VOdWxsRGVmKHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RBcnJheTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUFycmF5RGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFVuaW9uOlxuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REaXNjcmltaW5hdGVkVW5pb246XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VVbmlvbkRlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RJbnRlcnNlY3Rpb246XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnRlcnNlY3Rpb25EZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVHVwbGU6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VUdXBsZURlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RSZWNvcmQ6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VSZWNvcmREZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTGl0ZXJhbDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUxpdGVyYWxEZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRW51bTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUVudW1EZWYoZGVmKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmF0aXZlRW51bTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU5hdGl2ZUVudW1EZWYoZGVmKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTnVsbGFibGU6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VOdWxsYWJsZURlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPcHRpb25hbDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU9wdGlvbmFsRGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE1hcDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU1hcERlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTZXQ6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VTZXREZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTGF6eTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZURlZihkZWYuZ2V0dGVyKCkuX2RlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFByb21pc2U6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VQcm9taXNlRGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hTjpcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmV2ZXI6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VOZXZlckRlZigpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRWZmZWN0c0RlZihkZWYsIHJlZnMsIGZvcmNlUmVzb2x1dGlvbik7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEFueTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUFueURlZigpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmtub3duOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlVW5rbm93bkRlZigpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRGVmYXVsdERlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RCcmFuZGVkOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlQnJhbmRlZERlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RSZWFkb25seTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVJlYWRvbmx5RGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZENhdGNoOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlQ2F0Y2hEZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUGlwZWxpbmU6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VQaXBlbGluZURlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RGdW5jdGlvbjpcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVm9pZDpcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kU3ltYm9sOlxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAoKF8pID0+IHVuZGVmaW5lZCkodHlwZU5hbWUpO1xuICAgIH1cbn07XG5jb25zdCBhZGRNZXRhID0gKGRlZiwgcmVmcywganNvblNjaGVtYSkgPT4ge1xuICAgIGlmIChkZWYuZGVzY3JpcHRpb24pIHtcbiAgICAgICAganNvblNjaGVtYS5kZXNjcmlwdGlvbiA9IGRlZi5kZXNjcmlwdGlvbjtcbiAgICAgICAgaWYgKHJlZnMubWFya2Rvd25EZXNjcmlwdGlvbikge1xuICAgICAgICAgICAganNvblNjaGVtYS5tYXJrZG93bkRlc2NyaXB0aW9uID0gZGVmLmRlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBqc29uU2NoZW1hO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlRGVmLm1qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuL3BhcnNlRGVmLm1qc1wiO1xuaW1wb3J0IHsgZ2V0UmVmcyB9IGZyb20gXCIuL1JlZnMubWpzXCI7XG5pbXBvcnQgeyB6b2REZWYsIGlzRW1wdHlPYmogfSBmcm9tIFwiLi91dGlsLm1qc1wiO1xuY29uc3Qgem9kVG9Kc29uU2NoZW1hID0gKHNjaGVtYSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHJlZnMgPSBnZXRSZWZzKG9wdGlvbnMpO1xuICAgIGNvbnN0IG5hbWUgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgPyBvcHRpb25zXG4gICAgICAgIDogb3B0aW9ucz8ubmFtZVN0cmF0ZWd5ID09PSAndGl0bGUnID8gdW5kZWZpbmVkXG4gICAgICAgICAgICA6IG9wdGlvbnM/Lm5hbWU7XG4gICAgY29uc3QgbWFpbiA9IHBhcnNlRGVmKHNjaGVtYS5fZGVmLCBuYW1lID09PSB1bmRlZmluZWQgPyByZWZzIDogKHtcbiAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmJhc2VQYXRoLCByZWZzLmRlZmluaXRpb25QYXRoLCBuYW1lXSxcbiAgICB9KSwgZmFsc2UpID8/IHt9O1xuICAgIGNvbnN0IHRpdGxlID0gdHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnICYmIG9wdGlvbnMubmFtZSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMubmFtZVN0cmF0ZWd5ID09PSAndGl0bGUnID9cbiAgICAgICAgb3B0aW9ucy5uYW1lXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIGlmICh0aXRsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1haW4udGl0bGUgPSB0aXRsZTtcbiAgICB9XG4gICAgY29uc3QgZGVmaW5pdGlvbnMgPSAoKCkgPT4ge1xuICAgICAgICBpZiAoaXNFbXB0eU9iaihyZWZzLmRlZmluaXRpb25zKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZWZpbml0aW9ucyA9IHt9O1xuICAgICAgICBjb25zdCBwcm9jZXNzZWREZWZpbml0aW9ucyA9IG5ldyBTZXQoKTtcbiAgICAgICAgLy8gdGhlIGNhbGwgdG8gYHBhcnNlRGVmKClgIGhlcmUgbWlnaHQgaXRzZWxmIGFkZCBtb3JlIGVudHJpZXMgdG8gYC5kZWZpbml0aW9uc2BcbiAgICAgICAgLy8gc28gd2UgbmVlZCB0byBjb250aW51YWxseSBldmFsdWF0ZSBkZWZpbml0aW9ucyB1bnRpbCB3ZSd2ZSByZXNvbHZlZCBhbGwgb2YgdGhlbVxuICAgICAgICAvL1xuICAgICAgICAvLyB3ZSBoYXZlIGEgZ2VuZXJvdXMgaXRlcmF0aW9uIGxpbWl0IGhlcmUgdG8gYXZvaWQgYmxvd2luZyB1cCB0aGUgc3RhY2sgaWYgdGhlcmVcbiAgICAgICAgLy8gYXJlIGFueSBidWdzIHRoYXQgd291bGQgb3RoZXJ3aXNlIHJlc3VsdCBpbiB1cyBpdGVyYXRpbmcgaW5kZWZpbml0ZWx5XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTAwOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0RlZmluaXRpb25zID0gT2JqZWN0LmVudHJpZXMocmVmcy5kZWZpbml0aW9ucykuZmlsdGVyKChba2V5XSkgPT4gIXByb2Nlc3NlZERlZmluaXRpb25zLmhhcyhrZXkpKTtcbiAgICAgICAgICAgIGlmIChuZXdEZWZpbml0aW9ucy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHNjaGVtYV0gb2YgbmV3RGVmaW5pdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uc1trZXldID1cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VEZWYoem9kRGVmKHNjaGVtYSksIHsgLi4ucmVmcywgY3VycmVudFBhdGg6IFsuLi5yZWZzLmJhc2VQYXRoLCByZWZzLmRlZmluaXRpb25QYXRoLCBrZXldIH0sIHRydWUpID8/IHt9O1xuICAgICAgICAgICAgICAgIHByb2Nlc3NlZERlZmluaXRpb25zLmFkZChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9ucztcbiAgICB9KSgpO1xuICAgIGNvbnN0IGNvbWJpbmVkID0gbmFtZSA9PT0gdW5kZWZpbmVkID9cbiAgICAgICAgZGVmaW5pdGlvbnMgP1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC4uLm1haW4sXG4gICAgICAgICAgICAgICAgW3JlZnMuZGVmaW5pdGlvblBhdGhdOiBkZWZpbml0aW9ucyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogbWFpblxuICAgICAgICA6IHJlZnMubmFtZVN0cmF0ZWd5ID09PSAnZHVwbGljYXRlLXJlZicgP1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC4uLm1haW4sXG4gICAgICAgICAgICAgICAgLi4uKGRlZmluaXRpb25zIHx8IHJlZnMuc2VlblJlZnMuc2l6ZSA/XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtyZWZzLmRlZmluaXRpb25QYXRoXToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRlZmluaXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgYWN0dWFsbHkgZHVwbGljYXRlIHRoZSBzY2hlbWEgZGVmaW5pdGlvbiBpZiBpdCB3YXMgZXZlciByZWZlcmVuY2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBkdXBsaWNhdGlvbiBpcyBjb21wbGV0ZWx5IHBvaW50bGVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihyZWZzLnNlZW5SZWZzLnNpemUgPyB7IFtuYW1lXTogbWFpbiB9IDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgJHJlZjogWy4uLihyZWZzLiRyZWZTdHJhdGVneSA9PT0gJ3JlbGF0aXZlJyA/IFtdIDogcmVmcy5iYXNlUGF0aCksIHJlZnMuZGVmaW5pdGlvblBhdGgsIG5hbWVdLmpvaW4oJy8nKSxcbiAgICAgICAgICAgICAgICBbcmVmcy5kZWZpbml0aW9uUGF0aF06IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uZGVmaW5pdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIFtuYW1lXTogbWFpbixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICBpZiAocmVmcy50YXJnZXQgPT09ICdqc29uU2NoZW1hNycpIHtcbiAgICAgICAgY29tYmluZWQuJHNjaGVtYSA9ICdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSMnO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZWZzLnRhcmdldCA9PT0gJ2pzb25TY2hlbWEyMDE5LTA5Jykge1xuICAgICAgICBjb21iaW5lZC4kc2NoZW1hID0gJ2h0dHBzOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LzIwMTktMDkvc2NoZW1hIyc7XG4gICAgfVxuICAgIHJldHVybiBjb21iaW5lZDtcbn07XG5leHBvcnQgeyB6b2RUb0pzb25TY2hlbWEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXpvZFRvSnNvblNjaGVtYS5tanMubWFwIiwiaW1wb3J0IHsgT3BlbkFJRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IubWpzXCI7XG5pbXBvcnQgeyBpc0F1dG9QYXJzYWJsZVJlc3BvbnNlRm9ybWF0IH0gZnJvbSBcIi4uL2xpYi9wYXJzZXIubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gbWF5YmVQYXJzZVJlc3BvbnNlKHJlc3BvbnNlLCBwYXJhbXMpIHtcbiAgICBpZiAoIXBhcmFtcyB8fCAhaGFzQXV0b1BhcnNlYWJsZUlucHV0KHBhcmFtcykpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnJlc3BvbnNlLFxuICAgICAgICAgICAgb3V0cHV0X3BhcnNlZDogbnVsbCxcbiAgICAgICAgICAgIG91dHB1dDogcmVzcG9uc2Uub3V0cHV0Lm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdmdW5jdGlvbl9jYWxsJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZF9hcmd1bWVudHM6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdtZXNzYWdlJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudC5tYXAoKGNvbnRlbnQpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlUmVzcG9uc2UocmVzcG9uc2UsIHBhcmFtcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSZXNwb25zZShyZXNwb25zZSwgcGFyYW1zKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gcmVzcG9uc2Uub3V0cHV0Lm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnZnVuY3Rpb25fY2FsbCcpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICBwYXJzZWRfYXJndW1lbnRzOiBwYXJzZVRvb2xDYWxsKHBhcmFtcywgaXRlbSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdtZXNzYWdlJykge1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGl0ZW0uY29udGVudC5tYXAoKGNvbnRlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudC50eXBlID09PSAnb3V0cHV0X3RleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkOiBwYXJzZVRleHRGb3JtYXQocGFyYW1zLCBjb250ZW50LnRleHQpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH0pO1xuICAgIGNvbnN0IHBhcnNlZCA9IE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlLCB7IG91dHB1dCB9KTtcbiAgICBpZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocmVzcG9uc2UsICdvdXRwdXRfdGV4dCcpKSB7XG4gICAgICAgIGFkZE91dHB1dFRleHQocGFyc2VkKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBhcnNlZCwgJ291dHB1dF9wYXJzZWQnLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3V0cHV0IG9mIHBhcnNlZC5vdXRwdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAob3V0cHV0LnR5cGUgIT09ICdtZXNzYWdlJykge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjb250ZW50IG9mIG91dHB1dC5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50LnR5cGUgPT09ICdvdXRwdXRfdGV4dCcgJiYgY29udGVudC5wYXJzZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50LnBhcnNlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBwYXJzZWQ7XG59XG5mdW5jdGlvbiBwYXJzZVRleHRGb3JtYXQocGFyYW1zLCBjb250ZW50KSB7XG4gICAgaWYgKHBhcmFtcy50ZXh0Py5mb3JtYXQ/LnR5cGUgIT09ICdqc29uX3NjaGVtYScpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICgnJHBhcnNlUmF3JyBpbiBwYXJhbXMudGV4dD8uZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IHRleHRfZm9ybWF0ID0gcGFyYW1zLnRleHQ/LmZvcm1hdDtcbiAgICAgICAgcmV0dXJuIHRleHRfZm9ybWF0LiRwYXJzZVJhdyhjb250ZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoY29udGVudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzQXV0b1BhcnNlYWJsZUlucHV0KHBhcmFtcykge1xuICAgIGlmIChpc0F1dG9QYXJzYWJsZVJlc3BvbnNlRm9ybWF0KHBhcmFtcy50ZXh0Py5mb3JtYXQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFrZVBhcnNlYWJsZVJlc3BvbnNlVG9vbCh0b29sLCB7IHBhcnNlciwgY2FsbGJhY2ssIH0pIHtcbiAgICBjb25zdCBvYmogPSB7IC4uLnRvb2wgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHtcbiAgICAgICAgJGJyYW5kOiB7XG4gICAgICAgICAgICB2YWx1ZTogJ2F1dG8tcGFyc2VhYmxlLXRvb2wnLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgICRwYXJzZVJhdzoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlcixcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICAkY2FsbGJhY2s6IHtcbiAgICAgICAgICAgIHZhbHVlOiBjYWxsYmFjayxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBdXRvUGFyc2FibGVUb29sKHRvb2wpIHtcbiAgICByZXR1cm4gdG9vbD8uWyckYnJhbmQnXSA9PT0gJ2F1dG8tcGFyc2VhYmxlLXRvb2wnO1xufVxuZnVuY3Rpb24gZ2V0SW5wdXRUb29sQnlOYW1lKGlucHV0X3Rvb2xzLCBuYW1lKSB7XG4gICAgcmV0dXJuIGlucHV0X3Rvb2xzLmZpbmQoKHRvb2wpID0+IHRvb2wudHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b29sLm5hbWUgPT09IG5hbWUpO1xufVxuZnVuY3Rpb24gcGFyc2VUb29sQ2FsbChwYXJhbXMsIHRvb2xDYWxsKSB7XG4gICAgY29uc3QgaW5wdXRUb29sID0gZ2V0SW5wdXRUb29sQnlOYW1lKHBhcmFtcy50b29scyA/PyBbXSwgdG9vbENhbGwubmFtZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4udG9vbENhbGwsXG4gICAgICAgIC4uLnRvb2xDYWxsLFxuICAgICAgICBwYXJzZWRfYXJndW1lbnRzOiBpc0F1dG9QYXJzYWJsZVRvb2woaW5wdXRUb29sKSA/IGlucHV0VG9vbC4kcGFyc2VSYXcodG9vbENhbGwuYXJndW1lbnRzKVxuICAgICAgICAgICAgOiBpbnB1dFRvb2w/LnN0cmljdCA/IEpTT04ucGFyc2UodG9vbENhbGwuYXJndW1lbnRzKVxuICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZFBhcnNlVG9vbENhbGwocGFyYW1zLCB0b29sQ2FsbCkge1xuICAgIGlmICghcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXRUb29sID0gZ2V0SW5wdXRUb29sQnlOYW1lKHBhcmFtcy50b29scyA/PyBbXSwgdG9vbENhbGwubmFtZSk7XG4gICAgcmV0dXJuIGlzQXV0b1BhcnNhYmxlVG9vbChpbnB1dFRvb2wpIHx8IGlucHV0VG9vbD8uc3RyaWN0IHx8IGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSW5wdXRUb29scyh0b29scykge1xuICAgIGZvciAoY29uc3QgdG9vbCBvZiB0b29scyA/PyBbXSkge1xuICAgICAgICBpZiAodG9vbC50eXBlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYEN1cnJlbnRseSBvbmx5IFxcYGZ1bmN0aW9uXFxgIHRvb2wgdHlwZXMgc3VwcG9ydCBhdXRvLXBhcnNpbmc7IFJlY2VpdmVkIFxcYCR7dG9vbC50eXBlfVxcYGApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b29sLmZ1bmN0aW9uLnN0cmljdCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBUaGUgXFxgJHt0b29sLmZ1bmN0aW9uLm5hbWV9XFxgIHRvb2wgaXMgbm90IG1hcmtlZCB3aXRoIFxcYHN0cmljdDogdHJ1ZVxcYC4gT25seSBzdHJpY3QgZnVuY3Rpb24gdG9vbHMgY2FuIGJlIGF1dG8tcGFyc2VkYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkT3V0cHV0VGV4dChyc3ApIHtcbiAgICBjb25zdCB0ZXh0cyA9IFtdO1xuICAgIGZvciAoY29uc3Qgb3V0cHV0IG9mIHJzcC5vdXRwdXQpIHtcbiAgICAgICAgaWYgKG91dHB1dC50eXBlICE9PSAnbWVzc2FnZScpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgY29udGVudCBvZiBvdXRwdXQuY29udGVudCkge1xuICAgICAgICAgICAgaWYgKGNvbnRlbnQudHlwZSA9PT0gJ291dHB1dF90ZXh0Jykge1xuICAgICAgICAgICAgICAgIHRleHRzLnB1c2goY29udGVudC50ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByc3Aub3V0cHV0X3RleHQgPSB0ZXh0cy5qb2luKCcnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlc3BvbnNlc1BhcnNlci5tanMubWFwIiwiaW1wb3J0IHsgbWFrZVBhcnNlYWJsZVJlc3BvbnNlRm9ybWF0LCBtYWtlUGFyc2VhYmxlVGV4dEZvcm1hdCwgbWFrZVBhcnNlYWJsZVRvb2wsIH0gZnJvbSBcIi4uL2xpYi9wYXJzZXIubWpzXCI7XG5pbXBvcnQgeyB6b2RUb0pzb25TY2hlbWEgYXMgX3pvZFRvSnNvblNjaGVtYSB9IGZyb20gXCIuLi9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9pbmRleC5tanNcIjtcbmltcG9ydCB7IG1ha2VQYXJzZWFibGVSZXNwb25zZVRvb2wgfSBmcm9tIFwiLi4vbGliL1Jlc3BvbnNlc1BhcnNlci5tanNcIjtcbmZ1bmN0aW9uIHpvZFRvSnNvblNjaGVtYShzY2hlbWEsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gX3pvZFRvSnNvblNjaGVtYShzY2hlbWEsIHtcbiAgICAgICAgb3BlbmFpU3RyaWN0TW9kZTogdHJ1ZSxcbiAgICAgICAgbmFtZTogb3B0aW9ucy5uYW1lLFxuICAgICAgICBuYW1lU3RyYXRlZ3k6ICdkdXBsaWNhdGUtcmVmJyxcbiAgICAgICAgJHJlZlN0cmF0ZWd5OiAnZXh0cmFjdC10by1yb290JyxcbiAgICAgICAgbnVsbGFibGVTdHJhdGVneTogJ3Byb3BlcnR5JyxcbiAgICB9KTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGNoYXQgY29tcGxldGlvbiBgSlNPTlNjaGVtYWAgcmVzcG9uc2UgZm9ybWF0IG9iamVjdCBmcm9tXG4gKiB0aGUgZ2l2ZW4gWm9kIHNjaGVtYS5cbiAqXG4gKiBJZiB0aGlzIGlzIHBhc3NlZCB0byB0aGUgYC5wYXJzZSgpYCwgYC5zdHJlYW0oKWAgb3IgYC5ydW5Ub29scygpYFxuICogY2hhdCBjb21wbGV0aW9uIG1ldGhvZHMgdGhlbiB0aGUgcmVzcG9uc2UgbWVzc2FnZSB3aWxsIGNvbnRhaW4gYVxuICogYC5wYXJzZWRgIHByb3BlcnR5IHRoYXQgaXMgdGhlIHJlc3VsdCBvZiBwYXJzaW5nIHRoZSBjb250ZW50IHdpdGhcbiAqIHRoZSBnaXZlbiBab2Qgb2JqZWN0LlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBjb21wbGV0aW9uID0gYXdhaXQgY2xpZW50LmNoYXQuY29tcGxldGlvbnMucGFyc2Uoe1xuICogICAgbW9kZWw6ICdncHQtNG8tMjAyNC0wOC0wNicsXG4gKiAgICBtZXNzYWdlczogW1xuICogICAgICB7IHJvbGU6ICdzeXN0ZW0nLCBjb250ZW50OiAnWW91IGFyZSBhIGhlbHBmdWwgbWF0aCB0dXRvci4nIH0sXG4gKiAgICAgIHsgcm9sZTogJ3VzZXInLCBjb250ZW50OiAnc29sdmUgOHggKyAzMSA9IDInIH0sXG4gKiAgICBdLFxuICogICAgcmVzcG9uc2VfZm9ybWF0OiB6b2RSZXNwb25zZUZvcm1hdChcbiAqICAgICAgei5vYmplY3Qoe1xuICogICAgICAgIHN0ZXBzOiB6LmFycmF5KHoub2JqZWN0KHtcbiAqICAgICAgICAgIGV4cGxhbmF0aW9uOiB6LnN0cmluZygpLFxuICogICAgICAgICAgYW5zd2VyOiB6LnN0cmluZygpLFxuICogICAgICAgIH0pKSxcbiAqICAgICAgICBmaW5hbF9hbnN3ZXI6IHouc3RyaW5nKCksXG4gKiAgICAgIH0pLFxuICogICAgICAnbWF0aF9hbnN3ZXInLFxuICogICAgKSxcbiAqICB9KTtcbiAqICBjb25zdCBtZXNzYWdlID0gY29tcGxldGlvbi5jaG9pY2VzWzBdPy5tZXNzYWdlO1xuICogIGlmIChtZXNzYWdlPy5wYXJzZWQpIHtcbiAqICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UucGFyc2VkKTtcbiAqICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UucGFyc2VkLmZpbmFsX2Fuc3dlcik7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUaGlzIGNhbiBiZSBwYXNzZWQgZGlyZWN0bHkgdG8gdGhlIGAuY3JlYXRlKClgIG1ldGhvZCBidXQgd2lsbCBub3RcbiAqIHJlc3VsdCBpbiBhbnkgYXV0b21hdGljIHBhcnNpbmcsIHlvdSdsbCBoYXZlIHRvIHBhcnNlIHRoZSByZXNwb25zZSB5b3Vyc2VsZi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHpvZFJlc3BvbnNlRm9ybWF0KHpvZE9iamVjdCwgbmFtZSwgcHJvcHMpIHtcbiAgICByZXR1cm4gbWFrZVBhcnNlYWJsZVJlc3BvbnNlRm9ybWF0KHtcbiAgICAgICAgdHlwZTogJ2pzb25fc2NoZW1hJyxcbiAgICAgICAganNvbl9zY2hlbWE6IHtcbiAgICAgICAgICAgIC4uLnByb3BzLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICAgIHNjaGVtYTogem9kVG9Kc29uU2NoZW1hKHpvZE9iamVjdCwgeyBuYW1lIH0pLFxuICAgICAgICB9LFxuICAgIH0sIChjb250ZW50KSA9PiB6b2RPYmplY3QucGFyc2UoSlNPTi5wYXJzZShjb250ZW50KSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHpvZFRleHRGb3JtYXQoem9kT2JqZWN0LCBuYW1lLCBwcm9wcykge1xuICAgIHJldHVybiBtYWtlUGFyc2VhYmxlVGV4dEZvcm1hdCh7XG4gICAgICAgIHR5cGU6ICdqc29uX3NjaGVtYScsXG4gICAgICAgIC4uLnByb3BzLFxuICAgICAgICBuYW1lLFxuICAgICAgICBzdHJpY3Q6IHRydWUsXG4gICAgICAgIHNjaGVtYTogem9kVG9Kc29uU2NoZW1hKHpvZE9iamVjdCwgeyBuYW1lIH0pLFxuICAgIH0sIChjb250ZW50KSA9PiB6b2RPYmplY3QucGFyc2UoSlNPTi5wYXJzZShjb250ZW50KSkpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgY2hhdCBjb21wbGV0aW9uIGBmdW5jdGlvbmAgdG9vbCB0aGF0IGNhbiBiZSBpbnZva2VkXG4gKiBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBjaGF0IGNvbXBsZXRpb24gYC5ydW5Ub29scygpYCBtZXRob2Qgb3IgYXV0b21hdGljYWxseVxuICogcGFyc2VkIGJ5IGAucGFyc2UoKWAgLyBgLnN0cmVhbSgpYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHpvZEZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE9cbiAgICByZXR1cm4gbWFrZVBhcnNlYWJsZVRvb2woe1xuICAgICAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICAgICAgICBmdW5jdGlvbjoge1xuICAgICAgICAgICAgbmFtZTogb3B0aW9ucy5uYW1lLFxuICAgICAgICAgICAgcGFyYW1ldGVyczogem9kVG9Kc29uU2NoZW1hKG9wdGlvbnMucGFyYW1ldGVycywgeyBuYW1lOiBvcHRpb25zLm5hbWUgfSksXG4gICAgICAgICAgICBzdHJpY3Q6IHRydWUsXG4gICAgICAgICAgICAuLi4ob3B0aW9ucy5kZXNjcmlwdGlvbiA/IHsgZGVzY3JpcHRpb246IG9wdGlvbnMuZGVzY3JpcHRpb24gfSA6IHVuZGVmaW5lZCksXG4gICAgICAgIH0sXG4gICAgfSwge1xuICAgICAgICBjYWxsYmFjazogb3B0aW9ucy5mdW5jdGlvbixcbiAgICAgICAgcGFyc2VyOiAoYXJncykgPT4gb3B0aW9ucy5wYXJhbWV0ZXJzLnBhcnNlKEpTT04ucGFyc2UoYXJncykpLFxuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHpvZFJlc3BvbnNlc0Z1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbWFrZVBhcnNlYWJsZVJlc3BvbnNlVG9vbCh7XG4gICAgICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gICAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcbiAgICAgICAgcGFyYW1ldGVyczogem9kVG9Kc29uU2NoZW1hKG9wdGlvbnMucGFyYW1ldGVycywgeyBuYW1lOiBvcHRpb25zLm5hbWUgfSksXG4gICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgLi4uKG9wdGlvbnMuZGVzY3JpcHRpb24gPyB7IGRlc2NyaXB0aW9uOiBvcHRpb25zLmRlc2NyaXB0aW9uIH0gOiB1bmRlZmluZWQpLFxuICAgIH0sIHtcbiAgICAgICAgY2FsbGJhY2s6IG9wdGlvbnMuZnVuY3Rpb24sXG4gICAgICAgIHBhcnNlcjogKGFyZ3MpID0+IG9wdGlvbnMucGFyYW1ldGVycy5wYXJzZShKU09OLnBhcnNlKGFyZ3MpKSxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXpvZC5tanMubWFwIiwiLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgZXJyb3JzIHRocm93biBieSB0aGUgbGlicmFyeS5cbiAqL1xuZXhwb3J0IGNsYXNzIEFnZW50c0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIHN0YXRlO1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgfVxufVxuLyoqXG4gKiBTeXN0ZW0gZXJyb3IgdGhyb3duIHdoZW4gdGhlIGxpYnJhcnkgZW5jb3VudGVycyBhbiBlcnJvciB0aGF0IGlzIG5vdCBjYXVzZWQgYnkgdGhlIHVzZXInc1xuICogbWlzY29uZmlndXJhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFN5c3RlbUVycm9yIGV4dGVuZHMgQWdlbnRzRXJyb3Ige1xufVxuLyoqXG4gKiBFcnJvciB0aHJvd24gd2hlbiB0aGUgbWF4aW11bSBudW1iZXIgb2YgdHVybnMgaXMgZXhjZWVkZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXhUdXJuc0V4Y2VlZGVkRXJyb3IgZXh0ZW5kcyBBZ2VudHNFcnJvciB7XG59XG4vKipcbiAqIEVycm9yIHRocm93biB3aGVuIGEgbW9kZWwgYmVoYXZpb3IgaXMgdW5leHBlY3RlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIE1vZGVsQmVoYXZpb3JFcnJvciBleHRlbmRzIEFnZW50c0Vycm9yIHtcbn1cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gdGhlIGVycm9yIGlzIGNhdXNlZCBieSB0aGUgbGlicmFyeSB1c2VyJ3MgbWlzY29uZmlndXJhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXJFcnJvciBleHRlbmRzIEFnZW50c0Vycm9yIHtcbn1cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gYSBndWFyZHJhaWwgZXhlY3V0aW9uIGZhaWxzLlxuICovXG5leHBvcnQgY2xhc3MgR3VhcmRyYWlsRXhlY3V0aW9uRXJyb3IgZXh0ZW5kcyBBZ2VudHNFcnJvciB7XG4gICAgZXJyb3I7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgZXJyb3IsIHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHN0YXRlKTtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgIH1cbn1cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gYSB0b29sIGNhbGwgZmFpbHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUb29sQ2FsbEVycm9yIGV4dGVuZHMgQWdlbnRzRXJyb3Ige1xuICAgIGVycm9yO1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGVycm9yLCBzdGF0ZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBzdGF0ZSk7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICB9XG59XG4vKipcbiAqIEVycm9yIHRocm93biB3aGVuIGFuIGlucHV0IGd1YXJkcmFpbCB0cmlwd2lyZSBpcyB0cmlnZ2VyZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkIGV4dGVuZHMgQWdlbnRzRXJyb3Ige1xuICAgIHJlc3VsdDtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCByZXN1bHQsIHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHN0YXRlKTtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG4gICAgfVxufVxuLyoqXG4gKiBFcnJvciB0aHJvd24gd2hlbiBhbiBvdXRwdXQgZ3VhcmRyYWlsIHRyaXB3aXJlIGlzIHRyaWdnZXJlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIE91dHB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkIGV4dGVuZHMgQWdlbnRzRXJyb3Ige1xuICAgIHJlc3VsdDtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCByZXN1bHQsIHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHN0YXRlKTtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLm1qcy5tYXAiLCIvKipcbiAqIFZlcmlmaWVzIHRoYXQgYW4gaW5wdXQgaXMgYSBab2RPYmplY3Qgd2l0aG91dCBuZWVkaW5nIHRvIGhhdmUgWm9kIGF0IHJ1bnRpbWUgc2luY2UgaXQncyBhblxuICogb3B0aW9uYWwgZGVwZW5kZW5jeS5cbiAqIEBwYXJhbSBpbnB1dFxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzWm9kT2JqZWN0KGlucHV0KSB7XG4gICAgcmV0dXJuICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmXG4gICAgICAgIGlucHV0ICE9PSBudWxsICYmXG4gICAgICAgICdfZGVmJyBpbiBpbnB1dCAmJlxuICAgICAgICB0eXBlb2YgaW5wdXQuX2RlZiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgaW5wdXQuX2RlZiAhPT0gbnVsbCAmJlxuICAgICAgICAndHlwZU5hbWUnIGluIGlucHV0Ll9kZWYgJiZcbiAgICAgICAgaW5wdXQuX2RlZi50eXBlTmFtZSA9PT0gJ1pvZE9iamVjdCcpO1xufVxuLyoqXG4gKiBWZXJpZmllcyB0aGF0IGFuIGlucHV0IGlzIGFuIG9iamVjdCB3aXRoIGFuIGBpbnB1dGAgcHJvcGVydHkuXG4gKiBAcGFyYW0gaW5wdXRcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FnZW50VG9vbElucHV0KGlucHV0KSB7XG4gICAgcmV0dXJuICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmXG4gICAgICAgIGlucHV0ICE9PSBudWxsICYmXG4gICAgICAgICdpbnB1dCcgaW4gaW5wdXQgJiZcbiAgICAgICAgdHlwZW9mIGlucHV0LmlucHV0ID09PSAnc3RyaW5nJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlR3VhcmRzLm1qcy5tYXAiLCJpbXBvcnQgeyB6b2RSZXNwb25zZXNGdW5jdGlvbiwgem9kVGV4dEZvcm1hdCB9IGZyb20gJ29wZW5haS9oZWxwZXJzL3pvZCc7XG5pbXBvcnQgeyBVc2VyRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzLm1qc1wiO1xuaW1wb3J0IHsgaXNab2RPYmplY3QgfSBmcm9tIFwiLi90eXBlR3VhcmRzLm1qc1wiO1xuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIHRvIGEgZnVuY3Rpb24gdG9vbCBuYW1lIGJ5IHJlcGxhY2luZyBzcGFjZXMgd2l0aCB1bmRlcnNjb3JlcyBhbmRcbiAqIG5vbi1hbHBoYW51bWVyaWMgY2hhcmFjdGVycyB3aXRoIHVuZGVyc2NvcmVzLlxuICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdG9vbC5cbiAqIEByZXR1cm5zIFRoZSBmdW5jdGlvbiB0b29sIG5hbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0Z1bmN0aW9uVG9vbE5hbWUobmFtZSkge1xuICAgIC8vIFJlcGxhY2Ugc3BhY2VzIHdpdGggdW5kZXJzY29yZXNcbiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9cXHMvZywgJ18nKTtcbiAgICAvLyBSZXBsYWNlIG5vbi1hbHBoYW51bWVyaWMgY2hhcmFjdGVycyB3aXRoIHVuZGVyc2NvcmVzXG4gICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW15hLXpBLVowLTldL2csICdfJyk7XG4gICAgLy8gRW5zdXJlIHRoZSBuYW1lIGlzIG5vdCBlbXB0eVxuICAgIGlmIChuYW1lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rvb2wgbmFtZSBjYW5ub3QgYmUgZW1wdHknKTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWU7XG59XG4vKipcbiAqIEdldCB0aGUgc2NoZW1hIGFuZCBwYXJzZXIgZnJvbSBhbiBpbnB1dCB0eXBlLiBJZiB0aGUgaW5wdXQgdHlwZSBpcyBhIFpvZE9iamVjdCwgd2Ugd2lsbCBjb252ZXJ0XG4gKiBpdCBpbnRvIGEgSlNPTiBTY2hlbWEgYW5kIHVzZSBab2QgYXMgcGFyc2VyLiBJZiB0aGUgaW5wdXQgdHlwZSBpcyBhIEpTT04gc2NoZW1hLCB3ZSB1c2UgdGhlXG4gKiBKU09OLnBhcnNlIGZ1bmN0aW9uIHRvIGdldCB0aGUgcGFyc2VyLlxuICogQHBhcmFtIGlucHV0VHlwZSAtIFRoZSBpbnB1dCB0eXBlIHRvIGdldCB0aGUgc2NoZW1hIGFuZCBwYXJzZXIgZnJvbS5cbiAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHRvb2wuXG4gKiBAcmV0dXJucyBUaGUgc2NoZW1hIGFuZCBwYXJzZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2hlbWFBbmRQYXJzZXJGcm9tSW5wdXRUeXBlKGlucHV0VHlwZSwgbmFtZSkge1xuICAgIGNvbnN0IHBhcnNlciA9IChpbnB1dCkgPT4gSlNPTi5wYXJzZShpbnB1dCk7XG4gICAgaWYgKGlzWm9kT2JqZWN0KGlucHV0VHlwZSkpIHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkRnVuY3Rpb24gPSB6b2RSZXNwb25zZXNGdW5jdGlvbih7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgcGFyYW1ldGVyczogaW5wdXRUeXBlLFxuICAgICAgICAgICAgZnVuY3Rpb246ICgpID0+IHsgfSwgLy8gZW1wdHkgZnVuY3Rpb24gaGVyZSB0byBzYXRpc2Z5IHRoZSBPcGVuQUkgaGVscGVyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NoZW1hOiBmb3JtYXR0ZWRGdW5jdGlvbi5wYXJhbWV0ZXJzLFxuICAgICAgICAgICAgcGFyc2VyOiBmb3JtYXR0ZWRGdW5jdGlvbi4kcGFyc2VSYXcsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dFR5cGUgPT09ICdvYmplY3QnICYmIGlucHV0VHlwZSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NoZW1hOiBpbnB1dFR5cGUsXG4gICAgICAgICAgICBwYXJzZXIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ0lucHV0IHR5cGUgaXMgbm90IGEgWm9kT2JqZWN0IG9yIGEgdmFsaWQgSlNPTiBzY2hlbWEnKTtcbn1cbi8qKlxuICogQ29udmVydHMgdGhlIGFnZW50IG91dHB1dCB0eXBlIHByb3ZpZGVkIHRvIGEgc2VyaWFsaXphYmxlIHZlcnNpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRBZ2VudE91dHB1dFR5cGVUb1NlcmlhbGl6YWJsZShvdXRwdXRUeXBlKSB7XG4gICAgaWYgKG91dHB1dFR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICByZXR1cm4gJ3RleHQnO1xuICAgIH1cbiAgICBpZiAoaXNab2RPYmplY3Qob3V0cHV0VHlwZSkpIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gem9kVGV4dEZvcm1hdChvdXRwdXRUeXBlLCAnb3V0cHV0Jyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBvdXRwdXQudHlwZSxcbiAgICAgICAgICAgIG5hbWU6IG91dHB1dC5uYW1lLFxuICAgICAgICAgICAgc3RyaWN0OiBvdXRwdXQuc3RyaWN0IHx8IGZhbHNlLFxuICAgICAgICAgICAgc2NoZW1hOiBvdXRwdXQuc2NoZW1hLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0VHlwZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvb2xzLm1qcy5tYXAiLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcblx0Y3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG5cdGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuXHRjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cdGNyZWF0ZURlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGRlYnVnIGluc3RhbmNlIHRvIGJlIGNvbG9yZWRcblx0KiBAcmV0dXJuIHtOdW1iZXJ8U3RyaW5nfSBBbiBBTlNJIGNvbG9yIGNvZGUgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG5cdFx0bGV0IGhhc2ggPSAwO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0aGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcblx0XHR9XG5cblx0XHRyZXR1cm4gY3JlYXRlRGVidWcuY29sb3JzW01hdGguYWJzKGhhc2gpICUgY3JlYXRlRGVidWcuY29sb3JzLmxlbmd0aF07XG5cdH1cblx0Y3JlYXRlRGVidWcuc2VsZWN0Q29sb3IgPSBzZWxlY3RDb2xvcjtcblxuXHQvKipcblx0KiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAcmV0dXJuIHtGdW5jdGlvbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblx0XHRsZXQgcHJldlRpbWU7XG5cdFx0bGV0IGVuYWJsZU92ZXJyaWRlID0gbnVsbDtcblx0XHRsZXQgbmFtZXNwYWNlc0NhY2hlO1xuXHRcdGxldCBlbmFibGVkQ2FjaGU7XG5cblx0XHRmdW5jdGlvbiBkZWJ1ZyguLi5hcmdzKSB7XG5cdFx0XHQvLyBEaXNhYmxlZD9cblx0XHRcdGlmICghZGVidWcuZW5hYmxlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNlbGYgPSBkZWJ1ZztcblxuXHRcdFx0Ly8gU2V0IGBkaWZmYCB0aW1lc3RhbXBcblx0XHRcdGNvbnN0IGN1cnIgPSBOdW1iZXIobmV3IERhdGUoKSk7XG5cdFx0XHRjb25zdCBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG5cdFx0XHRzZWxmLmRpZmYgPSBtcztcblx0XHRcdHNlbGYucHJldiA9IHByZXZUaW1lO1xuXHRcdFx0c2VsZi5jdXJyID0gY3Vycjtcblx0XHRcdHByZXZUaW1lID0gY3VycjtcblxuXHRcdFx0YXJnc1swXSA9IGNyZWF0ZURlYnVnLmNvZXJjZShhcmdzWzBdKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHQvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuXHRcdFx0XHRhcmdzLnVuc2hpZnQoJyVPJyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cdFx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdFx0YXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIChtYXRjaCwgZm9ybWF0KSA9PiB7XG5cdFx0XHRcdC8vIElmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcblx0XHRcdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRcdFx0cmV0dXJuICclJztcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcblx0XHRkZWJ1Zy5jb2xvciA9IGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdGRlYnVnLmRlc3Ryb3kgPSBjcmVhdGVEZWJ1Zy5kZXN0cm95OyAvLyBYWFggVGVtcG9yYXJ5LiBXaWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZWJ1ZywgJ2VuYWJsZWQnLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRcdGdldDogKCkgPT4ge1xuXHRcdFx0XHRpZiAoZW5hYmxlT3ZlcnJpZGUgIT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gZW5hYmxlT3ZlcnJpZGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG5hbWVzcGFjZXNDYWNoZSAhPT0gY3JlYXRlRGVidWcubmFtZXNwYWNlcykge1xuXHRcdFx0XHRcdG5hbWVzcGFjZXNDYWNoZSA9IGNyZWF0ZURlYnVnLm5hbWVzcGFjZXM7XG5cdFx0XHRcdFx0ZW5hYmxlZENhY2hlID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVuYWJsZWRDYWNoZTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IHYgPT4ge1xuXHRcdFx0XHRlbmFibGVPdmVycmlkZSA9IHY7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBFbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuXHRcdGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlYnVnO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0Y29uc3QgbmV3RGVidWcgPSBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuXHRcdG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuXHRcdHJldHVybiBuZXdEZWJ1Zztcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cdFx0Y3JlYXRlRGVidWcubmFtZXNwYWNlcyA9IG5hbWVzcGFjZXM7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXFxzKy9nLCAnLCcpXG5cdFx0XHQuc3BsaXQoJywnKVxuXHRcdFx0LmZpbHRlcihCb29sZWFuKTtcblxuXHRcdGZvciAoY29uc3QgbnMgb2Ygc3BsaXQpIHtcblx0XHRcdGlmIChuc1swXSA9PT0gJy0nKSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobnMuc2xpY2UoMSkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcubmFtZXMucHVzaChucyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gc3RyaW5nIG1hdGNoZXMgYSBuYW1lc3BhY2UgdGVtcGxhdGUsIGhvbm9yaW5nXG5cdCAqIGFzdGVyaXNrcyBhcyB3aWxkY2FyZHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hcblx0ICogQHBhcmFtIHtTdHJpbmd9IHRlbXBsYXRlXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCAqL1xuXHRmdW5jdGlvbiBtYXRjaGVzVGVtcGxhdGUoc2VhcmNoLCB0ZW1wbGF0ZSkge1xuXHRcdGxldCBzZWFyY2hJbmRleCA9IDA7XG5cdFx0bGV0IHRlbXBsYXRlSW5kZXggPSAwO1xuXHRcdGxldCBzdGFySW5kZXggPSAtMTtcblx0XHRsZXQgbWF0Y2hJbmRleCA9IDA7XG5cblx0XHR3aGlsZSAoc2VhcmNoSW5kZXggPCBzZWFyY2gubGVuZ3RoKSB7XG5cdFx0XHRpZiAodGVtcGxhdGVJbmRleCA8IHRlbXBsYXRlLmxlbmd0aCAmJiAodGVtcGxhdGVbdGVtcGxhdGVJbmRleF0gPT09IHNlYXJjaFtzZWFyY2hJbmRleF0gfHwgdGVtcGxhdGVbdGVtcGxhdGVJbmRleF0gPT09ICcqJykpIHtcblx0XHRcdFx0Ly8gTWF0Y2ggY2hhcmFjdGVyIG9yIHByb2NlZWQgd2l0aCB3aWxkY2FyZFxuXHRcdFx0XHRpZiAodGVtcGxhdGVbdGVtcGxhdGVJbmRleF0gPT09ICcqJykge1xuXHRcdFx0XHRcdHN0YXJJbmRleCA9IHRlbXBsYXRlSW5kZXg7XG5cdFx0XHRcdFx0bWF0Y2hJbmRleCA9IHNlYXJjaEluZGV4O1xuXHRcdFx0XHRcdHRlbXBsYXRlSW5kZXgrKzsgLy8gU2tpcCB0aGUgJyonXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VhcmNoSW5kZXgrKztcblx0XHRcdFx0XHR0ZW1wbGF0ZUluZGV4Kys7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoc3RhckluZGV4ICE9PSAtMSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lZ2F0ZWQtY29uZGl0aW9uXG5cdFx0XHRcdC8vIEJhY2t0cmFjayB0byB0aGUgbGFzdCAnKicgYW5kIHRyeSB0byBtYXRjaCBtb3JlIGNoYXJhY3RlcnNcblx0XHRcdFx0dGVtcGxhdGVJbmRleCA9IHN0YXJJbmRleCArIDE7XG5cdFx0XHRcdG1hdGNoSW5kZXgrKztcblx0XHRcdFx0c2VhcmNoSW5kZXggPSBtYXRjaEluZGV4O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBObyBtYXRjaFxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSB0cmFpbGluZyAnKicgaW4gdGVtcGxhdGVcblx0XHR3aGlsZSAodGVtcGxhdGVJbmRleCA8IHRlbXBsYXRlLmxlbmd0aCAmJiB0ZW1wbGF0ZVt0ZW1wbGF0ZUluZGV4XSA9PT0gJyonKSB7XG5cdFx0XHR0ZW1wbGF0ZUluZGV4Kys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRlbXBsYXRlSW5kZXggPT09IHRlbXBsYXRlLmxlbmd0aDtcblx0fVxuXG5cdC8qKlxuXHQqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuXHQqXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRjb25zdCBuYW1lc3BhY2VzID0gW1xuXHRcdFx0Li4uY3JlYXRlRGVidWcubmFtZXMsXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5za2lwcy5tYXAobmFtZXNwYWNlID0+ICctJyArIG5hbWVzcGFjZSlcblx0XHRdLmpvaW4oJywnKTtcblx0XHRjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuXHRcdHJldHVybiBuYW1lc3BhY2VzO1xuXHR9XG5cblx0LyoqXG5cdCogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVcblx0KiBAcmV0dXJuIHtCb29sZWFufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuXHRcdGZvciAoY29uc3Qgc2tpcCBvZiBjcmVhdGVEZWJ1Zy5za2lwcykge1xuXHRcdFx0aWYgKG1hdGNoZXNUZW1wbGF0ZShuYW1lLCBza2lwKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCBucyBvZiBjcmVhdGVEZWJ1Zy5uYW1lcykge1xuXHRcdFx0aWYgKG1hdGNoZXNUZW1wbGF0ZShuYW1lLCBucykpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCogQ29lcmNlIGB2YWxgLlxuXHQqXG5cdCogQHBhcmFtIHtNaXhlZH0gdmFsXG5cdCogQHJldHVybiB7TWl4ZWR9XG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcblx0XHRpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHQvKipcblx0KiBYWFggRE8gTk9UIFVTRS4gVGhpcyBpcyBhIHRlbXBvcmFyeSBzdHViIGZ1bmN0aW9uLlxuXHQqIFhYWCBJdCBXSUxMIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblx0Ki9cblx0ZnVuY3Rpb24gZGVzdHJveSgpIHtcblx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0fVxuXG5cdGNyZWF0ZURlYnVnLmVuYWJsZShjcmVhdGVEZWJ1Zy5sb2FkKCkpO1xuXG5cdHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuZXhwb3J0cy5kZXN0cm95ID0gKCgpID0+IHtcblx0bGV0IHdhcm5lZCA9IGZhbHNlO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKCF3YXJuZWQpIHtcblx0XHRcdHdhcm5lZCA9IHRydWU7XG5cdFx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0XHR9XG5cdH07XG59KSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRsZXQgbTtcblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmV0dXJuLWFzc2lnblxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiAobSA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pKSAmJiBwYXJzZUludChtWzFdLCAxMCkgPj0gMzEpIHx8XG5cdFx0Ly8gRG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG5cdGFyZ3NbMF0gPSAodGhpcy51c2VDb2xvcnMgPyAnJWMnIDogJycpICtcblx0XHR0aGlzLm5hbWVzcGFjZSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyAlYycgOiAnICcpICtcblx0XHRhcmdzWzBdICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnJWMgJyA6ICcgJykgK1xuXHRcdCcrJyArIG1vZHVsZS5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cblx0aWYgKCF0aGlzLnVzZUNvbG9ycykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuXHRhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKTtcblxuXHQvLyBUaGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuXHQvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG5cdC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuXHRsZXQgaW5kZXggPSAwO1xuXHRsZXQgbGFzdEMgPSAwO1xuXHRhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgbWF0Y2ggPT4ge1xuXHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpbmRleCsrO1xuXHRcdGlmIChtYXRjaCA9PT0gJyVjJykge1xuXHRcdFx0Ly8gV2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG5cdFx0XHQvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuXHRcdFx0bGFzdEMgPSBpbmRleDtcblx0XHR9XG5cdH0pO1xuXG5cdGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmRlYnVnKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICogSWYgYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBhdmFpbGFibGUsIGZhbGxzIGJhY2tcbiAqIHRvIGBjb25zb2xlLmxvZ2AuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZXhwb3J0cy5sb2cgPSBjb25zb2xlLmRlYnVnIHx8IGNvbnNvbGUubG9nIHx8ICgoKSA9PiB7fSk7XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcblx0dHJ5IHtcblx0XHRpZiAobmFtZXNwYWNlcykge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnNldEl0ZW0oJ2RlYnVnJywgbmFtZXNwYWNlcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbG9hZCgpIHtcblx0bGV0IHI7XG5cdHRyeSB7XG5cdFx0ciA9IGV4cG9ydHMuc3RvcmFnZS5nZXRJdGVtKCdkZWJ1ZycpIHx8IGV4cG9ydHMuc3RvcmFnZS5nZXRJdGVtKCdERUJVRycpIDtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cblxuXHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuXHRcdHIgPSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcblx0dHJ5IHtcblx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0Ly8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cblx0XHRyZXR1cm4gbG9jYWxTdG9yYWdlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuXHR0cnkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0fVxufTtcbiIsImltcG9ydCB7IGxvYWRFbnYgYXMgX2xvYWRFbnYsIGlzQnJvd3NlckVudmlyb25tZW50LCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvX3NoaW1zJztcbi8qKlxuICogTG9hZHMgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZyb20gdGhlIHByb2Nlc3MgZW52aXJvbm1lbnQuXG4gKlxuICogQHJldHVybnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWRFbnYoKSB7XG4gICAgcmV0dXJuIF9sb2FkRW52KCk7XG59XG4vKipcbiAqIENoZWNrcyBpZiBhIGZsYWcgaXMgZW5hYmxlZCBpbiB0aGUgZW52aXJvbm1lbnQuXG4gKlxuICogQHBhcmFtIGZsYWdOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGZsYWcgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGZsYWcgaXMgZW5hYmxlZCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzRW5hYmxlZChmbGFnTmFtZSkge1xuICAgIGNvbnN0IGVudiA9IGxvYWRFbnYoKTtcbiAgICByZXR1cm4gKHR5cGVvZiBlbnYgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIChlbnZbZmxhZ05hbWVdID09PSAndHJ1ZScgfHwgZW52W2ZsYWdOYW1lXSA9PT0gJzEnKSk7XG59XG4vKipcbiAqIEdsb2JhbCBjb25maWd1cmF0aW9uIGZvciB0cmFjaW5nLlxuICovXG5leHBvcnQgY29uc3QgdHJhY2luZyA9IHtcbiAgICBnZXQgZGlzYWJsZWQoKSB7XG4gICAgICAgIGlmIChpc0Jyb3dzZXJFbnZpcm9ubWVudCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsb2FkRW52KCkuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAgICAgICAgICAgLy8gZGlzYWJsaW5nIGJ5IGRlZmF1bHQgaW4gdGVzdHNcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0VuYWJsZWQoJ09QRU5BSV9BR0VOVFNfRElTQUJMRV9UUkFDSU5HJyk7XG4gICAgfSxcbn07XG4vKipcbiAqIEdsb2JhbCBjb25maWd1cmF0aW9uIGZvciBsb2dnaW5nLlxuICovXG5leHBvcnQgY29uc3QgbG9nZ2luZyA9IHtcbiAgICBnZXQgZG9udExvZ01vZGVsRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIGlzRW5hYmxlZCgnT1BFTkFJX0FHRU5UU19ET05UX0xPR19NT0RFTF9EQVRBJyk7XG4gICAgfSxcbiAgICBnZXQgZG9udExvZ1Rvb2xEYXRhKCkge1xuICAgICAgICByZXR1cm4gaXNFbmFibGVkKCdPUEVOQUlfQUdFTlRTX0RPTlRfTE9HX1RPT0xfREFUQScpO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLm1qcy5tYXAiLCJpbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgbG9nZ2luZyB9IGZyb20gXCIuL2NvbmZpZy5tanNcIjtcbi8qKlxuICogQnkgZGVmYXVsdCB3ZSBkb24ndCBsb2cgTExNIGlucHV0cy9vdXRwdXRzLCB0byBwcmV2ZW50IGV4cG9zaW5nIHNlbnNpdGl2ZSBkYXRhLiBTZXQgdGhpcyBmbGFnXG4gKiB0byBlbmFibGUgbG9nZ2luZyB0aGVtLlxuICovXG5jb25zdCBkb250TG9nTW9kZWxEYXRhID0gbG9nZ2luZy5kb250TG9nTW9kZWxEYXRhO1xuLyoqXG4gKiBCeSBkZWZhdWx0IHdlIGRvbid0IGxvZyB0b29sIGlucHV0cy9vdXRwdXRzLCB0byBwcmV2ZW50IGV4cG9zaW5nIHNlbnNpdGl2ZSBkYXRhLiBTZXQgdGhpcyBmbGFnXG4gKiB0byBlbmFibGUgbG9nZ2luZyB0aGVtLlxuICovXG5jb25zdCBkb250TG9nVG9vbERhdGEgPSBsb2dnaW5nLmRvbnRMb2dUb29sRGF0YTtcbi8qKlxuICogR2V0IGEgbG9nZ2VyIGZvciBhIGdpdmVuIHBhY2thZ2UuXG4gKlxuICogQHBhcmFtIG5hbWVzcGFjZSAtIHRoZSBuYW1lc3BhY2UgdG8gdXNlIGZvciB0aGUgbG9nZ2VyLlxuICogQHJldHVybnMgQSBsb2dnZXIgb2JqZWN0IHdpdGggYGRlYnVnYCBhbmQgYGVycm9yYCBtZXRob2RzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9nZ2VyKG5hbWVzcGFjZSA9ICdvcGVuYWktYWdlbnRzJykge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgZGVidWc6IGRlYnVnKG5hbWVzcGFjZSksXG4gICAgICAgIGVycm9yOiBjb25zb2xlLmVycm9yLFxuICAgICAgICB3YXJuOiBjb25zb2xlLndhcm4sXG4gICAgICAgIGRvbnRMb2dNb2RlbERhdGEsXG4gICAgICAgIGRvbnRMb2dUb29sRGF0YSxcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcignb3BlbmFpLWFnZW50czpjb3JlJyk7XG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIubWpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiB0b1NtYXJ0U3RyaW5nKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfZSkge1xuICAgICAgICAgICAgcmV0dXJuICdbb2JqZWN0IHdpdGggY2lyY3VsYXIgcmVmZXJlbmNlc10nO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c21hcnRTdHJpbmcubWpzLm1hcCIsImltcG9ydCB7IHNhZmVFeGVjdXRlIH0gZnJvbSBcIi4vdXRpbHMvc2FmZUV4ZWN1dGUubWpzXCI7XG5pbXBvcnQgeyB0b0Z1bmN0aW9uVG9vbE5hbWUgfSBmcm9tIFwiLi91dGlscy90b29scy5tanNcIjtcbmltcG9ydCB7IGdldFNjaGVtYUFuZFBhcnNlckZyb21JbnB1dFR5cGUgfSBmcm9tIFwiLi91dGlscy90b29scy5tanNcIjtcbmltcG9ydCB7IGlzWm9kT2JqZWN0IH0gZnJvbSBcIi4vdXRpbHMvdHlwZUd1YXJkcy5tanNcIjtcbmltcG9ydCB7IE1vZGVsQmVoYXZpb3JFcnJvciwgVXNlckVycm9yIH0gZnJvbSBcIi4vZXJyb3JzLm1qc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyBnZXRDdXJyZW50U3BhbiB9IGZyb20gXCIuL3RyYWNpbmcvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyB0b1NtYXJ0U3RyaW5nIH0gZnJvbSBcIi4vdXRpbHMvc21hcnRTdHJpbmcubWpzXCI7XG4vKipcbiAqIEV4cG9zZXMgYSBjb21wdXRlciB0byB0aGUgYWdlbnQgYXMgYSB0b29sIHRvIGJlIGNhbGxlZFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiBmb3IgdGhlIGNvbXB1dGVyIHRvb2wgbGlrZSBzcGVjaWZ5aW5nIHRoZSBsb2NhdGlvbiBvZiB5b3VyIGFnZW50XG4gKiBAcmV0dXJucyBhIGNvbXB1dGVyIHRvb2wgZGVmaW5pdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZXJUb29sKG9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnY29tcHV0ZXInLFxuICAgICAgICBuYW1lOiBvcHRpb25zLm5hbWUgPz8gJ2NvbXB1dGVyX3VzZV9wcmV2aWV3JyxcbiAgICAgICAgY29tcHV0ZXI6IG9wdGlvbnMuY29tcHV0ZXIsXG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhvc3RlZCBNQ1AgdG9vbCBkZWZpbml0aW9uLlxuICpcbiAqIEBwYXJhbSBzZXJ2ZXJMYWJlbCAtIFRoZSBsYWJlbCBpZGVudGlmeWluZyB0aGUgTUNQIHNlcnZlci5cbiAqIEBwYXJhbSBzZXJ2ZXJVcmwgLSBUaGUgVVJMIG9mIHRoZSBNQ1Agc2VydmVyLlxuICogQHBhcmFtIHJlcXVpcmVBcHByb3ZhbCAtIFdoZXRoZXIgdG9vbCBjYWxscyByZXF1aXJlIGFwcHJvdmFsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaG9zdGVkTWNwVG9vbChvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvdmlkZXJEYXRhID0gdHlwZW9mIG9wdGlvbnMucmVxdWlyZUFwcHJvdmFsID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICBvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCA9PT0gJ25ldmVyJ1xuICAgICAgICA/IHtcbiAgICAgICAgICAgIHR5cGU6ICdtY3AnLFxuICAgICAgICAgICAgc2VydmVyX2xhYmVsOiBvcHRpb25zLnNlcnZlckxhYmVsLFxuICAgICAgICAgICAgc2VydmVyX3VybDogb3B0aW9ucy5zZXJ2ZXJVcmwsXG4gICAgICAgICAgICByZXF1aXJlX2FwcHJvdmFsOiAnbmV2ZXInLFxuICAgICAgICAgICAgYWxsb3dlZF90b29sczogdG9NY3BBbGxvd2VkVG9vbHNGaWx0ZXIob3B0aW9ucy5hbGxvd2VkVG9vbHMpLFxuICAgICAgICAgICAgaGVhZGVyczogb3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgdHlwZTogJ21jcCcsXG4gICAgICAgICAgICBzZXJ2ZXJfbGFiZWw6IG9wdGlvbnMuc2VydmVyTGFiZWwsXG4gICAgICAgICAgICBzZXJ2ZXJfdXJsOiBvcHRpb25zLnNlcnZlclVybCxcbiAgICAgICAgICAgIGFsbG93ZWRfdG9vbHM6IHRvTWNwQWxsb3dlZFRvb2xzRmlsdGVyKG9wdGlvbnMuYWxsb3dlZFRvb2xzKSxcbiAgICAgICAgICAgIGhlYWRlcnM6IG9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICAgIHJlcXVpcmVfYXBwcm92YWw6IHR5cGVvZiBvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/ICdhbHdheXMnXG4gICAgICAgICAgICAgICAgOiBidWlsZFJlcXVpcmVBcHByb3ZhbChvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCksXG4gICAgICAgICAgICBvbl9hcHByb3ZhbDogb3B0aW9ucy5vbkFwcHJvdmFsLFxuICAgICAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdob3N0ZWRfdG9vbCcsXG4gICAgICAgIG5hbWU6ICdob3N0ZWRfbWNwJyxcbiAgICAgICAgcHJvdmlkZXJEYXRhLFxuICAgIH07XG59XG4vKipcbiAqIFRoZSBkZWZhdWx0IGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIGFuIGVycm9yIG9jY3VycyB3aGlsZSBydW5uaW5nIHRoZSB0b29sLlxuICpcbiAqIEFsd2F5cyByZXR1cm5zIGBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBydW5uaW5nIHRoZSB0b29sLiBQbGVhc2UgdHJ5IGFnYWluLiBFcnJvcjogPGVycm9yIGRldGFpbHM+YFxuICpcbiAqIEBwYXJhbSBjb250ZXh0IEFuIGluc3RhbmNlIG9mIHRoZSBjdXJyZW50IFJ1bkNvbnRleHRcbiAqIEBwYXJhbSBlcnJvciBUaGUgZXJyb3IgdGhhdCBvY2N1cnJlZFxuICovXG5mdW5jdGlvbiBkZWZhdWx0VG9vbEVycm9yRnVuY3Rpb24oY29udGV4dCwgZXJyb3IpIHtcbiAgICBjb25zdCBkZXRhaWxzID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLnRvU3RyaW5nKCkgOiBTdHJpbmcoZXJyb3IpO1xuICAgIHJldHVybiBgQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcnVubmluZyB0aGUgdG9vbC4gUGxlYXNlIHRyeSBhZ2Fpbi4gRXJyb3I6ICR7ZGV0YWlsc31gO1xufVxuLyoqXG4gKiBFeHBvc2VzIGEgZnVuY3Rpb24gdG8gdGhlIGFnZW50IGFzIGEgdG9vbCB0byBiZSBjYWxsZWRcbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyBmb3IgdGhlIHRvb2xcbiAqIEByZXR1cm5zIEEgbmV3IHRvb2xcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvb2wob3B0aW9ucykge1xuICAgIGNvbnN0IG5hbWUgPSBvcHRpb25zLm5hbWVcbiAgICAgICAgPyB0b0Z1bmN0aW9uVG9vbE5hbWUob3B0aW9ucy5uYW1lKVxuICAgICAgICA6IHRvRnVuY3Rpb25Ub29sTmFtZShvcHRpb25zLmV4ZWN1dGUubmFtZSk7XG4gICAgY29uc3QgdG9vbEVycm9yRnVuY3Rpb24gPSB0eXBlb2Ygb3B0aW9ucy5lcnJvckZ1bmN0aW9uID09PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGRlZmF1bHRUb29sRXJyb3JGdW5jdGlvblxuICAgICAgICA6IG9wdGlvbnMuZXJyb3JGdW5jdGlvbjtcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb29sIG5hbWUgY2Fubm90IGJlIGVtcHR5LiBFaXRoZXIgbmFtZSB5b3VyIGZ1bmN0aW9uIG9yIHByb3ZpZGUgYSBuYW1lIGluIHRoZSBvcHRpb25zLicpO1xuICAgIH1cbiAgICBjb25zdCBzdHJpY3RNb2RlID0gb3B0aW9ucy5zdHJpY3QgPz8gdHJ1ZTtcbiAgICBpZiAoIXN0cmljdE1vZGUgJiYgaXNab2RPYmplY3Qob3B0aW9ucy5wYXJhbWV0ZXJzKSkge1xuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdTdHJpY3QgbW9kZSBpcyByZXF1aXJlZCBmb3IgWm9kIHBhcmFtZXRlcnMnKTtcbiAgICB9XG4gICAgY29uc3QgeyBwYXJzZXIsIHNjaGVtYTogcGFyYW1ldGVycyB9ID0gZ2V0U2NoZW1hQW5kUGFyc2VyRnJvbUlucHV0VHlwZShvcHRpb25zLnBhcmFtZXRlcnMsIG5hbWUpO1xuICAgIGFzeW5jIGZ1bmN0aW9uIF9pbnZva2UocnVuQ29udGV4dCwgaW5wdXQpIHtcbiAgICAgICAgY29uc3QgW2Vycm9yLCBwYXJzZWRdID0gYXdhaXQgc2FmZUV4ZWN1dGUoKCkgPT4gcGFyc2VyKGlucHV0KSk7XG4gICAgICAgIGlmIChlcnJvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGxvZ2dlci5kb250TG9nVG9vbERhdGEpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYEludmFsaWQgSlNPTiBpbnB1dCBmb3IgdG9vbCAke25hbWV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYEludmFsaWQgSlNPTiBpbnB1dCBmb3IgdG9vbCAke25hbWV9OiAke2lucHV0fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IE1vZGVsQmVoYXZpb3JFcnJvcignSW52YWxpZCBKU09OIGlucHV0IGZvciB0b29sJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvZ2dlci5kb250TG9nVG9vbERhdGEpIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgSW52b2tpbmcgdG9vbCAke25hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoYEludm9raW5nIHRvb2wgJHtuYW1lfSB3aXRoIGlucHV0ICR7aW5wdXR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgb3B0aW9ucy5leGVjdXRlKHBhcnNlZCwgcnVuQ29udGV4dCk7XG4gICAgICAgIGNvbnN0IHN0cmluZ1Jlc3VsdCA9IHRvU21hcnRTdHJpbmcocmVzdWx0KTtcbiAgICAgICAgaWYgKGxvZ2dlci5kb250TG9nVG9vbERhdGEpIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgVG9vbCAke25hbWV9IGNvbXBsZXRlZGApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBUb29sICR7bmFtZX0gcmV0dXJuZWQ6ICR7c3RyaW5nUmVzdWx0fWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGFzeW5jIGZ1bmN0aW9uIGludm9rZShydW5Db250ZXh0LCBpbnB1dCkge1xuICAgICAgICByZXR1cm4gX2ludm9rZShydW5Db250ZXh0LCBpbnB1dCkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBpZiAodG9vbEVycm9yRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U3BhbiA9IGdldEN1cnJlbnRTcGFuKCk7XG4gICAgICAgICAgICAgICAgY3VycmVudFNwYW4/LnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0Vycm9yIHJ1bm5pbmcgdG9vbCAobm9uLWZhdGFsKScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xfbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvci50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0b29sRXJyb3JGdW5jdGlvbihydW5Db250ZXh0LCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG5lZWRzQXBwcm92YWwgPSB0eXBlb2Ygb3B0aW9ucy5uZWVkc0FwcHJvdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gb3B0aW9ucy5uZWVkc0FwcHJvdmFsXG4gICAgICAgIDogYXN5bmMgKCkgPT4gdHlwZW9mIG9wdGlvbnMubmVlZHNBcHByb3ZhbCA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgICAgICA/IG9wdGlvbnMubmVlZHNBcHByb3ZhbFxuICAgICAgICAgICAgOiBmYWxzZTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICAgICAgICBuYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbjogb3B0aW9ucy5kZXNjcmlwdGlvbixcbiAgICAgICAgcGFyYW1ldGVycyxcbiAgICAgICAgc3RyaWN0OiBzdHJpY3RNb2RlLFxuICAgICAgICBpbnZva2UsXG4gICAgICAgIG5lZWRzQXBwcm92YWwsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGJ1aWxkUmVxdWlyZUFwcHJvdmFsKHJlcXVpcmVBcHByb3ZhbCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGlmIChyZXF1aXJlQXBwcm92YWwuYWx3YXlzKSB7XG4gICAgICAgIHJlc3VsdC5hbHdheXMgPSB7IHRvb2xfbmFtZXM6IHJlcXVpcmVBcHByb3ZhbC5hbHdheXMudG9vbE5hbWVzIH07XG4gICAgfVxuICAgIGlmIChyZXF1aXJlQXBwcm92YWwubmV2ZXIpIHtcbiAgICAgICAgcmVzdWx0Lm5ldmVyID0geyB0b29sX25hbWVzOiByZXF1aXJlQXBwcm92YWwubmV2ZXIudG9vbE5hbWVzIH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiB0b01jcEFsbG93ZWRUb29sc0ZpbHRlcihhbGxvd2VkVG9vbHMpIHtcbiAgICBpZiAodHlwZW9mIGFsbG93ZWRUb29scyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYWxsb3dlZFRvb2xzKSkge1xuICAgICAgICByZXR1cm4geyB0b29sX25hbWVzOiBhbGxvd2VkVG9vbHMgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdG9vbF9uYW1lczogYWxsb3dlZFRvb2xzPy50b29sTmFtZXMgPz8gW10gfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvb2wubWpzLm1hcCIsImV4cG9ydCB2YXIgdXRpbDtcbihmdW5jdGlvbiAodXRpbCkge1xuICAgIHV0aWwuYXNzZXJ0RXF1YWwgPSAoXykgPT4geyB9O1xuICAgIGZ1bmN0aW9uIGFzc2VydElzKF9hcmcpIHsgfVxuICAgIHV0aWwuYXNzZXJ0SXMgPSBhc3NlcnRJcztcbiAgICBmdW5jdGlvbiBhc3NlcnROZXZlcihfeCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9XG4gICAgdXRpbC5hc3NlcnROZXZlciA9IGFzc2VydE5ldmVyO1xuICAgIHV0aWwuYXJyYXlUb0VudW0gPSAoaXRlbXMpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgb2JqW2l0ZW1dID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gICAgdXRpbC5nZXRWYWxpZEVudW1WYWx1ZXMgPSAob2JqKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbGlkS2V5cyA9IHV0aWwub2JqZWN0S2V5cyhvYmopLmZpbHRlcigoaykgPT4gdHlwZW9mIG9ialtvYmpba11dICE9PSBcIm51bWJlclwiKTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrIG9mIHZhbGlkS2V5cykge1xuICAgICAgICAgICAgZmlsdGVyZWRba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHV0aWwub2JqZWN0VmFsdWVzKGZpbHRlcmVkKTtcbiAgICB9O1xuICAgIHV0aWwub2JqZWN0VmFsdWVzID0gKG9iaikgPT4ge1xuICAgICAgICByZXR1cm4gdXRpbC5vYmplY3RLZXlzKG9iaikubWFwKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqW2VdO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHV0aWwub2JqZWN0S2V5cyA9IHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gXCJmdW5jdGlvblwiIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFuL2JhblxuICAgICAgICA/IChvYmopID0+IE9iamVjdC5rZXlzKG9iaikgLy8gZXNsaW50LWRpc2FibGUtbGluZSBiYW4vYmFuXG4gICAgICAgIDogKG9iamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgIH07XG4gICAgdXRpbC5maW5kID0gKGFyciwgY2hlY2tlcikgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2tlcihpdGVtKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgdXRpbC5pc0ludGVnZXIgPSB0eXBlb2YgTnVtYmVyLmlzSW50ZWdlciA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gKHZhbCkgPT4gTnVtYmVyLmlzSW50ZWdlcih2YWwpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFuL2JhblxuICAgICAgICA6ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgJiYgTnVtYmVyLmlzRmluaXRlKHZhbCkgJiYgTWF0aC5mbG9vcih2YWwpID09PSB2YWw7XG4gICAgZnVuY3Rpb24gam9pblZhbHVlcyhhcnJheSwgc2VwYXJhdG9yID0gXCIgfCBcIikge1xuICAgICAgICByZXR1cm4gYXJyYXkubWFwKCh2YWwpID0+ICh0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiID8gYCcke3ZhbH0nYCA6IHZhbCkpLmpvaW4oc2VwYXJhdG9yKTtcbiAgICB9XG4gICAgdXRpbC5qb2luVmFsdWVzID0gam9pblZhbHVlcztcbiAgICB1dGlsLmpzb25TdHJpbmdpZnlSZXBsYWNlciA9IChfLCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJpZ2ludFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbn0pKHV0aWwgfHwgKHV0aWwgPSB7fSkpO1xuZXhwb3J0IHZhciBvYmplY3RVdGlsO1xuKGZ1bmN0aW9uIChvYmplY3RVdGlsKSB7XG4gICAgb2JqZWN0VXRpbC5tZXJnZVNoYXBlcyA9IChmaXJzdCwgc2Vjb25kKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5maXJzdCxcbiAgICAgICAgICAgIC4uLnNlY29uZCwgLy8gc2Vjb25kIG92ZXJ3cml0ZXMgZmlyc3RcbiAgICAgICAgfTtcbiAgICB9O1xufSkob2JqZWN0VXRpbCB8fCAob2JqZWN0VXRpbCA9IHt9KSk7XG5leHBvcnQgY29uc3QgWm9kUGFyc2VkVHlwZSA9IHV0aWwuYXJyYXlUb0VudW0oW1xuICAgIFwic3RyaW5nXCIsXG4gICAgXCJuYW5cIixcbiAgICBcIm51bWJlclwiLFxuICAgIFwiaW50ZWdlclwiLFxuICAgIFwiZmxvYXRcIixcbiAgICBcImJvb2xlYW5cIixcbiAgICBcImRhdGVcIixcbiAgICBcImJpZ2ludFwiLFxuICAgIFwic3ltYm9sXCIsXG4gICAgXCJmdW5jdGlvblwiLFxuICAgIFwidW5kZWZpbmVkXCIsXG4gICAgXCJudWxsXCIsXG4gICAgXCJhcnJheVwiLFxuICAgIFwib2JqZWN0XCIsXG4gICAgXCJ1bmtub3duXCIsXG4gICAgXCJwcm9taXNlXCIsXG4gICAgXCJ2b2lkXCIsXG4gICAgXCJuZXZlclwiLFxuICAgIFwibWFwXCIsXG4gICAgXCJzZXRcIixcbl0pO1xuZXhwb3J0IGNvbnN0IGdldFBhcnNlZFR5cGUgPSAoZGF0YSkgPT4ge1xuICAgIGNvbnN0IHQgPSB0eXBlb2YgZGF0YTtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkO1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5zdHJpbmc7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIuaXNOYU4oZGF0YSkgPyBab2RQYXJzZWRUeXBlLm5hbiA6IFpvZFBhcnNlZFR5cGUubnVtYmVyO1xuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuYm9vbGVhbjtcbiAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5mdW5jdGlvbjtcbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuYmlnaW50O1xuICAgICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5zeW1ib2w7XG4gICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuYXJyYXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLm51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS50aGVuICYmIHR5cGVvZiBkYXRhLnRoZW4gPT09IFwiZnVuY3Rpb25cIiAmJiBkYXRhLmNhdGNoICYmIHR5cGVvZiBkYXRhLmNhdGNoID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5wcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBNYXAgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLm1hcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgU2V0ICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5zZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIERhdGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5kYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUub2JqZWN0O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUudW5rbm93bjtcbiAgICB9XG59O1xuIiwiaW1wb3J0IHsgdXRpbCB9IGZyb20gXCIuL2hlbHBlcnMvdXRpbC5qc1wiO1xuZXhwb3J0IGNvbnN0IFpvZElzc3VlQ29kZSA9IHV0aWwuYXJyYXlUb0VudW0oW1xuICAgIFwiaW52YWxpZF90eXBlXCIsXG4gICAgXCJpbnZhbGlkX2xpdGVyYWxcIixcbiAgICBcImN1c3RvbVwiLFxuICAgIFwiaW52YWxpZF91bmlvblwiLFxuICAgIFwiaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yXCIsXG4gICAgXCJpbnZhbGlkX2VudW1fdmFsdWVcIixcbiAgICBcInVucmVjb2duaXplZF9rZXlzXCIsXG4gICAgXCJpbnZhbGlkX2FyZ3VtZW50c1wiLFxuICAgIFwiaW52YWxpZF9yZXR1cm5fdHlwZVwiLFxuICAgIFwiaW52YWxpZF9kYXRlXCIsXG4gICAgXCJpbnZhbGlkX3N0cmluZ1wiLFxuICAgIFwidG9vX3NtYWxsXCIsXG4gICAgXCJ0b29fYmlnXCIsXG4gICAgXCJpbnZhbGlkX2ludGVyc2VjdGlvbl90eXBlc1wiLFxuICAgIFwibm90X211bHRpcGxlX29mXCIsXG4gICAgXCJub3RfZmluaXRlXCIsXG5dKTtcbmV4cG9ydCBjb25zdCBxdW90ZWxlc3NKc29uID0gKG9iaikgPT4ge1xuICAgIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeShvYmosIG51bGwsIDIpO1xuICAgIHJldHVybiBqc29uLnJlcGxhY2UoL1wiKFteXCJdKylcIjovZywgXCIkMTpcIik7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGdldCBlcnJvcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzc3VlcztcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaXNzdWVzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaXNzdWVzID0gW107XG4gICAgICAgIHRoaXMuYWRkSXNzdWUgPSAoc3ViKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3Vlcywgc3ViXTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGRJc3N1ZXMgPSAoc3VicyA9IFtdKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3VlcywgLi4uc3Vic107XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGFjdHVhbFByb3RvID0gbmV3LnRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBiYW4vYmFuXG4gICAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgYWN0dWFsUHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fX3Byb3RvX18gPSBhY3R1YWxQcm90bztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWUgPSBcIlpvZEVycm9yXCI7XG4gICAgICAgIHRoaXMuaXNzdWVzID0gaXNzdWVzO1xuICAgIH1cbiAgICBmb3JtYXQoX21hcHBlcikge1xuICAgICAgICBjb25zdCBtYXBwZXIgPSBfbWFwcGVyIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoaXNzdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNzdWUubWVzc2FnZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNvbnN0IGZpZWxkRXJyb3JzID0geyBfZXJyb3JzOiBbXSB9O1xuICAgICAgICBjb25zdCBwcm9jZXNzRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXNzdWUgb2YgZXJyb3IuaXNzdWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF91bmlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzc3VlLnVuaW9uRXJyb3JzLm1hcChwcm9jZXNzRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfcmV0dXJuX3R5cGVcIikge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRXJyb3IoaXNzdWUucmV0dXJuVHlwZUVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX2FyZ3VtZW50c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NFcnJvcihpc3N1ZS5hcmd1bWVudHNFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkRXJyb3JzLl9lcnJvcnMucHVzaChtYXBwZXIoaXNzdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyID0gZmllbGRFcnJvcnM7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBpc3N1ZS5wYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSBpc3N1ZS5wYXRoW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVybWluYWwgPSBpID09PSBpc3N1ZS5wYXRoLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRlcm1pbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHR5cGVvZiBlbCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSBlbHNlIGlmICh0eXBlb2YgZWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGNvbnN0IGVycm9yQXJyYXk6IGFueSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZXJyb3JBcnJheS5fZXJyb3JzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IGVycm9yQXJyYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0uX2Vycm9ycy5wdXNoKG1hcHBlcihpc3N1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IGN1cnJbZWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBwcm9jZXNzRXJyb3IodGhpcyk7XG4gICAgICAgIHJldHVybiBmaWVsZEVycm9ycztcbiAgICB9XG4gICAgc3RhdGljIGFzc2VydCh2YWx1ZSkge1xuICAgICAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIFpvZEVycm9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3QgYSBab2RFcnJvcjogJHt2YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcbiAgICB9XG4gICAgZ2V0IG1lc3NhZ2UoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmlzc3VlcywgdXRpbC5qc29uU3RyaW5naWZ5UmVwbGFjZXIsIDIpO1xuICAgIH1cbiAgICBnZXQgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNzdWVzLmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gICAgZmxhdHRlbihtYXBwZXIgPSAoaXNzdWUpID0+IGlzc3VlLm1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgZmllbGRFcnJvcnMgPSB7fTtcbiAgICAgICAgY29uc3QgZm9ybUVycm9ycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHN1YiBvZiB0aGlzLmlzc3Vlcykge1xuICAgICAgICAgICAgaWYgKHN1Yi5wYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmaWVsZEVycm9yc1tzdWIucGF0aFswXV0gPSBmaWVsZEVycm9yc1tzdWIucGF0aFswXV0gfHwgW107XG4gICAgICAgICAgICAgICAgZmllbGRFcnJvcnNbc3ViLnBhdGhbMF1dLnB1c2gobWFwcGVyKHN1YikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9ybUVycm9ycy5wdXNoKG1hcHBlcihzdWIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBmb3JtRXJyb3JzLCBmaWVsZEVycm9ycyB9O1xuICAgIH1cbiAgICBnZXQgZm9ybUVycm9ycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxhdHRlbigpO1xuICAgIH1cbn1cblpvZEVycm9yLmNyZWF0ZSA9IChpc3N1ZXMpID0+IHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBab2RFcnJvcihpc3N1ZXMpO1xuICAgIHJldHVybiBlcnJvcjtcbn07XG4iLCJpbXBvcnQgeyBab2RJc3N1ZUNvZGUgfSBmcm9tIFwiLi4vWm9kRXJyb3IuanNcIjtcbmltcG9ydCB7IHV0aWwsIFpvZFBhcnNlZFR5cGUgfSBmcm9tIFwiLi4vaGVscGVycy91dGlsLmpzXCI7XG5jb25zdCBlcnJvck1hcCA9IChpc3N1ZSwgX2N0eCkgPT4ge1xuICAgIGxldCBtZXNzYWdlO1xuICAgIHN3aXRjaCAoaXNzdWUuY29kZSkge1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGU6XG4gICAgICAgICAgICBpZiAoaXNzdWUucmVjZWl2ZWQgPT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiUmVxdWlyZWRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRXhwZWN0ZWQgJHtpc3N1ZS5leHBlY3RlZH0sIHJlY2VpdmVkICR7aXNzdWUucmVjZWl2ZWR9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2xpdGVyYWw6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgbGl0ZXJhbCB2YWx1ZSwgZXhwZWN0ZWQgJHtKU09OLnN0cmluZ2lmeShpc3N1ZS5leHBlY3RlZCwgdXRpbC5qc29uU3RyaW5naWZ5UmVwbGFjZXIpfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUudW5yZWNvZ25pemVkX2tleXM6XG4gICAgICAgICAgICBtZXNzYWdlID0gYFVucmVjb2duaXplZCBrZXkocykgaW4gb2JqZWN0OiAke3V0aWwuam9pblZhbHVlcyhpc3N1ZS5rZXlzLCBcIiwgXCIpfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbjpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dGA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGRpc2NyaW1pbmF0b3IgdmFsdWUuIEV4cGVjdGVkICR7dXRpbC5qb2luVmFsdWVzKGlzc3VlLm9wdGlvbnMpfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGVudW0gdmFsdWUuIEV4cGVjdGVkICR7dXRpbC5qb2luVmFsdWVzKGlzc3VlLm9wdGlvbnMpfSwgcmVjZWl2ZWQgJyR7aXNzdWUucmVjZWl2ZWR9J2A7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF9hcmd1bWVudHM6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgZnVuY3Rpb24gYXJndW1lbnRzYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3JldHVybl90eXBlOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGZ1bmN0aW9uIHJldHVybiB0eXBlYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2RhdGU6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgZGF0ZWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmc6XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlzc3VlLnZhbGlkYXRpb24gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJpbmNsdWRlc1wiIGluIGlzc3VlLnZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0OiBtdXN0IGluY2x1ZGUgXCIke2lzc3VlLnZhbGlkYXRpb24uaW5jbHVkZXN9XCJgO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlzc3VlLnZhbGlkYXRpb24ucG9zaXRpb24gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfSBhdCBvbmUgb3IgbW9yZSBwb3NpdGlvbnMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICR7aXNzdWUudmFsaWRhdGlvbi5wb3NpdGlvbn1gO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFwic3RhcnRzV2l0aFwiIGluIGlzc3VlLnZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0OiBtdXN0IHN0YXJ0IHdpdGggXCIke2lzc3VlLnZhbGlkYXRpb24uc3RhcnRzV2l0aH1cImA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFwiZW5kc1dpdGhcIiBpbiBpc3N1ZS52YWxpZGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dDogbXVzdCBlbmQgd2l0aCBcIiR7aXNzdWUudmFsaWRhdGlvbi5lbmRzV2l0aH1cImA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGlzc3VlLnZhbGlkYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnZhbGlkYXRpb24gIT09IFwicmVnZXhcIikge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCAke2lzc3VlLnZhbGlkYXRpb259YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkludmFsaWRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS50b29fc21hbGw6XG4gICAgICAgICAgICBpZiAoaXNzdWUudHlwZSA9PT0gXCJhcnJheVwiKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgQXJyYXkgbXVzdCBjb250YWluICR7aXNzdWUuZXhhY3QgPyBcImV4YWN0bHlcIiA6IGlzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgbW9yZSB0aGFuYH0gJHtpc3N1ZS5taW5pbXVtfSBlbGVtZW50KHMpYDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBTdHJpbmcgbXVzdCBjb250YWluICR7aXNzdWUuZXhhY3QgPyBcImV4YWN0bHlcIiA6IGlzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgb3ZlcmB9ICR7aXNzdWUubWluaW11bX0gY2hhcmFjdGVyKHMpYDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBOdW1iZXIgbXVzdCBiZSAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHkgZXF1YWwgdG8gYCA6IGlzc3VlLmluY2x1c2l2ZSA/IGBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYCA6IGBncmVhdGVyIHRoYW4gYH0ke2lzc3VlLm1pbmltdW19YDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwiZGF0ZVwiKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRGF0ZSBtdXN0IGJlICR7aXNzdWUuZXhhY3QgPyBgZXhhY3RseSBlcXVhbCB0byBgIDogaXNzdWUuaW5jbHVzaXZlID8gYGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgIDogYGdyZWF0ZXIgdGhhbiBgfSR7bmV3IERhdGUoTnVtYmVyKGlzc3VlLm1pbmltdW0pKX1gO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS50b29fYmlnOlxuICAgICAgICAgICAgaWYgKGlzc3VlLnR5cGUgPT09IFwiYXJyYXlcIilcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gYEFycmF5IG11c3QgY29udGFpbiAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHlgIDogaXNzdWUuaW5jbHVzaXZlID8gYGF0IG1vc3RgIDogYGxlc3MgdGhhbmB9ICR7aXNzdWUubWF4aW11bX0gZWxlbWVudChzKWA7XG4gICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS50eXBlID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgU3RyaW5nIG11c3QgY29udGFpbiAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHlgIDogaXNzdWUuaW5jbHVzaXZlID8gYGF0IG1vc3RgIDogYHVuZGVyYH0gJHtpc3N1ZS5tYXhpbXVtfSBjaGFyYWN0ZXIocylgO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gYE51bWJlciBtdXN0IGJlICR7aXNzdWUuZXhhY3QgPyBgZXhhY3RseWAgOiBpc3N1ZS5pbmNsdXNpdmUgPyBgbGVzcyB0aGFuIG9yIGVxdWFsIHRvYCA6IGBsZXNzIHRoYW5gfSAke2lzc3VlLm1heGltdW19YDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwiYmlnaW50XCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBCaWdJbnQgbXVzdCBiZSAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHlgIDogaXNzdWUuaW5jbHVzaXZlID8gYGxlc3MgdGhhbiBvciBlcXVhbCB0b2AgOiBgbGVzcyB0aGFuYH0gJHtpc3N1ZS5tYXhpbXVtfWA7XG4gICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS50eXBlID09PSBcImRhdGVcIilcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gYERhdGUgbXVzdCBiZSAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHlgIDogaXNzdWUuaW5jbHVzaXZlID8gYHNtYWxsZXIgdGhhbiBvciBlcXVhbCB0b2AgOiBgc21hbGxlciB0aGFuYH0gJHtuZXcgRGF0ZShOdW1iZXIoaXNzdWUubWF4aW11bSkpfWA7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dFwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLmN1c3RvbTpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dGA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF9pbnRlcnNlY3Rpb25fdHlwZXM6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludGVyc2VjdGlvbiByZXN1bHRzIGNvdWxkIG5vdCBiZSBtZXJnZWRgO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLm5vdF9tdWx0aXBsZV9vZjpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgTnVtYmVyIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAke2lzc3VlLm11bHRpcGxlT2Z9YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5ub3RfZmluaXRlOlxuICAgICAgICAgICAgbWVzc2FnZSA9IFwiTnVtYmVyIG11c3QgYmUgZmluaXRlXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBfY3R4LmRlZmF1bHRFcnJvcjtcbiAgICAgICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoaXNzdWUpO1xuICAgIH1cbiAgICByZXR1cm4geyBtZXNzYWdlIH07XG59O1xuZXhwb3J0IGRlZmF1bHQgZXJyb3JNYXA7XG4iLCJpbXBvcnQgZGVmYXVsdEVycm9yTWFwIGZyb20gXCIuL2xvY2FsZXMvZW4uanNcIjtcbmxldCBvdmVycmlkZUVycm9yTWFwID0gZGVmYXVsdEVycm9yTWFwO1xuZXhwb3J0IHsgZGVmYXVsdEVycm9yTWFwIH07XG5leHBvcnQgZnVuY3Rpb24gc2V0RXJyb3JNYXAobWFwKSB7XG4gICAgb3ZlcnJpZGVFcnJvck1hcCA9IG1hcDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFcnJvck1hcCgpIHtcbiAgICByZXR1cm4gb3ZlcnJpZGVFcnJvck1hcDtcbn1cbiIsImltcG9ydCB7IGdldEVycm9yTWFwIH0gZnJvbSBcIi4uL2Vycm9ycy5qc1wiO1xuaW1wb3J0IGRlZmF1bHRFcnJvck1hcCBmcm9tIFwiLi4vbG9jYWxlcy9lbi5qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VJc3N1ZSA9IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCB7IGRhdGEsIHBhdGgsIGVycm9yTWFwcywgaXNzdWVEYXRhIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgZnVsbFBhdGggPSBbLi4ucGF0aCwgLi4uKGlzc3VlRGF0YS5wYXRoIHx8IFtdKV07XG4gICAgY29uc3QgZnVsbElzc3VlID0ge1xuICAgICAgICAuLi5pc3N1ZURhdGEsXG4gICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgIH07XG4gICAgaWYgKGlzc3VlRGF0YS5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmlzc3VlRGF0YSxcbiAgICAgICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgICAgICAgICAgbWVzc2FnZTogaXNzdWVEYXRhLm1lc3NhZ2UsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xuICAgIGNvbnN0IG1hcHMgPSBlcnJvck1hcHNcbiAgICAgICAgLmZpbHRlcigobSkgPT4gISFtKVxuICAgICAgICAuc2xpY2UoKVxuICAgICAgICAucmV2ZXJzZSgpO1xuICAgIGZvciAoY29uc3QgbWFwIG9mIG1hcHMpIHtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gbWFwKGZ1bGxJc3N1ZSwgeyBkYXRhLCBkZWZhdWx0RXJyb3I6IGVycm9yTWVzc2FnZSB9KS5tZXNzYWdlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5pc3N1ZURhdGEsXG4gICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgRU1QVFlfUEFUSCA9IFtdO1xuZXhwb3J0IGZ1bmN0aW9uIGFkZElzc3VlVG9Db250ZXh0KGN0eCwgaXNzdWVEYXRhKSB7XG4gICAgY29uc3Qgb3ZlcnJpZGVNYXAgPSBnZXRFcnJvck1hcCgpO1xuICAgIGNvbnN0IGlzc3VlID0gbWFrZUlzc3VlKHtcbiAgICAgICAgaXNzdWVEYXRhOiBpc3N1ZURhdGEsXG4gICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgZXJyb3JNYXBzOiBbXG4gICAgICAgICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCwgLy8gY29udGV4dHVhbCBlcnJvciBtYXAgaXMgZmlyc3QgcHJpb3JpdHlcbiAgICAgICAgICAgIGN0eC5zY2hlbWFFcnJvck1hcCwgLy8gdGhlbiBzY2hlbWEtYm91bmQgbWFwIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgb3ZlcnJpZGVNYXAsIC8vIHRoZW4gZ2xvYmFsIG92ZXJyaWRlIG1hcFxuICAgICAgICAgICAgb3ZlcnJpZGVNYXAgPT09IGRlZmF1bHRFcnJvck1hcCA/IHVuZGVmaW5lZCA6IGRlZmF1bHRFcnJvck1hcCwgLy8gdGhlbiBnbG9iYWwgZGVmYXVsdCBtYXBcbiAgICAgICAgXS5maWx0ZXIoKHgpID0+ICEheCksXG4gICAgfSk7XG4gICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaChpc3N1ZSk7XG59XG5leHBvcnQgY2xhc3MgUGFyc2VTdGF0dXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gXCJ2YWxpZFwiO1xuICAgIH1cbiAgICBkaXJ0eSgpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IFwidmFsaWRcIilcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcImRpcnR5XCI7XG4gICAgfVxuICAgIGFib3J0KCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZSAhPT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gXCJhYm9ydGVkXCI7XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cykge1xuICAgICAgICBjb25zdCBhcnJheVZhbHVlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcyBvZiByZXN1bHRzKSB7XG4gICAgICAgICAgICBpZiAocy5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKHMuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICBhcnJheVZhbHVlLnB1c2gocy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBhcnJheVZhbHVlIH07XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBtZXJnZU9iamVjdEFzeW5jKHN0YXR1cywgcGFpcnMpIHtcbiAgICAgICAgY29uc3Qgc3luY1BhaXJzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgcGFpci5rZXk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhaXIudmFsdWU7XG4gICAgICAgICAgICBzeW5jUGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHN5bmNQYWlycyk7XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBwYWlycykge1xuICAgICAgICBjb25zdCBmaW5hbE9iamVjdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gcGFpcjtcbiAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGlmIChrZXkudmFsdWUgIT09IFwiX19wcm90b19fXCIgJiYgKHR5cGVvZiB2YWx1ZS52YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiB8fCBwYWlyLmFsd2F5c1NldCkpIHtcbiAgICAgICAgICAgICAgICBmaW5hbE9iamVjdFtrZXkudmFsdWVdID0gdmFsdWUudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBmaW5hbE9iamVjdCB9O1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBJTlZBTElEID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgc3RhdHVzOiBcImFib3J0ZWRcIixcbn0pO1xuZXhwb3J0IGNvbnN0IERJUlRZID0gKHZhbHVlKSA9PiAoeyBzdGF0dXM6IFwiZGlydHlcIiwgdmFsdWUgfSk7XG5leHBvcnQgY29uc3QgT0sgPSAodmFsdWUpID0+ICh7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZSB9KTtcbmV4cG9ydCBjb25zdCBpc0Fib3J0ZWQgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiO1xuZXhwb3J0IGNvbnN0IGlzRGlydHkgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiZGlydHlcIjtcbmV4cG9ydCBjb25zdCBpc1ZhbGlkID0gKHgpID0+IHguc3RhdHVzID09PSBcInZhbGlkXCI7XG5leHBvcnQgY29uc3QgaXNBc3luYyA9ICh4KSA9PiB0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB4IGluc3RhbmNlb2YgUHJvbWlzZTtcbiIsImV4cG9ydCB2YXIgZXJyb3JVdGlsO1xuKGZ1bmN0aW9uIChlcnJvclV0aWwpIHtcbiAgICBlcnJvclV0aWwuZXJyVG9PYmogPSAobWVzc2FnZSkgPT4gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2UgfSA6IG1lc3NhZ2UgfHwge307XG4gICAgLy8gYmlvbWUtaWdub3JlIGxpbnQ6XG4gICAgZXJyb3JVdGlsLnRvU3RyaW5nID0gKG1lc3NhZ2UpID0+IHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiID8gbWVzc2FnZSA6IG1lc3NhZ2U/Lm1lc3NhZ2U7XG59KShlcnJvclV0aWwgfHwgKGVycm9yVXRpbCA9IHt9KSk7XG4iLCJpbXBvcnQgeyBab2RFcnJvciwgWm9kSXNzdWVDb2RlLCB9IGZyb20gXCIuL1pvZEVycm9yLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0RXJyb3JNYXAsIGdldEVycm9yTWFwIH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgeyBlcnJvclV0aWwgfSBmcm9tIFwiLi9oZWxwZXJzL2Vycm9yVXRpbC5qc1wiO1xuaW1wb3J0IHsgRElSVFksIElOVkFMSUQsIE9LLCBQYXJzZVN0YXR1cywgYWRkSXNzdWVUb0NvbnRleHQsIGlzQWJvcnRlZCwgaXNBc3luYywgaXNEaXJ0eSwgaXNWYWxpZCwgbWFrZUlzc3VlLCB9IGZyb20gXCIuL2hlbHBlcnMvcGFyc2VVdGlsLmpzXCI7XG5pbXBvcnQgeyB1dGlsLCBab2RQYXJzZWRUeXBlLCBnZXRQYXJzZWRUeXBlIH0gZnJvbSBcIi4vaGVscGVycy91dGlsLmpzXCI7XG5jbGFzcyBQYXJzZUlucHV0TGF6eVBhdGgge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgdmFsdWUsIHBhdGgsIGtleSkge1xuICAgICAgICB0aGlzLl9jYWNoZWRQYXRoID0gW107XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLmRhdGEgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fcGF0aCA9IHBhdGg7XG4gICAgICAgIHRoaXMuX2tleSA9IGtleTtcbiAgICB9XG4gICAgZ2V0IHBhdGgoKSB7XG4gICAgICAgIGlmICghdGhpcy5fY2FjaGVkUGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX2tleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRQYXRoLnB1c2goLi4udGhpcy5fcGF0aCwgLi4udGhpcy5fa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZFBhdGgucHVzaCguLi50aGlzLl9wYXRoLCB0aGlzLl9rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRQYXRoO1xuICAgIH1cbn1cbmNvbnN0IGhhbmRsZVJlc3VsdCA9IChjdHgsIHJlc3VsdCkgPT4ge1xuICAgIGlmIChpc1ZhbGlkKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogcmVzdWx0LnZhbHVlIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIWN0eC5jb21tb24uaXNzdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsaWRhdGlvbiBmYWlsZWQgYnV0IG5vIGlzc3VlcyBkZXRlY3RlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0IGVycm9yKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFpvZEVycm9yKGN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxufTtcbmZ1bmN0aW9uIHByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSB7XG4gICAgaWYgKCFwYXJhbXMpXG4gICAgICAgIHJldHVybiB7fTtcbiAgICBjb25zdCB7IGVycm9yTWFwLCBpbnZhbGlkX3R5cGVfZXJyb3IsIHJlcXVpcmVkX2Vycm9yLCBkZXNjcmlwdGlvbiB9ID0gcGFyYW1zO1xuICAgIGlmIChlcnJvck1hcCAmJiAoaW52YWxpZF90eXBlX2Vycm9yIHx8IHJlcXVpcmVkX2Vycm9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IHVzZSBcImludmFsaWRfdHlwZV9lcnJvclwiIG9yIFwicmVxdWlyZWRfZXJyb3JcIiBpbiBjb25qdW5jdGlvbiB3aXRoIGN1c3RvbSBlcnJvciBtYXAuYCk7XG4gICAgfVxuICAgIGlmIChlcnJvck1hcClcbiAgICAgICAgcmV0dXJuIHsgZXJyb3JNYXA6IGVycm9yTWFwLCBkZXNjcmlwdGlvbiB9O1xuICAgIGNvbnN0IGN1c3RvbU1hcCA9IChpc3MsIGN0eCkgPT4ge1xuICAgICAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IHBhcmFtcztcbiAgICAgICAgaWYgKGlzcy5jb2RlID09PSBcImludmFsaWRfZW51bV92YWx1ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBtZXNzYWdlID8/IGN0eC5kZWZhdWx0RXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGN0eC5kYXRhID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBtZXNzYWdlID8/IHJlcXVpcmVkX2Vycm9yID8/IGN0eC5kZWZhdWx0RXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNzLmNvZGUgIT09IFwiaW52YWxpZF90eXBlXCIpXG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBjdHguZGVmYXVsdEVycm9yIH07XG4gICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IG1lc3NhZ2UgPz8gaW52YWxpZF90eXBlX2Vycm9yID8/IGN0eC5kZWZhdWx0RXJyb3IgfTtcbiAgICB9O1xuICAgIHJldHVybiB7IGVycm9yTWFwOiBjdXN0b21NYXAsIGRlc2NyaXB0aW9uIH07XG59XG5leHBvcnQgY2xhc3MgWm9kVHlwZSB7XG4gICAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmRlc2NyaXB0aW9uO1xuICAgIH1cbiAgICBfZ2V0VHlwZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyc2VkVHlwZShpbnB1dC5kYXRhKTtcbiAgICB9XG4gICAgX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpIHtcbiAgICAgICAgcmV0dXJuIChjdHggfHwge1xuICAgICAgICAgICAgY29tbW9uOiBpbnB1dC5wYXJlbnQuY29tbW9uLFxuICAgICAgICAgICAgZGF0YTogaW5wdXQuZGF0YSxcbiAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoaW5wdXQuZGF0YSksXG4gICAgICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgICAgICAgcGF0aDogaW5wdXQucGF0aCxcbiAgICAgICAgICAgIHBhcmVudDogaW5wdXQucGFyZW50LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdHVzOiBuZXcgUGFyc2VTdGF0dXMoKSxcbiAgICAgICAgICAgIGN0eDoge1xuICAgICAgICAgICAgICAgIGNvbW1vbjogaW5wdXQucGFyZW50LmNvbW1vbixcbiAgICAgICAgICAgICAgICBkYXRhOiBpbnB1dC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoaW5wdXQuZGF0YSksXG4gICAgICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgICAgICBwYXRoOiBpbnB1dC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogaW5wdXQucGFyZW50LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX3BhcnNlU3luYyhpbnB1dCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZShpbnB1dCk7XG4gICAgICAgIGlmIChpc0FzeW5jKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5bmNocm9ub3VzIHBhcnNlIGVuY291bnRlcmVkIHByb21pc2UuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIF9wYXJzZUFzeW5jKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlKGlucHV0KTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgIH1cbiAgICBwYXJzZShkYXRhLCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5zYWZlUGFyc2UoZGF0YSwgcGFyYW1zKTtcbiAgICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xuICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgfVxuICAgIHNhZmVQYXJzZShkYXRhLCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgICAgICBhc3luYzogcGFyYW1zPy5hc3luYyA/PyBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb250ZXh0dWFsRXJyb3JNYXA6IHBhcmFtcz8uZXJyb3JNYXAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aDogcGFyYW1zPy5wYXRoIHx8IFtdLFxuICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGRhdGEpLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZVN5bmMoeyBkYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHggfSk7XG4gICAgICAgIHJldHVybiBoYW5kbGVSZXN1bHQoY3R4LCByZXN1bHQpO1xuICAgIH1cbiAgICBcIn52YWxpZGF0ZVwiKGRhdGEpIHtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgICAgICBhc3luYzogISF0aGlzW1wifnN0YW5kYXJkXCJdLmFzeW5jLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhdGg6IFtdLFxuICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGRhdGEpLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXRoaXNbXCJ+c3RhbmRhcmRcIl0uYXN5bmMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fcGFyc2VTeW5jKHsgZGF0YSwgcGF0aDogW10sIHBhcmVudDogY3R4IH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkKHJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWVzOiBjdHguY29tbW9uLmlzc3VlcyxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyPy5tZXNzYWdlPy50b0xvd2VyQ2FzZSgpPy5pbmNsdWRlcyhcImVuY291bnRlcmVkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbXCJ+c3RhbmRhcmRcIl0uYXN5bmMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdHguY29tbW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJzZUFzeW5jKHsgZGF0YSwgcGF0aDogW10sIHBhcmVudDogY3R4IH0pLnRoZW4oKHJlc3VsdCkgPT4gaXNWYWxpZChyZXN1bHQpXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBjdHguY29tbW9uLmlzc3VlcyxcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBwYXJzZUFzeW5jKGRhdGEsIHBhcmFtcykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNhZmVQYXJzZUFzeW5jKGRhdGEsIHBhcmFtcyk7XG4gICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcylcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgIH1cbiAgICBhc3luYyBzYWZlUGFyc2VBc3luYyhkYXRhLCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgICAgICBjb250ZXh0dWFsRXJyb3JNYXA6IHBhcmFtcz8uZXJyb3JNYXAsXG4gICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aDogcGFyYW1zPy5wYXRoIHx8IFtdLFxuICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGRhdGEpLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBtYXliZUFzeW5jUmVzdWx0ID0gdGhpcy5fcGFyc2UoeyBkYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHggfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IChpc0FzeW5jKG1heWJlQXN5bmNSZXN1bHQpID8gbWF5YmVBc3luY1Jlc3VsdCA6IFByb21pc2UucmVzb2x2ZShtYXliZUFzeW5jUmVzdWx0KSk7XG4gICAgICAgIHJldHVybiBoYW5kbGVSZXN1bHQoY3R4LCByZXN1bHQpO1xuICAgIH1cbiAgICByZWZpbmUoY2hlY2ssIG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgZ2V0SXNzdWVQcm9wZXJ0aWVzID0gKHZhbCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBtZXNzYWdlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbWVzc2FnZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZmluZW1lbnQoKHZhbCwgY3R4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjaGVjayh2YWwpO1xuICAgICAgICAgICAgY29uc3Qgc2V0RXJyb3IgPSAoKSA9PiBjdHguYWRkSXNzdWUoe1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5jdXN0b20sXG4gICAgICAgICAgICAgICAgLi4uZ2V0SXNzdWVQcm9wZXJ0aWVzKHZhbCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiByZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0RXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHNldEVycm9yKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWZpbmVtZW50KGNoZWNrLCByZWZpbmVtZW50RGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudCgodmFsLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmICghY2hlY2sodmFsKSkge1xuICAgICAgICAgICAgICAgIGN0eC5hZGRJc3N1ZSh0eXBlb2YgcmVmaW5lbWVudERhdGEgPT09IFwiZnVuY3Rpb25cIiA/IHJlZmluZW1lbnREYXRhKHZhbCwgY3R4KSA6IHJlZmluZW1lbnREYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9yZWZpbmVtZW50KHJlZmluZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcyxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0cyxcbiAgICAgICAgICAgIGVmZmVjdDogeyB0eXBlOiBcInJlZmluZW1lbnRcIiwgcmVmaW5lbWVudCB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3VwZXJSZWZpbmUocmVmaW5lbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudChyZWZpbmVtZW50KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZGVmKSB7XG4gICAgICAgIC8qKiBBbGlhcyBvZiBzYWZlUGFyc2VBc3luYyAqL1xuICAgICAgICB0aGlzLnNwYSA9IHRoaXMuc2FmZVBhcnNlQXN5bmM7XG4gICAgICAgIHRoaXMuX2RlZiA9IGRlZjtcbiAgICAgICAgdGhpcy5wYXJzZSA9IHRoaXMucGFyc2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zYWZlUGFyc2UgPSB0aGlzLnNhZmVQYXJzZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnBhcnNlQXN5bmMgPSB0aGlzLnBhcnNlQXN5bmMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zYWZlUGFyc2VBc3luYyA9IHRoaXMuc2FmZVBhcnNlQXN5bmMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zcGEgPSB0aGlzLnNwYS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnJlZmluZSA9IHRoaXMucmVmaW5lLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVmaW5lbWVudCA9IHRoaXMucmVmaW5lbWVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnN1cGVyUmVmaW5lID0gdGhpcy5zdXBlclJlZmluZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9wdGlvbmFsID0gdGhpcy5vcHRpb25hbC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm51bGxhYmxlID0gdGhpcy5udWxsYWJsZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm51bGxpc2ggPSB0aGlzLm51bGxpc2guYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5hcnJheSA9IHRoaXMuYXJyYXkuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gdGhpcy5wcm9taXNlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub3IgPSB0aGlzLm9yLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuYW5kID0gdGhpcy5hbmQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSB0aGlzLnRyYW5zZm9ybS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmJyYW5kID0gdGhpcy5icmFuZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmRlZmF1bHQgPSB0aGlzLmRlZmF1bHQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jYXRjaCA9IHRoaXMuY2F0Y2guYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZXNjcmliZSA9IHRoaXMuZGVzY3JpYmUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5waXBlID0gdGhpcy5waXBlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVhZG9ubHkgPSB0aGlzLnJlYWRvbmx5LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaXNOdWxsYWJsZSA9IHRoaXMuaXNOdWxsYWJsZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmlzT3B0aW9uYWwgPSB0aGlzLmlzT3B0aW9uYWwuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpc1tcIn5zdGFuZGFyZFwiXSA9IHtcbiAgICAgICAgICAgIHZlcnNpb246IDEsXG4gICAgICAgICAgICB2ZW5kb3I6IFwiem9kXCIsXG4gICAgICAgICAgICB2YWxpZGF0ZTogKGRhdGEpID0+IHRoaXNbXCJ+dmFsaWRhdGVcIl0oZGF0YSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIG9wdGlvbmFsKCkge1xuICAgICAgICByZXR1cm4gWm9kT3B0aW9uYWwuY3JlYXRlKHRoaXMsIHRoaXMuX2RlZik7XG4gICAgfVxuICAgIG51bGxhYmxlKCkge1xuICAgICAgICByZXR1cm4gWm9kTnVsbGFibGUuY3JlYXRlKHRoaXMsIHRoaXMuX2RlZik7XG4gICAgfVxuICAgIG51bGxpc2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm51bGxhYmxlKCkub3B0aW9uYWwoKTtcbiAgICB9XG4gICAgYXJyYXkoKSB7XG4gICAgICAgIHJldHVybiBab2RBcnJheS5jcmVhdGUodGhpcyk7XG4gICAgfVxuICAgIHByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiBab2RQcm9taXNlLmNyZWF0ZSh0aGlzLCB0aGlzLl9kZWYpO1xuICAgIH1cbiAgICBvcihvcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIFpvZFVuaW9uLmNyZWF0ZShbdGhpcywgb3B0aW9uXSwgdGhpcy5fZGVmKTtcbiAgICB9XG4gICAgYW5kKGluY29taW5nKSB7XG4gICAgICAgIHJldHVybiBab2RJbnRlcnNlY3Rpb24uY3JlYXRlKHRoaXMsIGluY29taW5nLCB0aGlzLl9kZWYpO1xuICAgIH1cbiAgICB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHRoaXMuX2RlZiksXG4gICAgICAgICAgICBzY2hlbWE6IHRoaXMsXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHMsXG4gICAgICAgICAgICBlZmZlY3Q6IHsgdHlwZTogXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkZWZhdWx0KGRlZikge1xuICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWVGdW5jID0gdHlwZW9mIGRlZiA9PT0gXCJmdW5jdGlvblwiID8gZGVmIDogKCkgPT4gZGVmO1xuICAgICAgICByZXR1cm4gbmV3IFpvZERlZmF1bHQoe1xuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlzLl9kZWYpLFxuICAgICAgICAgICAgaW5uZXJUeXBlOiB0aGlzLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWVGdW5jLFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REZWZhdWx0LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYnJhbmQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQnJhbmRlZCh7XG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEJyYW5kZWQsXG4gICAgICAgICAgICB0eXBlOiB0aGlzLFxuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlzLl9kZWYpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2goZGVmKSB7XG4gICAgICAgIGNvbnN0IGNhdGNoVmFsdWVGdW5jID0gdHlwZW9mIGRlZiA9PT0gXCJmdW5jdGlvblwiID8gZGVmIDogKCkgPT4gZGVmO1xuICAgICAgICByZXR1cm4gbmV3IFpvZENhdGNoKHtcbiAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcy5fZGVmKSxcbiAgICAgICAgICAgIGlubmVyVHlwZTogdGhpcyxcbiAgICAgICAgICAgIGNhdGNoVmFsdWU6IGNhdGNoVmFsdWVGdW5jLFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RDYXRjaCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRlc2NyaWJlKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIGNvbnN0IFRoaXMgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICByZXR1cm4gbmV3IFRoaXMoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwaXBlKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gWm9kUGlwZWxpbmUuY3JlYXRlKHRoaXMsIHRhcmdldCk7XG4gICAgfVxuICAgIHJlYWRvbmx5KCkge1xuICAgICAgICByZXR1cm4gWm9kUmVhZG9ubHkuY3JlYXRlKHRoaXMpO1xuICAgIH1cbiAgICBpc09wdGlvbmFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zYWZlUGFyc2UodW5kZWZpbmVkKS5zdWNjZXNzO1xuICAgIH1cbiAgICBpc051bGxhYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zYWZlUGFyc2UobnVsbCkuc3VjY2VzcztcbiAgICB9XG59XG5jb25zdCBjdWlkUmVnZXggPSAvXmNbXlxccy1dezgsfSQvaTtcbmNvbnN0IGN1aWQyUmVnZXggPSAvXlswLTlhLXpdKyQvO1xuY29uc3QgdWxpZFJlZ2V4ID0gL15bMC05QS1ISktNTlAtVFYtWl17MjZ9JC9pO1xuLy8gY29uc3QgdXVpZFJlZ2V4ID1cbi8vICAgL14oW2EtZjAtOV17OH0tW2EtZjAtOV17NH0tWzEtNV1bYS1mMC05XXszfS1bYS1mMC05XXs0fS1bYS1mMC05XXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTtcbmNvbnN0IHV1aWRSZWdleCA9IC9eWzAtOWEtZkEtRl17OH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17MTJ9JC9pO1xuY29uc3QgbmFub2lkUmVnZXggPSAvXlthLXowLTlfLV17MjF9JC9pO1xuY29uc3Qgand0UmVnZXggPSAvXltBLVphLXowLTktX10rXFwuW0EtWmEtejAtOS1fXStcXC5bQS1aYS16MC05LV9dKiQvO1xuY29uc3QgZHVyYXRpb25SZWdleCA9IC9eWy0rXT9QKD8hJCkoPzooPzpbLStdP1xcZCtZKXwoPzpbLStdP1xcZCtbLixdXFxkK1kkKSk/KD86KD86Wy0rXT9cXGQrTSl8KD86Wy0rXT9cXGQrWy4sXVxcZCtNJCkpPyg/Oig/OlstK10/XFxkK1cpfCg/OlstK10/XFxkK1suLF1cXGQrVyQpKT8oPzooPzpbLStdP1xcZCtEKXwoPzpbLStdP1xcZCtbLixdXFxkK0QkKSk/KD86VCg/PVtcXGQrLV0pKD86KD86Wy0rXT9cXGQrSCl8KD86Wy0rXT9cXGQrWy4sXVxcZCtIJCkpPyg/Oig/OlstK10/XFxkK00pfCg/OlstK10/XFxkK1suLF1cXGQrTSQpKT8oPzpbLStdP1xcZCsoPzpbLixdXFxkKyk/Uyk/KT8/JC87XG4vLyBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80NjE4MS8xNTUwMTU1XG4vLyBvbGQgdmVyc2lvbjogdG9vIHNsb3csIGRpZG4ndCBzdXBwb3J0IHVuaWNvZGVcbi8vIGNvbnN0IGVtYWlsUmVnZXggPSAvXigoKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSsoXFwuKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSspKil8KChcXHgyMikoKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPygoW1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4N2ZdfFxceDIxfFtcXHgyMy1cXHg1Yl18W1xceDVkLVxceDdlXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KFxcXFwoW1xceDAxLVxceDA5XFx4MGJcXHgwY1xceDBkLVxceDdmXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKSkqKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPyhcXHgyMikpKUAoKChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSkkL2k7XG4vL29sZCBlbWFpbCByZWdleFxuLy8gY29uc3QgZW1haWxSZWdleCA9IC9eKChbXjw+KClbXFxdLiw7Olxcc0BcIl0rKFxcLltePD4oKVtcXF0uLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoPyEtKShbXjw+KClbXFxdLiw7Olxcc0BcIl0rXFwuKStbXjw+KClbXFxdLiw7Olxcc0BcIl17MSx9KVteLTw+KClbXFxdLiw7Olxcc0BcIl0kL2k7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxuLy8gICAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFxcXCJdKyhcXC5bXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKSopfChcXFwiLitcXFwiKSlAKChcXFsoKCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXC4pezN9KCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXF0pfChcXFtJUHY2OigoW2EtZjAtOV17MSw0fTopezd9fDo6KFthLWYwLTldezEsNH06KXswLDZ9fChbYS1mMC05XXsxLDR9Oil7MX06KFthLWYwLTldezEsNH06KXswLDV9fChbYS1mMC05XXsxLDR9Oil7Mn06KFthLWYwLTldezEsNH06KXswLDR9fChbYS1mMC05XXsxLDR9Oil7M306KFthLWYwLTldezEsNH06KXswLDN9fChbYS1mMC05XXsxLDR9Oil7NH06KFthLWYwLTldezEsNH06KXswLDJ9fChbYS1mMC05XXsxLDR9Oil7NX06KFthLWYwLTldezEsNH06KXswLDF9KShbYS1mMC05XXsxLDR9fCgoKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKVxcLil7M30oKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKSlcXF0pfChbQS1aYS16MC05XShbQS1aYS16MC05LV0qW0EtWmEtejAtOV0pKihcXC5bQS1aYS16XXsyLH0pKykpJC87XG4vLyBjb25zdCBlbWFpbFJlZ2V4ID1cbi8vICAgL15bYS16QS1aMC05XFwuXFwhXFwjXFwkXFwlXFwmXFwnXFwqXFwrXFwvXFw9XFw/XFxeXFxfXFxgXFx7XFx8XFx9XFx+XFwtXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSokLztcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxuLy8gICAvXig/OlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSsoPzpcXC5bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKSp8XCIoPzpbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHgyMVxceDIzLVxceDViXFx4NWQtXFx4N2ZdfFxcXFxbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGUtXFx4N2ZdKSpcIilAKD86KD86W2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1xcLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP3xcXFsoPzooPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldP3xbYS16MC05LV0qW2EtejAtOV06KD86W1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4MjEtXFx4NWFcXHg1My1cXHg3Zl18XFxcXFtcXHgwMS1cXHgwOVxceDBiXFx4MGNcXHgwZS1cXHg3Zl0pKylcXF0pJC9pO1xuY29uc3QgZW1haWxSZWdleCA9IC9eKD8hXFwuKSg/IS4qXFwuXFwuKShbQS1aMC05XycrXFwtXFwuXSopW0EtWjAtOV8rLV1AKFtBLVowLTldW0EtWjAtOVxcLV0qXFwuKStbQS1aXXsyLH0kL2k7XG4vLyBjb25zdCBlbWFpbFJlZ2V4ID1cbi8vICAgL15bYS16MC05LiEjJCUm4oCZKisvPT9eX2B7fH1+LV0rQFthLXowLTktXSsoPzpcXC5bYS16MC05XFwtXSspKiQvaTtcbi8vIGZyb20gaHR0cHM6Ly90aGVrZXZpbnNjb3R0LmNvbS9lbW9qaXMtaW4tamF2YXNjcmlwdC8jd3JpdGluZy1hLXJlZ3VsYXItZXhwcmVzc2lvblxuY29uc3QgX2Vtb2ppUmVnZXggPSBgXihcXFxccHtFeHRlbmRlZF9QaWN0b2dyYXBoaWN9fFxcXFxwe0Vtb2ppX0NvbXBvbmVudH0pKyRgO1xubGV0IGVtb2ppUmVnZXg7XG4vLyBmYXN0ZXIsIHNpbXBsZXIsIHNhZmVyXG5jb25zdCBpcHY0UmVnZXggPSAvXig/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSlcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKSQvO1xuY29uc3QgaXB2NENpZHJSZWdleCA9IC9eKD86KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKVxcLil7M30oPzoyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldWzAtOV18WzAtOV0pXFwvKDNbMC0yXXxbMTJdP1swLTldKSQvO1xuLy8gY29uc3QgaXB2NlJlZ2V4ID1cbi8vIC9eKChbYS1mMC05XXsxLDR9Oil7N318OjooW2EtZjAtOV17MSw0fTopezAsNn18KFthLWYwLTldezEsNH06KXsxfTooW2EtZjAtOV17MSw0fTopezAsNX18KFthLWYwLTldezEsNH06KXsyfTooW2EtZjAtOV17MSw0fTopezAsNH18KFthLWYwLTldezEsNH06KXszfTooW2EtZjAtOV17MSw0fTopezAsM318KFthLWYwLTldezEsNH06KXs0fTooW2EtZjAtOV17MSw0fTopezAsMn18KFthLWYwLTldezEsNH06KXs1fTooW2EtZjAtOV17MSw0fTopezAsMX0pKFthLWYwLTldezEsNH18KCgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpXFwuKXszfSgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpKSQvO1xuY29uc3QgaXB2NlJlZ2V4ID0gL14oKFswLTlhLWZBLUZdezEsNH06KXs3LDd9WzAtOWEtZkEtRl17MSw0fXwoWzAtOWEtZkEtRl17MSw0fTopezEsN306fChbMC05YS1mQS1GXXsxLDR9Oil7MSw2fTpbMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw1fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwyfXwoWzAtOWEtZkEtRl17MSw0fTopezEsNH0oOlswLTlhLWZBLUZdezEsNH0pezEsM318KFswLTlhLWZBLUZdezEsNH06KXsxLDN9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSwyfSg6WzAtOWEtZkEtRl17MSw0fSl7MSw1fXxbMC05YS1mQS1GXXsxLDR9OigoOlswLTlhLWZBLUZdezEsNH0pezEsNn0pfDooKDpbMC05YS1mQS1GXXsxLDR9KXsxLDd9fDopfGZlODA6KDpbMC05YS1mQS1GXXswLDR9KXswLDR9JVswLTlhLXpBLVpdezEsfXw6OihmZmZmKDowezEsNH0pezAsMX06KXswLDF9KCgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSlcXC4pezMsM30oMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pfChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fTooKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSkpJC87XG5jb25zdCBpcHY2Q2lkclJlZ2V4ID0gL14oKFswLTlhLWZBLUZdezEsNH06KXs3LDd9WzAtOWEtZkEtRl17MSw0fXwoWzAtOWEtZkEtRl17MSw0fTopezEsN306fChbMC05YS1mQS1GXXsxLDR9Oil7MSw2fTpbMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw1fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwyfXwoWzAtOWEtZkEtRl17MSw0fTopezEsNH0oOlswLTlhLWZBLUZdezEsNH0pezEsM318KFswLTlhLWZBLUZdezEsNH06KXsxLDN9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSwyfSg6WzAtOWEtZkEtRl17MSw0fSl7MSw1fXxbMC05YS1mQS1GXXsxLDR9OigoOlswLTlhLWZBLUZdezEsNH0pezEsNn0pfDooKDpbMC05YS1mQS1GXXsxLDR9KXsxLDd9fDopfGZlODA6KDpbMC05YS1mQS1GXXswLDR9KXswLDR9JVswLTlhLXpBLVpdezEsfXw6OihmZmZmKDowezEsNH0pezAsMX06KXswLDF9KCgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSlcXC4pezMsM30oMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pfChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fTooKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSkpXFwvKDEyWzAtOF18MVswMV1bMC05XXxbMS05XT9bMC05XSkkLztcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzc4NjAzOTIvZGV0ZXJtaW5lLWlmLXN0cmluZy1pcy1pbi1iYXNlNjQtdXNpbmctamF2YXNjcmlwdFxuY29uc3QgYmFzZTY0UmVnZXggPSAvXihbMC05YS16QS1aKy9dezR9KSooKFswLTlhLXpBLVorL117Mn09PSl8KFswLTlhLXpBLVorL117M309KSk/JC87XG4vLyBodHRwczovL2Jhc2U2NC5ndXJ1L3N0YW5kYXJkcy9iYXNlNjR1cmxcbmNvbnN0IGJhc2U2NHVybFJlZ2V4ID0gL14oWzAtOWEtekEtWi1fXXs0fSkqKChbMC05YS16QS1aLV9dezJ9KD09KT8pfChbMC05YS16QS1aLV9dezN9KD0pPykpPyQvO1xuLy8gc2ltcGxlXG4vLyBjb25zdCBkYXRlUmVnZXhTb3VyY2UgPSBgXFxcXGR7NH0tXFxcXGR7Mn0tXFxcXGR7Mn1gO1xuLy8gbm8gbGVhcCB5ZWFyIHZhbGlkYXRpb25cbi8vIGNvbnN0IGRhdGVSZWdleFNvdXJjZSA9IGBcXFxcZHs0fS0oKDBbMTM1NzhdfDEwfDEyKS0zMXwoMFsxMy05XXwxWzAtMl0pLTMwfCgwWzEtOV18MVswLTJdKS0oMFsxLTldfDFcXFxcZHwyXFxcXGQpKWA7XG4vLyB3aXRoIGxlYXAgeWVhciB2YWxpZGF0aW9uXG5jb25zdCBkYXRlUmVnZXhTb3VyY2UgPSBgKChcXFxcZFxcXFxkWzI0NjhdWzA0OF18XFxcXGRcXFxcZFsxMzU3OV1bMjZdfFxcXFxkXFxcXGQwWzQ4XXxbMDI0NjhdWzA0OF0wMHxbMTM1NzldWzI2XTAwKS0wMi0yOXxcXFxcZHs0fS0oKDBbMTM1NzhdfDFbMDJdKS0oMFsxLTldfFsxMl1cXFxcZHwzWzAxXSl8KDBbNDY5XXwxMSktKDBbMS05XXxbMTJdXFxcXGR8MzApfCgwMiktKDBbMS05XXwxXFxcXGR8MlswLThdKSkpYDtcbmNvbnN0IGRhdGVSZWdleCA9IG5ldyBSZWdFeHAoYF4ke2RhdGVSZWdleFNvdXJjZX0kYCk7XG5mdW5jdGlvbiB0aW1lUmVnZXhTb3VyY2UoYXJncykge1xuICAgIGxldCBzZWNvbmRzUmVnZXhTb3VyY2UgPSBgWzAtNV1cXFxcZGA7XG4gICAgaWYgKGFyZ3MucHJlY2lzaW9uKSB7XG4gICAgICAgIHNlY29uZHNSZWdleFNvdXJjZSA9IGAke3NlY29uZHNSZWdleFNvdXJjZX1cXFxcLlxcXFxkeyR7YXJncy5wcmVjaXNpb259fWA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFyZ3MucHJlY2lzaW9uID09IG51bGwpIHtcbiAgICAgICAgc2Vjb25kc1JlZ2V4U291cmNlID0gYCR7c2Vjb25kc1JlZ2V4U291cmNlfShcXFxcLlxcXFxkKyk/YDtcbiAgICB9XG4gICAgY29uc3Qgc2Vjb25kc1F1YW50aWZpZXIgPSBhcmdzLnByZWNpc2lvbiA/IFwiK1wiIDogXCI/XCI7IC8vIHJlcXVpcmUgc2Vjb25kcyBpZiBwcmVjaXNpb24gaXMgbm9uemVyb1xuICAgIHJldHVybiBgKFswMV1cXFxcZHwyWzAtM10pOlswLTVdXFxcXGQoOiR7c2Vjb25kc1JlZ2V4U291cmNlfSkke3NlY29uZHNRdWFudGlmaWVyfWA7XG59XG5mdW5jdGlvbiB0aW1lUmVnZXgoYXJncykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKGBeJHt0aW1lUmVnZXhTb3VyY2UoYXJncyl9JGApO1xufVxuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zMTQzMjMxXG5leHBvcnQgZnVuY3Rpb24gZGF0ZXRpbWVSZWdleChhcmdzKSB7XG4gICAgbGV0IHJlZ2V4ID0gYCR7ZGF0ZVJlZ2V4U291cmNlfVQke3RpbWVSZWdleFNvdXJjZShhcmdzKX1gO1xuICAgIGNvbnN0IG9wdHMgPSBbXTtcbiAgICBvcHRzLnB1c2goYXJncy5sb2NhbCA/IGBaP2AgOiBgWmApO1xuICAgIGlmIChhcmdzLm9mZnNldClcbiAgICAgICAgb3B0cy5wdXNoKGAoWystXVxcXFxkezJ9Oj9cXFxcZHsyfSlgKTtcbiAgICByZWdleCA9IGAke3JlZ2V4fSgke29wdHMuam9pbihcInxcIil9KWA7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoYF4ke3JlZ2V4fSRgKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRJUChpcCwgdmVyc2lvbikge1xuICAgIGlmICgodmVyc2lvbiA9PT0gXCJ2NFwiIHx8ICF2ZXJzaW9uKSAmJiBpcHY0UmVnZXgudGVzdChpcCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICgodmVyc2lvbiA9PT0gXCJ2NlwiIHx8ICF2ZXJzaW9uKSAmJiBpcHY2UmVnZXgudGVzdChpcCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRKV1Qoand0LCBhbGcpIHtcbiAgICBpZiAoIWp3dFJlZ2V4LnRlc3Qoand0KSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IFtoZWFkZXJdID0gand0LnNwbGl0KFwiLlwiKTtcbiAgICAgICAgLy8gQ29udmVydCBiYXNlNjR1cmwgdG8gYmFzZTY0XG4gICAgICAgIGNvbnN0IGJhc2U2NCA9IGhlYWRlclxuICAgICAgICAgICAgLnJlcGxhY2UoLy0vZywgXCIrXCIpXG4gICAgICAgICAgICAucmVwbGFjZSgvXy9nLCBcIi9cIilcbiAgICAgICAgICAgIC5wYWRFbmQoaGVhZGVyLmxlbmd0aCArICgoNCAtIChoZWFkZXIubGVuZ3RoICUgNCkpICUgNCksIFwiPVwiKTtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IEpTT04ucGFyc2UoYXRvYihiYXNlNjQpKTtcbiAgICAgICAgaWYgKHR5cGVvZiBkZWNvZGVkICE9PSBcIm9iamVjdFwiIHx8IGRlY29kZWQgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChcInR5cFwiIGluIGRlY29kZWQgJiYgZGVjb2RlZD8udHlwICE9PSBcIkpXVFwiKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoIWRlY29kZWQuYWxnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoYWxnICYmIGRlY29kZWQuYWxnICE9PSBhbGcpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc1ZhbGlkQ2lkcihpcCwgdmVyc2lvbikge1xuICAgIGlmICgodmVyc2lvbiA9PT0gXCJ2NFwiIHx8ICF2ZXJzaW9uKSAmJiBpcHY0Q2lkclJlZ2V4LnRlc3QoaXApKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoKHZlcnNpb24gPT09IFwidjZcIiB8fCAhdmVyc2lvbikgJiYgaXB2NkNpZHJSZWdleC50ZXN0KGlwKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGNsYXNzIFpvZFN0cmluZyBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IFN0cmluZyhpbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnN0cmluZykge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5zdHJpbmcsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgbGV0IGN0eCA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA8IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA+IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibGVuZ3RoXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBpbnB1dC5kYXRhLmxlbmd0aCA+IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gaW5wdXQuZGF0YS5sZW5ndGggPCBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vQmlnIHx8IHRvb1NtYWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9vQmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZW1haWxcIikge1xuICAgICAgICAgICAgICAgIGlmICghZW1haWxSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiZW1haWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImVtb2ppXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVtb2ppUmVnZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZW1vamlSZWdleCA9IG5ldyBSZWdFeHAoX2Vtb2ppUmVnZXgsIFwidVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFlbW9qaVJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJlbW9qaVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidXVpZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1dWlkUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInV1aWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm5hbm9pZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFuYW5vaWRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwibmFub2lkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJjdWlkXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWN1aWRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiY3VpZDJcIikge1xuICAgICAgICAgICAgICAgIGlmICghY3VpZDJSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInVsaWRcIikge1xuICAgICAgICAgICAgICAgIGlmICghdWxpZFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ1bGlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ1cmxcIikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBVUkwoaW5wdXQuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ1cmxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInJlZ2V4XCIpIHtcbiAgICAgICAgICAgICAgICBjaGVjay5yZWdleC5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlc3RSZXN1bHQgPSBjaGVjay5yZWdleC50ZXN0KGlucHV0LmRhdGEpO1xuICAgICAgICAgICAgICAgIGlmICghdGVzdFJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInJlZ2V4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0cmltXCIpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5kYXRhID0gaW5wdXQuZGF0YS50cmltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImluY2x1ZGVzXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlucHV0LmRhdGEuaW5jbHVkZXMoY2hlY2sudmFsdWUsIGNoZWNrLnBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7IGluY2x1ZGVzOiBjaGVjay52YWx1ZSwgcG9zaXRpb246IGNoZWNrLnBvc2l0aW9uIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0b0xvd2VyQ2FzZVwiKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuZGF0YSA9IGlucHV0LmRhdGEudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidG9VcHBlckNhc2VcIikge1xuICAgICAgICAgICAgICAgIGlucHV0LmRhdGEgPSBpbnB1dC5kYXRhLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInN0YXJ0c1dpdGhcIikge1xuICAgICAgICAgICAgICAgIGlmICghaW5wdXQuZGF0YS5zdGFydHNXaXRoKGNoZWNrLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7IHN0YXJ0c1dpdGg6IGNoZWNrLnZhbHVlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJlbmRzV2l0aFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5kYXRhLmVuZHNXaXRoKGNoZWNrLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7IGVuZHNXaXRoOiBjaGVjay52YWx1ZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZGF0ZXRpbWVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gZGF0ZXRpbWVSZWdleChjaGVjayk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImRhdGVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gZGF0ZVJlZ2V4O1xuICAgICAgICAgICAgICAgIGlmICghcmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInRpbWVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gdGltZVJlZ2V4KGNoZWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ0aW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJkdXJhdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkdXJhdGlvblJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJkdXJhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiaXBcIikge1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZElQKGlucHV0LmRhdGEsIGNoZWNrLnZlcnNpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiaXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImp3dFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkSldUKGlucHV0LmRhdGEsIGNoZWNrLmFsZykpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJqd3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImNpZHJcIikge1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZENpZHIoaW5wdXQuZGF0YSwgY2hlY2sudmVyc2lvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJjaWRyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJiYXNlNjRcIikge1xuICAgICAgICAgICAgICAgIGlmICghYmFzZTY0UmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImJhc2U2NFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiYmFzZTY0dXJsXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWJhc2U2NHVybFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJiYXNlNjR1cmxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGNoZWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGlucHV0LmRhdGEgfTtcbiAgICB9XG4gICAgX3JlZ2V4KHJlZ2V4LCB2YWxpZGF0aW9uLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmluZW1lbnQoKGRhdGEpID0+IHJlZ2V4LnRlc3QoZGF0YSksIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb24sXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfYWRkQ2hlY2soY2hlY2spIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RTdHJpbmcoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZW1haWwobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImVtYWlsXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgdXJsKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJ1cmxcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBlbW9qaShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiZW1vamlcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICB1dWlkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJ1dWlkXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgbmFub2lkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJuYW5vaWRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBjdWlkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJjdWlkXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgY3VpZDIobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImN1aWQyXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgdWxpZChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwidWxpZFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIGJhc2U2NChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiYmFzZTY0XCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgYmFzZTY0dXJsKG1lc3NhZ2UpIHtcbiAgICAgICAgLy8gYmFzZTY0dXJsIGVuY29kaW5nIGlzIGEgbW9kaWZpY2F0aW9uIG9mIGJhc2U2NCB0aGF0IGNhbiBzYWZlbHkgYmUgdXNlZCBpbiBVUkxzIGFuZCBmaWxlbmFtZXNcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwiYmFzZTY0dXJsXCIsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBqd3Qob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImp3dFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucykgfSk7XG4gICAgfVxuICAgIGlwKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJpcFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucykgfSk7XG4gICAgfVxuICAgIGNpZHIob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImNpZHJcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnMpIH0pO1xuICAgIH1cbiAgICBkYXRldGltZShvcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgICAgICBraW5kOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICAgICAgcHJlY2lzaW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIG9mZnNldDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbG9jYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJkYXRldGltZVwiLFxuICAgICAgICAgICAgcHJlY2lzaW9uOiB0eXBlb2Ygb3B0aW9ucz8ucHJlY2lzaW9uID09PSBcInVuZGVmaW5lZFwiID8gbnVsbCA6IG9wdGlvbnM/LnByZWNpc2lvbixcbiAgICAgICAgICAgIG9mZnNldDogb3B0aW9ucz8ub2Zmc2V0ID8/IGZhbHNlLFxuICAgICAgICAgICAgbG9jYWw6IG9wdGlvbnM/LmxvY2FsID8/IGZhbHNlLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnM/Lm1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGF0ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiZGF0ZVwiLCBtZXNzYWdlIH0pO1xuICAgIH1cbiAgICB0aW1lKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAgICAgIGtpbmQ6IFwidGltZVwiLFxuICAgICAgICAgICAgICAgIHByZWNpc2lvbjogbnVsbCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBvcHRpb25zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwidGltZVwiLFxuICAgICAgICAgICAgcHJlY2lzaW9uOiB0eXBlb2Ygb3B0aW9ucz8ucHJlY2lzaW9uID09PSBcInVuZGVmaW5lZFwiID8gbnVsbCA6IG9wdGlvbnM/LnByZWNpc2lvbixcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zPy5tZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGR1cmF0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJkdXJhdGlvblwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIHJlZ2V4KHJlZ2V4LCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcInJlZ2V4XCIsXG4gICAgICAgICAgICByZWdleDogcmVnZXgsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbmNsdWRlcyh2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJpbmNsdWRlc1wiLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgcG9zaXRpb246IG9wdGlvbnM/LnBvc2l0aW9uLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnM/Lm1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhcnRzV2l0aCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJzdGFydHNXaXRoXCIsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbmRzV2l0aCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJlbmRzV2l0aFwiLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWluKG1pbkxlbmd0aCwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiBtaW5MZW5ndGgsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXgobWF4TGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IG1heExlbmd0aCxcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxlbmd0aChsZW4sIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibGVuZ3RoXCIsXG4gICAgICAgICAgICB2YWx1ZTogbGVuLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBgLm1pbigxKWBcbiAgICAgKi9cbiAgICBub25lbXB0eShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbigxLCBlcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkpO1xuICAgIH1cbiAgICB0cmltKCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCB7IGtpbmQ6IFwidHJpbVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9Mb3dlckNhc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU3RyaW5nKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIHsga2luZDogXCJ0b0xvd2VyQ2FzZVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9VcHBlckNhc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU3RyaW5nKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIHsga2luZDogXCJ0b1VwcGVyQ2FzZVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGlzRGF0ZXRpbWUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZGF0ZXRpbWVcIik7XG4gICAgfVxuICAgIGdldCBpc0RhdGUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZGF0ZVwiKTtcbiAgICB9XG4gICAgZ2V0IGlzVGltZSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ0aW1lXCIpO1xuICAgIH1cbiAgICBnZXQgaXNEdXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJkdXJhdGlvblwiKTtcbiAgICB9XG4gICAgZ2V0IGlzRW1haWwoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZW1haWxcIik7XG4gICAgfVxuICAgIGdldCBpc1VSTCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ1cmxcIik7XG4gICAgfVxuICAgIGdldCBpc0Vtb2ppKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImVtb2ppXCIpO1xuICAgIH1cbiAgICBnZXQgaXNVVUlEKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcInV1aWRcIik7XG4gICAgfVxuICAgIGdldCBpc05BTk9JRCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJuYW5vaWRcIik7XG4gICAgfVxuICAgIGdldCBpc0NVSUQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY3VpZFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQ1VJRDIoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY3VpZDJcIik7XG4gICAgfVxuICAgIGdldCBpc1VMSUQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwidWxpZFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzSVAoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiaXBcIik7XG4gICAgfVxuICAgIGdldCBpc0NJRFIoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY2lkclwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQmFzZTY0KCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImJhc2U2NFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQmFzZTY0dXJsKCkge1xuICAgICAgICAvLyBiYXNlNjR1cmwgZW5jb2RpbmcgaXMgYSBtb2RpZmljYXRpb24gb2YgYmFzZTY0IHRoYXQgY2FuIHNhZmVseSBiZSB1c2VkIGluIFVSTHMgYW5kIGZpbGVuYW1lc1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImJhc2U2NHVybFwiKTtcbiAgICB9XG4gICAgZ2V0IG1pbkxlbmd0aCgpIHtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBnZXQgbWF4TGVuZ3RoKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxufVxuWm9kU3RyaW5nLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XG4gICAgICAgIGNoZWNrczogW10sXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kU3RyaW5nLFxuICAgICAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlID8/IGZhbHNlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzk2NjQ4NC93aHktZG9lcy1tb2R1bHVzLW9wZXJhdG9yLXJldHVybi1mcmFjdGlvbmFsLW51bWJlci1pbi1qYXZhc2NyaXB0LzMxNzExMDM0IzMxNzExMDM0XG5mdW5jdGlvbiBmbG9hdFNhZmVSZW1haW5kZXIodmFsLCBzdGVwKSB7XG4gICAgY29uc3QgdmFsRGVjQ291bnQgPSAodmFsLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aDtcbiAgICBjb25zdCBzdGVwRGVjQ291bnQgPSAoc3RlcC50b1N0cmluZygpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGg7XG4gICAgY29uc3QgZGVjQ291bnQgPSB2YWxEZWNDb3VudCA+IHN0ZXBEZWNDb3VudCA/IHZhbERlY0NvdW50IDogc3RlcERlY0NvdW50O1xuICAgIGNvbnN0IHZhbEludCA9IE51bWJlci5wYXJzZUludCh2YWwudG9GaXhlZChkZWNDb3VudCkucmVwbGFjZShcIi5cIiwgXCJcIikpO1xuICAgIGNvbnN0IHN0ZXBJbnQgPSBOdW1iZXIucGFyc2VJbnQoc3RlcC50b0ZpeGVkKGRlY0NvdW50KS5yZXBsYWNlKFwiLlwiLCBcIlwiKSk7XG4gICAgcmV0dXJuICh2YWxJbnQgJSBzdGVwSW50KSAvIDEwICoqIGRlY0NvdW50O1xufVxuZXhwb3J0IGNsYXNzIFpvZE51bWJlciBleHRlbmRzIFpvZFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm1pbiA9IHRoaXMuZ3RlO1xuICAgICAgICB0aGlzLm1heCA9IHRoaXMubHRlO1xuICAgICAgICB0aGlzLnN0ZXAgPSB0aGlzLm11bHRpcGxlT2Y7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IE51bWJlcihpbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm51bWJlcikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5udW1iZXIsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3R4ID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJpbnRcIikge1xuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0ludGVnZXIoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBcImZsb2F0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlID8gaW5wdXQuZGF0YSA8IGNoZWNrLnZhbHVlIDogaW5wdXQuZGF0YSA8PSBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBjaGVjay5pbmNsdXNpdmUgPyBpbnB1dC5kYXRhID4gY2hlY2sudmFsdWUgOiBpbnB1dC5kYXRhID49IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIGlmIChmbG9hdFNhZmVSZW1haW5kZXIoaW5wdXQuZGF0YSwgY2hlY2sudmFsdWUpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5ub3RfbXVsdGlwbGVfb2YsXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZU9mOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImZpbml0ZVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLm5vdF9maW5pdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhIH07XG4gICAgfVxuICAgIGd0ZSh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgZ3QodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtaW5cIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBsdGUodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIHRydWUsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gICAgfVxuICAgIGx0KHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWF4XCIsIHZhbHVlLCBmYWxzZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgc2V0TGltaXQoa2luZCwgdmFsdWUsIGluY2x1c2l2ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZE51bWJlcih7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFtcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9kZWYuY2hlY2tzLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2luZCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2FkZENoZWNrKGNoZWNrKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIGNoZWNrXSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGludChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImludFwiLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5lZ2F0aXZlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25wb3NpdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25uZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtdWx0aXBsZU9mKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm11bHRpcGxlT2ZcIixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZpbml0ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImZpbml0ZVwiLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2FmZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KS5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBtaW5WYWx1ZSgpIHtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBnZXQgbWF4VmFsdWUoKSB7XG4gICAgICAgIGxldCBtYXggPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gICAgZ2V0IGlzSW50KCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImludFwiIHx8IChjaC5raW5kID09PSBcIm11bHRpcGxlT2ZcIiAmJiB1dGlsLmlzSW50ZWdlcihjaC52YWx1ZSkpKTtcbiAgICB9XG4gICAgZ2V0IGlzRmluaXRlKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwiZmluaXRlXCIgfHwgY2gua2luZCA9PT0gXCJpbnRcIiB8fCBjaC5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2gua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOdW1iZXIuaXNGaW5pdGUobWluKSAmJiBOdW1iZXIuaXNGaW5pdGUobWF4KTtcbiAgICB9XG59XG5ab2ROdW1iZXIuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcbiAgICAgICAgY2hlY2tzOiBbXSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdW1iZXIsXG4gICAgICAgIGNvZXJjZTogcGFyYW1zPy5jb2VyY2UgfHwgZmFsc2UsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kQmlnSW50IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubWluID0gdGhpcy5ndGU7XG4gICAgICAgIHRoaXMubWF4ID0gdGhpcy5sdGU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpbnB1dC5kYXRhID0gQmlnSW50KGlucHV0LmRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRJbnZhbGlkSW5wdXQoaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYmlnaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SW52YWxpZElucHV0KGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3R4ID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlID8gaW5wdXQuZGF0YSA8IGNoZWNrLnZhbHVlIDogaW5wdXQuZGF0YSA8PSBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYmlnaW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBjaGVjay5pbmNsdXNpdmUgPyBpbnB1dC5kYXRhID4gY2hlY2sudmFsdWUgOiBpbnB1dC5kYXRhID49IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJpZ2ludFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhICUgY2hlY2sudmFsdWUgIT09IEJpZ0ludCgwKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUubm90X211bHRpcGxlX29mLFxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGVPZjogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhIH07XG4gICAgfVxuICAgIF9nZXRJbnZhbGlkSW5wdXQoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5iaWdpbnQsXG4gICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgZ3RlKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWluXCIsIHZhbHVlLCB0cnVlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBndCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgZmFsc2UsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gICAgfVxuICAgIGx0ZSh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1heFwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgbHQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBzZXRMaW1pdChraW5kLCB2YWx1ZSwgaW5jbHVzaXZlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQmlnSW50KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogW1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5jaGVja3MsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfYWRkQ2hlY2soY2hlY2spIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RCaWdJbnQoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbmVnYXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbm9ucG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25uZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgdmFsdWU6IEJpZ0ludCgwKSxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG11bHRpcGxlT2YodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibXVsdGlwbGVPZlwiLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgbWluVmFsdWUoKSB7XG4gICAgICAgIGxldCBtaW4gPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICAgICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICB9XG4gICAgZ2V0IG1heFZhbHVlKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxufVxuWm9kQmlnSW50LmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZEJpZ0ludCh7XG4gICAgICAgIGNoZWNrczogW10sXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQmlnSW50LFxuICAgICAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlID8/IGZhbHNlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEJvb2xlYW4gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5jb2VyY2UpIHtcbiAgICAgICAgICAgIGlucHV0LmRhdGEgPSBCb29sZWFuKGlucHV0LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYm9vbGVhbikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5ib29sZWFuLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZEJvb2xlYW4uY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kQm9vbGVhbih7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQm9vbGVhbixcbiAgICAgICAgY29lcmNlOiBwYXJhbXM/LmNvZXJjZSB8fCBmYWxzZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2REYXRlIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLl9kZWYuY29lcmNlKSB7XG4gICAgICAgICAgICBpbnB1dC5kYXRhID0gbmV3IERhdGUoaW5wdXQuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5kYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmRhdGUsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGlucHV0LmRhdGEuZ2V0VGltZSgpKSkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfZGF0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhdHVzID0gbmV3IFBhcnNlU3RhdHVzKCk7XG4gICAgICAgIGxldCBjdHggPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3QgY2hlY2sgb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoZWNrLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZGF0YS5nZXRUaW1lKCkgPCBjaGVjay52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmRhdGEuZ2V0VGltZSgpID4gY2hlY2sudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoY2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXM6IHN0YXR1cy52YWx1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZShpbnB1dC5kYXRhLmdldFRpbWUoKSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9hZGRDaGVjayhjaGVjaykge1xuICAgICAgICByZXR1cm4gbmV3IFpvZERhdGUoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWluKG1pbkRhdGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWluXCIsXG4gICAgICAgICAgICB2YWx1ZTogbWluRGF0ZS5nZXRUaW1lKCksXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXgobWF4RGF0ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBtYXhEYXRlLmdldFRpbWUoKSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBtaW5EYXRlKCkge1xuICAgICAgICBsZXQgbWluID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaW4gIT0gbnVsbCA/IG5ldyBEYXRlKG1pbikgOiBudWxsO1xuICAgIH1cbiAgICBnZXQgbWF4RGF0ZSgpIHtcbiAgICAgICAgbGV0IG1heCA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF4ID09PSBudWxsIHx8IGNoLnZhbHVlIDwgbWF4KVxuICAgICAgICAgICAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4ICE9IG51bGwgPyBuZXcgRGF0ZShtYXgpIDogbnVsbDtcbiAgICB9XG59XG5ab2REYXRlLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZERhdGUoe1xuICAgICAgICBjaGVja3M6IFtdLFxuICAgICAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlIHx8IGZhbHNlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERhdGUsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kU3ltYm9sIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuc3ltYm9sKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnN5bWJvbCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2RTeW1ib2wuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kU3ltYm9sKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTeW1ib2wsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kVW5kZWZpbmVkIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2RVbmRlZmluZWQuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVW5kZWZpbmVkKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmRlZmluZWQsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kTnVsbCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubnVsbCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2ROdWxsLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE51bGwoe1xuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bGwsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kQW55IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIC8vIHRvIHByZXZlbnQgaW5zdGFuY2VzIG9mIG90aGVyIGNsYXNzZXMgZnJvbSBleHRlbmRpbmcgWm9kQW55LiB0aGlzIGNhdXNlcyBpc3N1ZXMgd2l0aCBjYXRjaGFsbCBpbiBab2RPYmplY3QuXG4gICAgICAgIHRoaXMuX2FueSA9IHRydWU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxufVxuWm9kQW55LmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZEFueSh7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQW55LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZFVua25vd24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgLy8gcmVxdWlyZWRcbiAgICAgICAgdGhpcy5fdW5rbm93biA9IHRydWU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxufVxuWm9kVW5rbm93bi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RVbmtub3duKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmtub3duLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZE5ldmVyIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubmV2ZXIsXG4gICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG59XG5ab2ROZXZlci5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROZXZlcih7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmV2ZXIsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kVm9pZCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS52b2lkLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZFZvaWQuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVm9pZCh7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVm9pZCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RBcnJheSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCwgc3RhdHVzIH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBkZWYgPSB0aGlzLl9kZWY7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5hcnJheSkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5hcnJheSxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYuZXhhY3RMZW5ndGggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvb0JpZyA9IGN0eC5kYXRhLmxlbmd0aCA+IGRlZi5leGFjdExlbmd0aC52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY3R4LmRhdGEubGVuZ3RoIDwgZGVmLmV4YWN0TGVuZ3RoLnZhbHVlO1xuICAgICAgICAgICAgaWYgKHRvb0JpZyB8fCB0b29TbWFsbCkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiB0b29CaWcgPyBab2RJc3N1ZUNvZGUudG9vX2JpZyA6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgIG1pbmltdW06ICh0b29TbWFsbCA/IGRlZi5leGFjdExlbmd0aC52YWx1ZSA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgICAgIG1heGltdW06ICh0b29CaWcgPyBkZWYuZXhhY3RMZW5ndGgudmFsdWUgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZi5leGFjdExlbmd0aC5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYubWluTGVuZ3RoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoY3R4LmRhdGEubGVuZ3RoIDwgZGVmLm1pbkxlbmd0aC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBkZWYubWluTGVuZ3RoLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWluTGVuZ3RoLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZi5tYXhMZW5ndGggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdHguZGF0YS5sZW5ndGggPiBkZWYubWF4TGVuZ3RoLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBkZWYubWF4TGVuZ3RoLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWF4TGVuZ3RoLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbLi4uY3R4LmRhdGFdLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWYudHlwZS5fcGFyc2VBc3luYyhuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKTtcbiAgICAgICAgICAgIH0pKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBbLi4uY3R4LmRhdGFdLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRlZi50eXBlLl9wYXJzZVN5bmMobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGl0ZW0sIGN0eC5wYXRoLCBpKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdCk7XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGU7XG4gICAgfVxuICAgIG1pbihtaW5MZW5ndGgsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBtaW5MZW5ndGg6IHsgdmFsdWU6IG1pbkxlbmd0aCwgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXgobWF4TGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQXJyYXkoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgbWF4TGVuZ3RoOiB7IHZhbHVlOiBtYXhMZW5ndGgsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGVuZ3RoKGxlbiwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEFycmF5KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGV4YWN0TGVuZ3RoOiB7IHZhbHVlOiBsZW4sIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbm9uZW1wdHkobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5taW4oMSwgbWVzc2FnZSk7XG4gICAgfVxufVxuWm9kQXJyYXkuY3JlYXRlID0gKHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XG4gICAgICAgIHR5cGU6IHNjaGVtYSxcbiAgICAgICAgbWluTGVuZ3RoOiBudWxsLFxuICAgICAgICBtYXhMZW5ndGg6IG51bGwsXG4gICAgICAgIGV4YWN0TGVuZ3RoOiBudWxsLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEFycmF5LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZnVuY3Rpb24gZGVlcFBhcnRpYWxpZnkoc2NoZW1hKSB7XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZE9iamVjdCkge1xuICAgICAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzY2hlbWEuc2hhcGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkU2NoZW1hID0gc2NoZW1hLnNoYXBlW2tleV07XG4gICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gWm9kT3B0aW9uYWwuY3JlYXRlKGRlZXBQYXJ0aWFsaWZ5KGZpZWxkU2NoZW1hKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4uc2NoZW1hLl9kZWYsXG4gICAgICAgICAgICBzaGFwZTogKCkgPT4gbmV3U2hhcGUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RBcnJheSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEFycmF5KHtcbiAgICAgICAgICAgIC4uLnNjaGVtYS5fZGVmLFxuICAgICAgICAgICAgdHlwZTogZGVlcFBhcnRpYWxpZnkoc2NoZW1hLmVsZW1lbnQpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kT3B0aW9uYWwpIHtcbiAgICAgICAgcmV0dXJuIFpvZE9wdGlvbmFsLmNyZWF0ZShkZWVwUGFydGlhbGlmeShzY2hlbWEudW53cmFwKCkpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kTnVsbGFibGUpIHtcbiAgICAgICAgcmV0dXJuIFpvZE51bGxhYmxlLmNyZWF0ZShkZWVwUGFydGlhbGlmeShzY2hlbWEudW53cmFwKCkpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kVHVwbGUpIHtcbiAgICAgICAgcmV0dXJuIFpvZFR1cGxlLmNyZWF0ZShzY2hlbWEuaXRlbXMubWFwKChpdGVtKSA9PiBkZWVwUGFydGlhbGlmeShpdGVtKSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgWm9kT2JqZWN0IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX2NhY2hlZCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCBJbiBtb3N0IGNhc2VzLCB0aGlzIGlzIG5vIGxvbmdlciBuZWVkZWQgLSB1bmtub3duIHByb3BlcnRpZXMgYXJlIG5vdyBzaWxlbnRseSBzdHJpcHBlZC5cbiAgICAgICAgICogSWYgeW91IHdhbnQgdG8gcGFzcyB0aHJvdWdoIHVua25vd24gcHJvcGVydGllcywgdXNlIGAucGFzc3Rocm91Z2goKWAgaW5zdGVhZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubm9uc3RyaWN0ID0gdGhpcy5wYXNzdGhyb3VnaDtcbiAgICAgICAgLy8gZXh0ZW5kPFxuICAgICAgICAvLyAgIEF1Z21lbnRhdGlvbiBleHRlbmRzIFpvZFJhd1NoYXBlLFxuICAgICAgICAvLyAgIE5ld091dHB1dCBleHRlbmRzIHV0aWwuZmxhdHRlbjx7XG4gICAgICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBPdXRwdXRdOiBrIGV4dGVuZHMga2V5b2YgQXVnbWVudGF0aW9uXG4gICAgICAgIC8vICAgICAgID8gQXVnbWVudGF0aW9uW2tdW1wiX291dHB1dFwiXVxuICAgICAgICAvLyAgICAgICA6IGsgZXh0ZW5kcyBrZXlvZiBPdXRwdXRcbiAgICAgICAgLy8gICAgICAgPyBPdXRwdXRba11cbiAgICAgICAgLy8gICAgICAgOiBuZXZlcjtcbiAgICAgICAgLy8gICB9PixcbiAgICAgICAgLy8gICBOZXdJbnB1dCBleHRlbmRzIHV0aWwuZmxhdHRlbjx7XG4gICAgICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBJbnB1dF06IGsgZXh0ZW5kcyBrZXlvZiBBdWdtZW50YXRpb25cbiAgICAgICAgLy8gICAgICAgPyBBdWdtZW50YXRpb25ba11bXCJfaW5wdXRcIl1cbiAgICAgICAgLy8gICAgICAgOiBrIGV4dGVuZHMga2V5b2YgSW5wdXRcbiAgICAgICAgLy8gICAgICAgPyBJbnB1dFtrXVxuICAgICAgICAvLyAgICAgICA6IG5ldmVyO1xuICAgICAgICAvLyAgIH0+XG4gICAgICAgIC8vID4oXG4gICAgICAgIC8vICAgYXVnbWVudGF0aW9uOiBBdWdtZW50YXRpb25cbiAgICAgICAgLy8gKTogWm9kT2JqZWN0PFxuICAgICAgICAvLyAgIGV4dGVuZFNoYXBlPFQsIEF1Z21lbnRhdGlvbj4sXG4gICAgICAgIC8vICAgVW5rbm93bktleXMsXG4gICAgICAgIC8vICAgQ2F0Y2hhbGwsXG4gICAgICAgIC8vICAgTmV3T3V0cHV0LFxuICAgICAgICAvLyAgIE5ld0lucHV0XG4gICAgICAgIC8vID4ge1xuICAgICAgICAvLyAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgLy8gICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgLy8gICAgIHNoYXBlOiAoKSA9PiAoe1xuICAgICAgICAvLyAgICAgICAuLi50aGlzLl9kZWYuc2hhcGUoKSxcbiAgICAgICAgLy8gICAgICAgLi4uYXVnbWVudGF0aW9uLFxuICAgICAgICAvLyAgICAgfSksXG4gICAgICAgIC8vICAgfSkgYXMgYW55O1xuICAgICAgICAvLyB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCBVc2UgYC5leHRlbmRgIGluc3RlYWRcbiAgICAgICAgICogICovXG4gICAgICAgIHRoaXMuYXVnbWVudCA9IHRoaXMuZXh0ZW5kO1xuICAgIH1cbiAgICBfZ2V0Q2FjaGVkKCkge1xuICAgICAgICBpZiAodGhpcy5fY2FjaGVkICE9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZDtcbiAgICAgICAgY29uc3Qgc2hhcGUgPSB0aGlzLl9kZWYuc2hhcGUoKTtcbiAgICAgICAgY29uc3Qga2V5cyA9IHV0aWwub2JqZWN0S2V5cyhzaGFwZSk7XG4gICAgICAgIHRoaXMuX2NhY2hlZCA9IHsgc2hhcGUsIGtleXMgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZDtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUub2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm9iamVjdCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IHsgc2hhcGUsIGtleXM6IHNoYXBlS2V5cyB9ID0gdGhpcy5fZ2V0Q2FjaGVkKCk7XG4gICAgICAgIGNvbnN0IGV4dHJhS2V5cyA9IFtdO1xuICAgICAgICBpZiAoISh0aGlzLl9kZWYuY2F0Y2hhbGwgaW5zdGFuY2VvZiBab2ROZXZlciAmJiB0aGlzLl9kZWYudW5rbm93bktleXMgPT09IFwic3RyaXBcIikpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGN0eC5kYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzaGFwZUtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBleHRyYUtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWlycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBzaGFwZUtleXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleVZhbGlkYXRvciA9IHNoYXBlW2tleV07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN0eC5kYXRhW2tleV07XG4gICAgICAgICAgICBwYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBrZXk6IHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBrZXkgfSxcbiAgICAgICAgICAgICAgICB2YWx1ZToga2V5VmFsaWRhdG9yLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBrZXkpKSxcbiAgICAgICAgICAgICAgICBhbHdheXNTZXQ6IGtleSBpbiBjdHguZGF0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9kZWYuY2F0Y2hhbGwgaW5zdGFuY2VvZiBab2ROZXZlcikge1xuICAgICAgICAgICAgY29uc3QgdW5rbm93bktleXMgPSB0aGlzLl9kZWYudW5rbm93bktleXM7XG4gICAgICAgICAgICBpZiAodW5rbm93bktleXMgPT09IFwicGFzc3Rocm91Z2hcIikge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGV4dHJhS2V5cykge1xuICAgICAgICAgICAgICAgICAgICBwYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBjdHguZGF0YVtrZXldIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHVua25vd25LZXlzID09PSBcInN0cmljdFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4dHJhS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnVucmVjb2duaXplZF9rZXlzLFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5czogZXh0cmFLZXlzLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodW5rbm93bktleXMgPT09IFwic3RyaXBcIikge1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnRlcm5hbCBab2RPYmplY3QgZXJyb3I6IGludmFsaWQgdW5rbm93bktleXMgdmFsdWUuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBydW4gY2F0Y2hhbGwgdmFsaWRhdGlvblxuICAgICAgICAgICAgY29uc3QgY2F0Y2hhbGwgPSB0aGlzLl9kZWYuY2F0Y2hhbGw7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBleHRyYUtleXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN0eC5kYXRhW2tleV07XG4gICAgICAgICAgICAgICAgcGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGtleTogeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleSB9LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2F0Y2hhbGwuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCB2YWx1ZSwgY3R4LnBhdGgsIGtleSkgLy8sIGN0eC5jaGlsZChrZXkpLCB2YWx1ZSwgZ2V0UGFyc2VkVHlwZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgYWx3YXlzU2V0OiBrZXkgaW4gY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgIC50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzeW5jUGFpcnMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgcGFpci5rZXk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFpci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3luY1BhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHdheXNTZXQ6IHBhaXIuYWx3YXlzU2V0LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bmNQYWlycztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHN5bmNQYWlycykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBzeW5jUGFpcnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgcGFpcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBzaGFwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zaGFwZSgpO1xuICAgIH1cbiAgICBzdHJpY3QobWVzc2FnZSkge1xuICAgICAgICBlcnJvclV0aWwuZXJyVG9PYmo7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxuICAgICAgICAgICAgLi4uKG1lc3NhZ2UgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1hcDogKGlzc3VlLCBjdHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRFcnJvciA9IHRoaXMuX2RlZi5lcnJvck1hcD8uKGlzc3VlLCBjdHgpLm1lc3NhZ2UgPz8gY3R4LmRlZmF1bHRFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3N1ZS5jb2RlID09PSBcInVucmVjb2duaXplZF9rZXlzXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLm1lc3NhZ2UgPz8gZGVmYXVsdEVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZmF1bHRFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDoge30pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RyaXAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwYXNzdGhyb3VnaCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgdW5rbm93bktleXM6IFwicGFzc3Rocm91Z2hcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGNvbnN0IEF1Z21lbnRGYWN0b3J5ID1cbiAgICAvLyAgIDxEZWYgZXh0ZW5kcyBab2RPYmplY3REZWY+KGRlZjogRGVmKSA9PlxuICAgIC8vICAgPEF1Z21lbnRhdGlvbiBleHRlbmRzIFpvZFJhd1NoYXBlPihcbiAgICAvLyAgICAgYXVnbWVudGF0aW9uOiBBdWdtZW50YXRpb25cbiAgICAvLyAgICk6IFpvZE9iamVjdDxcbiAgICAvLyAgICAgZXh0ZW5kU2hhcGU8UmV0dXJuVHlwZTxEZWZbXCJzaGFwZVwiXT4sIEF1Z21lbnRhdGlvbj4sXG4gICAgLy8gICAgIERlZltcInVua25vd25LZXlzXCJdLFxuICAgIC8vICAgICBEZWZbXCJjYXRjaGFsbFwiXVxuICAgIC8vICAgPiA9PiB7XG4gICAgLy8gICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAvLyAgICAgICAuLi5kZWYsXG4gICAgLy8gICAgICAgc2hhcGU6ICgpID0+ICh7XG4gICAgLy8gICAgICAgICAuLi5kZWYuc2hhcGUoKSxcbiAgICAvLyAgICAgICAgIC4uLmF1Z21lbnRhdGlvbixcbiAgICAvLyAgICAgICB9KSxcbiAgICAvLyAgICAgfSkgYXMgYW55O1xuICAgIC8vICAgfTtcbiAgICBleHRlbmQoYXVnbWVudGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5zaGFwZSgpLFxuICAgICAgICAgICAgICAgIC4uLmF1Z21lbnRhdGlvbixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJpb3IgdG8gem9kQDEuMC4xMiB0aGVyZSB3YXMgYSBidWcgaW4gdGhlXG4gICAgICogaW5mZXJyZWQgdHlwZSBvZiBtZXJnZWQgb2JqZWN0cy4gUGxlYXNlXG4gICAgICogdXBncmFkZSBpZiB5b3UgYXJlIGV4cGVyaWVuY2luZyBpc3N1ZXMuXG4gICAgICovXG4gICAgbWVyZ2UobWVyZ2luZykge1xuICAgICAgICBjb25zdCBtZXJnZWQgPSBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gICAgICAgICAgICBjYXRjaGFsbDogbWVyZ2luZy5fZGVmLmNhdGNoYWxsLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5fZGVmLnNoYXBlKCksXG4gICAgICAgICAgICAgICAgLi4ubWVyZ2luZy5fZGVmLnNoYXBlKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICB9XG4gICAgLy8gbWVyZ2U8XG4gICAgLy8gICBJbmNvbWluZyBleHRlbmRzIEFueVpvZE9iamVjdCxcbiAgICAvLyAgIEF1Z21lbnRhdGlvbiBleHRlbmRzIEluY29taW5nW1wic2hhcGVcIl0sXG4gICAgLy8gICBOZXdPdXRwdXQgZXh0ZW5kcyB7XG4gICAgLy8gICAgIFtrIGluIGtleW9mIEF1Z21lbnRhdGlvbiB8IGtleW9mIE91dHB1dF06IGsgZXh0ZW5kcyBrZXlvZiBBdWdtZW50YXRpb25cbiAgICAvLyAgICAgICA/IEF1Z21lbnRhdGlvbltrXVtcIl9vdXRwdXRcIl1cbiAgICAvLyAgICAgICA6IGsgZXh0ZW5kcyBrZXlvZiBPdXRwdXRcbiAgICAvLyAgICAgICA/IE91dHB1dFtrXVxuICAgIC8vICAgICAgIDogbmV2ZXI7XG4gICAgLy8gICB9LFxuICAgIC8vICAgTmV3SW5wdXQgZXh0ZW5kcyB7XG4gICAgLy8gICAgIFtrIGluIGtleW9mIEF1Z21lbnRhdGlvbiB8IGtleW9mIElucHV0XTogayBleHRlbmRzIGtleW9mIEF1Z21lbnRhdGlvblxuICAgIC8vICAgICAgID8gQXVnbWVudGF0aW9uW2tdW1wiX2lucHV0XCJdXG4gICAgLy8gICAgICAgOiBrIGV4dGVuZHMga2V5b2YgSW5wdXRcbiAgICAvLyAgICAgICA/IElucHV0W2tdXG4gICAgLy8gICAgICAgOiBuZXZlcjtcbiAgICAvLyAgIH1cbiAgICAvLyA+KFxuICAgIC8vICAgbWVyZ2luZzogSW5jb21pbmdcbiAgICAvLyApOiBab2RPYmplY3Q8XG4gICAgLy8gICBleHRlbmRTaGFwZTxULCBSZXR1cm5UeXBlPEluY29taW5nW1wiX2RlZlwiXVtcInNoYXBlXCJdPj4sXG4gICAgLy8gICBJbmNvbWluZ1tcIl9kZWZcIl1bXCJ1bmtub3duS2V5c1wiXSxcbiAgICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcImNhdGNoYWxsXCJdLFxuICAgIC8vICAgTmV3T3V0cHV0LFxuICAgIC8vICAgTmV3SW5wdXRcbiAgICAvLyA+IHtcbiAgICAvLyAgIGNvbnN0IG1lcmdlZDogYW55ID0gbmV3IFpvZE9iamVjdCh7XG4gICAgLy8gICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gICAgLy8gICAgIGNhdGNoYWxsOiBtZXJnaW5nLl9kZWYuY2F0Y2hhbGwsXG4gICAgLy8gICAgIHNoYXBlOiAoKSA9PlxuICAgIC8vICAgICAgIG9iamVjdFV0aWwubWVyZ2VTaGFwZXModGhpcy5fZGVmLnNoYXBlKCksIG1lcmdpbmcuX2RlZi5zaGFwZSgpKSxcbiAgICAvLyAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgLy8gICB9KSBhcyBhbnk7XG4gICAgLy8gICByZXR1cm4gbWVyZ2VkO1xuICAgIC8vIH1cbiAgICBzZXRLZXkoa2V5LCBzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXVnbWVudCh7IFtrZXldOiBzY2hlbWEgfSk7XG4gICAgfVxuICAgIC8vIG1lcmdlPEluY29taW5nIGV4dGVuZHMgQW55Wm9kT2JqZWN0PihcbiAgICAvLyAgIG1lcmdpbmc6IEluY29taW5nXG4gICAgLy8gKTogLy9ab2RPYmplY3Q8VCAmIEluY29taW5nW1wiX3NoYXBlXCJdLCBVbmtub3duS2V5cywgQ2F0Y2hhbGw+ID0gKG1lcmdpbmcpID0+IHtcbiAgICAvLyBab2RPYmplY3Q8XG4gICAgLy8gICBleHRlbmRTaGFwZTxULCBSZXR1cm5UeXBlPEluY29taW5nW1wiX2RlZlwiXVtcInNoYXBlXCJdPj4sXG4gICAgLy8gICBJbmNvbWluZ1tcIl9kZWZcIl1bXCJ1bmtub3duS2V5c1wiXSxcbiAgICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcImNhdGNoYWxsXCJdXG4gICAgLy8gPiB7XG4gICAgLy8gICAvLyBjb25zdCBtZXJnZWRTaGFwZSA9IG9iamVjdFV0aWwubWVyZ2VTaGFwZXMoXG4gICAgLy8gICAvLyAgIHRoaXMuX2RlZi5zaGFwZSgpLFxuICAgIC8vICAgLy8gICBtZXJnaW5nLl9kZWYuc2hhcGUoKVxuICAgIC8vICAgLy8gKTtcbiAgICAvLyAgIGNvbnN0IG1lcmdlZDogYW55ID0gbmV3IFpvZE9iamVjdCh7XG4gICAgLy8gICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gICAgLy8gICAgIGNhdGNoYWxsOiBtZXJnaW5nLl9kZWYuY2F0Y2hhbGwsXG4gICAgLy8gICAgIHNoYXBlOiAoKSA9PlxuICAgIC8vICAgICAgIG9iamVjdFV0aWwubWVyZ2VTaGFwZXModGhpcy5fZGVmLnNoYXBlKCksIG1lcmdpbmcuX2RlZi5zaGFwZSgpKSxcbiAgICAvLyAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgLy8gICB9KSBhcyBhbnk7XG4gICAgLy8gICByZXR1cm4gbWVyZ2VkO1xuICAgIC8vIH1cbiAgICBjYXRjaGFsbChpbmRleCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjYXRjaGFsbDogaW5kZXgsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwaWNrKG1hc2spIHtcbiAgICAgICAgY29uc3Qgc2hhcGUgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdXRpbC5vYmplY3RLZXlzKG1hc2spKSB7XG4gICAgICAgICAgICBpZiAobWFza1trZXldICYmIHRoaXMuc2hhcGVba2V5XSkge1xuICAgICAgICAgICAgICAgIHNoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+IHNoYXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgb21pdChtYXNrKSB7XG4gICAgICAgIGNvbnN0IHNoYXBlID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHV0aWwub2JqZWN0S2V5cyh0aGlzLnNoYXBlKSkge1xuICAgICAgICAgICAgaWYgKCFtYXNrW2tleV0pIHtcbiAgICAgICAgICAgICAgICBzaGFwZVtrZXldID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBzaGFwZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgZGVlcFBhcnRpYWwoKSB7XG4gICAgICAgIHJldHVybiBkZWVwUGFydGlhbGlmeSh0aGlzKTtcbiAgICB9XG4gICAgcGFydGlhbChtYXNrKSB7XG4gICAgICAgIGNvbnN0IG5ld1NoYXBlID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHV0aWwub2JqZWN0S2V5cyh0aGlzLnNoYXBlKSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGRTY2hlbWEgPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICBpZiAobWFzayAmJiAhbWFza1trZXldKSB7XG4gICAgICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IGZpZWxkU2NoZW1hO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IGZpZWxkU2NoZW1hLm9wdGlvbmFsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+IG5ld1NoYXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVxdWlyZWQobWFzaykge1xuICAgICAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkpIHtcbiAgICAgICAgICAgIGlmIChtYXNrICYmICFtYXNrW2tleV0pIHtcbiAgICAgICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGRTY2hlbWEgPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICAgICAgbGV0IG5ld0ZpZWxkID0gZmllbGRTY2hlbWE7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG5ld0ZpZWxkIGluc3RhbmNlb2YgWm9kT3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RmllbGQgPSBuZXdGaWVsZC5fZGVmLmlubmVyVHlwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IG5ld0ZpZWxkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBuZXdTaGFwZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGtleW9mKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlWm9kRW51bSh1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkpO1xuICAgIH1cbn1cblpvZE9iamVjdC5jcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgc2hhcGU6ICgpID0+IHNoYXBlLFxuICAgICAgICB1bmtub3duS2V5czogXCJzdHJpcFwiLFxuICAgICAgICBjYXRjaGFsbDogWm9kTmV2ZXIuY3JlYXRlKCksXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuWm9kT2JqZWN0LnN0cmljdENyZWF0ZSA9IChzaGFwZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICBzaGFwZTogKCkgPT4gc2hhcGUsXG4gICAgICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxuICAgICAgICBjYXRjaGFsbDogWm9kTmV2ZXIuY3JlYXRlKCksXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuWm9kT2JqZWN0LmxhenljcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgc2hhcGUsXG4gICAgICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXG4gICAgICAgIGNhdGNoYWxsOiBab2ROZXZlci5jcmVhdGUoKSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kVW5pb24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9kZWYub3B0aW9ucztcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVzdWx0cyhyZXN1bHRzKSB7XG4gICAgICAgICAgICAvLyByZXR1cm4gZmlyc3QgaXNzdWUtZnJlZSB2YWxpZGF0aW9uIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQucmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgaXNzdWVzIGZyb20gZGlydHkgb3B0aW9uXG4gICAgICAgICAgICAgICAgICAgIGN0eC5jb21tb24uaXNzdWVzLnB1c2goLi4ucmVzdWx0LmN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmV0dXJuIGludmFsaWRcbiAgICAgICAgICAgIGNvbnN0IHVuaW9uRXJyb3JzID0gcmVzdWx0cy5tYXAoKHJlc3VsdCkgPT4gbmV3IFpvZEVycm9yKHJlc3VsdC5jdHguY29tbW9uLmlzc3VlcykpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb24sXG4gICAgICAgICAgICAgICAgdW5pb25FcnJvcnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwob3B0aW9ucy5tYXAoYXN5bmMgKG9wdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkQ3R4ID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5jdHgsXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uY3R4LmNvbW1vbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogYXdhaXQgb3B0aW9uLl9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGNoaWxkQ3R4LFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgY3R4OiBjaGlsZEN0eCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkpLnRoZW4oaGFuZGxlUmVzdWx0cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZGlydHkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBpc3N1ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZEN0eCA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY3R4LFxuICAgICAgICAgICAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmN0eC5jb21tb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBvcHRpb24uX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjaGlsZEN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIiAmJiAhZGlydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB7IHJlc3VsdCwgY3R4OiBjaGlsZEN0eCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRDdHguY29tbW9uLmlzc3Vlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNzdWVzLnB1c2goY2hpbGRDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRpcnR5KSB7XG4gICAgICAgICAgICAgICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaCguLi5kaXJ0eS5jdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpcnR5LnJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHVuaW9uRXJyb3JzID0gaXNzdWVzLm1hcCgoaXNzdWVzKSA9PiBuZXcgWm9kRXJyb3IoaXNzdWVzKSk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbixcbiAgICAgICAgICAgICAgICB1bmlvbkVycm9ycyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYub3B0aW9ucztcbiAgICB9XG59XG5ab2RVbmlvbi5jcmVhdGUgPSAodHlwZXMsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVW5pb24oe1xuICAgICAgICBvcHRpb25zOiB0eXBlcyxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmlvbixcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy9cbi8vLy8vLy8vLy8gICAgICBab2REaXNjcmltaW5hdGVkVW5pb24gICAgICAvLy8vLy8vLy8vXG4vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5jb25zdCBnZXREaXNjcmltaW5hdG9yID0gKHR5cGUpID0+IHtcbiAgICBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZExhenkpIHtcbiAgICAgICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS5zY2hlbWEpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kRWZmZWN0cykge1xuICAgICAgICByZXR1cm4gZ2V0RGlzY3JpbWluYXRvcih0eXBlLmlubmVyVHlwZSgpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZExpdGVyYWwpIHtcbiAgICAgICAgcmV0dXJuIFt0eXBlLnZhbHVlXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZEVudW0pIHtcbiAgICAgICAgcmV0dXJuIHR5cGUub3B0aW9ucztcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE5hdGl2ZUVudW0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGJhbi9iYW5cbiAgICAgICAgcmV0dXJuIHV0aWwub2JqZWN0VmFsdWVzKHR5cGUuZW51bSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2REZWZhdWx0KSB7XG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUuX2RlZi5pbm5lclR5cGUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kVW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBbdW5kZWZpbmVkXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtudWxsXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE9wdGlvbmFsKSB7XG4gICAgICAgIHJldHVybiBbdW5kZWZpbmVkLCAuLi5nZXREaXNjcmltaW5hdG9yKHR5cGUudW53cmFwKCkpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE51bGxhYmxlKSB7XG4gICAgICAgIHJldHVybiBbbnVsbCwgLi4uZ2V0RGlzY3JpbWluYXRvcih0eXBlLnVud3JhcCgpKV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RCcmFuZGVkKSB7XG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUudW53cmFwKCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kUmVhZG9ubHkpIHtcbiAgICAgICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS51bndyYXAoKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RDYXRjaCkge1xuICAgICAgICByZXR1cm4gZ2V0RGlzY3JpbWluYXRvcih0eXBlLl9kZWYuaW5uZXJUeXBlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59O1xuZXhwb3J0IGNsYXNzIFpvZERpc2NyaW1pbmF0ZWRVbmlvbiBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm9iamVjdCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5vYmplY3QsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXNjcmltaW5hdG9yID0gdGhpcy5kaXNjcmltaW5hdG9yO1xuICAgICAgICBjb25zdCBkaXNjcmltaW5hdG9yVmFsdWUgPSBjdHguZGF0YVtkaXNjcmltaW5hdG9yXTtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5vcHRpb25zTWFwLmdldChkaXNjcmltaW5hdG9yVmFsdWUpO1xuICAgICAgICBpZiAoIW9wdGlvbikge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvcixcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBBcnJheS5mcm9tKHRoaXMub3B0aW9uc01hcC5rZXlzKCkpLFxuICAgICAgICAgICAgICAgIHBhdGg6IFtkaXNjcmltaW5hdG9yXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb24uX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9uLl9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGRpc2NyaW1pbmF0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuZGlzY3JpbWluYXRvcjtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYub3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnNNYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYub3B0aW9uc01hcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBkaXNjcmltaW5hdGVkIHVuaW9uIHNjaGVtYS4gSXRzIGJlaGF2aW91ciBpcyB2ZXJ5IHNpbWlsYXIgdG8gdGhhdCBvZiB0aGUgbm9ybWFsIHoudW5pb24oKSBjb25zdHJ1Y3Rvci5cbiAgICAgKiBIb3dldmVyLCBpdCBvbmx5IGFsbG93cyBhIHVuaW9uIG9mIG9iamVjdHMsIGFsbCBvZiB3aGljaCBuZWVkIHRvIHNoYXJlIGEgZGlzY3JpbWluYXRvciBwcm9wZXJ0eS4gVGhpcyBwcm9wZXJ0eSBtdXN0XG4gICAgICogaGF2ZSBhIGRpZmZlcmVudCB2YWx1ZSBmb3IgZWFjaCBvYmplY3QgaW4gdGhlIHVuaW9uLlxuICAgICAqIEBwYXJhbSBkaXNjcmltaW5hdG9yIHRoZSBuYW1lIG9mIHRoZSBkaXNjcmltaW5hdG9yIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHR5cGVzIGFuIGFycmF5IG9mIG9iamVjdCBzY2hlbWFzXG4gICAgICogQHBhcmFtIHBhcmFtc1xuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGUoZGlzY3JpbWluYXRvciwgb3B0aW9ucywgcGFyYW1zKSB7XG4gICAgICAgIC8vIEdldCBhbGwgdGhlIHZhbGlkIGRpc2NyaW1pbmF0b3IgdmFsdWVzXG4gICAgICAgIGNvbnN0IG9wdGlvbnNNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIHRyeSB7XG4gICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBvcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBkaXNjcmltaW5hdG9yVmFsdWVzID0gZ2V0RGlzY3JpbWluYXRvcih0eXBlLnNoYXBlW2Rpc2NyaW1pbmF0b3JdKTtcbiAgICAgICAgICAgIGlmICghZGlzY3JpbWluYXRvclZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgZGlzY3JpbWluYXRvciB2YWx1ZSBmb3Iga2V5IFxcYCR7ZGlzY3JpbWluYXRvcn1cXGAgY291bGQgbm90IGJlIGV4dHJhY3RlZCBmcm9tIGFsbCBzY2hlbWEgb3B0aW9uc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBkaXNjcmltaW5hdG9yVmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNNYXAuaGFzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERpc2NyaW1pbmF0b3IgcHJvcGVydHkgJHtTdHJpbmcoZGlzY3JpbWluYXRvcil9IGhhcyBkdXBsaWNhdGUgdmFsdWUgJHtTdHJpbmcodmFsdWUpfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRpb25zTWFwLnNldCh2YWx1ZSwgdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2REaXNjcmltaW5hdGVkVW5pb24oe1xuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REaXNjcmltaW5hdGVkVW5pb24sXG4gICAgICAgICAgICBkaXNjcmltaW5hdG9yLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnNNYXAsXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1lcmdlVmFsdWVzKGEsIGIpIHtcbiAgICBjb25zdCBhVHlwZSA9IGdldFBhcnNlZFR5cGUoYSk7XG4gICAgY29uc3QgYlR5cGUgPSBnZXRQYXJzZWRUeXBlKGIpO1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBkYXRhOiBhIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGFUeXBlID09PSBab2RQYXJzZWRUeXBlLm9iamVjdCAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5vYmplY3QpIHtcbiAgICAgICAgY29uc3QgYktleXMgPSB1dGlsLm9iamVjdEtleXMoYik7XG4gICAgICAgIGNvbnN0IHNoYXJlZEtleXMgPSB1dGlsLm9iamVjdEtleXMoYSkuZmlsdGVyKChrZXkpID0+IGJLZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTEpO1xuICAgICAgICBjb25zdCBuZXdPYmogPSB7IC4uLmEsIC4uLmIgfTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2Ygc2hhcmVkS2V5cykge1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlcyhhW2tleV0sIGJba2V5XSk7XG4gICAgICAgICAgICBpZiAoIXNoYXJlZFZhbHVlLnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdPYmpba2V5XSA9IHNoYXJlZFZhbHVlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGRhdGE6IG5ld09iaiB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChhVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSkge1xuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdBcnJheSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1BID0gYVtpbmRleF07XG4gICAgICAgICAgICBjb25zdCBpdGVtQiA9IGJbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlcyhpdGVtQSwgaXRlbUIpO1xuICAgICAgICAgICAgaWYgKCFzaGFyZWRWYWx1ZS52YWxpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbGlkOiBmYWxzZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3QXJyYXkucHVzaChzaGFyZWRWYWx1ZS5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogbmV3QXJyYXkgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYVR5cGUgPT09IFpvZFBhcnNlZFR5cGUuZGF0ZSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5kYXRlICYmICthID09PSArYikge1xuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogYSB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFpvZEludGVyc2VjdGlvbiBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBoYW5kbGVQYXJzZWQgPSAocGFyc2VkTGVmdCwgcGFyc2VkUmlnaHQpID0+IHtcbiAgICAgICAgICAgIGlmIChpc0Fib3J0ZWQocGFyc2VkTGVmdCkgfHwgaXNBYm9ydGVkKHBhcnNlZFJpZ2h0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gbWVyZ2VWYWx1ZXMocGFyc2VkTGVmdC52YWx1ZSwgcGFyc2VkUmlnaHQudmFsdWUpO1xuICAgICAgICAgICAgaWYgKCFtZXJnZWQudmFsaWQpIHtcbiAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfaW50ZXJzZWN0aW9uX3R5cGVzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRGlydHkocGFyc2VkTGVmdCkgfHwgaXNEaXJ0eShwYXJzZWRSaWdodCkpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogbWVyZ2VkLmRhdGEgfTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmLmxlZnQuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHRoaXMuX2RlZi5yaWdodC5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdKS50aGVuKChbbGVmdCwgcmlnaHRdKSA9PiBoYW5kbGVQYXJzZWQobGVmdCwgcmlnaHQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVQYXJzZWQodGhpcy5fZGVmLmxlZnQuX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICB9KSwgdGhpcy5fZGVmLnJpZ2h0Ll9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuWm9kSW50ZXJzZWN0aW9uLmNyZWF0ZSA9IChsZWZ0LCByaWdodCwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RJbnRlcnNlY3Rpb24oe1xuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kSW50ZXJzZWN0aW9uLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuLy8gdHlwZSBab2RUdXBsZUl0ZW1zID0gW1pvZFR5cGVBbnksIC4uLlpvZFR5cGVBbnlbXV07XG5leHBvcnQgY2xhc3MgWm9kVHVwbGUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmFycmF5KSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmFycmF5LFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5kYXRhLmxlbmd0aCA8IHRoaXMuX2RlZi5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgbWluaW11bTogdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdCA9IHRoaXMuX2RlZi5yZXN0O1xuICAgICAgICBpZiAoIXJlc3QgJiYgY3R4LmRhdGEubGVuZ3RoID4gdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgbWF4aW11bTogdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbXMgPSBbLi4uY3R4LmRhdGFdXG4gICAgICAgICAgICAubWFwKChpdGVtLCBpdGVtSW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuX2RlZi5pdGVtc1tpdGVtSW5kZXhdIHx8IHRoaXMuX2RlZi5yZXN0O1xuICAgICAgICAgICAgaWYgKCFzY2hlbWEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGl0ZW1JbmRleCkpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbHRlcigoeCkgPT4gISF4KTsgLy8gZmlsdGVyIG51bGxzXG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoaXRlbXMpLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIGl0ZW1zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaXRlbXM7XG4gICAgfVxuICAgIHJlc3QocmVzdCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFR1cGxlKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHJlc3QsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblpvZFR1cGxlLmNyZWF0ZSA9IChzY2hlbWFzLCBwYXJhbXMpID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2NoZW1hcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhbiBhcnJheSBvZiBzY2hlbWFzIHRvIHoudHVwbGUoWyAuLi4gXSlcIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgWm9kVHVwbGUoe1xuICAgICAgICBpdGVtczogc2NoZW1hcyxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RUdXBsZSxcbiAgICAgICAgcmVzdDogbnVsbCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RSZWNvcmQgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBnZXQga2V5U2NoZW1hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgfVxuICAgIGdldCB2YWx1ZVNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUub2JqZWN0KSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm9iamVjdCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhaXJzID0gW107XG4gICAgICAgIGNvbnN0IGtleVR5cGUgPSB0aGlzLl9kZWYua2V5VHlwZTtcbiAgICAgICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY3R4LmRhdGEpIHtcbiAgICAgICAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIGtleToga2V5VHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGtleSwgY3R4LnBhdGgsIGtleSkpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBjdHguZGF0YVtrZXldLCBjdHgucGF0aCwga2V5KSksXG4gICAgICAgICAgICAgICAgYWx3YXlzU2V0OiBrZXkgaW4gY3R4LmRhdGEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0QXN5bmMoc3RhdHVzLCBwYWlycyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgcGFpcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZShmaXJzdCwgc2Vjb25kLCB0aGlyZCkge1xuICAgICAgICBpZiAoc2Vjb25kIGluc3RhbmNlb2YgWm9kVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RSZWNvcmQoe1xuICAgICAgICAgICAgICAgIGtleVR5cGU6IGZpcnN0LFxuICAgICAgICAgICAgICAgIHZhbHVlVHlwZTogc2Vjb25kLFxuICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUmVjb3JkLFxuICAgICAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcmQpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RSZWNvcmQoe1xuICAgICAgICAgICAga2V5VHlwZTogWm9kU3RyaW5nLmNyZWF0ZSgpLFxuICAgICAgICAgICAgdmFsdWVUeXBlOiBmaXJzdCxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUmVjb3JkLFxuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhzZWNvbmQpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgWm9kTWFwIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgZ2V0IGtleVNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5rZXlUeXBlO1xuICAgIH1cbiAgICBnZXQgdmFsdWVTY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVUeXBlO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm1hcCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5tYXAsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlUeXBlID0gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgICAgIGNvbnN0IHBhaXJzID0gWy4uLmN0eC5kYXRhLmVudHJpZXMoKV0ubWFwKChba2V5LCB2YWx1ZV0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtleToga2V5VHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGtleSwgY3R4LnBhdGgsIFtpbmRleCwgXCJrZXlcIl0pKSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBbaW5kZXgsIFwidmFsdWVcIl0pKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgY29uc3QgZmluYWxNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHBhaXIua2V5O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhaXIudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImFib3J0ZWRcIiB8fCB2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJkaXJ0eVwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbE1hcC5zZXQoa2V5LnZhbHVlLCB2YWx1ZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxNYXAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZmluYWxNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBwYWlyLmtleTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhaXIudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImRpcnR5XCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsTWFwLnNldChrZXkudmFsdWUsIHZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxNYXAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cblpvZE1hcC5jcmVhdGUgPSAoa2V5VHlwZSwgdmFsdWVUeXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE1hcCh7XG4gICAgICAgIHZhbHVlVHlwZSxcbiAgICAgICAga2V5VHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RNYXAsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kU2V0IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5zZXQpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuc2V0LFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVmID0gdGhpcy5fZGVmO1xuICAgICAgICBpZiAoZGVmLm1pblNpemUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdHguZGF0YS5zaXplIDwgZGVmLm1pblNpemUudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgbWluaW11bTogZGVmLm1pblNpemUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWluU2l6ZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYubWF4U2l6ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGN0eC5kYXRhLnNpemUgPiBkZWYubWF4U2l6ZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogZGVmLm1heFNpemUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYubWF4U2l6ZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgICAgIGZ1bmN0aW9uIGZpbmFsaXplU2V0KGVsZW1lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRTZXQgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgcGFyc2VkU2V0LmFkZChlbGVtZW50LnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogcGFyc2VkU2V0IH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBbLi4uY3R4LmRhdGEudmFsdWVzKCldLm1hcCgoaXRlbSwgaSkgPT4gdmFsdWVUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKSk7XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZWxlbWVudHMpLnRoZW4oKGVsZW1lbnRzKSA9PiBmaW5hbGl6ZVNldChlbGVtZW50cykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZpbmFsaXplU2V0KGVsZW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtaW4obWluU2l6ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFNldCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBtaW5TaXplOiB7IHZhbHVlOiBtaW5TaXplLCBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG1heChtYXhTaXplLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU2V0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIG1heFNpemU6IHsgdmFsdWU6IG1heFNpemUsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2l6ZShzaXplLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbihzaXplLCBtZXNzYWdlKS5tYXgoc2l6ZSwgbWVzc2FnZSk7XG4gICAgfVxuICAgIG5vbmVtcHR5KG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluKDEsIG1lc3NhZ2UpO1xuICAgIH1cbn1cblpvZFNldC5jcmVhdGUgPSAodmFsdWVUeXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFNldCh7XG4gICAgICAgIHZhbHVlVHlwZSxcbiAgICAgICAgbWluU2l6ZTogbnVsbCxcbiAgICAgICAgbWF4U2l6ZTogbnVsbCxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTZXQsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kRnVuY3Rpb24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy52YWxpZGF0ZSA9IHRoaXMuaW1wbGVtZW50O1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5mdW5jdGlvbikge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5mdW5jdGlvbixcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1ha2VBcmdzSXNzdWUoYXJncywgZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBtYWtlSXNzdWUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGFyZ3MsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgZXJyb3JNYXBzOiBbY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAsIGN0eC5zY2hlbWFFcnJvck1hcCwgZ2V0RXJyb3JNYXAoKSwgZGVmYXVsdEVycm9yTWFwXS5maWx0ZXIoKHgpID0+ICEheCksXG4gICAgICAgICAgICAgICAgaXNzdWVEYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX2FyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzRXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYWtlUmV0dXJuc0lzc3VlKHJldHVybnMsIGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFrZUlzc3VlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiByZXR1cm5zLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIGVycm9yTWFwczogW2N0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLCBjdHguc2NoZW1hRXJyb3JNYXAsIGdldEVycm9yTWFwKCksIGRlZmF1bHRFcnJvck1hcF0uZmlsdGVyKCh4KSA9PiAhIXgpLFxuICAgICAgICAgICAgICAgIGlzc3VlRGF0YToge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9yZXR1cm5fdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZUVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyYW1zID0geyBlcnJvck1hcDogY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAgfTtcbiAgICAgICAgY29uc3QgZm4gPSBjdHguZGF0YTtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5yZXR1cm5zIGluc3RhbmNlb2YgWm9kUHJvbWlzZSkge1xuICAgICAgICAgICAgLy8gV291bGQgbG92ZSBhIHdheSB0byBhdm9pZCBkaXNhYmxpbmcgdGhpcyBydWxlLCBidXQgd2UgbmVlZFxuICAgICAgICAgICAgLy8gYW4gYWxpYXMgKHVzaW5nIGFuIGFycm93IGZ1bmN0aW9uIHdhcyB3aGF0IGNhdXNlZCAyNjUxKS5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuICAgICAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIE9LKGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IoW10pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFyZ3MgPSBhd2FpdCBtZS5fZGVmLmFyZ3MucGFyc2VBc3luYyhhcmdzLCBwYXJhbXMpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmFkZElzc3VlKG1ha2VBcmdzSXNzdWUoYXJncywgZSkpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBSZWZsZWN0LmFwcGx5KGZuLCB0aGlzLCBwYXJzZWRBcmdzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRSZXR1cm5zID0gYXdhaXQgbWUuX2RlZi5yZXR1cm5zLl9kZWYudHlwZVxuICAgICAgICAgICAgICAgICAgICAucGFyc2VBc3luYyhyZXN1bHQsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmFkZElzc3VlKG1ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBlKSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWRSZXR1cm5zO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBXb3VsZCBsb3ZlIGEgd2F5IHRvIGF2b2lkIGRpc2FibGluZyB0aGlzIHJ1bGUsIGJ1dCB3ZSBuZWVkXG4gICAgICAgICAgICAvLyBhbiBhbGlhcyAodXNpbmcgYW4gYXJyb3cgZnVuY3Rpb24gd2FzIHdoYXQgY2F1c2VkIDI2NTEpLlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgICAgICAgICBjb25zdCBtZSA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gT0soZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRBcmdzID0gbWUuX2RlZi5hcmdzLnNhZmVQYXJzZShhcmdzLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIGlmICghcGFyc2VkQXJncy5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBab2RFcnJvcihbbWFrZUFyZ3NJc3N1ZShhcmdzLCBwYXJzZWRBcmdzLmVycm9yKV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LmFwcGx5KGZuLCB0aGlzLCBwYXJzZWRBcmdzLmRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFJldHVybnMgPSBtZS5fZGVmLnJldHVybnMuc2FmZVBhcnNlKHJlc3VsdCwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICBpZiAoIXBhcnNlZFJldHVybnMuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgWm9kRXJyb3IoW21ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBwYXJzZWRSZXR1cm5zLmVycm9yKV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkUmV0dXJucy5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFyYW1ldGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5hcmdzO1xuICAgIH1cbiAgICByZXR1cm5UeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnJldHVybnM7XG4gICAgfVxuICAgIGFyZ3MoLi4uaXRlbXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbih7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBhcmdzOiBab2RUdXBsZS5jcmVhdGUoaXRlbXMpLnJlc3QoWm9kVW5rbm93bi5jcmVhdGUoKSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm5zKHJldHVyblR5cGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbih7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICByZXR1cm5zOiByZXR1cm5UeXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW1wbGVtZW50KGZ1bmMpIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdGVkRnVuYyA9IHRoaXMucGFyc2UoZnVuYyk7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZWRGdW5jO1xuICAgIH1cbiAgICBzdHJpY3RJbXBsZW1lbnQoZnVuYykge1xuICAgICAgICBjb25zdCB2YWxpZGF0ZWRGdW5jID0gdGhpcy5wYXJzZShmdW5jKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlZEZ1bmM7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGUoYXJncywgcmV0dXJucywgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kRnVuY3Rpb24oe1xuICAgICAgICAgICAgYXJnczogKGFyZ3MgPyBhcmdzIDogWm9kVHVwbGUuY3JlYXRlKFtdKS5yZXN0KFpvZFVua25vd24uY3JlYXRlKCkpKSxcbiAgICAgICAgICAgIHJldHVybnM6IHJldHVybnMgfHwgWm9kVW5rbm93bi5jcmVhdGUoKSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRnVuY3Rpb24sXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBab2RMYXp5IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgZ2V0IHNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5nZXR0ZXIoKTtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBsYXp5U2NoZW1hID0gdGhpcy5fZGVmLmdldHRlcigpO1xuICAgICAgICByZXR1cm4gbGF6eVNjaGVtYS5fcGFyc2UoeyBkYXRhOiBjdHguZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4IH0pO1xuICAgIH1cbn1cblpvZExhenkuY3JlYXRlID0gKGdldHRlciwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RMYXp5KHtcbiAgICAgICAgZ2V0dGVyOiBnZXR0ZXIsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTGF6eSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RMaXRlcmFsIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5kYXRhICE9PSB0aGlzLl9kZWYudmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9saXRlcmFsLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiB0aGlzLl9kZWYudmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogaW5wdXQuZGF0YSB9O1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWU7XG4gICAgfVxufVxuWm9kTGl0ZXJhbC5jcmVhdGUgPSAodmFsdWUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTGl0ZXJhbCh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RMaXRlcmFsLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZnVuY3Rpb24gY3JlYXRlWm9kRW51bSh2YWx1ZXMsIHBhcmFtcykge1xuICAgIHJldHVybiBuZXcgWm9kRW51bSh7XG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFbnVtLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59XG5leHBvcnQgY2xhc3MgWm9kRW51bSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0LmRhdGEgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdGhpcy5fZGVmLnZhbHVlcztcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiB1dGlsLmpvaW5WYWx1ZXMoZXhwZWN0ZWRWYWx1ZXMpLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2NhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZSA9IG5ldyBTZXQodGhpcy5fZGVmLnZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZS5oYXMoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdGhpcy5fZGVmLnZhbHVlcztcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV4cGVjdGVkVmFsdWVzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlcztcbiAgICB9XG4gICAgZ2V0IGVudW0oKSB7XG4gICAgICAgIGNvbnN0IGVudW1WYWx1ZXMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xuICAgICAgICAgICAgZW51bVZhbHVlc1t2YWxdID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnVtVmFsdWVzO1xuICAgIH1cbiAgICBnZXQgVmFsdWVzKCkge1xuICAgICAgICBjb25zdCBlbnVtVmFsdWVzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgdmFsIG9mIHRoaXMuX2RlZi52YWx1ZXMpIHtcbiAgICAgICAgICAgIGVudW1WYWx1ZXNbdmFsXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW51bVZhbHVlcztcbiAgICB9XG4gICAgZ2V0IEVudW0oKSB7XG4gICAgICAgIGNvbnN0IGVudW1WYWx1ZXMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xuICAgICAgICAgICAgZW51bVZhbHVlc1t2YWxdID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnVtVmFsdWVzO1xuICAgIH1cbiAgICBleHRyYWN0KHZhbHVlcywgbmV3RGVmID0gdGhpcy5fZGVmKSB7XG4gICAgICAgIHJldHVybiBab2RFbnVtLmNyZWF0ZSh2YWx1ZXMsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIC4uLm5ld0RlZixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGV4Y2x1ZGUodmFsdWVzLCBuZXdEZWYgPSB0aGlzLl9kZWYpIHtcbiAgICAgICAgcmV0dXJuIFpvZEVudW0uY3JlYXRlKHRoaXMub3B0aW9ucy5maWx0ZXIoKG9wdCkgPT4gIXZhbHVlcy5pbmNsdWRlcyhvcHQpKSwge1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgLi4ubmV3RGVmLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5ab2RFbnVtLmNyZWF0ZSA9IGNyZWF0ZVpvZEVudW07XG5leHBvcnQgY2xhc3MgWm9kTmF0aXZlRW51bSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBuYXRpdmVFbnVtVmFsdWVzID0gdXRpbC5nZXRWYWxpZEVudW1WYWx1ZXModGhpcy5fZGVmLnZhbHVlcyk7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnN0cmluZyAmJiBjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5udW1iZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdXRpbC5vYmplY3RWYWx1ZXMobmF0aXZlRW51bVZhbHVlcyk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogdXRpbC5qb2luVmFsdWVzKGV4cGVjdGVkVmFsdWVzKSxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZSkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGUgPSBuZXcgU2V0KHV0aWwuZ2V0VmFsaWRFbnVtVmFsdWVzKHRoaXMuX2RlZi52YWx1ZXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2NhY2hlLmhhcyhpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB1dGlsLm9iamVjdFZhbHVlcyhuYXRpdmVFbnVtVmFsdWVzKTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGV4cGVjdGVkVmFsdWVzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxuICAgIGdldCBlbnVtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlcztcbiAgICB9XG59XG5ab2ROYXRpdmVFbnVtLmNyZWF0ZSA9ICh2YWx1ZXMsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTmF0aXZlRW51bSh7XG4gICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hdGl2ZUVudW0sXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kUHJvbWlzZSBleHRlbmRzIFpvZFR5cGUge1xuICAgIHVud3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi50eXBlO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5wcm9taXNlICYmIGN0eC5jb21tb24uYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnByb21pc2UsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm9taXNpZmllZCA9IGN0eC5wYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlLnByb21pc2UgPyBjdHguZGF0YSA6IFByb21pc2UucmVzb2x2ZShjdHguZGF0YSk7XG4gICAgICAgIHJldHVybiBPSyhwcm9taXNpZmllZC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGUucGFyc2VBc3luYyhkYXRhLCB7XG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgZXJyb3JNYXA6IGN0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG5ab2RQcm9taXNlLmNyZWF0ZSA9IChzY2hlbWEsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kUHJvbWlzZSh7XG4gICAgICAgIHR5cGU6IHNjaGVtYSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RQcm9taXNlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEVmZmVjdHMgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBpbm5lclR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hO1xuICAgIH1cbiAgICBzb3VyY2VUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnNjaGVtYS5fZGVmLnR5cGVOYW1lID09PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0c1xuICAgICAgICAgICAgPyB0aGlzLl9kZWYuc2NoZW1hLnNvdXJjZVR5cGUoKVxuICAgICAgICAgICAgOiB0aGlzLl9kZWYuc2NoZW1hO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgY29uc3QgZWZmZWN0ID0gdGhpcy5fZGVmLmVmZmVjdCB8fCBudWxsO1xuICAgICAgICBjb25zdCBjaGVja0N0eCA9IHtcbiAgICAgICAgICAgIGFkZElzc3VlOiAoYXJnKSA9PiB7XG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCBhcmcpO1xuICAgICAgICAgICAgICAgIGlmIChhcmcuZmF0YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IHBhdGgoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eC5wYXRoO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY2hlY2tDdHguYWRkSXNzdWUgPSBjaGVja0N0eC5hZGRJc3N1ZS5iaW5kKGNoZWNrQ3R4KTtcbiAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBcInByZXByb2Nlc3NcIikge1xuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc2VkID0gZWZmZWN0LnRyYW5zZm9ybShjdHguZGF0YSwgY2hlY2tDdHgpO1xuICAgICAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHByb2Nlc3NlZCkudGhlbihhc3luYyAocHJvY2Vzc2VkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMudmFsdWUgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcHJvY2Vzc2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERJUlRZKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMudmFsdWUgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBESVJUWShyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHByb2Nlc3NlZCxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERJUlRZKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRElSVFkocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlZmZlY3QudHlwZSA9PT0gXCJyZWZpbmVtZW50XCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4ZWN1dGVSZWZpbmVtZW50ID0gKGFjYykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGVmZmVjdC5yZWZpbmVtZW50KGFjYywgY2hlY2tDdHgpO1xuICAgICAgICAgICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXN5bmMgcmVmaW5lbWVudCBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5uZXIgPSB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkXG4gICAgICAgICAgICAgICAgZXhlY3V0ZVJlZmluZW1lbnQoaW5uZXIudmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZUFzeW5jKHsgZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KS50aGVuKChpbm5lcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGVSZWZpbmVtZW50KGlubmVyLnZhbHVlKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWUgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlID0gdGhpcy5fZGVmLnNjaGVtYS5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQoYmFzZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGVmZmVjdC50cmFuc2Zvcm0oYmFzZS52YWx1ZSwgY2hlY2tDdHgpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQXN5bmNocm9ub3VzIHRyYW5zZm9ybSBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiByZXN1bHQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZUFzeW5jKHsgZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KS50aGVuKChiYXNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZChiYXNlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGVmZmVjdC50cmFuc2Zvcm0oYmFzZS52YWx1ZSwgY2hlY2tDdHgpKS50aGVuKChyZXN1bHQpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHN0YXR1cy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGVmZmVjdCk7XG4gICAgfVxufVxuWm9kRWZmZWN0cy5jcmVhdGUgPSAoc2NoZW1hLCBlZmZlY3QsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzLFxuICAgICAgICBlZmZlY3QsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5ab2RFZmZlY3RzLmNyZWF0ZVdpdGhQcmVwcm9jZXNzID0gKHByZXByb2Nlc3MsIHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBlZmZlY3Q6IHsgdHlwZTogXCJwcmVwcm9jZXNzXCIsIHRyYW5zZm9ybTogcHJlcHJvY2VzcyB9LFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHMsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgeyBab2RFZmZlY3RzIGFzIFpvZFRyYW5zZm9ybWVyIH07XG5leHBvcnQgY2xhc3MgWm9kT3B0aW9uYWwgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBPSyh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gICAgfVxuICAgIHVud3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gICAgfVxufVxuWm9kT3B0aW9uYWwuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT3B0aW9uYWwoe1xuICAgICAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT3B0aW9uYWwsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kTnVsbGFibGUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5udWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gT0sobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKGlucHV0KTtcbiAgICB9XG4gICAgdW53cmFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZTtcbiAgICB9XG59XG5ab2ROdWxsYWJsZS5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROdWxsYWJsZSh7XG4gICAgICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdWxsYWJsZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2REZWZhdWx0IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBsZXQgZGF0YSA9IGN0eC5kYXRhO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgPT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkYXRhID0gdGhpcy5fZGVmLmRlZmF1bHRWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZSh7XG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbW92ZURlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZERlZmF1bHQuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kRGVmYXVsdCh7XG4gICAgICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REZWZhdWx0LFxuICAgICAgICBkZWZhdWx0VmFsdWU6IHR5cGVvZiBwYXJhbXMuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiID8gcGFyYW1zLmRlZmF1bHQgOiAoKSA9PiBwYXJhbXMuZGVmYXVsdCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RDYXRjaCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgLy8gbmV3Q3R4IGlzIHVzZWQgdG8gbm90IGNvbGxlY3QgaXNzdWVzIGZyb20gaW5uZXIgdHlwZXMgaW4gY3R4XG4gICAgICAgIGNvbnN0IG5ld0N0eCA9IHtcbiAgICAgICAgICAgIC4uLmN0eCxcbiAgICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgICAgIC4uLmN0eC5jb21tb24sXG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKHtcbiAgICAgICAgICAgIGRhdGE6IG5ld0N0eC5kYXRhLFxuICAgICAgICAgICAgcGF0aDogbmV3Q3R4LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IHtcbiAgICAgICAgICAgICAgICAuLi5uZXdDdHgsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGlzQXN5bmMocmVzdWx0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IFwidmFsaWRcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdC5zdGF0dXMgPT09IFwidmFsaWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZXN1bHQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5fZGVmLmNhdGNoVmFsdWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBlcnJvcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RFcnJvcihuZXdDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogbmV3Q3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogXCJ2YWxpZFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQuc3RhdHVzID09PSBcInZhbGlkXCJcbiAgICAgICAgICAgICAgICAgICAgPyByZXN1bHQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9kZWYuY2F0Y2hWYWx1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQgZXJyb3IoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RFcnJvcihuZXdDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IG5ld0N0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlQ2F0Y2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZENhdGNoLmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZENhdGNoKHtcbiAgICAgICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZENhdGNoLFxuICAgICAgICBjYXRjaFZhbHVlOiB0eXBlb2YgcGFyYW1zLmNhdGNoID09PSBcImZ1bmN0aW9uXCIgPyBwYXJhbXMuY2F0Y2ggOiAoKSA9PiBwYXJhbXMuY2F0Y2gsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kTmFOIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubmFuKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm5hbixcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogaW5wdXQuZGF0YSB9O1xuICAgIH1cbn1cblpvZE5hTi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROYU4oe1xuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hTixcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjb25zdCBCUkFORCA9IFN5bWJvbChcInpvZF9icmFuZFwiKTtcbmV4cG9ydCBjbGFzcyBab2RCcmFuZGVkIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBkYXRhID0gY3R4LmRhdGE7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZS5fcGFyc2Uoe1xuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1bndyYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgWm9kUGlwZWxpbmUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZUFzeW5jID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluUmVzdWx0ID0gYXdhaXQgdGhpcy5fZGVmLmluLl9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRElSVFkoaW5SZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vdXQuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogaW5SZXN1bHQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUFzeW5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpblJlc3VsdCA9IHRoaXMuX2RlZi5pbi5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IFwiZGlydHlcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGluUmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmLm91dC5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogaW5SZXN1bHQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RQaXBlbGluZSh7XG4gICAgICAgICAgICBpbjogYSxcbiAgICAgICAgICAgIG91dDogYixcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUGlwZWxpbmUsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBab2RSZWFkb25seSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gICAgICAgIGNvbnN0IGZyZWV6ZSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZChkYXRhKSkge1xuICAgICAgICAgICAgICAgIGRhdGEudmFsdWUgPSBPYmplY3QuZnJlZXplKGRhdGEudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpc0FzeW5jKHJlc3VsdCkgPyByZXN1bHQudGhlbigoZGF0YSkgPT4gZnJlZXplKGRhdGEpKSA6IGZyZWV6ZShyZXN1bHQpO1xuICAgIH1cbiAgICB1bndyYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZFJlYWRvbmx5LmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFJlYWRvbmx5KHtcbiAgICAgICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFJlYWRvbmx5LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgIHouY3VzdG9tICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZnVuY3Rpb24gY2xlYW5QYXJhbXMocGFyYW1zLCBkYXRhKSB7XG4gICAgY29uc3QgcCA9IHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcyhkYXRhKSA6IHR5cGVvZiBwYXJhbXMgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2U6IHBhcmFtcyB9IDogcGFyYW1zO1xuICAgIGNvbnN0IHAyID0gdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2U6IHAgfSA6IHA7XG4gICAgcmV0dXJuIHAyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbShjaGVjaywgX3BhcmFtcyA9IHt9LCBcbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiBQYXNzIGBmYXRhbGAgaW50byB0aGUgcGFyYW1zIG9iamVjdCBpbnN0ZWFkOlxuICpcbiAqIGBgYHRzXG4gKiB6LnN0cmluZygpLmN1c3RvbSgodmFsKSA9PiB2YWwubGVuZ3RoID4gNSwgeyBmYXRhbDogZmFsc2UgfSlcbiAqIGBgYFxuICpcbiAqL1xuZmF0YWwpIHtcbiAgICBpZiAoY2hlY2spXG4gICAgICAgIHJldHVybiBab2RBbnkuY3JlYXRlKCkuc3VwZXJSZWZpbmUoKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgciA9IGNoZWNrKGRhdGEpO1xuICAgICAgICAgICAgaWYgKHIgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIudGhlbigocikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IGNsZWFuUGFyYW1zKF9wYXJhbXMsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgX2ZhdGFsID0gcGFyYW1zLmZhdGFsID8/IGZhdGFsID8/IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYWRkSXNzdWUoeyBjb2RlOiBcImN1c3RvbVwiLCAuLi5wYXJhbXMsIGZhdGFsOiBfZmF0YWwgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IGNsZWFuUGFyYW1zKF9wYXJhbXMsIGRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IF9mYXRhbCA9IHBhcmFtcy5mYXRhbCA/PyBmYXRhbCA/PyB0cnVlO1xuICAgICAgICAgICAgICAgIGN0eC5hZGRJc3N1ZSh7IGNvZGU6IFwiY3VzdG9tXCIsIC4uLnBhcmFtcywgZmF0YWw6IF9mYXRhbCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIFpvZEFueS5jcmVhdGUoKTtcbn1cbmV4cG9ydCB7IFpvZFR5cGUgYXMgU2NoZW1hLCBab2RUeXBlIGFzIFpvZFNjaGVtYSB9O1xuZXhwb3J0IGNvbnN0IGxhdGUgPSB7XG4gICAgb2JqZWN0OiBab2RPYmplY3QubGF6eWNyZWF0ZSxcbn07XG5leHBvcnQgdmFyIFpvZEZpcnN0UGFydHlUeXBlS2luZDtcbihmdW5jdGlvbiAoWm9kRmlyc3RQYXJ0eVR5cGVLaW5kKSB7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kU3RyaW5nXCJdID0gXCJab2RTdHJpbmdcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROdW1iZXJcIl0gPSBcIlpvZE51bWJlclwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE5hTlwiXSA9IFwiWm9kTmFOXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kQmlnSW50XCJdID0gXCJab2RCaWdJbnRcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RCb29sZWFuXCJdID0gXCJab2RCb29sZWFuXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRGF0ZVwiXSA9IFwiWm9kRGF0ZVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFN5bWJvbFwiXSA9IFwiWm9kU3ltYm9sXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVW5kZWZpbmVkXCJdID0gXCJab2RVbmRlZmluZWRcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROdWxsXCJdID0gXCJab2ROdWxsXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kQW55XCJdID0gXCJab2RBbnlcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RVbmtub3duXCJdID0gXCJab2RVbmtub3duXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTmV2ZXJcIl0gPSBcIlpvZE5ldmVyXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVm9pZFwiXSA9IFwiWm9kVm9pZFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEFycmF5XCJdID0gXCJab2RBcnJheVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE9iamVjdFwiXSA9IFwiWm9kT2JqZWN0XCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVW5pb25cIl0gPSBcIlpvZFVuaW9uXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRGlzY3JpbWluYXRlZFVuaW9uXCJdID0gXCJab2REaXNjcmltaW5hdGVkVW5pb25cIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RJbnRlcnNlY3Rpb25cIl0gPSBcIlpvZEludGVyc2VjdGlvblwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFR1cGxlXCJdID0gXCJab2RUdXBsZVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFJlY29yZFwiXSA9IFwiWm9kUmVjb3JkXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTWFwXCJdID0gXCJab2RNYXBcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RTZXRcIl0gPSBcIlpvZFNldFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEZ1bmN0aW9uXCJdID0gXCJab2RGdW5jdGlvblwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZExhenlcIl0gPSBcIlpvZExhenlcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RMaXRlcmFsXCJdID0gXCJab2RMaXRlcmFsXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRW51bVwiXSA9IFwiWm9kRW51bVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEVmZmVjdHNcIl0gPSBcIlpvZEVmZmVjdHNcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROYXRpdmVFbnVtXCJdID0gXCJab2ROYXRpdmVFbnVtXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kT3B0aW9uYWxcIl0gPSBcIlpvZE9wdGlvbmFsXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTnVsbGFibGVcIl0gPSBcIlpvZE51bGxhYmxlXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRGVmYXVsdFwiXSA9IFwiWm9kRGVmYXVsdFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZENhdGNoXCJdID0gXCJab2RDYXRjaFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFByb21pc2VcIl0gPSBcIlpvZFByb21pc2VcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RCcmFuZGVkXCJdID0gXCJab2RCcmFuZGVkXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kUGlwZWxpbmVcIl0gPSBcIlpvZFBpcGVsaW5lXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kUmVhZG9ubHlcIl0gPSBcIlpvZFJlYWRvbmx5XCI7XG59KShab2RGaXJzdFBhcnR5VHlwZUtpbmQgfHwgKFpvZEZpcnN0UGFydHlUeXBlS2luZCA9IHt9KSk7XG4vLyByZXF1aXJlcyBUUyA0LjQrXG5jbGFzcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoLi4uXykgeyB9XG59XG5jb25zdCBpbnN0YW5jZU9mVHlwZSA9IChcbi8vIGNvbnN0IGluc3RhbmNlT2ZUeXBlID0gPFQgZXh0ZW5kcyBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KFxuY2xzLCBwYXJhbXMgPSB7XG4gICAgbWVzc2FnZTogYElucHV0IG5vdCBpbnN0YW5jZSBvZiAke2Nscy5uYW1lfWAsXG59KSA9PiBjdXN0b20oKGRhdGEpID0+IGRhdGEgaW5zdGFuY2VvZiBjbHMsIHBhcmFtcyk7XG5jb25zdCBzdHJpbmdUeXBlID0gWm9kU3RyaW5nLmNyZWF0ZTtcbmNvbnN0IG51bWJlclR5cGUgPSBab2ROdW1iZXIuY3JlYXRlO1xuY29uc3QgbmFuVHlwZSA9IFpvZE5hTi5jcmVhdGU7XG5jb25zdCBiaWdJbnRUeXBlID0gWm9kQmlnSW50LmNyZWF0ZTtcbmNvbnN0IGJvb2xlYW5UeXBlID0gWm9kQm9vbGVhbi5jcmVhdGU7XG5jb25zdCBkYXRlVHlwZSA9IFpvZERhdGUuY3JlYXRlO1xuY29uc3Qgc3ltYm9sVHlwZSA9IFpvZFN5bWJvbC5jcmVhdGU7XG5jb25zdCB1bmRlZmluZWRUeXBlID0gWm9kVW5kZWZpbmVkLmNyZWF0ZTtcbmNvbnN0IG51bGxUeXBlID0gWm9kTnVsbC5jcmVhdGU7XG5jb25zdCBhbnlUeXBlID0gWm9kQW55LmNyZWF0ZTtcbmNvbnN0IHVua25vd25UeXBlID0gWm9kVW5rbm93bi5jcmVhdGU7XG5jb25zdCBuZXZlclR5cGUgPSBab2ROZXZlci5jcmVhdGU7XG5jb25zdCB2b2lkVHlwZSA9IFpvZFZvaWQuY3JlYXRlO1xuY29uc3QgYXJyYXlUeXBlID0gWm9kQXJyYXkuY3JlYXRlO1xuY29uc3Qgb2JqZWN0VHlwZSA9IFpvZE9iamVjdC5jcmVhdGU7XG5jb25zdCBzdHJpY3RPYmplY3RUeXBlID0gWm9kT2JqZWN0LnN0cmljdENyZWF0ZTtcbmNvbnN0IHVuaW9uVHlwZSA9IFpvZFVuaW9uLmNyZWF0ZTtcbmNvbnN0IGRpc2NyaW1pbmF0ZWRVbmlvblR5cGUgPSBab2REaXNjcmltaW5hdGVkVW5pb24uY3JlYXRlO1xuY29uc3QgaW50ZXJzZWN0aW9uVHlwZSA9IFpvZEludGVyc2VjdGlvbi5jcmVhdGU7XG5jb25zdCB0dXBsZVR5cGUgPSBab2RUdXBsZS5jcmVhdGU7XG5jb25zdCByZWNvcmRUeXBlID0gWm9kUmVjb3JkLmNyZWF0ZTtcbmNvbnN0IG1hcFR5cGUgPSBab2RNYXAuY3JlYXRlO1xuY29uc3Qgc2V0VHlwZSA9IFpvZFNldC5jcmVhdGU7XG5jb25zdCBmdW5jdGlvblR5cGUgPSBab2RGdW5jdGlvbi5jcmVhdGU7XG5jb25zdCBsYXp5VHlwZSA9IFpvZExhenkuY3JlYXRlO1xuY29uc3QgbGl0ZXJhbFR5cGUgPSBab2RMaXRlcmFsLmNyZWF0ZTtcbmNvbnN0IGVudW1UeXBlID0gWm9kRW51bS5jcmVhdGU7XG5jb25zdCBuYXRpdmVFbnVtVHlwZSA9IFpvZE5hdGl2ZUVudW0uY3JlYXRlO1xuY29uc3QgcHJvbWlzZVR5cGUgPSBab2RQcm9taXNlLmNyZWF0ZTtcbmNvbnN0IGVmZmVjdHNUeXBlID0gWm9kRWZmZWN0cy5jcmVhdGU7XG5jb25zdCBvcHRpb25hbFR5cGUgPSBab2RPcHRpb25hbC5jcmVhdGU7XG5jb25zdCBudWxsYWJsZVR5cGUgPSBab2ROdWxsYWJsZS5jcmVhdGU7XG5jb25zdCBwcmVwcm9jZXNzVHlwZSA9IFpvZEVmZmVjdHMuY3JlYXRlV2l0aFByZXByb2Nlc3M7XG5jb25zdCBwaXBlbGluZVR5cGUgPSBab2RQaXBlbGluZS5jcmVhdGU7XG5jb25zdCBvc3RyaW5nID0gKCkgPT4gc3RyaW5nVHlwZSgpLm9wdGlvbmFsKCk7XG5jb25zdCBvbnVtYmVyID0gKCkgPT4gbnVtYmVyVHlwZSgpLm9wdGlvbmFsKCk7XG5jb25zdCBvYm9vbGVhbiA9ICgpID0+IGJvb2xlYW5UeXBlKCkub3B0aW9uYWwoKTtcbmV4cG9ydCBjb25zdCBjb2VyY2UgPSB7XG4gICAgc3RyaW5nOiAoKGFyZykgPT4gWm9kU3RyaW5nLmNyZWF0ZSh7IC4uLmFyZywgY29lcmNlOiB0cnVlIH0pKSxcbiAgICBudW1iZXI6ICgoYXJnKSA9PiBab2ROdW1iZXIuY3JlYXRlKHsgLi4uYXJnLCBjb2VyY2U6IHRydWUgfSkpLFxuICAgIGJvb2xlYW46ICgoYXJnKSA9PiBab2RCb29sZWFuLmNyZWF0ZSh7XG4gICAgICAgIC4uLmFyZyxcbiAgICAgICAgY29lcmNlOiB0cnVlLFxuICAgIH0pKSxcbiAgICBiaWdpbnQ6ICgoYXJnKSA9PiBab2RCaWdJbnQuY3JlYXRlKHsgLi4uYXJnLCBjb2VyY2U6IHRydWUgfSkpLFxuICAgIGRhdGU6ICgoYXJnKSA9PiBab2REYXRlLmNyZWF0ZSh7IC4uLmFyZywgY29lcmNlOiB0cnVlIH0pKSxcbn07XG5leHBvcnQgeyBhbnlUeXBlIGFzIGFueSwgYXJyYXlUeXBlIGFzIGFycmF5LCBiaWdJbnRUeXBlIGFzIGJpZ2ludCwgYm9vbGVhblR5cGUgYXMgYm9vbGVhbiwgZGF0ZVR5cGUgYXMgZGF0ZSwgZGlzY3JpbWluYXRlZFVuaW9uVHlwZSBhcyBkaXNjcmltaW5hdGVkVW5pb24sIGVmZmVjdHNUeXBlIGFzIGVmZmVjdCwgZW51bVR5cGUgYXMgZW51bSwgZnVuY3Rpb25UeXBlIGFzIGZ1bmN0aW9uLCBpbnN0YW5jZU9mVHlwZSBhcyBpbnN0YW5jZW9mLCBpbnRlcnNlY3Rpb25UeXBlIGFzIGludGVyc2VjdGlvbiwgbGF6eVR5cGUgYXMgbGF6eSwgbGl0ZXJhbFR5cGUgYXMgbGl0ZXJhbCwgbWFwVHlwZSBhcyBtYXAsIG5hblR5cGUgYXMgbmFuLCBuYXRpdmVFbnVtVHlwZSBhcyBuYXRpdmVFbnVtLCBuZXZlclR5cGUgYXMgbmV2ZXIsIG51bGxUeXBlIGFzIG51bGwsIG51bGxhYmxlVHlwZSBhcyBudWxsYWJsZSwgbnVtYmVyVHlwZSBhcyBudW1iZXIsIG9iamVjdFR5cGUgYXMgb2JqZWN0LCBvYm9vbGVhbiwgb251bWJlciwgb3B0aW9uYWxUeXBlIGFzIG9wdGlvbmFsLCBvc3RyaW5nLCBwaXBlbGluZVR5cGUgYXMgcGlwZWxpbmUsIHByZXByb2Nlc3NUeXBlIGFzIHByZXByb2Nlc3MsIHByb21pc2VUeXBlIGFzIHByb21pc2UsIHJlY29yZFR5cGUgYXMgcmVjb3JkLCBzZXRUeXBlIGFzIHNldCwgc3RyaWN0T2JqZWN0VHlwZSBhcyBzdHJpY3RPYmplY3QsIHN0cmluZ1R5cGUgYXMgc3RyaW5nLCBzeW1ib2xUeXBlIGFzIHN5bWJvbCwgZWZmZWN0c1R5cGUgYXMgdHJhbnNmb3JtZXIsIHR1cGxlVHlwZSBhcyB0dXBsZSwgdW5kZWZpbmVkVHlwZSBhcyB1bmRlZmluZWQsIHVuaW9uVHlwZSBhcyB1bmlvbiwgdW5rbm93blR5cGUgYXMgdW5rbm93biwgdm9pZFR5cGUgYXMgdm9pZCwgfTtcbmV4cG9ydCBjb25zdCBORVZFUiA9IElOVkFMSUQ7XG4iLCJpbXBvcnQgeyB0b29sIH0gZnJvbSBcIi4vdG9vbC5tanNcIjtcbmltcG9ydCB7IFVzZXJFcnJvciB9IGZyb20gXCIuL2Vycm9ycy5tanNcIjtcbmltcG9ydCB7IE1DUFNlcnZlclN0ZGlvIGFzIFVuZGVybHlpbmdNQ1BTZXJ2ZXJTdGRpbywgTUNQU2VydmVyU3RyZWFtYWJsZUh0dHAgYXMgVW5kZXJseWluZ01DUFNlcnZlclN0cmVhbWFibGVIdHRwLCBNQ1BTZXJ2ZXJTU0UgYXMgVW5kZXJseWluZ01DUFNlcnZlclNTRSwgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL19zaGltcyc7XG5pbXBvcnQgeyBnZXRDdXJyZW50U3Bhbiwgd2l0aE1DUExpc3RUb29sc1NwYW4gfSBmcm9tIFwiLi90cmFjaW5nL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbG9nZ2VyIGFzIGdsb2JhbExvZ2dlciwgZ2V0TG9nZ2VyIH0gZnJvbSBcIi4vbG9nZ2VyLm1qc1wiO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IHogfSBmcm9tICdAb3BlbmFpL3pvZC92Myc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9TVERJT19NQ1BfQ0xJRU5UX0xPR0dFUl9OQU1FID0gJ29wZW5haS1hZ2VudHM6c3RkaW8tbWNwLWNsaWVudCc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9TVFJFQU1BQkxFX0hUVFBfTUNQX0NMSUVOVF9MT0dHRVJfTkFNRSA9ICdvcGVuYWktYWdlbnRzOnN0cmVhbWFibGUtaHR0cC1tY3AtY2xpZW50JztcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NTRV9NQ1BfQ0xJRU5UX0xPR0dFUl9OQU1FID0gJ29wZW5haS1hZ2VudHM6c3NlLW1jcC1jbGllbnQnO1xuZXhwb3J0IGNsYXNzIEJhc2VNQ1BTZXJ2ZXJTdGRpbyB7XG4gICAgY2FjaGVUb29sc0xpc3Q7XG4gICAgX2NhY2hlZFRvb2xzID0gdW5kZWZpbmVkO1xuICAgIHRvb2xGaWx0ZXI7XG4gICAgbG9nZ2VyO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIgPVxuICAgICAgICAgICAgb3B0aW9ucy5sb2dnZXIgPz8gZ2V0TG9nZ2VyKERFRkFVTFRfU1RESU9fTUNQX0NMSUVOVF9MT0dHRVJfTkFNRSk7XG4gICAgICAgIHRoaXMuY2FjaGVUb29sc0xpc3QgPSBvcHRpb25zLmNhY2hlVG9vbHNMaXN0ID8/IGZhbHNlO1xuICAgICAgICB0aGlzLnRvb2xGaWx0ZXIgPSBvcHRpb25zLnRvb2xGaWx0ZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvZ3MgYSBkZWJ1ZyBtZXNzYWdlIHdoZW4gZGVidWcgbG9nZ2luZyBpcyBlbmFibGVkLlxuICAgICAqIEBwYXJhbSBidWlsZE1lc3NhZ2UgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG1lc3NhZ2UgdG8gbG9nLlxuICAgICAqL1xuICAgIGRlYnVnTG9nKGJ1aWxkTWVzc2FnZSkge1xuICAgICAgICBpZiAoZGVidWcuZW5hYmxlZCh0aGlzLmxvZ2dlci5uYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHdoZW4gdGhpcyBpcyB0cnVlLCB0aGUgZnVuY3Rpb24gdG8gYnVpbGQgdGhlIHN0cmluZyBpcyBjYWxsZWRcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGJ1aWxkTWVzc2FnZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBCYXNlTUNQU2VydmVyU3RyZWFtYWJsZUh0dHAge1xuICAgIGNhY2hlVG9vbHNMaXN0O1xuICAgIF9jYWNoZWRUb29scyA9IHVuZGVmaW5lZDtcbiAgICB0b29sRmlsdGVyO1xuICAgIGxvZ2dlcjtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyID1cbiAgICAgICAgICAgIG9wdGlvbnMubG9nZ2VyID8/XG4gICAgICAgICAgICAgICAgZ2V0TG9nZ2VyKERFRkFVTFRfU1RSRUFNQUJMRV9IVFRQX01DUF9DTElFTlRfTE9HR0VSX05BTUUpO1xuICAgICAgICB0aGlzLmNhY2hlVG9vbHNMaXN0ID0gb3B0aW9ucy5jYWNoZVRvb2xzTGlzdCA/PyBmYWxzZTtcbiAgICAgICAgdGhpcy50b29sRmlsdGVyID0gb3B0aW9ucy50b29sRmlsdGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2dzIGEgZGVidWcgbWVzc2FnZSB3aGVuIGRlYnVnIGxvZ2dpbmcgaXMgZW5hYmxlZC5cbiAgICAgKiBAcGFyYW0gYnVpbGRNZXNzYWdlIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBtZXNzYWdlIHRvIGxvZy5cbiAgICAgKi9cbiAgICBkZWJ1Z0xvZyhidWlsZE1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKGRlYnVnLmVuYWJsZWQodGhpcy5sb2dnZXIubmFtZXNwYWNlKSkge1xuICAgICAgICAgICAgLy8gb25seSB3aGVuIHRoaXMgaXMgdHJ1ZSwgdGhlIGZ1bmN0aW9uIHRvIGJ1aWxkIHRoZSBzdHJpbmcgaXMgY2FsbGVkXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhidWlsZE1lc3NhZ2UoKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQmFzZU1DUFNlcnZlclNTRSB7XG4gICAgY2FjaGVUb29sc0xpc3Q7XG4gICAgX2NhY2hlZFRvb2xzID0gdW5kZWZpbmVkO1xuICAgIHRvb2xGaWx0ZXI7XG4gICAgbG9nZ2VyO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIgPVxuICAgICAgICAgICAgb3B0aW9ucy5sb2dnZXIgPz8gZ2V0TG9nZ2VyKERFRkFVTFRfU1NFX01DUF9DTElFTlRfTE9HR0VSX05BTUUpO1xuICAgICAgICB0aGlzLmNhY2hlVG9vbHNMaXN0ID0gb3B0aW9ucy5jYWNoZVRvb2xzTGlzdCA/PyBmYWxzZTtcbiAgICAgICAgdGhpcy50b29sRmlsdGVyID0gb3B0aW9ucy50b29sRmlsdGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2dzIGEgZGVidWcgbWVzc2FnZSB3aGVuIGRlYnVnIGxvZ2dpbmcgaXMgZW5hYmxlZC5cbiAgICAgKiBAcGFyYW0gYnVpbGRNZXNzYWdlIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBtZXNzYWdlIHRvIGxvZy5cbiAgICAgKi9cbiAgICBkZWJ1Z0xvZyhidWlsZE1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKGRlYnVnLmVuYWJsZWQodGhpcy5sb2dnZXIubmFtZXNwYWNlKSkge1xuICAgICAgICAgICAgLy8gb25seSB3aGVuIHRoaXMgaXMgdHJ1ZSwgdGhlIGZ1bmN0aW9uIHRvIGJ1aWxkIHRoZSBzdHJpbmcgaXMgY2FsbGVkXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhidWlsZE1lc3NhZ2UoKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIE1pbmltdW0gTUNQIHRvb2wgZGF0YSBkZWZpbml0aW9uLlxuICogVGhpcyB0eXBlIGRlZmluaXRpb24gZG9lcyBub3QgaW50ZW5kIHRvIGNvdmVyIGFsbCBwb3NzaWJsZSBwcm9wZXJ0aWVzLlxuICogSXQgc3VwcG9ydHMgdGhlIHByb3BlcnRpZXMgdGhhdCBhcmUgdXNlZCBpbiB0aGlzIFNESy5cbiAqL1xuZXhwb3J0IGNvbnN0IE1DUFRvb2wgPSB6Lm9iamVjdCh7XG4gICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGlucHV0U2NoZW1hOiB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnb2JqZWN0JyksXG4gICAgICAgIHByb3BlcnRpZXM6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLFxuICAgICAgICByZXF1aXJlZDogei5hcnJheSh6LnN0cmluZygpKSxcbiAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IHouYm9vbGVhbigpLFxuICAgIH0pLFxufSk7XG4vKipcbiAqIFB1YmxpYyBpbnRlcmZhY2Ugb2YgYW4gTUNQIHNlcnZlciB0aGF0IHByb3ZpZGVzIHRvb2xzLlxuICogWW91IGNhbiB1c2UgdGhpcyBjbGFzcyB0byBwYXNzIE1DUCBzZXJ2ZXIgc2V0dGluZ3MgdG8geW91ciBhZ2VudC5cbiAqL1xuZXhwb3J0IGNsYXNzIE1DUFNlcnZlclN0ZGlvIGV4dGVuZHMgQmFzZU1DUFNlcnZlclN0ZGlvIHtcbiAgICB1bmRlcmx5aW5nO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMudW5kZXJseWluZyA9IG5ldyBVbmRlcmx5aW5nTUNQU2VydmVyU3RkaW8ob3B0aW9ucyk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLm5hbWU7XG4gICAgfVxuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcuY29ubmVjdCgpO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5jbG9zZSgpO1xuICAgIH1cbiAgICBhc3luYyBsaXN0VG9vbHMoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlVG9vbHNMaXN0ICYmIHRoaXMuX2NhY2hlZFRvb2xzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkVG9vbHM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9vbHMgPSBhd2FpdCB0aGlzLnVuZGVybHlpbmcubGlzdFRvb2xzKCk7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlVG9vbHNMaXN0KSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRUb29scyA9IHRvb2xzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b29scztcbiAgICB9XG4gICAgY2FsbFRvb2wodG9vbE5hbWUsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5jYWxsVG9vbCh0b29sTmFtZSwgYXJncyk7XG4gICAgfVxuICAgIGludmFsaWRhdGVUb29sc0NhY2hlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLmludmFsaWRhdGVUb29sc0NhY2hlKCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1DUFNlcnZlclN0cmVhbWFibGVIdHRwIGV4dGVuZHMgQmFzZU1DUFNlcnZlclN0cmVhbWFibGVIdHRwIHtcbiAgICB1bmRlcmx5aW5nO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMudW5kZXJseWluZyA9IG5ldyBVbmRlcmx5aW5nTUNQU2VydmVyU3RyZWFtYWJsZUh0dHAob3B0aW9ucyk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLm5hbWU7XG4gICAgfVxuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcuY29ubmVjdCgpO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5jbG9zZSgpO1xuICAgIH1cbiAgICBhc3luYyBsaXN0VG9vbHMoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlVG9vbHNMaXN0ICYmIHRoaXMuX2NhY2hlZFRvb2xzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkVG9vbHM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9vbHMgPSBhd2FpdCB0aGlzLnVuZGVybHlpbmcubGlzdFRvb2xzKCk7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlVG9vbHNMaXN0KSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRUb29scyA9IHRvb2xzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b29scztcbiAgICB9XG4gICAgY2FsbFRvb2wodG9vbE5hbWUsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5jYWxsVG9vbCh0b29sTmFtZSwgYXJncyk7XG4gICAgfVxuICAgIGludmFsaWRhdGVUb29sc0NhY2hlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLmludmFsaWRhdGVUb29sc0NhY2hlKCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1DUFNlcnZlclNTRSBleHRlbmRzIEJhc2VNQ1BTZXJ2ZXJTU0Uge1xuICAgIHVuZGVybHlpbmc7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy51bmRlcmx5aW5nID0gbmV3IFVuZGVybHlpbmdNQ1BTZXJ2ZXJTU0Uob3B0aW9ucyk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLm5hbWU7XG4gICAgfVxuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcuY29ubmVjdCgpO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5jbG9zZSgpO1xuICAgIH1cbiAgICBhc3luYyBsaXN0VG9vbHMoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlVG9vbHNMaXN0ICYmIHRoaXMuX2NhY2hlZFRvb2xzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkVG9vbHM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9vbHMgPSBhd2FpdCB0aGlzLnVuZGVybHlpbmcubGlzdFRvb2xzKCk7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlVG9vbHNMaXN0KSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRUb29scyA9IHRvb2xzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b29scztcbiAgICB9XG4gICAgY2FsbFRvb2wodG9vbE5hbWUsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5jYWxsVG9vbCh0b29sTmFtZSwgYXJncyk7XG4gICAgfVxuICAgIGludmFsaWRhdGVUb29sc0NhY2hlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLmludmFsaWRhdGVUb29sc0NhY2hlKCk7XG4gICAgfVxufVxuLyoqXG4gKiBGZXRjaGVzIGFuZCBmbGF0dGVucyBhbGwgdG9vbHMgZnJvbSBtdWx0aXBsZSBNQ1Agc2VydmVycy5cbiAqIExvZ3MgYW5kIHNraXBzIGFueSBzZXJ2ZXJzIHRoYXQgZmFpbCB0byByZXNwb25kLlxuICovXG5jb25zdCBfY2FjaGVkVG9vbHMgPSB7fTtcbi8qKlxuICogUmVtb3ZlIGNhY2hlZCB0b29scyBmb3IgdGhlIGdpdmVuIHNlcnZlciBzbyB0aGUgbmV4dCBsb29rdXAgZmV0Y2hlcyBmcmVzaCBkYXRhLlxuICpcbiAqIEBwYXJhbSBzZXJ2ZXJOYW1lIC0gTmFtZSBvZiB0aGUgTUNQIHNlcnZlciB3aG9zZSBjYWNoZSBzaG91bGQgYmUgY2xlYXJlZC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGludmFsaWRhdGVTZXJ2ZXJUb29sc0NhY2hlKHNlcnZlck5hbWUpIHtcbiAgICBkZWxldGUgX2NhY2hlZFRvb2xzW3NlcnZlck5hbWVdO1xufVxuLyoqXG4gKiBGZXRjaGVzIGFsbCBmdW5jdGlvbiB0b29scyBmcm9tIGEgc2luZ2xlIE1DUCBzZXJ2ZXIuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldEZ1bmN0aW9uVG9vbHNGcm9tU2VydmVyKHsgc2VydmVyLCBjb252ZXJ0U2NoZW1hc1RvU3RyaWN0LCBydW5Db250ZXh0LCBhZ2VudCwgfSkge1xuICAgIGlmIChzZXJ2ZXIuY2FjaGVUb29sc0xpc3QgJiYgX2NhY2hlZFRvb2xzW3NlcnZlci5uYW1lXSkge1xuICAgICAgICByZXR1cm4gX2NhY2hlZFRvb2xzW3NlcnZlci5uYW1lXS5tYXAoKHQpID0+IG1jcFRvRnVuY3Rpb25Ub29sKHQsIHNlcnZlciwgY29udmVydFNjaGVtYXNUb1N0cmljdCkpO1xuICAgIH1cbiAgICByZXR1cm4gd2l0aE1DUExpc3RUb29sc1NwYW4oYXN5bmMgKHNwYW4pID0+IHtcbiAgICAgICAgY29uc3QgZmV0Y2hlZE1jcFRvb2xzID0gYXdhaXQgc2VydmVyLmxpc3RUb29scygpO1xuICAgICAgICBsZXQgbWNwVG9vbHMgPSBmZXRjaGVkTWNwVG9vbHM7XG4gICAgICAgIGlmIChydW5Db250ZXh0ICYmIGFnZW50KSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0geyBydW5Db250ZXh0LCBhZ2VudCwgc2VydmVyTmFtZTogc2VydmVyLm5hbWUgfTtcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkVG9vbHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9vbCBvZiBmZXRjaGVkTWNwVG9vbHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXIgPSBzZXJ2ZXIudG9vbEZpbHRlcjtcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IGF3YWl0IGZpbHRlcihjb250ZXh0LCB0b29sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlsdGVyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxMb2dnZXIuZGVidWcoYE1DUCBUb29sIChzZXJ2ZXI6ICR7c2VydmVyLm5hbWV9LCB0b29sOiAke3Rvb2wubmFtZX0pIGlzIGJsb2NrZWQgYnkgdGhlIGNhbGxhYmxlIGZpbHRlci5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbG93ZWRUb29sTmFtZXMgPSBmaWx0ZXIuYWxsb3dlZFRvb2xOYW1lcyA/PyBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrZWRUb29sTmFtZXMgPSBmaWx0ZXIuYmxvY2tlZFRvb2xOYW1lcyA/PyBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGxvd2VkVG9vbE5hbWVzLmxlbmd0aCA+IDAgfHwgYmxvY2tlZFRvb2xOYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxsb3dlZCA9IGFsbG93ZWRUb29sTmFtZXMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGFsbG93ZWRUb29sTmFtZXMuaW5jbHVkZXModG9vbC5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmxvY2tlZCA9IGJsb2NrZWRUb29sTmFtZXMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGJsb2NrZWRUb29sTmFtZXMuaW5jbHVkZXModG9vbC5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWxsb3dlZCB8fCBibG9ja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibG9ja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxMb2dnZXIuZGVidWcoYE1DUCBUb29sIChzZXJ2ZXI6ICR7c2VydmVyLm5hbWV9LCB0b29sOiAke3Rvb2wubmFtZX0pIGlzIGJsb2NrZWQgYnkgdGhlIHN0YXRpYyBmaWx0ZXIuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWFsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbExvZ2dlci5kZWJ1ZyhgTUNQIFRvb2wgKHNlcnZlcjogJHtzZXJ2ZXIubmFtZX0sIHRvb2w6ICR7dG9vbC5uYW1lfSkgaXMgbm90IGFsbG93ZWQgYnkgdGhlIHN0YXRpYyBmaWx0ZXIuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbHRlcmVkVG9vbHMucHVzaCh0b29sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1jcFRvb2xzID0gZmlsdGVyZWRUb29scztcbiAgICAgICAgfVxuICAgICAgICBzcGFuLnNwYW5EYXRhLnJlc3VsdCA9IG1jcFRvb2xzLm1hcCgodCkgPT4gdC5uYW1lKTtcbiAgICAgICAgY29uc3QgdG9vbHMgPSBtY3BUb29scy5tYXAoKHQpID0+IG1jcFRvRnVuY3Rpb25Ub29sKHQsIHNlcnZlciwgY29udmVydFNjaGVtYXNUb1N0cmljdCkpO1xuICAgICAgICBpZiAoc2VydmVyLmNhY2hlVG9vbHNMaXN0KSB7XG4gICAgICAgICAgICBfY2FjaGVkVG9vbHNbc2VydmVyLm5hbWVdID0gbWNwVG9vbHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvb2xzO1xuICAgIH0sIHsgZGF0YTogeyBzZXJ2ZXI6IHNlcnZlci5uYW1lIH0gfSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsTWNwVG9vbHMobWNwU2VydmVyc09yT3B0cywgcnVuQ29udGV4dCwgYWdlbnQsIGNvbnZlcnRTY2hlbWFzVG9TdHJpY3QgPSBmYWxzZSkge1xuICAgIGNvbnN0IG9wdHMgPSBBcnJheS5pc0FycmF5KG1jcFNlcnZlcnNPck9wdHMpXG4gICAgICAgID8ge1xuICAgICAgICAgICAgbWNwU2VydmVyczogbWNwU2VydmVyc09yT3B0cyxcbiAgICAgICAgICAgIHJ1bkNvbnRleHQsXG4gICAgICAgICAgICBhZ2VudCxcbiAgICAgICAgICAgIGNvbnZlcnRTY2hlbWFzVG9TdHJpY3QsXG4gICAgICAgIH1cbiAgICAgICAgOiBtY3BTZXJ2ZXJzT3JPcHRzO1xuICAgIGNvbnN0IHsgbWNwU2VydmVycywgY29udmVydFNjaGVtYXNUb1N0cmljdDogY29udmVydFNjaGVtYXNUb1N0cmljdEZyb21PcHRzID0gZmFsc2UsIHJ1bkNvbnRleHQ6IHJ1bkNvbnRleHRGcm9tT3B0cywgYWdlbnQ6IGFnZW50RnJvbU9wdHMsIH0gPSBvcHRzO1xuICAgIGNvbnN0IGFsbFRvb2xzID0gW107XG4gICAgY29uc3QgdG9vbE5hbWVzID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3Qgc2VydmVyIG9mIG1jcFNlcnZlcnMpIHtcbiAgICAgICAgY29uc3Qgc2VydmVyVG9vbHMgPSBhd2FpdCBnZXRGdW5jdGlvblRvb2xzRnJvbVNlcnZlcih7XG4gICAgICAgICAgICBzZXJ2ZXIsXG4gICAgICAgICAgICBjb252ZXJ0U2NoZW1hc1RvU3RyaWN0OiBjb252ZXJ0U2NoZW1hc1RvU3RyaWN0RnJvbU9wdHMsXG4gICAgICAgICAgICBydW5Db250ZXh0OiBydW5Db250ZXh0RnJvbU9wdHMsXG4gICAgICAgICAgICBhZ2VudDogYWdlbnRGcm9tT3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNlcnZlclRvb2xOYW1lcyA9IG5ldyBTZXQoc2VydmVyVG9vbHMubWFwKCh0KSA9PiB0Lm5hbWUpKTtcbiAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gWy4uLnNlcnZlclRvb2xOYW1lc10uZmlsdGVyKChuKSA9PiB0b29sTmFtZXMuaGFzKG4pKTtcbiAgICAgICAgaWYgKGludGVyc2VjdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBEdXBsaWNhdGUgdG9vbCBuYW1lcyBmb3VuZCBhY3Jvc3MgTUNQIHNlcnZlcnM6ICR7aW50ZXJzZWN0aW9uLmpvaW4oJywgJyl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB0IG9mIHNlcnZlclRvb2xzKSB7XG4gICAgICAgICAgICB0b29sTmFtZXMuYWRkKHQubmFtZSk7XG4gICAgICAgICAgICBhbGxUb29scy5wdXNoKHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhbGxUb29scztcbn1cbi8qKlxuICogQ29udmVydHMgYW4gTUNQIHRvb2wgZGVmaW5pdGlvbiB0byBhIGZ1bmN0aW9uIHRvb2wgZm9yIHRoZSBBZ2VudHMgU0RLLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWNwVG9GdW5jdGlvblRvb2wobWNwVG9vbCwgc2VydmVyLCBjb252ZXJ0U2NoZW1hc1RvU3RyaWN0KSB7XG4gICAgYXN5bmMgZnVuY3Rpb24gaW52b2tlKGlucHV0LCBfY29udGV4dCkge1xuICAgICAgICBsZXQgYXJncyA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyAmJiBpbnB1dCkge1xuICAgICAgICAgICAgYXJncyA9IEpTT04ucGFyc2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiYgaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgYXJncyA9IGlucHV0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTcGFuID0gZ2V0Q3VycmVudFNwYW4oKTtcbiAgICAgICAgaWYgKGN1cnJlbnRTcGFuKSB7XG4gICAgICAgICAgICBjdXJyZW50U3Bhbi5zcGFuRGF0YVsnbWNwX2RhdGEnXSA9IHsgc2VydmVyOiBzZXJ2ZXIubmFtZSB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBzZXJ2ZXIuY2FsbFRvb2wobWNwVG9vbC5uYW1lLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQubGVuZ3RoID09PSAxID8gY29udGVudFswXSA6IGNvbnRlbnQ7XG4gICAgfVxuICAgIGNvbnN0IHNjaGVtYSA9IHtcbiAgICAgICAgLi4ubWNwVG9vbC5pbnB1dFNjaGVtYSxcbiAgICAgICAgdHlwZTogbWNwVG9vbC5pbnB1dFNjaGVtYT8udHlwZSA/PyAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczogbWNwVG9vbC5pbnB1dFNjaGVtYT8ucHJvcGVydGllcyA/PyB7fSxcbiAgICAgICAgcmVxdWlyZWQ6IG1jcFRvb2wuaW5wdXRTY2hlbWE/LnJlcXVpcmVkID8/IFtdLFxuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogbWNwVG9vbC5pbnB1dFNjaGVtYT8uYWRkaXRpb25hbFByb3BlcnRpZXMgPz8gZmFsc2UsXG4gICAgfTtcbiAgICBpZiAoY29udmVydFNjaGVtYXNUb1N0cmljdCB8fCBzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMgPT09IHRydWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmljdFNjaGVtYSA9IGVuc3VyZVN0cmljdEpzb25TY2hlbWEoc2NoZW1hKTtcbiAgICAgICAgICAgIHJldHVybiB0b29sKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBtY3BUb29sLm5hbWUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG1jcFRvb2wuZGVzY3JpcHRpb24gfHwgJycsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyczogc3RyaWN0U2NoZW1hLFxuICAgICAgICAgICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBleGVjdXRlOiBpbnZva2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZ2xvYmFsTG9nZ2VyLndhcm4oYEVycm9yIGNvbnZlcnRpbmcgTUNQIHNjaGVtYSB0byBzdHJpY3QgbW9kZTogJHtlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG5vblN0cmljdFNjaGVtYSA9IHtcbiAgICAgICAgLi4uc2NoZW1hLFxuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogdHJ1ZSxcbiAgICB9O1xuICAgIHJldHVybiB0b29sKHtcbiAgICAgICAgbmFtZTogbWNwVG9vbC5uYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbjogbWNwVG9vbC5kZXNjcmlwdGlvbiB8fCAnJyxcbiAgICAgICAgcGFyYW1ldGVyczogbm9uU3RyaWN0U2NoZW1hLFxuICAgICAgICBzdHJpY3Q6IGZhbHNlLFxuICAgICAgICBleGVjdXRlOiBpbnZva2UsXG4gICAgfSk7XG59XG4vKipcbiAqIEVuc3VyZXMgdGhlIGdpdmVuIEpTT04gc2NoZW1hIGlzIHN0cmljdCAobm8gYWRkaXRpb25hbCBwcm9wZXJ0aWVzLCByZXF1aXJlZCBmaWVsZHMgc2V0KS5cbiAqL1xuZnVuY3Rpb24gZW5zdXJlU3RyaWN0SnNvblNjaGVtYShzY2hlbWEpIHtcbiAgICBjb25zdCBvdXQgPSB7XG4gICAgICAgIC4uLnNjaGVtYSxcbiAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlLFxuICAgIH07XG4gICAgaWYgKCFvdXQucmVxdWlyZWQpXG4gICAgICAgIG91dC5yZXF1aXJlZCA9IFtdO1xuICAgIHJldHVybiBvdXQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tY3AubWpzLm1hcCIsIi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG4vLyBVc2UgZnVuY3Rpb24gaW5zdGVhZCBvZiBleHBvcnRpbmcgdGhlIHZhbHVlIHRvIHByZXZlbnRcbi8vIGNpcmN1bGFyIGRlcGVuZGVuY3kgcmVzb2x1dGlvbiBpc3N1ZXMgY2F1c2VkIGJ5IG90aGVyIGV4cG9ydHMgaW4gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvX3NoaW1zJ1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWRFbnYoKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuZXhwb3J0IGNsYXNzIEJyb3dzZXJFdmVudEVtaXR0ZXIge1xuICAgICN0YXJnZXQgPSBuZXcgRXZlbnRUYXJnZXQoKTtcbiAgICBvbih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLiN0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCAoKGV2ZW50KSA9PiBsaXN0ZW5lciguLi4oZXZlbnQuZGV0YWlsID8/IFtdKSkpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIG9mZih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLiN0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCAoKGV2ZW50KSA9PiBsaXN0ZW5lciguLi4oZXZlbnQuZGV0YWlsID8/IFtdKSkpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGVtaXQodHlwZSwgLi4uYXJncykge1xuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudCh0eXBlLCB7IGRldGFpbDogYXJncyB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3RhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIHRoaXMub2ZmKHR5cGUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgbGlzdGVuZXIoLi4uYXJncyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub24odHlwZSwgaGFuZGxlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydCB7IEJyb3dzZXJFdmVudEVtaXR0ZXIgYXMgUnVudGltZUV2ZW50RW1pdHRlciB9O1xuZXhwb3J0IGNvbnN0IHJhbmRvbVVVSUQgPSBjcnlwdG8ucmFuZG9tVVVJRC5iaW5kKGNyeXB0byk7XG5leHBvcnQgY29uc3QgUmVhZGFibGUgPSBjbGFzcyBSZWFkYWJsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7IH1cbiAgICBwaXBlVG8oX2Rlc3RpbmF0aW9uLCBfb3B0aW9ucykgeyB9XG4gICAgcGlwZVRocm91Z2goX3RyYW5zZm9ybSwgX29wdGlvbnMpIHsgfVxufTtcbmV4cG9ydCBjb25zdCBSZWFkYWJsZVN0cmVhbSA9IGdsb2JhbFRoaXMuUmVhZGFibGVTdHJlYW07XG5leHBvcnQgY29uc3QgUmVhZGFibGVTdHJlYW1Db250cm9sbGVyID0gZ2xvYmFsVGhpcy5SZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyO1xuZXhwb3J0IGNvbnN0IFRyYW5zZm9ybVN0cmVhbSA9IGdsb2JhbFRoaXMuVHJhbnNmb3JtU3RyZWFtO1xuZXhwb3J0IGNsYXNzIEFzeW5jTG9jYWxTdG9yYWdlIHtcbiAgICBjb250ZXh0ID0gbnVsbDtcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuICAgIHJ1bihjb250ZXh0LCBmbikge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICB9XG4gICAgZ2V0U3RvcmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQ7XG4gICAgfVxuICAgIGVudGVyV2l0aChjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQnJvd3NlckVudmlyb25tZW50KCkge1xuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVHJhY2luZ0xvb3BSdW5uaW5nQnlEZWZhdWx0KCkge1xuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCB7IE1DUFNlcnZlclN0ZGlvLCBNQ1BTZXJ2ZXJTdHJlYW1hYmxlSHR0cCwgTUNQU2VydmVyU1NFLCB9IGZyb20gXCIuL21jcC1zZXJ2ZXIvYnJvd3Nlci5tanNcIjtcbmNsYXNzIEJyb3dzZXJUaW1lciB7XG4gICAgY29uc3RydWN0b3IoKSB7IH1cbiAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCBtcykge1xuICAgICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dChjYWxsYmFjaywgbXMpO1xuICAgICAgICB0aW1lb3V0LnJlZiA9XG4gICAgICAgICAgICB0eXBlb2YgdGltZW91dC5yZWYgPT09ICdmdW5jdGlvbicgPyB0aW1lb3V0LnJlZiA6ICgpID0+IHRpbWVvdXQ7XG4gICAgICAgIHRpbWVvdXQudW5yZWYgPVxuICAgICAgICAgICAgdHlwZW9mIHRpbWVvdXQudW5yZWYgPT09ICdmdW5jdGlvbicgPyB0aW1lb3V0LnVucmVmIDogKCkgPT4gdGltZW91dDtcbiAgICAgICAgdGltZW91dC5oYXNSZWYgPVxuICAgICAgICAgICAgdHlwZW9mIHRpbWVvdXQuaGFzUmVmID09PSAnZnVuY3Rpb24nID8gdGltZW91dC5oYXNSZWYgOiAoKSA9PiB0cnVlO1xuICAgICAgICB0aW1lb3V0LnJlZnJlc2ggPVxuICAgICAgICAgICAgdHlwZW9mIHRpbWVvdXQucmVmcmVzaCA9PT0gJ2Z1bmN0aW9uJyA/IHRpbWVvdXQucmVmcmVzaCA6ICgpID0+IHRpbWVvdXQ7XG4gICAgICAgIHJldHVybiB0aW1lb3V0O1xuICAgIH1cbiAgICBjbGVhclRpbWVvdXQodGltZW91dElkKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICB9XG59XG5jb25zdCB0aW1lciA9IG5ldyBCcm93c2VyVGltZXIoKTtcbmV4cG9ydCB7IHRpbWVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGltcy1icm93c2VyLm1qcy5tYXAiLCJpbXBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZSB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvX3NoaW1zJztcbmltcG9ydCB7IGdldEdsb2JhbFRyYWNlUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci5tanNcIjtcbmxldCBfY29udGV4dEFzeW5jTG9jYWxTdG9yYWdlO1xuZnVuY3Rpb24gZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkge1xuICAgIF9jb250ZXh0QXN5bmNMb2NhbFN0b3JhZ2UgPz89IG5ldyBBc3luY0xvY2FsU3RvcmFnZSgpO1xuICAgIHJldHVybiBfY29udGV4dEFzeW5jTG9jYWxTdG9yYWdlO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgZ2V0IHRoZSBjdXJyZW50IHRyYWNlIGZyb20gdGhlIGV4ZWN1dGlvbiBjb250ZXh0LlxuICpcbiAqIEByZXR1cm5zIFRoZSBjdXJyZW50IHRyYWNlIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gdHJhY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50VHJhY2UoKSB7XG4gICAgY29uc3QgY3VycmVudFRyYWNlID0gZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkuZ2V0U3RvcmUoKTtcbiAgICBpZiAoY3VycmVudFRyYWNlPy50cmFjZSkge1xuICAgICAgICByZXR1cm4gY3VycmVudFRyYWNlLnRyYWNlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGdldCB0aGUgY3VycmVudCBzcGFuIGZyb20gdGhlIGV4ZWN1dGlvbiBjb250ZXh0LlxuICpcbiAqIEByZXR1cm5zIFRoZSBjdXJyZW50IHNwYW4gb3IgbnVsbCBpZiB0aGVyZSBpcyBubyBzcGFuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudFNwYW4oKSB7XG4gICAgY29uc3QgY3VycmVudFNwYW4gPSBnZXRDb250ZXh0QXN5bmNMb2NhbFN0b3JhZ2UoKS5nZXRTdG9yZSgpO1xuICAgIGlmIChjdXJyZW50U3Bhbj8uc3Bhbikge1xuICAgICAgICByZXR1cm4gY3VycmVudFNwYW4uc3BhbjtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIFRoaXMgaXMgYW4gQXN5bmNMb2NhbFN0b3JhZ2UgaW5zdGFuY2UgdGhhdCBzdG9yZXMgdGhlIGN1cnJlbnQgdHJhY2UuXG4gKiBJdCB3aWxsIGF1dG9tYXRpY2FsbHkgaGFuZGxlIHRoZSBleGVjdXRpb24gY29udGV4dCBvZiBkaWZmZXJlbnQgZXZlbnQgbG9vcCBleGVjdXRpb25zLlxuICpcbiAqIFRoZSBmdW5jdGlvbnMgYmVsb3cgc2hvdWxkIGJlIHRoZSBvbmx5IHdheSB0aGF0IHRoaXMgY29udGV4dCBnZXRzIGludGVyZmFjZWQgd2l0aC5cbiAqL1xuZnVuY3Rpb24gX3dyYXBGdW5jdGlvbldpdGhUcmFjZUxpZmVjeWNsZShmbikge1xuICAgIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRyYWNlID0gZ2V0Q3VycmVudFRyYWNlKCk7XG4gICAgICAgIGlmICghdHJhY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdHJhY2UgZm91bmQnKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0cmFjZS5zdGFydCgpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbih0cmFjZSk7XG4gICAgICAgIGF3YWl0IHRyYWNlLmVuZCgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBjcmVhdGUgYSBuZXcgdHJhY2UgYW5kIGFzc2lnbiBpdCB0byB0aGUgZXhlY3V0aW9uIGNvbnRleHQgb2YgdGhlIGZ1bmN0aW9uXG4gKiBwYXNzZWQgdG8gaXQuXG4gKlxuICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIHRvIHJ1biBhbmQgYXNzaWduIHRoZSB0cmFjZSBjb250ZXh0IHRvLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgY3JlYXRpb24gb2YgdGhlIHRyYWNlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3aXRoVHJhY2UodHJhY2UsIGZuLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBuZXdUcmFjZSA9IHR5cGVvZiB0cmFjZSA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlVHJhY2Uoe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIG5hbWU6IHRyYWNlLFxuICAgICAgICB9KVxuICAgICAgICA6IHRyYWNlO1xuICAgIHJldHVybiBnZXRDb250ZXh0QXN5bmNMb2NhbFN0b3JhZ2UoKS5ydW4oeyB0cmFjZTogbmV3VHJhY2UgfSwgX3dyYXBGdW5jdGlvbldpdGhUcmFjZUxpZmVjeWNsZShmbikpO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgY2hlY2sgaWYgdGhlcmUgaXMgYW4gZXhpc3RpbmcgYWN0aXZlIHRyYWNlIGluIHRoZSBleGVjdXRpb24gY29udGV4dC4gSWYgdGhlcmVcbiAqIGlzLCBpdCB3aWxsIHJ1biB0aGUgZ2l2ZW4gZnVuY3Rpb24gd2l0aCB0aGUgZXhpc3RpbmcgdHJhY2UuIElmIHRoZXJlIGlzIG5vIHRyYWNlLCBpdCB3aWxsIGNyZWF0ZVxuICogYSBuZXcgb25lIGFuZCBhc3NpZ24gaXQgdG8gdGhlIGV4ZWN1dGlvbiBjb250ZXh0IG9mIHRoZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gZm4gLSBUaGUgZnp1bmN0aW9uIHRvIHJ1biBhbmQgYXNzaWduIHRoZSB0cmFjZSBjb250ZXh0IHRvLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgY3JlYXRpb24gb2YgdGhlIHRyYWNlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRPckNyZWF0ZVRyYWNlKGZuLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBjdXJyZW50VHJhY2UgPSBnZXRDdXJyZW50VHJhY2UoKTtcbiAgICBpZiAoY3VycmVudFRyYWNlKSB7XG4gICAgICAgIC8vIGlmIHRoaXMgZXhlY3V0aW9uIGNvbnRleHQgYWxyZWFkeSBoYXMgYSB0cmFjZSBpbnN0YW5jZSBpbiBpdCB3ZSBqdXN0IGNvbnRpbnVlXG4gICAgICAgIHJldHVybiBhd2FpdCBmbigpO1xuICAgIH1cbiAgICBjb25zdCBuZXdUcmFjZSA9IGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5jcmVhdGVUcmFjZShvcHRpb25zKTtcbiAgICByZXR1cm4gZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkucnVuKHsgdHJhY2U6IG5ld1RyYWNlIH0sIF93cmFwRnVuY3Rpb25XaXRoVHJhY2VMaWZlY3ljbGUoZm4pKTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIHNldCB0aGUgY3VycmVudCBzcGFuIGluIHRoZSBleGVjdXRpb24gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0gc3BhbiAtIFRoZSBzcGFuIHRvIHNldCBhcyB0aGUgY3VycmVudCBzcGFuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Q3VycmVudFNwYW4oc3Bhbikge1xuICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0QXN5bmNMb2NhbFN0b3JhZ2UoKS5nZXRTdG9yZSgpO1xuICAgIGlmICghY29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGV4aXN0aW5nIHRyYWNlIGZvdW5kJyk7XG4gICAgfVxuICAgIGlmIChjb250ZXh0LnNwYW4pIHtcbiAgICAgICAgY29udGV4dC5zcGFuLnByZXZpb3VzU3BhbiA9IGNvbnRleHQucHJldmlvdXNTcGFuO1xuICAgICAgICBjb250ZXh0LnByZXZpb3VzU3BhbiA9IGNvbnRleHQuc3BhbjtcbiAgICB9XG4gICAgY29udGV4dC5zcGFuID0gc3BhbjtcbiAgICBnZXRDb250ZXh0QXN5bmNMb2NhbFN0b3JhZ2UoKS5lbnRlcldpdGgoY29udGV4dCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzZXRDdXJyZW50U3BhbigpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkuZ2V0U3RvcmUoKTtcbiAgICBpZiAoY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LnNwYW4gPSBjb250ZXh0LnByZXZpb3VzU3BhbjtcbiAgICAgICAgY29udGV4dC5wcmV2aW91c1NwYW4gPSBjb250ZXh0LnByZXZpb3VzU3Bhbj8ucHJldmlvdXNTcGFuO1xuICAgICAgICBnZXRDb250ZXh0QXN5bmNMb2NhbFN0b3JhZ2UoKS5lbnRlcldpdGgoY29udGV4dCk7XG4gICAgfVxufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYWRkIGFuIGVycm9yIHRvIHRoZSBjdXJyZW50IHNwYW4uXG4gKlxuICogQHBhcmFtIHNwYW5FcnJvciAtIFRoZSBlcnJvciB0byBhZGQgdG8gdGhlIGN1cnJlbnQgc3Bhbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEVycm9yVG9DdXJyZW50U3BhbihzcGFuRXJyb3IpIHtcbiAgICBjb25zdCBjdXJyZW50U3BhbiA9IGdldEN1cnJlbnRTcGFuKCk7XG4gICAgaWYgKGN1cnJlbnRTcGFuKSB7XG4gICAgICAgIGN1cnJlbnRTcGFuLnNldEVycm9yKHNwYW5FcnJvcik7XG4gICAgfVxufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgY2xvbmUgdGhlIGN1cnJlbnQgY29udGV4dCBieSBjcmVhdGluZyBuZXcgaW5zdGFuY2VzIG9mIHRoZSB0cmFjZSwgc3BhbiwgYW5kXG4gKiBwcmV2aW91cyBzcGFuLlxuICpcbiAqIEBwYXJhbSBjb250ZXh0IC0gVGhlIGNvbnRleHQgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyBBIGNsb25lIG9mIHRoZSBjb250ZXh0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVDdXJyZW50Q29udGV4dChjb250ZXh0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHJhY2U6IGNvbnRleHQudHJhY2U/LmNsb25lKCksXG4gICAgICAgIHNwYW46IGNvbnRleHQuc3Bhbj8uY2xvbmUoKSxcbiAgICAgICAgcHJldmlvdXNTcGFuOiBjb250ZXh0LnByZXZpb3VzU3Bhbj8uY2xvbmUoKSxcbiAgICB9O1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgcnVuIHRoZSBnaXZlbiBmdW5jdGlvbiB3aXRoIGEgbmV3IHNwYW4gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gcnVuIHdpdGggdGhlIG5ldyBzcGFuIGNvbnRleHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoTmV3U3BhbkNvbnRleHQoZm4pIHtcbiAgICBjb25zdCBjdXJyZW50Q29udGV4dCA9IGdldENvbnRleHRBc3luY0xvY2FsU3RvcmFnZSgpLmdldFN0b3JlKCk7XG4gICAgaWYgKCFjdXJyZW50Q29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGV4aXN0aW5nIHRyYWNlIGZvdW5kJyk7XG4gICAgfVxuICAgIGNvbnN0IGNvcHlPZkNvbnRleHQgPSBjbG9uZUN1cnJlbnRDb250ZXh0KGN1cnJlbnRDb250ZXh0KTtcbiAgICByZXR1cm4gZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkucnVuKGNvcHlPZkNvbnRleHQsIGZuKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHQubWpzLm1hcCIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uL2xvZ2dlci5tanNcIjtcbmltcG9ydCB7IHRpbWVyIGFzIF90aW1lciwgaXNUcmFjaW5nTG9vcFJ1bm5pbmdCeURlZmF1bHQsIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZS9fc2hpbXMnO1xuaW1wb3J0IHsgdHJhY2luZyB9IGZyb20gXCIuLi9jb25maWcubWpzXCI7XG4vKipcbiAqIFByaW50cyB0aGUgdHJhY2VzIGFuZCBzcGFucyB0byB0aGUgY29uc29sZVxuICovXG5leHBvcnQgY2xhc3MgQ29uc29sZVNwYW5FeHBvcnRlciB7XG4gICAgYXN5bmMgZXhwb3J0KGl0ZW1zKSB7XG4gICAgICAgIGlmICh0cmFjaW5nLmRpc2FibGVkKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1RyYWNpbmcgaXMgZGlzYWJsZWQuIFNraXBwaW5nIGV4cG9ydCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3RyYWNlJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbRXhwb3J0ZXJdIEV4cG9ydCB0cmFjZSB0cmFjZUlkPSR7aXRlbS50cmFjZUlkfSBuYW1lPSR7aXRlbS5uYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtFeHBvcnRlcl0gRXhwb3J0IHNwYW46ICR7SlNPTi5zdHJpbmdpZnkoaXRlbSl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQmF0Y2hUcmFjZVByb2Nlc3NvciB7XG4gICAgI21heFF1ZXVlU2l6ZTtcbiAgICAjbWF4QmF0Y2hTaXplO1xuICAgICNzY2hlZHVsZURlbGF5O1xuICAgICNleHBvcnRUcmlnZ2VyU2l6ZTtcbiAgICAjZXhwb3J0ZXI7XG4gICAgI2J1ZmZlciA9IFtdO1xuICAgICN0aW1lcjtcbiAgICAjdGltZW91dCA9IG51bGw7XG4gICAgI2V4cG9ydEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAjdGltZW91dEFib3J0Q29udHJvbGxlciA9IG51bGw7XG4gICAgY29uc3RydWN0b3IoZXhwb3J0ZXIsIHsgbWF4UXVldWVTaXplID0gMTAwMCwgbWF4QmF0Y2hTaXplID0gMTAwLCBzY2hlZHVsZURlbGF5ID0gNTAwMCwgLy8gNSBzZWNvbmRzXG4gICAgZXhwb3J0VHJpZ2dlclJhdGlvID0gMC44LCB9ID0ge30pIHtcbiAgICAgICAgdGhpcy4jbWF4UXVldWVTaXplID0gbWF4UXVldWVTaXplO1xuICAgICAgICB0aGlzLiNtYXhCYXRjaFNpemUgPSBtYXhCYXRjaFNpemU7XG4gICAgICAgIHRoaXMuI3NjaGVkdWxlRGVsYXkgPSBzY2hlZHVsZURlbGF5O1xuICAgICAgICB0aGlzLiNleHBvcnRUcmlnZ2VyU2l6ZSA9IG1heFF1ZXVlU2l6ZSAqIGV4cG9ydFRyaWdnZXJSYXRpbztcbiAgICAgICAgdGhpcy4jZXhwb3J0ZXIgPSBleHBvcnRlcjtcbiAgICAgICAgdGhpcy4jdGltZXIgPSBfdGltZXI7XG4gICAgICAgIGlmIChpc1RyYWNpbmdMb29wUnVubmluZ0J5RGVmYXVsdCgpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ0F1dG9tYXRpYyB0cmFjZSBleHBvcnQgbG9vcCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQuIFlvdSBuZWVkIHRvIG1hbnVhbGx5IGNhbGwgYGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5mb3JjZUZsdXNoKClgIHRvIGV4cG9ydCB0cmFjZXMuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuI3RpbWVvdXRBYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgIHRoaXMuI3J1bkV4cG9ydExvb3AoKTtcbiAgICB9XG4gICAgYXN5bmMgI3NhZmVBZGRJdGVtKGl0ZW0pIHtcbiAgICAgICAgaWYgKHRoaXMuI2J1ZmZlci5sZW5ndGggKyAxID4gdGhpcy4jbWF4UXVldWVTaXplKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ0Ryb3BwaW5nIHRyYWNlIGJlY2F1c2UgYnVmZmVyIGlzIGZ1bGwnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgdGhlIGl0ZW0gdG8gdGhlIGJ1ZmZlclxuICAgICAgICB0aGlzLiNidWZmZXIucHVzaChpdGVtKTtcbiAgICAgICAgaWYgKHRoaXMuI2J1ZmZlci5sZW5ndGggPiB0aGlzLiNleHBvcnRUcmlnZ2VyU2l6ZSkge1xuICAgICAgICAgICAgLy8gc3RhcnQgZXhwb3J0aW5nIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBhd2FpdCB0aGlzLiNleHBvcnRCYXRjaGVzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgI3J1bkV4cG9ydExvb3AoKSB7XG4gICAgICAgIHRoaXMuI3RpbWVvdXQgPSB0aGlzLiN0aW1lci5zZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIC8vIHNjaGVkdWxlZCBleHBvcnRcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI2V4cG9ydEJhdGNoZXMoKTtcbiAgICAgICAgICAgIHRoaXMuI3J1bkV4cG9ydExvb3AoKTtcbiAgICAgICAgfSwgdGhpcy4jc2NoZWR1bGVEZWxheSk7XG4gICAgICAgIC8vIFdlIHNldCB0aGlzIHNvIHRoYXQgTm9kZSBubyBsb25nZXIgY29uc2lkZXJzIHRoaXMgcGFydCBvZiB0aGUgZXZlbnQgbG9vcCBhbmQga2VlcHMgdGhlXG4gICAgICAgIC8vIHByb2Nlc3MgYWxpdmUgdW50aWwgdGhlIHRpbWVyIGlzIGRvbmUuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy4jdGltZW91dC51bnJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy4jdGltZW91dC51bnJlZigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jICNleHBvcnRCYXRjaGVzKGZvcmNlID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHRoaXMuI2J1ZmZlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIuZGVidWcoYEV4cG9ydGluZyBiYXRjaGVzLiBGb3JjZTogJHtmb3JjZX0uIEJ1ZmZlciBzaXplOiAke3RoaXMuI2J1ZmZlci5sZW5ndGh9YCk7XG4gICAgICAgIGlmIChmb3JjZSB8fCB0aGlzLiNidWZmZXIubGVuZ3RoIDwgdGhpcy4jbWF4QmF0Y2hTaXplKSB7XG4gICAgICAgICAgICBjb25zdCB0b0V4cG9ydCA9IFsuLi50aGlzLiNidWZmZXJdO1xuICAgICAgICAgICAgdGhpcy4jYnVmZmVyID0gW107XG4gICAgICAgICAgICB0aGlzLiNleHBvcnRJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI2V4cG9ydGVyLmV4cG9ydCh0b0V4cG9ydCk7XG4gICAgICAgICAgICB0aGlzLiNleHBvcnRJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy4jYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGJhdGNoID0gdGhpcy4jYnVmZmVyLnNwbGljZSgwLCB0aGlzLiNtYXhCYXRjaFNpemUpO1xuICAgICAgICAgICAgdGhpcy4jZXhwb3J0SW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLiNleHBvcnRlci5leHBvcnQoYmF0Y2gpO1xuICAgICAgICAgICAgdGhpcy4jZXhwb3J0SW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIG9uVHJhY2VTdGFydCh0cmFjZSkge1xuICAgICAgICBhd2FpdCB0aGlzLiNzYWZlQWRkSXRlbSh0cmFjZSk7XG4gICAgfVxuICAgIGFzeW5jIG9uVHJhY2VFbmQoX3RyYWNlKSB7XG4gICAgICAgIC8vIFdlIGRvbid0IHNlbmQgdHJhY2VzIG9uIGVuZCBiZWNhdXNlIHdlIGFscmVhZHkgc2VuZCB0aGVtIG9uIHN0YXJ0XG4gICAgfVxuICAgIGFzeW5jIG9uU3BhblN0YXJ0KF9zcGFuKSB7XG4gICAgICAgIC8vIFdlIGRvbid0IHNlbmQgc3BhbnMgb24gc3RhcnQgYmVjYXVzZSB3ZSBzZW5kIHRoZW0gYXQgdGhlIGVuZFxuICAgIH1cbiAgICBhc3luYyBvblNwYW5FbmQoc3Bhbikge1xuICAgICAgICBhd2FpdCB0aGlzLiNzYWZlQWRkSXRlbShzcGFuKTtcbiAgICB9XG4gICAgYXN5bmMgc2h1dGRvd24odGltZW91dCkge1xuICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgICAgdGhpcy4jdGltZXIuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gZm9yY2Ugc2h1dGRvd24gdGhlIEhUVFAgcmVxdWVzdFxuICAgICAgICAgICAgICAgIHRoaXMuI3RpbWVvdXRBYm9ydENvbnRyb2xsZXI/LmFib3J0KCk7XG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIuZGVidWcoJ1NodXR0aW5nIGRvd24gZ3JhY2VmdWxseScpO1xuICAgICAgICB3aGlsZSAodGhpcy4jYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgV2FpdGluZyBmb3IgYnVmZmVyIHRvIGVtcHR5LiBJdGVtcyBsZWZ0OiAke3RoaXMuI2J1ZmZlci5sZW5ndGh9YCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuI2V4cG9ydEluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAvLyBubyBjdXJyZW50IGV4cG9ydCBpbiBwcm9ncmVzcy4gRm9yY2luZyBhbGwgaXRlbXMgdG8gYmUgZXhwb3J0ZWRcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLiNleHBvcnRCYXRjaGVzKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuI3RpbWVvdXRBYm9ydENvbnRyb2xsZXI/LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdUaW1lb3V0IHJlYWNoZWQsIGZvcmNlIGZsdXNoaW5nJyk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jZXhwb3J0QmF0Y2hlcyh0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHVzaW5nIHNldFRpbWVvdXQgdG8gYWRkIHRvIHRoZSBldmVudCBsb29wIGFuZCBrZWVwIHRoaXMgYWxpdmUgdW50aWwgZG9uZVxuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHRoaXMuI3RpbWVyLnNldFRpbWVvdXQocmVzb2x2ZSwgNTAwKSk7XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdCdWZmZXIgZW1wdHkuIEV4aXRpbmcnKTtcbiAgICAgICAgaWYgKHRoaXMuI3RpbWVyICYmIHRoaXMuI3RpbWVvdXQpIHtcbiAgICAgICAgICAgIC8vIG1ha2luZyBzdXJlIHRoZXJlIGFyZSBubyBtb3JlIHJlcXVlc3RzXG4gICAgICAgICAgICB0aGlzLiN0aW1lci5jbGVhclRpbWVvdXQodGhpcy4jdGltZW91dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZm9yY2VGbHVzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI2J1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLiNleHBvcnRCYXRjaGVzKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE11bHRpVHJhY2luZ1Byb2Nlc3NvciB7XG4gICAgI3Byb2Nlc3NvcnMgPSBbXTtcbiAgICBzdGFydCgpIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm9jZXNzb3Igb2YgdGhpcy4jcHJvY2Vzc29ycykge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3Nvci5zdGFydCkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3Nvci5zdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFkZFRyYWNlUHJvY2Vzc29yKHByb2Nlc3Nvcikge1xuICAgICAgICB0aGlzLiNwcm9jZXNzb3JzLnB1c2gocHJvY2Vzc29yKTtcbiAgICB9XG4gICAgc2V0UHJvY2Vzc29ycyhwcm9jZXNzb3JzKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnU2h1dHRpbmcgZG93biBvbGQgcHJvY2Vzc29ycycpO1xuICAgICAgICBmb3IgKGNvbnN0IHByb2Nlc3NvciBvZiB0aGlzLiNwcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICBwcm9jZXNzb3Iuc2h1dGRvd24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNwcm9jZXNzb3JzID0gcHJvY2Vzc29ycztcbiAgICB9XG4gICAgYXN5bmMgb25UcmFjZVN0YXJ0KHRyYWNlKSB7XG4gICAgICAgIGZvciAoY29uc3QgcHJvY2Vzc29yIG9mIHRoaXMuI3Byb2Nlc3NvcnMpIHtcbiAgICAgICAgICAgIGF3YWl0IHByb2Nlc3Nvci5vblRyYWNlU3RhcnQodHJhY2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIG9uVHJhY2VFbmQodHJhY2UpIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm9jZXNzb3Igb2YgdGhpcy4jcHJvY2Vzc29ycykge1xuICAgICAgICAgICAgYXdhaXQgcHJvY2Vzc29yLm9uVHJhY2VFbmQodHJhY2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIG9uU3BhblN0YXJ0KHNwYW4pIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm9jZXNzb3Igb2YgdGhpcy4jcHJvY2Vzc29ycykge1xuICAgICAgICAgICAgYXdhaXQgcHJvY2Vzc29yLm9uU3BhblN0YXJ0KHNwYW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIG9uU3BhbkVuZChzcGFuKSB7XG4gICAgICAgIGZvciAoY29uc3QgcHJvY2Vzc29yIG9mIHRoaXMuI3Byb2Nlc3NvcnMpIHtcbiAgICAgICAgICAgIGF3YWl0IHByb2Nlc3Nvci5vblNwYW5FbmQoc3Bhbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgc2h1dGRvd24odGltZW91dCkge1xuICAgICAgICBmb3IgKGNvbnN0IHByb2Nlc3NvciBvZiB0aGlzLiNwcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICBhd2FpdCBwcm9jZXNzb3Iuc2h1dGRvd24odGltZW91dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZm9yY2VGbHVzaCgpIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm9jZXNzb3Igb2YgdGhpcy4jcHJvY2Vzc29ycykge1xuICAgICAgICAgICAgYXdhaXQgcHJvY2Vzc29yLmZvcmNlRmx1c2goKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmxldCBfZGVmYXVsdEV4cG9ydGVyID0gbnVsbDtcbmxldCBfZGVmYXVsdFByb2Nlc3NvciA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdEV4cG9ydGVyKCkge1xuICAgIGlmICghX2RlZmF1bHRFeHBvcnRlcikge1xuICAgICAgICBfZGVmYXVsdEV4cG9ydGVyID0gbmV3IENvbnNvbGVTcGFuRXhwb3J0ZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIF9kZWZhdWx0RXhwb3J0ZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFByb2Nlc3NvcigpIHtcbiAgICBpZiAoIV9kZWZhdWx0UHJvY2Vzc29yKSB7XG4gICAgICAgIF9kZWZhdWx0UHJvY2Vzc29yID0gbmV3IEJhdGNoVHJhY2VQcm9jZXNzb3IoZGVmYXVsdEV4cG9ydGVyKCkpO1xuICAgIH1cbiAgICByZXR1cm4gX2RlZmF1bHRQcm9jZXNzb3I7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9jZXNzb3IubWpzLm1hcCIsImltcG9ydCB7IHJhbmRvbVVVSUQgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL19zaGltcyc7XG4vKipcbiAqIEdlbmVyYXRlIGFuIElTTyA4NjAxIHRpbWVzdGFtcCBvZiB0aGUgY3VycmVudCB0aW1lLlxuICogQHJldHVybnMgQW4gSVNPIDg2MDEgdGltZXN0YW1wLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGltZUlzbygpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xufVxuLyoqXG4gKiBHZW5lcmF0ZSBhIHRyYWNlIElEIGJ5IGNyZWF0aW5nIGEgcmFuZG9tIFVVSUQgdjQgYW5kIHJlbW92aW5nIHRoZSBkYXNoZXMuIFRoaXMgaXMgdGhlIGVxdWl2YWxlbnRcbiAqIG9mIGB1dWlkNCgpLmhleGAgaW4gUHl0aG9uIGFuZCBwcmVmaXhpbmcgaXQgd2l0aCBgdHJhY2VfYC5cbiAqIEByZXR1cm5zIEEgdHJhY2UgSUQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVRyYWNlSWQoKSB7XG4gICAgcmV0dXJuIGB0cmFjZV8ke3JhbmRvbVVVSUQoKS5yZXBsYWNlKC8tL2csICcnKX1gO1xufVxuLyoqXG4gKiBHZW5lcmF0ZSBhIHNwYW4gSUQgYnkgY3JlYXRpbmcgYSByYW5kb20gVVVJRCB2NCBhbmQgcmVtb3ZpbmcgdGhlIGRhc2hlcy4gVGhpcyBpcyB0aGUgZXF1aXZhbGVudFxuICogb2YgYHV1aWQ0KCkuaGV4YCBpbiBQeXRob24gYW5kIHByZWZpeGluZyBpdCB3aXRoIGBzcGFuX2AuXG4gKiBAcmV0dXJucyBBIHNwYW4gSUQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVNwYW5JZCgpIHtcbiAgICByZXR1cm4gYHNwYW5fJHtyYW5kb21VVUlEKCkucmVwbGFjZSgvLS9nLCAnJykuc2xpY2UoMCwgMjQpfWA7XG59XG4vKipcbiAqIEdlbmVyYXRlIGEgZ3JvdXAgSUQgYnkgY3JlYXRpbmcgYSByYW5kb20gVVVJRCB2NCBhbmQgcmVtb3ZpbmcgdGhlIGRhc2hlcy4gVGhpcyBpcyB0aGUgZXF1aXZhbGVudFxuICogb2YgYHV1aWQ0KCkuaGV4YCBpbiBQeXRob24gYW5kIHByZWZpeGluZyBpdCB3aXRoIGBncm91cF9gLlxuICogQHJldHVybnMgQSBncm91cCBJRC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlR3JvdXBJZCgpIHtcbiAgICByZXR1cm4gYGdyb3VwXyR7cmFuZG9tVVVJRCgpLnJlcGxhY2UoLy0vZywgJycpLnNsaWNlKDAsIDI0KX1gO1xufVxuLyoqXG4gKiBSZW1vdmUgZmllbGRzIHRoYXQgc3RhcnQgd2l0aCBhbiB1bmRlcnNjb3JlIGZyb20gYW4gb2JqZWN0LlxuICogQHBhcmFtIG9iaiAtIFRoZSBvYmplY3QgdG8gcmVtb3ZlIHByaXZhdGUgZmllbGRzIGZyb20uXG4gKiBAcmV0dXJucyBBIG5ldyBvYmplY3Qgd2l0aCBwcml2YXRlIGZpZWxkcyByZW1vdmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUHJpdmF0ZUZpZWxkcyhvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKG9iaikuZmlsdGVyKChba2V5XSkgPT4gIWtleS5zdGFydHNXaXRoKCdfJykpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLm1qcy5tYXAiLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZVNwYW5JZCwgcmVtb3ZlUHJpdmF0ZUZpZWxkcywgdGltZUlzbyB9IGZyb20gXCIuL3V0aWxzLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFNwYW4ge1xuICAgIHR5cGUgPSAndHJhY2Uuc3Bhbic7XG4gICAgI2RhdGE7XG4gICAgI3RyYWNlSWQ7XG4gICAgI3NwYW5JZDtcbiAgICAjcGFyZW50SWQ7XG4gICAgI3Byb2Nlc3NvcjtcbiAgICAjc3RhcnRlZEF0O1xuICAgICNlbmRlZEF0O1xuICAgICNlcnJvcjtcbiAgICAjcHJldmlvdXNTcGFuO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMsIHByb2Nlc3Nvcikge1xuICAgICAgICB0aGlzLiN0cmFjZUlkID0gb3B0aW9ucy50cmFjZUlkO1xuICAgICAgICB0aGlzLiNzcGFuSWQgPSBvcHRpb25zLnNwYW5JZCA/PyBnZW5lcmF0ZVNwYW5JZCgpO1xuICAgICAgICB0aGlzLiNkYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgICAgICB0aGlzLiNwcm9jZXNzb3IgPSBwcm9jZXNzb3I7XG4gICAgICAgIHRoaXMuI3BhcmVudElkID0gb3B0aW9ucy5wYXJlbnRJZCA/PyBudWxsO1xuICAgICAgICB0aGlzLiNlcnJvciA9IG9wdGlvbnMuZXJyb3IgPz8gbnVsbDtcbiAgICAgICAgdGhpcy4jc3RhcnRlZEF0ID0gb3B0aW9ucy5zdGFydGVkQXQgPz8gbnVsbDtcbiAgICAgICAgdGhpcy4jZW5kZWRBdCA9IG9wdGlvbnMuZW5kZWRBdCA/PyBudWxsO1xuICAgIH1cbiAgICBnZXQgdHJhY2VJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3RyYWNlSWQ7XG4gICAgfVxuICAgIGdldCBzcGFuRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2RhdGE7XG4gICAgfVxuICAgIGdldCBzcGFuSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNzcGFuSWQ7XG4gICAgfVxuICAgIGdldCBwYXJlbnRJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3BhcmVudElkO1xuICAgIH1cbiAgICBnZXQgcHJldmlvdXNTcGFuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jcHJldmlvdXNTcGFuO1xuICAgIH1cbiAgICBzZXQgcHJldmlvdXNTcGFuKHNwYW4pIHtcbiAgICAgICAgdGhpcy4jcHJldmlvdXNTcGFuID0gc3BhbjtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLiNzdGFydGVkQXQpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdTcGFuIGFscmVhZHkgc3RhcnRlZCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3N0YXJ0ZWRBdCA9IHRpbWVJc28oKTtcbiAgICAgICAgdGhpcy4jcHJvY2Vzc29yLm9uU3BhblN0YXJ0KHRoaXMpO1xuICAgIH1cbiAgICBlbmQoKSB7XG4gICAgICAgIGlmICh0aGlzLiNlbmRlZEF0KSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1NwYW4gYWxyZWFkeSBmaW5pc2hlZCcsIHRoaXMuc3BhbkRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2VuZGVkQXQgPSB0aW1lSXNvKCk7XG4gICAgICAgIHRoaXMuI3Byb2Nlc3Nvci5vblNwYW5FbmQodGhpcyk7XG4gICAgfVxuICAgIHNldEVycm9yKGVycm9yKSB7XG4gICAgICAgIHRoaXMuI2Vycm9yID0gZXJyb3I7XG4gICAgfVxuICAgIGdldCBlcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2Vycm9yO1xuICAgIH1cbiAgICBnZXQgc3RhcnRlZEF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jc3RhcnRlZEF0O1xuICAgIH1cbiAgICBnZXQgZW5kZWRBdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2VuZGVkQXQ7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBzcGFuID0gbmV3IFNwYW4oe1xuICAgICAgICAgICAgdHJhY2VJZDogdGhpcy50cmFjZUlkLFxuICAgICAgICAgICAgc3BhbklkOiB0aGlzLnNwYW5JZCxcbiAgICAgICAgICAgIHBhcmVudElkOiB0aGlzLnBhcmVudElkID8/IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuc3BhbkRhdGEsXG4gICAgICAgICAgICBzdGFydGVkQXQ6IHRoaXMuI3N0YXJ0ZWRBdCA/PyB1bmRlZmluZWQsXG4gICAgICAgICAgICBlbmRlZEF0OiB0aGlzLiNlbmRlZEF0ID8/IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGVycm9yOiB0aGlzLiNlcnJvciA/PyB1bmRlZmluZWQsXG4gICAgICAgIH0sIHRoaXMuI3Byb2Nlc3Nvcik7XG4gICAgICAgIHNwYW4ucHJldmlvdXNTcGFuID0gdGhpcy5wcmV2aW91c1NwYW4/LmNsb25lKCk7XG4gICAgICAgIHJldHVybiBzcGFuO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvYmplY3Q6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIGlkOiB0aGlzLnNwYW5JZCxcbiAgICAgICAgICAgIHRyYWNlX2lkOiB0aGlzLnRyYWNlSWQsXG4gICAgICAgICAgICBwYXJlbnRfaWQ6IHRoaXMucGFyZW50SWQsXG4gICAgICAgICAgICBzdGFydGVkX2F0OiB0aGlzLnN0YXJ0ZWRBdCxcbiAgICAgICAgICAgIGVuZGVkX2F0OiB0aGlzLmVuZGVkQXQsXG4gICAgICAgICAgICBzcGFuX2RhdGE6IHJlbW92ZVByaXZhdGVGaWVsZHModGhpcy5zcGFuRGF0YSksXG4gICAgICAgICAgICBlcnJvcjogdGhpcy5lcnJvcixcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTm9vcFNwYW4gZXh0ZW5kcyBTcGFuIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBwcm9jZXNzb3IpIHtcbiAgICAgICAgc3VwZXIoeyB0cmFjZUlkOiAnbm8tb3AnLCBzcGFuSWQ6ICduby1vcCcsIGRhdGEgfSwgcHJvY2Vzc29yKTtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZW5kKCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHNldEVycm9yKCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BhbnMubWpzLm1hcCIsImltcG9ydCB7IGRlZmF1bHRQcm9jZXNzb3IgfSBmcm9tIFwiLi9wcm9jZXNzb3IubWpzXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZVRyYWNlSWQgfSBmcm9tIFwiLi91dGlscy5tanNcIjtcbmV4cG9ydCBjbGFzcyBUcmFjZSB7XG4gICAgdHlwZSA9ICd0cmFjZSc7XG4gICAgdHJhY2VJZDtcbiAgICBuYW1lO1xuICAgIGdyb3VwSWQgPSBudWxsO1xuICAgIG1ldGFkYXRhO1xuICAgICNwcm9jZXNzb3I7XG4gICAgI3N0YXJ0ZWQ7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgcHJvY2Vzc29yKSB7XG4gICAgICAgIHRoaXMudHJhY2VJZCA9IG9wdGlvbnMudHJhY2VJZCA/PyBnZW5lcmF0ZVRyYWNlSWQoKTtcbiAgICAgICAgdGhpcy5uYW1lID0gb3B0aW9ucy5uYW1lID8/ICdBZ2VudCB3b3JrZmxvdyc7XG4gICAgICAgIHRoaXMuZ3JvdXBJZCA9IG9wdGlvbnMuZ3JvdXBJZCA/PyBudWxsO1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0gb3B0aW9ucy5tZXRhZGF0YSA/PyB7fTtcbiAgICAgICAgdGhpcy4jcHJvY2Vzc29yID0gcHJvY2Vzc29yID8/IGRlZmF1bHRQcm9jZXNzb3IoKTtcbiAgICAgICAgdGhpcy4jc3RhcnRlZCA9IG9wdGlvbnMuc3RhcnRlZCA/PyBmYWxzZTtcbiAgICB9XG4gICAgYXN5bmMgc3RhcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLiNzdGFydGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIGF3YWl0IHRoaXMuI3Byb2Nlc3Nvci5vblRyYWNlU3RhcnQodGhpcyk7XG4gICAgfVxuICAgIGFzeW5jIGVuZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLiNzdGFydGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICBhd2FpdCB0aGlzLiNwcm9jZXNzb3Iub25UcmFjZUVuZCh0aGlzKTtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJhY2Uoe1xuICAgICAgICAgICAgdHJhY2VJZDogdGhpcy50cmFjZUlkLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgZ3JvdXBJZDogdGhpcy5ncm91cElkID8/IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB0aGlzLm1ldGFkYXRhLFxuICAgICAgICAgICAgc3RhcnRlZDogdGhpcy4jc3RhcnRlZCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9iamVjdDogdGhpcy50eXBlLFxuICAgICAgICAgICAgaWQ6IHRoaXMudHJhY2VJZCxcbiAgICAgICAgICAgIHdvcmtmbG93X25hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIGdyb3VwX2lkOiB0aGlzLmdyb3VwSWQsXG4gICAgICAgICAgICBtZXRhZGF0YTogdGhpcy5tZXRhZGF0YSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTm9vcFRyYWNlIGV4dGVuZHMgVHJhY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcih7fSk7XG4gICAgfVxuICAgIGFzeW5jIHN0YXJ0KCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFzeW5jIGVuZCgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNlcy5tanMubWFwIiwiaW1wb3J0IHsgZ2V0Q3VycmVudFNwYW4sIGdldEN1cnJlbnRUcmFjZSB9IGZyb20gXCIuL2NvbnRleHQubWpzXCI7XG5pbXBvcnQgeyB0cmFjaW5nIH0gZnJvbSBcIi4uL2NvbmZpZy5tanNcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4uL2xvZ2dlci5tanNcIjtcbmltcG9ydCB7IE11bHRpVHJhY2luZ1Byb2Nlc3NvciB9IGZyb20gXCIuL3Byb2Nlc3Nvci5tanNcIjtcbmltcG9ydCB7IE5vb3BTcGFuLCBTcGFuIH0gZnJvbSBcIi4vc3BhbnMubWpzXCI7XG5pbXBvcnQgeyBOb29wVHJhY2UsIFRyYWNlIH0gZnJvbSBcIi4vdHJhY2VzLm1qc1wiO1xuaW1wb3J0IHsgZ2VuZXJhdGVUcmFjZUlkIH0gZnJvbSBcIi4vdXRpbHMubWpzXCI7XG5leHBvcnQgY2xhc3MgVHJhY2VQcm92aWRlciB7XG4gICAgI211bHRpUHJvY2Vzc29yO1xuICAgICNkaXNhYmxlZDtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy4jbXVsdGlQcm9jZXNzb3IgPSBuZXcgTXVsdGlUcmFjaW5nUHJvY2Vzc29yKCk7XG4gICAgICAgIHRoaXMuI2Rpc2FibGVkID0gdHJhY2luZy5kaXNhYmxlZDtcbiAgICAgICAgdGhpcy4jYWRkQ2xlYW51cExpc3RlbmVycygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBwcm9jZXNzb3IgdG8gdGhlIGxpc3Qgb2YgcHJvY2Vzc29ycy4gRWFjaCBwcm9jZXNzb3Igd2lsbCByZWNlaXZlIGFsbCB0cmFjZXMvc3BhbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvY2Vzc29yIC0gVGhlIHByb2Nlc3NvciB0byBhZGQuXG4gICAgICovXG4gICAgcmVnaXN0ZXJQcm9jZXNzb3IocHJvY2Vzc29yKSB7XG4gICAgICAgIHRoaXMuI211bHRpUHJvY2Vzc29yLmFkZFRyYWNlUHJvY2Vzc29yKHByb2Nlc3Nvcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbGlzdCBvZiBwcm9jZXNzb3JzLiBUaGlzIHdpbGwgcmVwbGFjZSBhbnkgZXhpc3RpbmcgcHJvY2Vzc29ycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9jZXNzb3JzIC0gVGhlIGxpc3Qgb2YgcHJvY2Vzc29ycyB0byBzZXQuXG4gICAgICovXG4gICAgc2V0UHJvY2Vzc29ycyhwcm9jZXNzb3JzKSB7XG4gICAgICAgIHRoaXMuI211bHRpUHJvY2Vzc29yLnNldFByb2Nlc3NvcnMocHJvY2Vzc29ycyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCB0cmFjZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBjdXJyZW50IHRyYWNlLlxuICAgICAqL1xuICAgIGdldEN1cnJlbnRUcmFjZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldEN1cnJlbnRUcmFjZSgpO1xuICAgIH1cbiAgICBnZXRDdXJyZW50U3BhbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEN1cnJlbnRTcGFuKCk7XG4gICAgfVxuICAgIHNldERpc2FibGVkKGRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuI2Rpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgfVxuICAgIHN0YXJ0RXhwb3J0TG9vcCgpIHtcbiAgICAgICAgdGhpcy4jbXVsdGlQcm9jZXNzb3Iuc3RhcnQoKTtcbiAgICB9XG4gICAgY3JlYXRlVHJhY2UodHJhY2VPcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLiNkaXNhYmxlZCkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdUcmFjaW5nIGlzIGRpc2FibGVkLCBOb3QgY3JlYXRpbmcgdHJhY2UgJW8nLCB0cmFjZU9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb29wVHJhY2UoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cmFjZUlkID0gdHJhY2VPcHRpb25zLnRyYWNlSWQgPz8gZ2VuZXJhdGVUcmFjZUlkKCk7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0cmFjZU9wdGlvbnMubmFtZSA/PyAnQWdlbnQgd29ya2Zsb3cnO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ0NyZWF0aW5nIHRyYWNlICVzIHdpdGggbmFtZSAlcycsIHRyYWNlSWQsIG5hbWUpO1xuICAgICAgICByZXR1cm4gbmV3IFRyYWNlKHsgLi4udHJhY2VPcHRpb25zLCBuYW1lLCB0cmFjZUlkIH0sIHRoaXMuI211bHRpUHJvY2Vzc29yKTtcbiAgICB9XG4gICAgY3JlYXRlU3BhbihzcGFuT3B0aW9ucywgcGFyZW50KSB7XG4gICAgICAgIGlmICh0aGlzLiNkaXNhYmxlZCB8fCBzcGFuT3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdUcmFjaW5nIGlzIGRpc2FibGVkLCBOb3QgY3JlYXRpbmcgc3BhbiAlbycsIHNwYW5PcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9vcFNwYW4oc3Bhbk9wdGlvbnMuZGF0YSwgdGhpcy4jbXVsdGlQcm9jZXNzb3IpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJlbnRJZDtcbiAgICAgICAgbGV0IHRyYWNlSWQ7XG4gICAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VHJhY2UgPSBnZXRDdXJyZW50VHJhY2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTcGFuID0gZ2V0Q3VycmVudFNwYW4oKTtcbiAgICAgICAgICAgIGlmICghY3VycmVudFRyYWNlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdObyBhY3RpdmUgdHJhY2UuIE1ha2Ugc3VyZSB0byBzdGFydCBhIHRyYWNlIHdpdGggYHdpdGhUcmFjZSgpYCBmaXJzdC4gUmV0dXJuaW5nIE5vb3BTcGFuLicpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTm9vcFNwYW4oc3Bhbk9wdGlvbnMuZGF0YSwgdGhpcy4jbXVsdGlQcm9jZXNzb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRTcGFuIGluc3RhbmNlb2YgTm9vcFNwYW4gfHxcbiAgICAgICAgICAgICAgICBjdXJyZW50VHJhY2UgaW5zdGFuY2VvZiBOb29wVHJhY2UpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYFBhcmVudCAke2N1cnJlbnRTcGFufSBvciAke2N1cnJlbnRUcmFjZX0gaXMgbm8tb3AsIHJldHVybmluZyBOb29wU3BhbmApO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTm9vcFNwYW4oc3Bhbk9wdGlvbnMuZGF0YSwgdGhpcy4jbXVsdGlQcm9jZXNzb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJhY2VJZCA9IGN1cnJlbnRUcmFjZS50cmFjZUlkO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRTcGFuKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdVc2luZyBwYXJlbnQgc3BhbiAlcycsIGN1cnJlbnRTcGFuLnNwYW5JZCk7XG4gICAgICAgICAgICAgICAgcGFyZW50SWQgPSBjdXJyZW50U3Bhbi5zcGFuSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ05vIHBhcmVudCBzcGFuLCB1c2luZyBjdXJyZW50IHRyYWNlICVzJywgY3VycmVudFRyYWNlLnRyYWNlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcmVudCBpbnN0YW5jZW9mIFRyYWNlKSB7XG4gICAgICAgICAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgTm9vcFRyYWNlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdQYXJlbnQgdHJhY2UgaXMgbm8tb3AsIHJldHVybmluZyBOb29wU3BhbicpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTm9vcFNwYW4oc3Bhbk9wdGlvbnMuZGF0YSwgdGhpcy4jbXVsdGlQcm9jZXNzb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJhY2VJZCA9IHBhcmVudC50cmFjZUlkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcmVudCBpbnN0YW5jZW9mIFNwYW4pIHtcbiAgICAgICAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBOb29wU3Bhbikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnUGFyZW50IHNwYW4gaXMgbm8tb3AsIHJldHVybmluZyBOb29wU3BhbicpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTm9vcFNwYW4oc3Bhbk9wdGlvbnMuZGF0YSwgdGhpcy4jbXVsdGlQcm9jZXNzb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50SWQgPSBwYXJlbnQuc3BhbklkO1xuICAgICAgICAgICAgdHJhY2VJZCA9IHBhcmVudC50cmFjZUlkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdHJhY2VJZCkge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdObyB0cmFjZUlkIGZvdW5kLiBNYWtlIHN1cmUgdG8gc3RhcnQgYSB0cmFjZSB3aXRoIGB3aXRoVHJhY2UoKWAgZmlyc3QuIFJldHVybmluZyBOb29wU3Bhbi4nKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9vcFNwYW4oc3Bhbk9wdGlvbnMuZGF0YSwgdGhpcy4jbXVsdGlQcm9jZXNzb3IpO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgQ3JlYXRpbmcgc3BhbiAke0pTT04uc3RyaW5naWZ5KHNwYW5PcHRpb25zLmRhdGEpfSB3aXRoIGlkICR7c3Bhbk9wdGlvbnMuc3BhbklkID8/IHRyYWNlSWR9YCk7XG4gICAgICAgIHJldHVybiBuZXcgU3Bhbih7XG4gICAgICAgICAgICAuLi5zcGFuT3B0aW9ucyxcbiAgICAgICAgICAgIHRyYWNlSWQsXG4gICAgICAgICAgICBwYXJlbnRJZCxcbiAgICAgICAgfSwgdGhpcy4jbXVsdGlQcm9jZXNzb3IpO1xuICAgIH1cbiAgICBhc3luYyBzaHV0ZG93bih0aW1lb3V0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1NodXR0aW5nIGRvd24gdHJhY2luZyBwcm92aWRlcicpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy4jbXVsdGlQcm9jZXNzb3Iuc2h1dGRvd24odGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIHNodXR0aW5nIGRvd24gdHJhY2luZyBwcm92aWRlciAlbycsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQWRkcyBsaXN0ZW5lcnMgdG8gYHByb2Nlc3NgIHRvIGVuc3VyZSBgc2h1dGRvd25gIG9jY3VycyBiZWZvcmUgZXhpdC4gKi9cbiAgICAjYWRkQ2xlYW51cExpc3RlbmVycygpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2Vzcy5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gaGFuZGxpbmcgTm9kZS5qcyBwcm9jZXNzIHRlcm1pbmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjbGVhbnVwID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdDbGVhbnVwIHRpbWVvdXQsIGZvcmNpbmcgZXhpdCcpO1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgICAgICAgICAgfSwgNTAwMCk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zaHV0ZG93bigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBIYW5kbGUgbm9ybWFsIHRlcm1pbmF0aW9uXG4gICAgICAgICAgICBwcm9jZXNzLm9uKCdiZWZvcmVFeGl0JywgY2xlYW51cCk7XG4gICAgICAgICAgICAvLyBIYW5kbGUgQ1RSTCtDIChTSUdJTlQpXG4gICAgICAgICAgICBwcm9jZXNzLm9uKCdTSUdJTlQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIGlmICghaGFzT3RoZXJMaXN0ZW5lcnNGb3JTaWduYWxzKCdTSUdJTlQnKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHdoZW4gdGhlcmUgYXJlIG5vIG90aGVyIGxpc3RlbmVycywgZXhpdCB0aGUgcHJvY2VzcyBvbiB0aGlzIFNESyBzaWRlXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxMzApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gSGFuZGxlIHRlcm1pbmF0aW9uIChTSUdURVJNKVxuICAgICAgICAgICAgcHJvY2Vzcy5vbignU0lHVEVSTScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNPdGhlckxpc3RlbmVyc0ZvclNpZ25hbHMoJ1NJR1RFUk0nKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHdoZW4gdGhlcmUgYXJlIG5vIG90aGVyIGxpc3RlbmVycywgZXhpdCB0aGUgcHJvY2VzcyBvbiB0aGlzIFNESyBzaWRlXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIGFzeW5jIChyZWFzb24sIHByb21pc2UpID0+IHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ1VuaGFuZGxlZCByZWplY3Rpb24nLCByZWFzb24sIHByb21pc2UpO1xuICAgICAgICAgICAgICAgIGF3YWl0IGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc090aGVyTGlzdGVuZXJzRm9yRXZlbnRzKCd1bmhhbmRsZWRSZWplY3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHdoZW4gdGhlcmUgYXJlIG5vIG90aGVyIGxpc3RlbmVycywgZXhpdCB0aGUgcHJvY2VzcyBvbiB0aGlzIFNESyBzaWRlXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBmb3JjZUZsdXNoKCkge1xuICAgICAgICBhd2FpdCB0aGlzLiNtdWx0aVByb2Nlc3Nvci5mb3JjZUZsdXNoKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFzT3RoZXJMaXN0ZW5lcnNGb3JTaWduYWxzKGV2ZW50KSB7XG4gICAgcmV0dXJuIHByb2Nlc3MubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGggPiAxO1xufVxuZnVuY3Rpb24gaGFzT3RoZXJMaXN0ZW5lcnNGb3JFdmVudHMoZXZlbnQpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aCA+IDE7XG59XG5sZXQgR0xPQkFMX1RSQUNFX1BST1ZJREVSID0gdW5kZWZpbmVkO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKSB7XG4gICAgaWYgKCFHTE9CQUxfVFJBQ0VfUFJPVklERVIpIHtcbiAgICAgICAgR0xPQkFMX1RSQUNFX1BST1ZJREVSID0gbmV3IFRyYWNlUHJvdmlkZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIEdMT0JBTF9UUkFDRV9QUk9WSURFUjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLm1qcy5tYXAiLCJpbXBvcnQgeyByZXNldEN1cnJlbnRTcGFuLCBzZXRDdXJyZW50U3Bhbiwgd2l0aE5ld1NwYW5Db250ZXh0LCB9IGZyb20gXCIuL2NvbnRleHQubWpzXCI7XG5pbXBvcnQgeyBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXIubWpzXCI7XG5mdW5jdGlvbiBfd2l0aFNwYW5GYWN0b3J5KGNyZWF0ZVNwYW4pIHtcbiAgICByZXR1cm4gYXN5bmMgKGZuLCAuLi5hcmdzKSA9PiB7XG4gICAgICAgIC8vIENyZWF0aW5nIGEgbmV3IHNwYW4gY29udGV4dCB0byBtYWtlIHN1cmUgdGhhdCB0aGUgcHJldmlvdXMgc3BhbiBpcyBjb3JyZWN0bHkgcmVzZXRcbiAgICAgICAgcmV0dXJuIHdpdGhOZXdTcGFuQ29udGV4dChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzcGFuID0gY3JlYXRlU3BhbiguLi5hcmdzKTtcbiAgICAgICAgICAgIHNldEN1cnJlbnRTcGFuKHNwYW4pO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzcGFuLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGZuKHNwYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgc3Bhbi5zZXRFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGVycm9yLmRhdGEsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICAgICAgICAgIHJlc2V0Q3VycmVudFNwYW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHJlc3BvbnNlIHNwYW4uIFRoZSBzcGFuIHdpbGwgbm90IGJlIHN0YXJ0ZWQgYXV0b21hdGljYWxseSwgeW91IHNob3VsZCBlaXRoZXJcbiAqIHVzZSBgd2l0aFJlc3BvbnNlU3BhbigpYCBvciBjYWxsIGBzcGFuLnN0YXJ0KClgIGFuZCBgc3Bhbi5lbmQoKWAgbWFudWFsbHkuXG4gKlxuICogVGhpcyBzcGFuIGNhcHR1cmVzIHRoZSBkZXRhaWxzIG9mIGEgbW9kZWwgcmVzcG9uc2UsIHByaW1hcmlseSB0aGUgcmVzcG9uc2UgaWRlbnRpZmllci5cbiAqIElmIHlvdSBuZWVkIHRvIGNhcHR1cmUgZGV0YWlsZWQgZ2VuZXJhdGlvbiBpbmZvcm1hdGlvbiBzdWNoIGFzIGlucHV0L291dHB1dCBtZXNzYWdlcyxcbiAqIG1vZGVsIGNvbmZpZ3VyYXRpb24sIG9yIHVzYWdlIGRhdGEsIHVzZSBgY3JlYXRlR2VuZXJhdGlvblNwYW4oKWAgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNwYW4gY3JlYXRpb24gb3B0aW9ucywgaW5jbHVkaW5nIHNwYW4gZGF0YSBhbmQgaWRlbnRpZmllcnMuXG4gKiBAcGFyYW0gcGFyZW50IC0gVGhlIHBhcmVudCBzcGFuIG9yIHRyYWNlLiBJZiBub3QgcHJvdmlkZWQsIHRoZSBjdXJyZW50IHRyYWNlL3NwYW4gd2lsbCBiZSB1c2VkXG4gKiBhdXRvbWF0aWNhbGx5LlxuICpcbiAqIEByZXR1cm5zIFRoZSBuZXdseSBjcmVhdGVkIHJlc3BvbnNlIHNwYW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZXNwb25zZVNwYW4ob3B0aW9ucywgcGFyZW50KSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICAgIHJldHVybiBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlU3Bhbih7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGU6ICdyZXNwb25zZScsXG4gICAgICAgICAgICAuLi5vcHRpb25zLmRhdGEsXG4gICAgICAgIH0sXG4gICAgfSwgcGFyZW50KTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHJlc3BvbnNlIHNwYW4gYW5kIGF1dG9tYXRpY2FsbHkgc3RhcnQgYW5kIGVuZCBpdC5cbiAqXG4gKiBUaGlzIHNwYW4gY2FwdHVyZXMgdGhlIGRldGFpbHMgb2YgYSBtb2RlbCByZXNwb25zZSwgcHJpbWFyaWx5IHRoZSByZXNwb25zZSBpZGVudGlmaWVyLlxuICogSWYgeW91IG5lZWQgdG8gY2FwdHVyZSBkZXRhaWxlZCBnZW5lcmF0aW9uIGluZm9ybWF0aW9uIHN1Y2ggYXMgaW5wdXQvb3V0cHV0IG1lc3NhZ2VzLFxuICogbW9kZWwgY29uZmlndXJhdGlvbiwgb3IgdXNhZ2UgZGF0YSwgdXNlIGBnZW5lcmF0aW9uU3BhbigpYCBpbnN0ZWFkLlxuICovXG5leHBvcnQgY29uc3Qgd2l0aFJlc3BvbnNlU3BhbiA9IF93aXRoU3BhbkZhY3RvcnkoY3JlYXRlUmVzcG9uc2VTcGFuKTtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGFnZW50IHNwYW4uIFRoZSBzcGFuIHdpbGwgbm90IGJlIHN0YXJ0ZWQgYXV0b21hdGljYWxseSwgeW91IHNob3VsZCBlaXRoZXJcbiAqIHVzZSBgd2l0aEFnZW50U3BhbigpYCBvciBjYWxsIGBzcGFuLnN0YXJ0KClgIGFuZCBgc3Bhbi5lbmQoKWAgbWFudWFsbHkuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzcGFuIGNyZWF0aW9uIG9wdGlvbnMsIGluY2x1ZGluZyBzcGFuIGRhdGEgYW5kIGlkZW50aWZpZXJzLlxuICogQHBhcmFtIHBhcmVudCAtIFRoZSBwYXJlbnQgc3BhbiBvciB0cmFjZS4gSWYgbm90IHByb3ZpZGVkLCB0aGUgY3VycmVudCB0cmFjZS9zcGFuIHdpbGwgYmUgdXNlZFxuICogYXV0b21hdGljYWxseS5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbmV3bHkgY3JlYXRlZCBhZ2VudCBzcGFuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWdlbnRTcGFuKG9wdGlvbnMsIHBhcmVudCkge1xuICAgIHJldHVybiBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlU3Bhbih7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGU6ICdhZ2VudCcsXG4gICAgICAgICAgICBuYW1lOiBvcHRpb25zPy5kYXRhPy5uYW1lID8/ICdBZ2VudCcsXG4gICAgICAgICAgICAuLi5vcHRpb25zPy5kYXRhLFxuICAgICAgICB9LFxuICAgIH0sIHBhcmVudCk7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBhZ2VudCBzcGFuIGFuZCBhdXRvbWF0aWNhbGx5IHN0YXJ0IGFuZCBlbmQgaXQuXG4gKi9cbmV4cG9ydCBjb25zdCB3aXRoQWdlbnRTcGFuID0gX3dpdGhTcGFuRmFjdG9yeShjcmVhdGVBZ2VudFNwYW4pO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgZnVuY3Rpb24gc3Bhbi4gVGhlIHNwYW4gd2lsbCBub3QgYmUgc3RhcnRlZCBhdXRvbWF0aWNhbGx5LCB5b3Ugc2hvdWxkIGVpdGhlclxuICogdXNlIGB3aXRoRnVuY3Rpb25TcGFuKClgIG9yIGNhbGwgYHNwYW4uc3RhcnQoKWAgYW5kIGBzcGFuLmVuZCgpYCBtYW51YWxseS5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNwYW4gY3JlYXRpb24gb3B0aW9ucywgaW5jbHVkaW5nIHNwYW4gZGF0YSBhbmQgaWRlbnRpZmllcnMuXG4gKiBAcGFyYW0gcGFyZW50IC0gVGhlIHBhcmVudCBzcGFuIG9yIHRyYWNlLiBJZiBub3QgcHJvdmlkZWQsIHRoZSBjdXJyZW50IHRyYWNlL3NwYW4gd2lsbCBiZSB1c2VkXG4gKiBhdXRvbWF0aWNhbGx5LlxuICpcbiAqIEByZXR1cm5zIFRoZSBuZXdseSBjcmVhdGVkIGZ1bmN0aW9uIHNwYW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGdW5jdGlvblNwYW4ob3B0aW9ucywgcGFyZW50KSB7XG4gICAgcmV0dXJuIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5jcmVhdGVTcGFuKHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uJyxcbiAgICAgICAgICAgIGlucHV0OiBvcHRpb25zPy5kYXRhPy5pbnB1dCA/PyAnJyxcbiAgICAgICAgICAgIG91dHB1dDogb3B0aW9ucz8uZGF0YT8ub3V0cHV0ID8/ICcnLFxuICAgICAgICAgICAgLi4ub3B0aW9ucz8uZGF0YSxcbiAgICAgICAgfSxcbiAgICB9LCBwYXJlbnQpO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgZnVuY3Rpb24gc3BhbiBhbmQgYXV0b21hdGljYWxseSBzdGFydCBhbmQgZW5kIGl0LlxuICovXG5leHBvcnQgY29uc3Qgd2l0aEZ1bmN0aW9uU3BhbiA9IF93aXRoU3BhbkZhY3RvcnkoY3JlYXRlRnVuY3Rpb25TcGFuKTtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGhhbmRvZmYgc3Bhbi4gVGhlIHNwYW4gd2lsbCBub3QgYmUgc3RhcnRlZCBhdXRvbWF0aWNhbGx5LCB5b3Ugc2hvdWxkIGVpdGhlclxuICogdXNlIGB3aXRoSGFuZG9mZlNwYW4oKWAgb3IgY2FsbCBgc3Bhbi5zdGFydCgpYCBhbmQgYHNwYW4uZW5kKClgIG1hbnVhbGx5LlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc3BhbiBjcmVhdGlvbiBvcHRpb25zLCBpbmNsdWRpbmcgc3BhbiBkYXRhIGFuZCBpZGVudGlmaWVycy5cbiAqIEBwYXJhbSBwYXJlbnQgLSBUaGUgcGFyZW50IHNwYW4gb3IgdHJhY2UuIElmIG5vdCBwcm92aWRlZCwgdGhlIGN1cnJlbnQgdHJhY2Uvc3BhbiB3aWxsIGJlIHVzZWRcbiAqIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQHJldHVybnMgVGhlIG5ld2x5IGNyZWF0ZWQgaGFuZG9mZiBzcGFuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSGFuZG9mZlNwYW4ob3B0aW9ucywgcGFyZW50KSB7XG4gICAgcmV0dXJuIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5jcmVhdGVTcGFuKHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZGF0YTogeyB0eXBlOiAnaGFuZG9mZicsIC4uLm9wdGlvbnM/LmRhdGEgfSxcbiAgICB9LCBwYXJlbnQpO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaGFuZG9mZiBzcGFuIGFuZCBhdXRvbWF0aWNhbGx5IHN0YXJ0IGFuZCBlbmQgaXQuXG4gKi9cbmV4cG9ydCBjb25zdCB3aXRoSGFuZG9mZlNwYW4gPSBfd2l0aFNwYW5GYWN0b3J5KGNyZWF0ZUhhbmRvZmZTcGFuKTtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGdlbmVyYXRpb24gc3Bhbi4gVGhlIHNwYW4gd2lsbCBub3QgYmUgc3RhcnRlZCBhdXRvbWF0aWNhbGx5LCB5b3Ugc2hvdWxkIGVpdGhlclxuICogdXNlIGB3aXRoR2VuZXJhdGlvblNwYW4oKWAgb3IgY2FsbCBgc3Bhbi5zdGFydCgpYCBhbmQgYHNwYW4uZW5kKClgIG1hbnVhbGx5LlxuICpcbiAqIFRoaXMgc3BhbiBjYXB0dXJlcyB0aGUgZGV0YWlscyBvZiBhIG1vZGVsIGdlbmVyYXRpb24sIGluY2x1ZGluZyBpbnB1dC9vdXRwdXQgbWVzc2FnZVxuICogc2VxdWVuY2VzLCBtb2RlbCBpbmZvcm1hdGlvbiwgYW5kIHVzYWdlIGRhdGEuIElmIHlvdSBvbmx5IG5lZWQgdG8gY2FwdHVyZSBhIG1vZGVsIHJlc3BvbnNlXG4gKiBpZGVudGlmaWVyLCBjb25zaWRlciB1c2luZyBgY3JlYXRlUmVzcG9uc2VTcGFuKClgIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHZW5lcmF0aW9uU3BhbihvcHRpb25zLCBwYXJlbnQpIHtcbiAgICByZXR1cm4gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVNwYW4oe1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0eXBlOiAnZ2VuZXJhdGlvbicsXG4gICAgICAgICAgICAuLi5vcHRpb25zPy5kYXRhLFxuICAgICAgICB9LFxuICAgIH0sIHBhcmVudCk7XG59XG4vKiogQXV0b21hdGljYWxseSBjcmVhdGUgYSBnZW5lcmF0aW9uIHNwYW4sIHJ1biBmbiBhbmQgY2xvc2UgdGhlIHNwYW4gKi9cbmV4cG9ydCBjb25zdCB3aXRoR2VuZXJhdGlvblNwYW4gPSBfd2l0aFNwYW5GYWN0b3J5KGNyZWF0ZUdlbmVyYXRpb25TcGFuKTtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGN1c3RvbSBzcGFuLiBUaGUgc3BhbiB3aWxsIG5vdCBiZSBzdGFydGVkIGF1dG9tYXRpY2FsbHksIHlvdSBzaG91bGQgZWl0aGVyIHVzZVxuICogYHdpdGhDdXN0b21TcGFuKClgIG9yIGNhbGwgYHNwYW4uc3RhcnQoKWAgYW5kIGBzcGFuLmVuZCgpYCBtYW51YWxseS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUN1c3RvbVNwYW4ob3B0aW9ucywgcGFyZW50KSB7XG4gICAgcmV0dXJuIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5jcmVhdGVTcGFuKHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdHlwZTogJ2N1c3RvbScsXG4gICAgICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnM/LmRhdGEsXG4gICAgICAgIH0sXG4gICAgfSwgcGFyZW50KTtcbn1cbmV4cG9ydCBjb25zdCB3aXRoQ3VzdG9tU3BhbiA9IF93aXRoU3BhbkZhY3RvcnkoY3JlYXRlQ3VzdG9tU3Bhbik7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBndWFyZHJhaWwgc3Bhbi4gVGhlIHNwYW4gd2lsbCBub3QgYmUgc3RhcnRlZCBhdXRvbWF0aWNhbGx5LCB5b3Ugc2hvdWxkIGVpdGhlciB1c2VcbiAqIGB3aXRoR3VhcmRyYWlsU3BhbigpYCBvciBjYWxsIGBzcGFuLnN0YXJ0KClgIGFuZCBgc3Bhbi5lbmQoKWAgbWFudWFsbHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHdWFyZHJhaWxTcGFuKG9wdGlvbnMsIHBhcmVudCkge1xuICAgIHJldHVybiBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlU3Bhbih7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGU6ICdndWFyZHJhaWwnLFxuICAgICAgICAgICAgdHJpZ2dlcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnM/LmRhdGEsXG4gICAgICAgIH0sXG4gICAgfSwgcGFyZW50KTtcbn1cbmV4cG9ydCBjb25zdCB3aXRoR3VhcmRyYWlsU3BhbiA9IF93aXRoU3BhbkZhY3RvcnkoY3JlYXRlR3VhcmRyYWlsU3Bhbik7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyB0cmFuc2NyaXB0aW9uIHNwYW4uIFRoZSBzcGFuIHdpbGwgbm90IGJlIHN0YXJ0ZWQgYXV0b21hdGljYWxseS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zY3JpcHRpb25TcGFuKG9wdGlvbnMsIHBhcmVudCkge1xuICAgIHJldHVybiBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlU3Bhbih7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGU6ICd0cmFuc2NyaXB0aW9uJyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMuZGF0YSxcbiAgICAgICAgfSxcbiAgICB9LCBwYXJlbnQpO1xufVxuZXhwb3J0IGNvbnN0IHdpdGhUcmFuc2NyaXB0aW9uU3BhbiA9IF93aXRoU3BhbkZhY3RvcnkoY3JlYXRlVHJhbnNjcmlwdGlvblNwYW4pO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgc3BlZWNoIHNwYW4uIFRoZSBzcGFuIHdpbGwgbm90IGJlIHN0YXJ0ZWQgYXV0b21hdGljYWxseS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNwZWVjaFNwYW4ob3B0aW9ucywgcGFyZW50KSB7XG4gICAgcmV0dXJuIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5jcmVhdGVTcGFuKHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdHlwZTogJ3NwZWVjaCcsXG4gICAgICAgICAgICAuLi5vcHRpb25zLmRhdGEsXG4gICAgICAgIH0sXG4gICAgfSwgcGFyZW50KTtcbn1cbmV4cG9ydCBjb25zdCB3aXRoU3BlZWNoU3BhbiA9IF93aXRoU3BhbkZhY3RvcnkoY3JlYXRlU3BlZWNoU3Bhbik7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBzcGVlY2ggZ3JvdXAgc3Bhbi4gVGhlIHNwYW4gd2lsbCBub3QgYmUgc3RhcnRlZCBhdXRvbWF0aWNhbGx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3BlZWNoR3JvdXBTcGFuKG9wdGlvbnMsIHBhcmVudCkge1xuICAgIHJldHVybiBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlU3Bhbih7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGU6ICdzcGVlY2hfZ3JvdXAnLFxuICAgICAgICAgICAgLi4ub3B0aW9ucz8uZGF0YSxcbiAgICAgICAgfSxcbiAgICB9LCBwYXJlbnQpO1xufVxuZXhwb3J0IGNvbnN0IHdpdGhTcGVlY2hHcm91cFNwYW4gPSBfd2l0aFNwYW5GYWN0b3J5KGNyZWF0ZVNwZWVjaEdyb3VwU3Bhbik7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBNQ1AgbGlzdCB0b29scyBzcGFuLiBUaGUgc3BhbiB3aWxsIG5vdCBiZSBzdGFydGVkIGF1dG9tYXRpY2FsbHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNQ1BMaXN0VG9vbHNTcGFuKG9wdGlvbnMsIHBhcmVudCkge1xuICAgIHJldHVybiBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlU3Bhbih7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGU6ICdtY3BfdG9vbHMnLFxuICAgICAgICAgICAgLi4ub3B0aW9ucz8uZGF0YSxcbiAgICAgICAgfSxcbiAgICB9LCBwYXJlbnQpO1xufVxuZXhwb3J0IGNvbnN0IHdpdGhNQ1BMaXN0VG9vbHNTcGFuID0gX3dpdGhTcGFuRmFjdG9yeShjcmVhdGVNQ1BMaXN0VG9vbHNTcGFuKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZVNwYW5zLm1qcy5tYXAiLCJpbXBvcnQgeyBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXIubWpzXCI7XG5leHBvcnQgeyBnZXRDdXJyZW50U3BhbiwgZ2V0Q3VycmVudFRyYWNlLCBnZXRPckNyZWF0ZVRyYWNlLCByZXNldEN1cnJlbnRTcGFuLCBzZXRDdXJyZW50U3Bhbiwgd2l0aFRyYWNlLCB9IGZyb20gXCIuL2NvbnRleHQubWpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jcmVhdGVTcGFucy5tanNcIjtcbmV4cG9ydCB7IEJhdGNoVHJhY2VQcm9jZXNzb3IsIENvbnNvbGVTcGFuRXhwb3J0ZXIsIH0gZnJvbSBcIi4vcHJvY2Vzc29yLm1qc1wiO1xuZXhwb3J0IHsgTm9vcFNwYW4sIFNwYW4gfSBmcm9tIFwiLi9zcGFucy5tanNcIjtcbmV4cG9ydCB7IE5vb3BUcmFjZSwgVHJhY2UgfSBmcm9tIFwiLi90cmFjZXMubWpzXCI7XG5leHBvcnQgeyBnZW5lcmF0ZUdyb3VwSWQsIGdlbmVyYXRlU3BhbklkLCBnZW5lcmF0ZVRyYWNlSWQgfSBmcm9tIFwiLi91dGlscy5tanNcIjtcbi8qKlxuICogQWRkIGEgcHJvY2Vzc29yIHRvIHRoZSBsaXN0IG9mIHByb2Nlc3NvcnMuIEVhY2ggcHJvY2Vzc29yIHdpbGwgcmVjZWl2ZSBhbGwgdHJhY2VzL3NwYW5zLlxuICpcbiAqIEBwYXJhbSBwcm9jZXNzb3IgLSBUaGUgcHJvY2Vzc29yIHRvIGFkZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFRyYWNlUHJvY2Vzc29yKHByb2Nlc3Nvcikge1xuICAgIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5yZWdpc3RlclByb2Nlc3Nvcihwcm9jZXNzb3IpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGxpc3Qgb2YgcHJvY2Vzc29ycy4gVGhpcyB3aWxsIHJlcGxhY2UgYW55IGV4aXN0aW5nIHByb2Nlc3NvcnMuXG4gKlxuICogQHBhcmFtIHByb2Nlc3NvcnMgLSBUaGUgbGlzdCBvZiBwcm9jZXNzb3JzIHRvIHNldC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFRyYWNlUHJvY2Vzc29ycyhwcm9jZXNzb3JzKSB7XG4gICAgZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLnNldFByb2Nlc3NvcnMocHJvY2Vzc29ycyk7XG59XG4vKipcbiAqIFNldCB0aGUgZGlzYWJsZWQgc3RhdGUgb2YgdGhlIHRyYWNpbmcgcHJvdmlkZXIuXG4gKlxuICogQHBhcmFtIGRpc2FibGVkIC0gV2hldGhlciB0byBkaXNhYmxlIHRyYWNpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRUcmFjaW5nRGlzYWJsZWQoZGlzYWJsZWQpIHtcbiAgICBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuc2V0RGlzYWJsZWQoZGlzYWJsZWQpO1xufVxuLyoqXG4gKiBTdGFydCB0aGUgdHJhY2UgZXhwb3J0IGxvb3AuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFRyYWNlRXhwb3J0TG9vcCgpIHtcbiAgICBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuc3RhcnRFeHBvcnRMb29wKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIiwiaW1wb3J0IHsgUnVudGltZUV2ZW50RW1pdHRlciwgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL19zaGltcyc7XG5leHBvcnQgY2xhc3MgRXZlbnRFbWl0dGVyRGVsZWdhdGUge1xuICAgIG9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLm9uKHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRFbWl0dGVyO1xuICAgIH1cbiAgICBvZmYodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIub2ZmKHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRFbWl0dGVyO1xuICAgIH1cbiAgICBlbWl0KHR5cGUsIC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQodHlwZSwgLi4uYXJncyk7XG4gICAgfVxuICAgIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIub25jZSh0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50RW1pdHRlcjtcbiAgICB9XG59XG4vKipcbiAqIEV2ZW50IGVtaXR0ZXIgdGhhdCBldmVyeSBBZ2VudCBpbnN0YW5jZSBpbmhlcml0cyBmcm9tIGFuZCB0aGF0IGVtaXRzIGV2ZW50cyBmb3IgdGhlIGxpZmVjeWNsZVxuICogb2YgdGhlIGFnZW50LlxuICovXG5leHBvcnQgY2xhc3MgQWdlbnRIb29rcyBleHRlbmRzIEV2ZW50RW1pdHRlckRlbGVnYXRlIHtcbiAgICBldmVudEVtaXR0ZXIgPSBuZXcgUnVudGltZUV2ZW50RW1pdHRlcigpO1xufVxuLyoqXG4gKiBFdmVudCBlbWl0dGVyIHRoYXQgZXZlcnkgUnVubmVyIGluc3RhbmNlIGluaGVyaXRzIGZyb20gYW5kIHRoYXQgZW1pdHMgZXZlbnRzIGZvciB0aGUgbGlmZWN5Y2xlXG4gKiBvZiB0aGUgb3ZlcmFsbCBydW4uXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW5Ib29rcyBleHRlbmRzIEV2ZW50RW1pdHRlckRlbGVnYXRlIHtcbiAgICBldmVudEVtaXR0ZXIgPSBuZXcgUnVudGltZUV2ZW50RW1pdHRlcigpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlmZWN5Y2xlLm1qcy5tYXAiLCIvKipcbiAqIERlZmluZXMgYW4gaW5wdXQgZ3VhcmRyYWlsIGRlZmluaXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVJbnB1dEd1YXJkcmFpbCh7IG5hbWUsIGV4ZWN1dGUsIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnaW5wdXQnLFxuICAgICAgICBuYW1lLFxuICAgICAgICBndWFyZHJhaWxGdW5jdGlvbjogZXhlY3V0ZSxcbiAgICAgICAgYXN5bmMgcnVuKGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZ3VhcmRyYWlsOiB7IHR5cGU6ICdpbnB1dCcsIG5hbWUgfSxcbiAgICAgICAgICAgICAgICBvdXRwdXQ6IGF3YWl0IGV4ZWN1dGUoYXJncyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gb3V0cHV0IGd1YXJkcmFpbCBkZWZpbml0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lT3V0cHV0R3VhcmRyYWlsKHsgbmFtZSwgZXhlY3V0ZSwgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdvdXRwdXQnLFxuICAgICAgICBuYW1lLFxuICAgICAgICBndWFyZHJhaWxGdW5jdGlvbjogZXhlY3V0ZSxcbiAgICAgICAgYXN5bmMgcnVuKGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZ3VhcmRyYWlsOiB7IHR5cGU6ICdvdXRwdXQnLCBuYW1lIH0sXG4gICAgICAgICAgICAgICAgYWdlbnQ6IGFyZ3MuYWdlbnQsXG4gICAgICAgICAgICAgICAgYWdlbnRPdXRwdXQ6IGFyZ3MuYWdlbnRPdXRwdXQsXG4gICAgICAgICAgICAgICAgb3V0cHV0OiBhd2FpdCBleGVjdXRlKGFyZ3MpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3VhcmRyYWlsLm1qcy5tYXAiLCJpbXBvcnQgeyBNb2RlbEJlaGF2aW9yRXJyb3IsIFVzZXJFcnJvciB9IGZyb20gXCIuL2Vycm9ycy5tanNcIjtcbmltcG9ydCB7IHRvRnVuY3Rpb25Ub29sTmFtZSB9IGZyb20gXCIuL3V0aWxzL3Rvb2xzLm1qc1wiO1xuaW1wb3J0IHsgZ2V0U2NoZW1hQW5kUGFyc2VyRnJvbUlucHV0VHlwZSB9IGZyb20gXCIuL3V0aWxzL3Rvb2xzLm1qc1wiO1xuaW1wb3J0IHsgYWRkRXJyb3JUb0N1cnJlbnRTcGFuIH0gZnJvbSBcIi4vdHJhY2luZy9jb250ZXh0Lm1qc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG4vKipcbiAqIEdlbmVyYXRlcyB0aGUgbWVzc2FnZSB0aGF0IHdpbGwgYmUgZ2l2ZW4gYXMgdG9vbCBvdXRwdXQgdG8gdGhlIG1vZGVsIHRoYXQgcmVxdWVzdGVkIHRoZSBoYW5kb2ZmLlxuICpcbiAqIEBwYXJhbSBhZ2VudCBUaGUgYWdlbnQgdG8gdHJhbnNmZXIgdG9cbiAqIEByZXR1cm5zIFRoZSBtZXNzYWdlIHRoYXQgd2lsbCBiZSBnaXZlbiBhcyB0b29sIG91dHB1dCB0byB0aGUgbW9kZWwgdGhhdCByZXF1ZXN0ZWQgdGhlIGhhbmRvZmZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zZmVyTWVzc2FnZShhZ2VudCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7IGFzc2lzdGFudDogYWdlbnQubmFtZSB9KTtcbn1cbi8qKlxuICogVGhlIGRlZmF1bHQgbmFtZSBvZiB0aGUgdG9vbCB0aGF0IHJlcHJlc2VudHMgdGhlIGhhbmRvZmYuXG4gKlxuICogQHBhcmFtIGFnZW50IFRoZSBhZ2VudCB0byB0cmFuc2ZlciB0b1xuICogQHJldHVybnMgVGhlIG5hbWUgb2YgdGhlIHRvb2wgdGhhdCByZXByZXNlbnRzIHRoZSBoYW5kb2ZmXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRIYW5kb2ZmVG9vbE5hbWUoYWdlbnQpIHtcbiAgICByZXR1cm4gYHRyYW5zZmVyX3RvXyR7dG9GdW5jdGlvblRvb2xOYW1lKGFnZW50Lm5hbWUpfWA7XG59XG4vKipcbiAqIEdlbmVyYXRlcyB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHRvb2wgdGhhdCByZXByZXNlbnRzIHRoZSBoYW5kb2ZmLlxuICpcbiAqIEBwYXJhbSBhZ2VudCBUaGUgYWdlbnQgdG8gdHJhbnNmZXIgdG9cbiAqIEByZXR1cm5zIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgdG9vbCB0aGF0IHJlcHJlc2VudHMgdGhlIGhhbmRvZmZcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdEhhbmRvZmZUb29sRGVzY3JpcHRpb24oYWdlbnQpIHtcbiAgICByZXR1cm4gYEhhbmRvZmYgdG8gdGhlICR7YWdlbnQubmFtZX0gYWdlbnQgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LiAke2FnZW50LmhhbmRvZmZEZXNjcmlwdGlvbiA/PyAnJ31gO1xufVxuLyoqXG4gKiBBIGhhbmRvZmYgaXMgd2hlbiBhbiBhZ2VudCBkZWxlZ2F0ZXMgYSB0YXNrIHRvIGFub3RoZXIgYWdlbnQuXG4gKiBGb3IgZXhhbXBsZSwgaW4gYSBjdXN0b21lciBzdXBwb3J0IHNjZW5hcmlvIHlvdSBtaWdodCBoYXZlIGEgXCJ0cmlhZ2UgYWdlbnRcIiB0aGF0IGRldGVybWluZXMgd2hpY2hcbiAqIGFnZW50IHNob3VsZCBoYW5kbGUgdGhlIHVzZXIncyByZXF1ZXN0LCBhbmQgc3ViLWFnZW50cyB0aGF0IHNwZWNpYWxpemUgaW4gZGlmZmVyZW50IGFyZWFzIGxpa2VcbiAqIGJpbGxpbmcsIGFjY291bnQgbWFuYWdlbWVudCwgZXRjLlxuICpcbiAqIEB0ZW1wbGF0ZSBUQ29udGV4dCBUaGUgY29udGV4dCBvZiB0aGUgaGFuZG9mZlxuICogQHRlbXBsYXRlIFRPdXRwdXQgVGhlIG91dHB1dCB0eXBlIG9mIHRoZSBoYW5kb2ZmXG4gKi9cbmV4cG9ydCBjbGFzcyBIYW5kb2ZmIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgdG9vbCB0aGF0IHJlcHJlc2VudHMgdGhlIGhhbmRvZmYuXG4gICAgICovXG4gICAgdG9vbE5hbWU7XG4gICAgLyoqXG4gICAgICogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB0b29sIHRoYXQgcmVwcmVzZW50cyB0aGUgaGFuZG9mZi5cbiAgICAgKi9cbiAgICB0b29sRGVzY3JpcHRpb247XG4gICAgLyoqXG4gICAgICogVGhlIEpTT04gc2NoZW1hIGZvciB0aGUgaGFuZG9mZiBpbnB1dC4gQ2FuIGJlIGVtcHR5IGlmIHRoZSBoYW5kb2ZmIGRvZXMgbm90IHRha2UgYW4gaW5wdXRcbiAgICAgKi9cbiAgICBpbnB1dEpzb25TY2hlbWEgPSB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgcmVxdWlyZWQ6IFtdLFxuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UsXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBpbnB1dCBKU09OIHNjaGVtYSBpcyBpbiBzdHJpY3QgbW9kZS4gV2UgKipzdHJvbmdseSoqIHJlY29tbWVuZCBzZXR0aW5nIHRoaXMgdG9cbiAgICAgKiB0cnVlLCBhcyBpdCBpbmNyZWFzZXMgdGhlIGxpa2VsaWhvb2Qgb2YgY29ycmVjdCBKU09OIGlucHV0LlxuICAgICAqL1xuICAgIHN0cmljdEpzb25TY2hlbWEgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIGhhbmRvZmYuIFRoZSBwYXJhbWV0ZXJzIHBhc3NlZCBhcmU6XG4gICAgICogMS4gVGhlIGhhbmRvZmYgcnVuIGNvbnRleHRcbiAgICAgKiAyLiBUaGUgYXJndW1lbnRzIGZyb20gdGhlIExMTSwgYXMgYSBKU09OIHN0cmluZy4gRW1wdHkgc3RyaW5nIGlmIGlucHV0SnNvblNjaGVtYSBpcyBlbXB0eS5cbiAgICAgKlxuICAgICAqIE11c3QgcmV0dXJuIGFuIGFnZW50XG4gICAgICovXG4gICAgb25JbnZva2VIYW5kb2ZmO1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBhZ2VudCB0aGF0IGlzIGJlaW5nIGhhbmRlZCBvZmYgdG8uXG4gICAgICovXG4gICAgYWdlbnROYW1lO1xuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBmaWx0ZXJzIHRoZSBpbnB1dHMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoZSBuZXh0IGFnZW50LiBCeSBkZWZhdWx0LCB0aGUgbmV3IGFnZW50XG4gICAgICogc2VlcyB0aGUgZW50aXJlIGNvbnZlcnNhdGlvbiBoaXN0b3J5LiBJbiBzb21lIGNhc2VzLCB5b3UgbWF5IHdhbnQgdG8gZmlsdGVyIGlucHV0cyBlLmcuIHRvXG4gICAgICogcmVtb3ZlIG9sZGVyIGlucHV0cywgb3IgcmVtb3ZlIHRvb2xzIGZyb20gZXhpc3RpbmcgaW5wdXRzLlxuICAgICAqXG4gICAgICogVGhlIGZ1bmN0aW9uIHdpbGwgcmVjZWl2ZSB0aGUgZW50aXJlIGNvbnZlcnNhdGlvbiBoaXNzdG9yeSBzbyBmYXIsIGluY2x1ZGluZyB0aGUgaW5wdXQgaXRlbVxuICAgICAqIHRoYXQgdHJpZ2dlcmVkIHRoZSBoYW5kb2ZmIGFuZCBhIHRvb2wgY2FsbCBvdXRwdXQgaXRlbSByZXByZXNlbnRpbmcgdGhlIGhhbmRvZmYgdG9vbCdzIG91dHB1dC5cbiAgICAgKlxuICAgICAqIFlvdSBhcmUgZnJlZSB0byBtb2RpZnkgdGhlIGlucHV0IGhpc3Rvcnkgb3IgbmV3IGl0ZW1zIGFzIHlvdSBzZWUgZml0LiBUaGUgbmV4dCBhZ2VudCB0aGF0IHJ1bnNcbiAgICAgKiB3aWxsIHJlY2VpdmUgYGhhbmRvZmZJbnB1dERhdGEuYWxsSXRlbXNcbiAgICAgKi9cbiAgICBpbnB1dEZpbHRlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgYWdlbnQgdGhhdCBpcyBiZWluZyBoYW5kZWQgb2ZmIHRvLlxuICAgICAqL1xuICAgIGFnZW50O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBmdW5jdGlvbiB0b29sIGRlZmluaXRpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBpbnZva2UgdGhlIGhhbmRvZmYuXG4gICAgICovXG4gICAgZ2V0SGFuZG9mZkFzRnVuY3Rpb25Ub29sKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uJyxcbiAgICAgICAgICAgIG5hbWU6IHRoaXMudG9vbE5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy50b29sRGVzY3JpcHRpb24sXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB0aGlzLmlucHV0SnNvblNjaGVtYSxcbiAgICAgICAgICAgIHN0cmljdDogdGhpcy5zdHJpY3RKc29uU2NoZW1hLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihhZ2VudCwgb25JbnZva2VIYW5kb2ZmKSB7XG4gICAgICAgIHRoaXMuYWdlbnROYW1lID0gYWdlbnQubmFtZTtcbiAgICAgICAgdGhpcy5vbkludm9rZUhhbmRvZmYgPSBvbkludm9rZUhhbmRvZmY7XG4gICAgICAgIHRoaXMudG9vbE5hbWUgPSBkZWZhdWx0SGFuZG9mZlRvb2xOYW1lKGFnZW50KTtcbiAgICAgICAgdGhpcy50b29sRGVzY3JpcHRpb24gPSBkZWZhdWx0SGFuZG9mZlRvb2xEZXNjcmlwdGlvbihhZ2VudCk7XG4gICAgICAgIHRoaXMuYWdlbnQgPSBhZ2VudDtcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoYW5kb2ZmIGZyb20gYW4gYWdlbnQuIEhhbmRvZmZzIGFyZSBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQgd2hlbiB5b3UgcGFzcyBhbiBhZ2VudFxuICogaW50byB0aGUgYGhhbmRvZmZzYCBvcHRpb24gb2YgdGhlIGBBZ2VudGAgY29uc3RydWN0b3IuIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoaXMgZnVuY3Rpb25cbiAqIHRvIGNyZWF0ZSBhIGhhbmRvZmYgbWFudWFsbHksIGdpdmluZyB5b3UgbW9yZSBjb250cm9sIG92ZXIgY29uZmlndXJhdGlvbi5cbiAqXG4gKiBAdGVtcGxhdGUgVENvbnRleHQgVGhlIGNvbnRleHQgb2YgdGhlIGhhbmRvZmZcbiAqIEB0ZW1wbGF0ZSBUT3V0cHV0IFRoZSBvdXRwdXQgdHlwZSBvZiB0aGUgaGFuZG9mZlxuICogQHRlbXBsYXRlIFRJbnB1dFR5cGUgVGhlIGlucHV0IHR5cGUgb2YgdGhlIGhhbmRvZmZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRvZmYoYWdlbnQsIGNvbmZpZyA9IHt9KSB7XG4gICAgbGV0IHBhcnNlciA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBoYXNPbkhhbmRvZmYgPSAhIWNvbmZpZy5vbkhhbmRvZmY7XG4gICAgY29uc3QgaGFzSW5wdXRUeXBlID0gISFjb25maWcuaW5wdXRUeXBlO1xuICAgIGNvbnN0IGhhc0JvdGhPck5laXRoZXJIYW5kb2ZmQW5kSW5wdXRUeXBlID0gaGFzT25IYW5kb2ZmID09PSBoYXNJbnB1dFR5cGU7XG4gICAgaWYgKCFoYXNCb3RoT3JOZWl0aGVySGFuZG9mZkFuZElucHV0VHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdZb3UgbXVzdCBwcm92aWRlIGVpdGhlciBib3RoIGBvbkhhbmRvZmZgIGFuZCBgaW5wdXRUeXBlYCBvciBuZWl0aGVyLicpO1xuICAgIH1cbiAgICBhc3luYyBmdW5jdGlvbiBvbkludm9rZUhhbmRvZmYoY29udGV4dCwgaW5wdXRKc29uU3RyaW5nKSB7XG4gICAgICAgIGlmIChwYXJzZXIpIHtcbiAgICAgICAgICAgIGlmICghaW5wdXRKc29uU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgYWRkRXJyb3JUb0N1cnJlbnRTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEhhbmRvZmYgZnVuY3Rpb24gZXhwZWN0ZWQgbm9uIGVtcHR5IGlucHV0IGJ1dCBnb3Q6ICR7aW5wdXRKc29uU3RyaW5nfWAsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IGBpbnB1dCBpcyBlbXB0eWAsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1vZGVsQmVoYXZpb3JFcnJvcignSGFuZG9mZiBmdW5jdGlvbiBleHBlY3RlZCBub24gZW1wdHkgaW5wdXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gdmVyaWZ5IHRoYXQgaXQncyB2YWxpZCBpbnB1dCBidXQgd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGUgcmVzdWx0XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gYXdhaXQgcGFyc2VyKGlucHV0SnNvblN0cmluZyk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5vbkhhbmRvZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgY29uZmlnLm9uSGFuZG9mZihjb250ZXh0LCBwYXJzZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGFkZEVycm9yVG9DdXJyZW50U3Bhbih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBJbnZhbGlkIEpTT04gcHJvdmlkZWRgLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIWxvZ2dlci5kb250TG9nVG9vbERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBJbnZhbGlkIEpTT04gd2hlbiBwYXJzaW5nOiAke2lucHV0SnNvblN0cmluZ30uIEVycm9yOiAke2Vycm9yfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKCdJbnZhbGlkIEpTT04gcHJvdmlkZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IGNvbmZpZy5vbkhhbmRvZmY/Lihjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWdlbnQ7XG4gICAgfVxuICAgIGNvbnN0IGhhbmRvZmYgPSBuZXcgSGFuZG9mZihhZ2VudCwgb25JbnZva2VIYW5kb2ZmKTtcbiAgICBpZiAoY29uZmlnLmlucHV0VHlwZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBnZXRTY2hlbWFBbmRQYXJzZXJGcm9tSW5wdXRUeXBlKGNvbmZpZy5pbnB1dFR5cGUsIGhhbmRvZmYudG9vbE5hbWUpO1xuICAgICAgICBoYW5kb2ZmLmlucHV0SnNvblNjaGVtYSA9IHJlc3VsdC5zY2hlbWE7XG4gICAgICAgIGhhbmRvZmYuc3RyaWN0SnNvblNjaGVtYSA9IHRydWU7XG4gICAgICAgIHBhcnNlciA9IHJlc3VsdC5wYXJzZXI7XG4gICAgfVxuICAgIGlmIChjb25maWcudG9vbE5hbWVPdmVycmlkZSkge1xuICAgICAgICBoYW5kb2ZmLnRvb2xOYW1lID0gY29uZmlnLnRvb2xOYW1lT3ZlcnJpZGU7XG4gICAgfVxuICAgIGlmIChjb25maWcudG9vbERlc2NyaXB0aW9uT3ZlcnJpZGUpIHtcbiAgICAgICAgaGFuZG9mZi50b29sRGVzY3JpcHRpb24gPSBjb25maWcudG9vbERlc2NyaXB0aW9uT3ZlcnJpZGU7XG4gICAgfVxuICAgIGlmIChjb25maWcuaW5wdXRGaWx0ZXIpIHtcbiAgICAgICAgaGFuZG9mZi5pbnB1dEZpbHRlciA9IGNvbmZpZy5pbnB1dEZpbHRlcjtcbiAgICB9XG4gICAgcmV0dXJuIGhhbmRvZmY7XG59XG4vKipcbiAqIFJldHVybnMgYSBoYW5kb2ZmIGZvciB0aGUgZ2l2ZW4gYWdlbnQuIElmIHRoZSBhZ2VudCBpcyBhbHJlYWR5IHdyYXBwZWQgaW50byBhIGhhbmRvZmYsXG4gKiBpdCB3aWxsIGJlIHJldHVybmVkIGFzIGlzLiBPdGhlcndpc2UsIGEgbmV3IGhhbmRvZmYgaW5zdGFuY2Ugd2lsbCBiZSBjcmVhdGVkLlxuICpcbiAqIEB0ZW1wbGF0ZSBUQ29udGV4dCBUaGUgY29udGV4dCBvZiB0aGUgaGFuZG9mZlxuICogQHRlbXBsYXRlIFRPdXRwdXQgVGhlIG91dHB1dCB0eXBlIG9mIHRoZSBoYW5kb2ZmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRIYW5kb2ZmKGFnZW50KSB7XG4gICAgaWYgKGFnZW50IGluc3RhbmNlb2YgSGFuZG9mZikge1xuICAgICAgICByZXR1cm4gYWdlbnQ7XG4gICAgfVxuICAgIHJldHVybiBoYW5kb2ZmKGFnZW50KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhbmRvZmYubWpzLm1hcCIsImxldCBERUZBVUxUX1BST1ZJREVSO1xuLyoqXG4gKiBTZXQgdGhlIG1vZGVsIHByb3ZpZGVyIHVzZWQgd2hlbiBubyBleHBsaWNpdCBwcm92aWRlciBpcyBzdXBwbGllZC5cbiAqXG4gKiBAcGFyYW0gcHJvdmlkZXIgLSBUaGUgcHJvdmlkZXIgdG8gdXNlIGJ5IGRlZmF1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0TW9kZWxQcm92aWRlcihwcm92aWRlcikge1xuICAgIERFRkFVTFRfUFJPVklERVIgPSBwcm92aWRlcjtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZGVmYXVsdCBtb2RlbCBwcm92aWRlci5cbiAqXG4gKiBAcmV0dXJucyBUaGUgZGVmYXVsdCBtb2RlbCBwcm92aWRlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRNb2RlbFByb3ZpZGVyKCkge1xuICAgIGlmICh0eXBlb2YgREVGQVVMVF9QUk9WSURFUiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBkZWZhdWx0IG1vZGVsIHByb3ZpZGVyIHNldC4gTWFrZSBzdXJlIHRvIHNldCBhIHByb3ZpZGVyIHVzaW5nIHNldERlZmF1bHRNb2RlbFByb3ZpZGVyIGJlZm9yZSBjYWxsaW5nIGdldERlZmF1bHRNb2RlbFByb3ZpZGVyIG9yIHBhc3MgYW4gZXhwbGljaXQgcHJvdmlkZXIuJyk7XG4gICAgfVxuICAgIHJldHVybiBERUZBVUxUX1BST1ZJREVSO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXJzLm1qcy5tYXAiLCJpbXBvcnQgeyB6IH0gZnJvbSAnQG9wZW5haS96b2QvdjMnO1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU2hhcmVkIGJhc2UgdHlwZXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8qKlxuICogRXZlcnkgaXRlbSBpbiB0aGUgcHJvdG9jb2wgcHJvdmlkZXMgYSBgcHJvdmlkZXJEYXRhYCBmaWVsZCB0byBhY2NvbW1vZGF0ZSBjdXN0b20gZnVuY3Rpb25hbGl0eVxuICogb3IgbmV3IGZpZWxkc1xuICovXG5leHBvcnQgY29uc3QgU2hhcmVkQmFzZSA9IHoub2JqZWN0KHtcbiAgICAvKipcbiAgICAgKiBBZGRpdGlvbmFsIG9wdGlvbmFsIHByb3ZpZGVyIHNwZWNpZmljIGRhdGEuIFVzZWQgZm9yIGN1c3RvbSBmdW5jdGlvbmFsaXR5IG9yIG1vZGVsIHByb3ZpZGVyXG4gICAgICogc3BlY2lmaWMgZmllbGRzLlxuICAgICAqL1xuICAgIHByb3ZpZGVyRGF0YTogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSkub3B0aW9uYWwoKSxcbn0pO1xuLyoqXG4gKiBFdmVyeSBpdGVtIGhhcyBhIHNoYXJlZCBvZiBzaGFyZWQgaXRlbSBkYXRhIGluY2x1ZGluZyBhbiBvcHRpb25hbCBJRC5cbiAqL1xuZXhwb3J0IGNvbnN0IEl0ZW1CYXNlID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIEFuIElEIHRvIGlkZW50aWZ5IHRoZSBpdGVtLiBUaGlzIGlzIG9wdGlvbmFsIGJ5IGRlZmF1bHQuIElmIGEgbW9kZWwgcHJvdmlkZXIgYWJzb2x1dGVseVxuICAgICAqIHJlcXVpcmVzIHRoaXMgZmllbGQsIGl0IHdpbGwgYmUgdmFsaWRhdGVkIG9uIHRoZSBtb2RlbCBsZXZlbC5cbiAgICAgKi9cbiAgICBpZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDb250ZW50IHR5cGVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgY29uc3QgUmVmdXNhbCA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3JlZnVzYWwnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgcmVmdXNhbCBleHBsYW5hdGlvbiBmcm9tIHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICByZWZ1c2FsOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgT3V0cHV0VGV4dCA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ291dHB1dF90ZXh0JyksXG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgb3V0cHV0IGZyb20gdGhlIG1vZGVsLlxuICAgICAqL1xuICAgIHRleHQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCBJbnB1dFRleHQgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF90ZXh0JyksXG4gICAgLyoqXG4gICAgICogQSB0ZXh0IGlucHV0IGZvciBleGFtcGxlIGEgbWVzc2FnZSBmcm9tIGEgdXNlclxuICAgICAqL1xuICAgIHRleHQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCBSZWFzb25pbmdUZXh0ID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVhc29uaW5nX3RleHQnKSxcbiAgICAvKipcbiAgICAgKiBBIHRleHQgaW5wdXQgZm9yIGV4YW1wbGUgYSBtZXNzYWdlIGZyb20gYSB1c2VyXG4gICAgICovXG4gICAgdGV4dDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IElucHV0SW1hZ2UgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF9pbWFnZScpLFxuICAgIC8qKlxuICAgICAqIFRoZSBpbWFnZSBpbnB1dCB0byB0aGUgbW9kZWwuIENvdWxkIGJlIGEgVVJMLCBiYXNlNjQgb3IgYW4gb2JqZWN0IHdpdGggYSBmaWxlIElELlxuICAgICAqL1xuICAgIGltYWdlOiB6XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAub3Ioei5vYmplY3Qoe1xuICAgICAgICBpZDogei5zdHJpbmcoKSxcbiAgICB9KSlcbiAgICAgICAgLmRlc2NyaWJlKCdDb3VsZCBiZSBhIFVSTCwgYmFzZTY0IG9yIGFuIG9iamVjdCB3aXRoIGEgZmlsZSBJRC4nKSxcbn0pO1xuZXhwb3J0IGNvbnN0IElucHV0RmlsZSA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0X2ZpbGUnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgZmlsZSBpbnB1dCB0byB0aGUgbW9kZWwuIENvdWxkIGJlIGEgVVJMLCBiYXNlNjQgb3IgYW4gb2JqZWN0IHdpdGggYSBmaWxlIElELlxuICAgICAqL1xuICAgIGZpbGU6IHpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5kZXNjcmliZSgnRWl0aGVyIGJhc2U2NCBlbmNvZGVkIGZpbGUgZGF0YSBvciBhIHB1YmxpY2x5IGFjY2Vzc2libGUgZmlsZSBVUkwnKVxuICAgICAgICAub3Ioei5vYmplY3Qoe1xuICAgICAgICBpZDogei5zdHJpbmcoKS5kZXNjcmliZSgnT3BlbkFJIGZpbGUgSUQnKSxcbiAgICB9KSlcbiAgICAgICAgLm9yKHoub2JqZWN0KHtcbiAgICAgICAgdXJsOiB6LnN0cmluZygpLmRlc2NyaWJlKCdQdWJsaWNseSBhY2Nlc3NpYmxlIFBERiBmaWxlIFVSTCcpLFxuICAgIH0pKVxuICAgICAgICAuZGVzY3JpYmUoJ0NvbnRlbnRzIG9mIHRoZSBmaWxlIG9yIGFuIG9iamVjdCB3aXRoIGEgZmlsZSBJRC4nKSxcbn0pO1xuZXhwb3J0IGNvbnN0IEF1ZGlvQ29udGVudCA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2F1ZGlvJyksXG4gICAgLyoqXG4gICAgICogVGhlIGF1ZGlvIGlucHV0IHRvIHRoZSBtb2RlbC4gQ291bGQgYmUgYmFzZTY0IGVuY29kZWQgYXVkaW8gZGF0YSBvciBhbiBvYmplY3Qgd2l0aCBhIGZpbGUgSUQuXG4gICAgICovXG4gICAgYXVkaW86IHpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5vcih6Lm9iamVjdCh7XG4gICAgICAgIGlkOiB6LnN0cmluZygpLFxuICAgIH0pKVxuICAgICAgICAuZGVzY3JpYmUoJ0Jhc2U2NCBlbmNvZGVkIGF1ZGlvIGRhdGEgb3IgZmlsZSBpZCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSBmb3JtYXQgb2YgdGhlIGF1ZGlvLlxuICAgICAqL1xuICAgIGZvcm1hdDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgLyoqXG4gICAgICogVGhlIHRyYW5zY3JpcHQgb2YgdGhlIGF1ZGlvLlxuICAgICAqL1xuICAgIHRyYW5zY3JpcHQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgSW1hZ2VDb250ZW50ID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnaW1hZ2UnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgaW1hZ2UgaW5wdXQgdG8gdGhlIG1vZGVsLiBDb3VsZCBiZSBiYXNlNjQgZW5jb2RlZCBpbWFnZSBkYXRhIG9yIGFuIG9iamVjdCB3aXRoIGEgZmlsZSBJRC5cbiAgICAgKi9cbiAgICBpbWFnZTogei5zdHJpbmcoKS5kZXNjcmliZSgnQmFzZTY0IGVuY29kZWQgaW1hZ2UgZGF0YScpLFxufSk7XG5leHBvcnQgY29uc3QgVG9vbE91dHB1dFRleHQgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCd0ZXh0JyksXG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgb3V0cHV0IGZyb20gdGhlIG1vZGVsLlxuICAgICAqL1xuICAgIHRleHQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCBUb29sT3V0cHV0SW1hZ2UgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbWFnZScpLFxuICAgIC8qKlxuICAgICAqIFRoZSBpbWFnZSBkYXRhLiBDb3VsZCBiZSBiYXNlNjQgZW5jb2RlZCBpbWFnZSBkYXRhIG9yIGFuIG9iamVjdCB3aXRoIGEgZmlsZSBJRC5cbiAgICAgKi9cbiAgICBkYXRhOiB6LnN0cmluZygpLmRlc2NyaWJlKCdCYXNlNjQgZW5jb2RlZCBpbWFnZSBkYXRhJyksXG4gICAgLyoqXG4gICAgICogVGhlIG1lZGlhIHR5cGUgb2YgdGhlIGltYWdlLlxuICAgICAqL1xuICAgIG1lZGlhVHlwZTogei5zdHJpbmcoKS5kZXNjcmliZSgnSUFOQSBtZWRpYSB0eXBlIG9mIHRoZSBpbWFnZScpLFxufSk7XG5leHBvcnQgY29uc3QgQ29tcHV0ZXJUb29sT3V0cHV0ID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29tcHV0ZXJfc2NyZWVuc2hvdCcpLFxuICAgIC8qKlxuICAgICAqIEEgYmFzZTY0IGVuY29kZWQgaW1hZ2UgZGF0YSBvciBhIFVSTCByZXByZXNlbnRpbmcgdGhlIHNjcmVlbnNob3QuXG4gICAgICovXG4gICAgZGF0YTogei5zdHJpbmcoKS5kZXNjcmliZSgnQmFzZTY0IGVuY29kZWQgaW1hZ2UgZGF0YSBvciBVUkwnKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGNvbXB1dGVyQWN0aW9ucyA9IHouZGlzY3JpbWluYXRlZFVuaW9uKCd0eXBlJywgW1xuICAgIHoub2JqZWN0KHsgdHlwZTogei5saXRlcmFsKCdzY3JlZW5zaG90JykgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ2NsaWNrJyksXG4gICAgICAgIHg6IHoubnVtYmVyKCksXG4gICAgICAgIHk6IHoubnVtYmVyKCksXG4gICAgICAgIGJ1dHRvbjogei5lbnVtKFsnbGVmdCcsICdyaWdodCcsICd3aGVlbCcsICdiYWNrJywgJ2ZvcndhcmQnXSksXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ2RvdWJsZV9jbGljaycpLFxuICAgICAgICB4OiB6Lm51bWJlcigpLFxuICAgICAgICB5OiB6Lm51bWJlcigpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdzY3JvbGwnKSxcbiAgICAgICAgeDogei5udW1iZXIoKSxcbiAgICAgICAgeTogei5udW1iZXIoKSxcbiAgICAgICAgc2Nyb2xsX3g6IHoubnVtYmVyKCksXG4gICAgICAgIHNjcm9sbF95OiB6Lm51bWJlcigpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCd0eXBlJyksXG4gICAgICAgIHRleHQ6IHouc3RyaW5nKCksXG4gICAgfSksXG4gICAgei5vYmplY3QoeyB0eXBlOiB6LmxpdGVyYWwoJ3dhaXQnKSB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnbW92ZScpLFxuICAgICAgICB4OiB6Lm51bWJlcigpLFxuICAgICAgICB5OiB6Lm51bWJlcigpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdrZXlwcmVzcycpLFxuICAgICAgICBrZXlzOiB6LmFycmF5KHouc3RyaW5nKCkpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdkcmFnJyksXG4gICAgICAgIHBhdGg6IHouYXJyYXkoei5vYmplY3QoeyB4OiB6Lm51bWJlcigpLCB5OiB6Lm51bWJlcigpIH0pKSxcbiAgICB9KSxcbl0pO1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gTWVzc2FnZSB0eXBlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGNvbnN0IEFzc2lzdGFudENvbnRlbnQgPSB6LmRpc2NyaW1pbmF0ZWRVbmlvbigndHlwZScsIFtcbiAgICBPdXRwdXRUZXh0LFxuICAgIFJlZnVzYWwsXG4gICAgQXVkaW9Db250ZW50LFxuICAgIEltYWdlQ29udGVudCxcbl0pO1xuY29uc3QgTWVzc2FnZUJhc2UgPSBJdGVtQmFzZS5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIEFueSBpdGVtIHdpdGhvdXQgYSB0eXBlIGlzIHRyZWF0ZWQgYXMgYSBtZXNzYWdlXG4gICAgICovXG4gICAgdHlwZTogei5saXRlcmFsKCdtZXNzYWdlJykub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IEFzc2lzdGFudE1lc3NhZ2VJdGVtID0gTWVzc2FnZUJhc2UuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRpbmcgYSBtZXNzYWdlIGZyb20gdGhlIGFzc2lzdGFudCAoaS5lLiB0aGUgbW9kZWwpXG4gICAgICovXG4gICAgcm9sZTogei5saXRlcmFsKCdhc3Npc3RhbnQnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBtZXNzYWdlLlxuICAgICAqL1xuICAgIHN0YXR1czogei5lbnVtKFsnaW5fcHJvZ3Jlc3MnLCAnY29tcGxldGVkJywgJ2luY29tcGxldGUnXSksXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29udGVudDogei5hcnJheShBc3Npc3RhbnRDb250ZW50KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFVzZXJDb250ZW50ID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3R5cGUnLCBbXG4gICAgSW5wdXRUZXh0LFxuICAgIElucHV0SW1hZ2UsXG4gICAgSW5wdXRGaWxlLFxuICAgIEF1ZGlvQ29udGVudCxcbl0pO1xuZXhwb3J0IGNvbnN0IFVzZXJNZXNzYWdlSXRlbSA9IE1lc3NhZ2VCYXNlLmV4dGVuZCh7XG4gICAgLy8gdHlwZTogei5saXRlcmFsKCdtZXNzYWdlJyksXG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50aW5nIGEgbWVzc2FnZSBmcm9tIHRoZSB1c2VyXG4gICAgICovXG4gICAgcm9sZTogei5saXRlcmFsKCd1c2VyJyksXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29udGVudDogei5hcnJheShVc2VyQ29udGVudCkub3Ioei5zdHJpbmcoKSksXG59KTtcbmNvbnN0IFN5c3RlbU1lc3NhZ2VJdGVtID0gTWVzc2FnZUJhc2UuZXh0ZW5kKHtcbiAgICAvLyB0eXBlOiB6LmxpdGVyYWwoJ21lc3NhZ2UnKSxcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRpbmcgYSBzeXN0ZW0gbWVzc2FnZSB0byB0aGUgdXNlclxuICAgICAqL1xuICAgIHJvbGU6IHoubGl0ZXJhbCgnc3lzdGVtJyksXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29udGVudDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IE1lc3NhZ2VJdGVtID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3JvbGUnLCBbXG4gICAgU3lzdGVtTWVzc2FnZUl0ZW0sXG4gICAgQXNzaXN0YW50TWVzc2FnZUl0ZW0sXG4gICAgVXNlck1lc3NhZ2VJdGVtLFxuXSk7XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUb29sIGNhbGwgdHlwZXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBjb25zdCBIb3N0ZWRUb29sQ2FsbEl0ZW0gPSBJdGVtQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnaG9zdGVkX3Rvb2xfY2FsbCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBob3N0ZWQgdG9vbC4gRm9yIGV4YW1wbGUgYHdlYl9zZWFyY2hfY2FsbGAgb3IgYGZpbGVfc2VhcmNoX2NhbGxgXG4gICAgICovXG4gICAgbmFtZTogei5zdHJpbmcoKS5kZXNjcmliZSgnVGhlIG5hbWUgb2YgdGhlIGhvc3RlZCB0b29sJyksXG4gICAgLyoqXG4gICAgICogVGhlIGFyZ3VtZW50cyBvZiB0aGUgaG9zdGVkIHRvb2wgY2FsbC5cbiAgICAgKi9cbiAgICBhcmd1bWVudHM6IHpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5kZXNjcmliZSgnVGhlIGFyZ3VtZW50cyBvZiB0aGUgaG9zdGVkIHRvb2wgY2FsbCcpXG4gICAgICAgIC5vcHRpb25hbCgpLFxuICAgIC8qKlxuICAgICAqIFRoZSBzdGF0dXMgb2YgdGhlIHRvb2wgY2FsbC5cbiAgICAgKi9cbiAgICBzdGF0dXM6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAvKipcbiAgICAgKiBUaGUgcHJpbWFyeSBvdXRwdXQgb2YgdGhlIHRvb2wgY2FsbC4gQWRkaXRpb25hbCBvdXRwdXQgbWlnaHQgYmUgaW4gdGhlIGBwcm92aWRlckRhdGFgIGZpZWxkLlxuICAgICAqL1xuICAgIG91dHB1dDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgRnVuY3Rpb25DYWxsSXRlbSA9IEl0ZW1CYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdmdW5jdGlvbl9jYWxsJyksXG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSB0b29sIGNhbGwuIFJlcXVpcmVkIHRvIG1hdGNoIHVwIHRoZSByZXNwZWN0aXZlIHRvb2wgY2FsbCByZXN1bHQuXG4gICAgICovXG4gICAgY2FsbElkOiB6LnN0cmluZygpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIHRvb2wgY2FsbCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBuYW1lOiB6LnN0cmluZygpLmRlc2NyaWJlKCdUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24nKSxcbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBmdW5jdGlvbiBjYWxsLlxuICAgICAqL1xuICAgIHN0YXR1czogei5lbnVtKFsnaW5fcHJvZ3Jlc3MnLCAnY29tcGxldGVkJywgJ2luY29tcGxldGUnXSkub3B0aW9uYWwoKSxcbiAgICAvKipcbiAgICAgKiBUaGUgYXJndW1lbnRzIG9mIHRoZSBmdW5jdGlvbiBjYWxsLlxuICAgICAqL1xuICAgIGFyZ3VtZW50czogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IEZ1bmN0aW9uQ2FsbFJlc3VsdEl0ZW0gPSBJdGVtQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnZnVuY3Rpb25fY2FsbF9yZXN1bHQnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgdG9vbCB0aGF0IHdhcyBjYWxsZWRcbiAgICAgKi9cbiAgICBuYW1lOiB6LnN0cmluZygpLmRlc2NyaWJlKCdUaGUgbmFtZSBvZiB0aGUgdG9vbCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiB0aGUgdG9vbCBjYWxsLiBSZXF1aXJlZCB0byBtYXRjaCB1cCB0aGUgcmVzcGVjdGl2ZSB0b29sIGNhbGwgcmVzdWx0LlxuICAgICAqL1xuICAgIGNhbGxJZDogei5zdHJpbmcoKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSB0b29sIGNhbGwnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdHVzIG9mIHRoZSB0b29sIGNhbGwuXG4gICAgICovXG4gICAgc3RhdHVzOiB6LmVudW0oWydpbl9wcm9ncmVzcycsICdjb21wbGV0ZWQnLCAnaW5jb21wbGV0ZSddKSxcbiAgICAvKipcbiAgICAgKiBUaGUgb3V0cHV0IG9mIHRoZSB0b29sIGNhbGwuXG4gICAgICovXG4gICAgb3V0cHV0OiB6LmRpc2NyaW1pbmF0ZWRVbmlvbigndHlwZScsIFtUb29sT3V0cHV0VGV4dCwgVG9vbE91dHB1dEltYWdlXSksXG59KTtcbmV4cG9ydCBjb25zdCBDb21wdXRlclVzZUNhbGxJdGVtID0gSXRlbUJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbXB1dGVyX2NhbGwnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIGNvbXB1dGVyIGNhbGwuIFJlcXVpcmVkIHRvIG1hdGNoIHVwIHRoZSByZXNwZWN0aXZlIGNvbXB1dGVyIGNhbGwgcmVzdWx0LlxuICAgICAqL1xuICAgIGNhbGxJZDogei5zdHJpbmcoKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSBjb21wdXRlciBjYWxsJyksXG4gICAgLyoqXG4gICAgICogVGhlIHN0YXR1cyBvZiB0aGUgY29tcHV0ZXIgY2FsbC5cbiAgICAgKi9cbiAgICBzdGF0dXM6IHouZW51bShbJ2luX3Byb2dyZXNzJywgJ2NvbXBsZXRlZCcsICdpbmNvbXBsZXRlJ10pLFxuICAgIC8qKlxuICAgICAqIFRoZSBhY3Rpb24gdG8gYmUgcGVyZm9ybWVkIGJ5IHRoZSBjb21wdXRlci5cbiAgICAgKi9cbiAgICBhY3Rpb246IGNvbXB1dGVyQWN0aW9ucyxcbn0pO1xuZXhwb3J0IGNvbnN0IENvbXB1dGVyQ2FsbFJlc3VsdEl0ZW0gPSBJdGVtQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29tcHV0ZXJfY2FsbF9yZXN1bHQnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIGNvbXB1dGVyIGNhbGwuIFJlcXVpcmVkIHRvIG1hdGNoIHVwIHRoZSByZXNwZWN0aXZlIGNvbXB1dGVyIGNhbGwgcmVzdWx0LlxuICAgICAqL1xuICAgIGNhbGxJZDogei5zdHJpbmcoKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSBjb21wdXRlciBjYWxsJyksXG4gICAgLyoqXG4gICAgICogVGhlIG91dHB1dCBvZiB0aGUgY29tcHV0ZXIgY2FsbC5cbiAgICAgKi9cbiAgICBvdXRwdXQ6IENvbXB1dGVyVG9vbE91dHB1dCxcbn0pO1xuZXhwb3J0IGNvbnN0IFRvb2xDYWxsSXRlbSA9IHouZGlzY3JpbWluYXRlZFVuaW9uKCd0eXBlJywgW1xuICAgIENvbXB1dGVyVXNlQ2FsbEl0ZW0sXG4gICAgRnVuY3Rpb25DYWxsSXRlbSxcbiAgICBIb3N0ZWRUb29sQ2FsbEl0ZW0sXG5dKTtcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFNwZWNpYWwgaXRlbSB0eXBlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGNvbnN0IFJlYXNvbmluZ0l0ZW0gPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3JlYXNvbmluZycpLFxuICAgIC8qKlxuICAgICAqIFRoZSB1c2VyIGZhY2luZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgcmVhc29uaW5nLiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIG1pZ2h0IGJlIGluIHRoZSBgcHJvdmlkZXJEYXRhYCBmaWVsZC5cbiAgICAgKi9cbiAgICBjb250ZW50OiB6LmFycmF5KElucHV0VGV4dCksXG4gICAgLyoqXG4gICAgICogVGhlIHJhdyByZWFzb25pbmcgdGV4dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICByYXdDb250ZW50OiB6LmFycmF5KFJlYXNvbmluZ1RleHQpLm9wdGlvbmFsKCksXG59KTtcbi8qKlxuICogVGhpcyBpcyBhIGNhdGNoIGFsbCBmb3IgaXRlbXMgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIHByb3RvY29sLlxuICpcbiAqIEZvciBleGFtcGxlLCBhIG1vZGVsIG1pZ2h0IHJldHVybiBhbiBpdGVtIHRoYXQgaXMgbm90IHBhcnQgb2YgdGhlIHByb3RvY29sIHVzaW5nIHRoaXMgdHlwZS5cbiAqXG4gKiBJbiB0aGF0IGNhc2UgZXZlcnl0aGluZyByZXR1cm5lZCBmcm9tIHRoZSBtb2RlbCBzaG91bGQgYmUgcGFzc2VkIGluIHRoZSBgcHJvdmlkZXJEYXRhYCBmaWVsZC5cbiAqXG4gKiBUaGlzIGVuYWJsZXMgbmV3IGZlYXR1cmVzIHRvIGJlIGFkZGVkIHRvIGJlIGFkZGVkIGJ5IGEgbW9kZWwgcHJvdmlkZXIgd2l0aG91dCBicmVha2luZyB0aGUgcHJvdG9jb2wuXG4gKi9cbmV4cG9ydCBjb25zdCBVbmtub3duSXRlbSA9IEl0ZW1CYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCd1bmtub3duJyksXG59KTtcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEpvaW5lZCBpdGVtIHR5cGVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgY29uc3QgT3V0cHV0TW9kZWxJdGVtID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3R5cGUnLCBbXG4gICAgQXNzaXN0YW50TWVzc2FnZUl0ZW0sXG4gICAgSG9zdGVkVG9vbENhbGxJdGVtLFxuICAgIEZ1bmN0aW9uQ2FsbEl0ZW0sXG4gICAgQ29tcHV0ZXJVc2VDYWxsSXRlbSxcbiAgICBSZWFzb25pbmdJdGVtLFxuICAgIFVua25vd25JdGVtLFxuXSk7XG5leHBvcnQgY29uc3QgTW9kZWxJdGVtID0gei51bmlvbihbXG4gICAgVXNlck1lc3NhZ2VJdGVtLFxuICAgIEFzc2lzdGFudE1lc3NhZ2VJdGVtLFxuICAgIFN5c3RlbU1lc3NhZ2VJdGVtLFxuICAgIEhvc3RlZFRvb2xDYWxsSXRlbSxcbiAgICBGdW5jdGlvbkNhbGxJdGVtLFxuICAgIENvbXB1dGVyVXNlQ2FsbEl0ZW0sXG4gICAgRnVuY3Rpb25DYWxsUmVzdWx0SXRlbSxcbiAgICBDb21wdXRlckNhbGxSZXN1bHRJdGVtLFxuICAgIFJlYXNvbmluZ0l0ZW0sXG4gICAgVW5rbm93bkl0ZW0sXG5dKTtcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE1ldGEgZGF0YSB0eXBlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGNvbnN0IFVzYWdlRGF0YSA9IHoub2JqZWN0KHtcbiAgICByZXF1ZXN0czogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgIGlucHV0VG9rZW5zOiB6Lm51bWJlcigpLFxuICAgIG91dHB1dFRva2Vuczogei5udW1iZXIoKSxcbiAgICB0b3RhbFRva2Vuczogei5udW1iZXIoKSxcbiAgICBpbnB1dFRva2Vuc0RldGFpbHM6IHoucmVjb3JkKHouc3RyaW5nKCksIHoubnVtYmVyKCkpLm9wdGlvbmFsKCksXG4gICAgb3V0cHV0VG9rZW5zRGV0YWlsczogei5yZWNvcmQoei5zdHJpbmcoKSwgei5udW1iZXIoKSkub3B0aW9uYWwoKSxcbn0pO1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RyZWFtIGV2ZW50IHR5cGVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vKipcbiAqIEV2ZW50IHJldHVybmVkIGJ5IHRoZSBtb2RlbCB3aGVuIG5ldyBvdXRwdXQgdGV4dCBpcyBhdmFpbGFibGUgdG8gc3RyZWFtIHRvIHRoZSB1c2VyLlxuICovXG5leHBvcnQgY29uc3QgU3RyZWFtRXZlbnRUZXh0U3RyZWFtID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnb3V0cHV0X3RleHRfZGVsdGEnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgZGVsdGEgdGV4dCB0aGF0IHdhcyBzdHJlYW1lZCBieSB0aGUgbW9kZWx0byB0aGUgdXNlci5cbiAgICAgKi9cbiAgICBkZWx0YTogei5zdHJpbmcoKSxcbn0pO1xuLyoqXG4gKiBFdmVudCByZXR1cm5lZCBieSB0aGUgbW9kZWwgd2hlbiBhIG5ldyByZXNwb25zZSBpcyBzdGFydGVkLlxuICovXG5leHBvcnQgY29uc3QgU3RyZWFtRXZlbnRSZXNwb25zZVN0YXJ0ZWQgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZV9zdGFydGVkJyksXG59KTtcbi8qKlxuICogRXZlbnQgcmV0dXJuZWQgYnkgdGhlIG1vZGVsIHdoZW4gYSByZXNwb25zZSBpcyBjb21wbGV0ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBTdHJlYW1FdmVudFJlc3BvbnNlQ29tcGxldGVkID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2VfZG9uZScpLFxuICAgIC8qKlxuICAgICAqIFRoZSByZXNwb25zZSBmcm9tIHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICByZXNwb25zZTogU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIElEIG9mIHRoZSByZXNwb25zZS5cbiAgICAgICAgICovXG4gICAgICAgIGlkOiB6LnN0cmluZygpLFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHVzYWdlIGRhdGEgZm9yIHRoZSByZXNwb25zZS5cbiAgICAgICAgICovXG4gICAgICAgIHVzYWdlOiBVc2FnZURhdGEsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgb3V0cHV0IGZyb20gdGhlIG1vZGVsLlxuICAgICAgICAgKi9cbiAgICAgICAgb3V0cHV0OiB6LmFycmF5KE91dHB1dE1vZGVsSXRlbSksXG4gICAgfSksXG59KTtcbi8qKlxuICogRXZlbnQgcmV0dXJuZWQgZm9yIGV2ZXJ5IGl0ZW0gdGhhdCBnZXRzIHN0cmVhbWVkIHRvIHRoZSBtb2RlbC4gVXNlZCB0byBleHBvc2UgdGhlIHJhdyBldmVudHNcbiAqIGZyb20gdGhlIG1vZGVsLlxuICovXG5leHBvcnQgY29uc3QgU3RyZWFtRXZlbnRHZW5lcmljSXRlbSA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ21vZGVsJyksXG4gICAgZXZlbnQ6IHouYW55KCkuZGVzY3JpYmUoJ1RoZSBldmVudCBmcm9tIHRoZSBtb2RlbCcpLFxufSk7XG5leHBvcnQgY29uc3QgU3RyZWFtRXZlbnQgPSB6LmRpc2NyaW1pbmF0ZWRVbmlvbigndHlwZScsIFtcbiAgICBTdHJlYW1FdmVudFRleHRTdHJlYW0sXG4gICAgU3RyZWFtRXZlbnRSZXNwb25zZUNvbXBsZXRlZCxcbiAgICBTdHJlYW1FdmVudFJlc3BvbnNlU3RhcnRlZCxcbiAgICBTdHJlYW1FdmVudEdlbmVyaWNJdGVtLFxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm90b2NvbC5tanMubWFwIiwiaW1wb3J0IHsgVXNhZ2VEYXRhIH0gZnJvbSBcIi4vdHlwZXMvcHJvdG9jb2wubWpzXCI7XG4vKipcbiAqIFRyYWNrcyB0b2tlbiB1c2FnZSBhbmQgcmVxdWVzdCBjb3VudHMgZm9yIGFuIGFnZW50IHJ1bi5cbiAqL1xuZXhwb3J0IGNsYXNzIFVzYWdlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHJlcXVlc3RzIG1hZGUgdG8gdGhlIExMTSBBUEkuXG4gICAgICovXG4gICAgcmVxdWVzdHM7XG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBpbnB1dCB0b2tlbnMgdXNlZCBhY3Jvc3MgYWxsIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIGlucHV0VG9rZW5zO1xuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2Ygb3V0cHV0IHRva2VucyB1c2VkIGFjcm9zcyBhbGwgcmVxdWVzdHMuXG4gICAgICovXG4gICAgb3V0cHV0VG9rZW5zO1xuICAgIC8qKlxuICAgICAqIFRoZSB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIHNlbnQgYW5kIHJlY2VpdmVkLCBhY3Jvc3MgYWxsIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIHRvdGFsVG9rZW5zO1xuICAgIC8qKlxuICAgICAqIERldGFpbHMgYWJvdXQgdGhlIGlucHV0IHRva2VucyB1c2VkIGFjcm9zcyBhbGwgcmVxdWVzdHMuXG4gICAgICovXG4gICAgaW5wdXRUb2tlbnNEZXRhaWxzID0gW107XG4gICAgLyoqXG4gICAgICogRGV0YWlscyBhYm91dCB0aGUgb3V0cHV0IHRva2VucyB1c2VkIGFjcm9zcyBhbGwgcmVxdWVzdHMuXG4gICAgICovXG4gICAgb3V0cHV0VG9rZW5zRGV0YWlscyA9IFtdO1xuICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RzID0gMDtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRUb2tlbnMgPSAwO1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRUb2tlbnMgPSAwO1xuICAgICAgICAgICAgdGhpcy50b3RhbFRva2VucyA9IDA7XG4gICAgICAgICAgICB0aGlzLmlucHV0VG9rZW5zRGV0YWlscyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRUb2tlbnNEZXRhaWxzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RzID0gaW5wdXQ/LnJlcXVlc3RzID8/IDE7XG4gICAgICAgICAgICB0aGlzLmlucHV0VG9rZW5zID0gaW5wdXQ/LmlucHV0VG9rZW5zID8/IGlucHV0Py5pbnB1dF90b2tlbnMgPz8gMDtcbiAgICAgICAgICAgIHRoaXMub3V0cHV0VG9rZW5zID0gaW5wdXQ/Lm91dHB1dFRva2VucyA/PyBpbnB1dD8ub3V0cHV0X3Rva2VucyA/PyAwO1xuICAgICAgICAgICAgdGhpcy50b3RhbFRva2VucyA9IGlucHV0Py50b3RhbFRva2VucyA/PyBpbnB1dD8udG90YWxfdG9rZW5zID8/IDA7XG4gICAgICAgICAgICBjb25zdCBpbnB1dFRva2Vuc0RldGFpbHMgPSBpbnB1dD8uaW5wdXRUb2tlbnNEZXRhaWxzID8/IGlucHV0Py5pbnB1dF90b2tlbnNfZGV0YWlscztcbiAgICAgICAgICAgIHRoaXMuaW5wdXRUb2tlbnNEZXRhaWxzID0gaW5wdXRUb2tlbnNEZXRhaWxzXG4gICAgICAgICAgICAgICAgPyBbaW5wdXRUb2tlbnNEZXRhaWxzXVxuICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgICAgICBjb25zdCBvdXRwdXRUb2tlbnNEZXRhaWxzID0gaW5wdXQ/Lm91dHB1dFRva2Vuc0RldGFpbHMgPz8gaW5wdXQ/Lm91dHB1dF90b2tlbnNfZGV0YWlscztcbiAgICAgICAgICAgIHRoaXMub3V0cHV0VG9rZW5zRGV0YWlscyA9IG91dHB1dFRva2Vuc0RldGFpbHNcbiAgICAgICAgICAgICAgICA/IFtvdXRwdXRUb2tlbnNEZXRhaWxzXVxuICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkKG5ld1VzYWdlKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdHMgKz0gbmV3VXNhZ2UucmVxdWVzdHM7XG4gICAgICAgIHRoaXMuaW5wdXRUb2tlbnMgKz0gbmV3VXNhZ2UuaW5wdXRUb2tlbnM7XG4gICAgICAgIHRoaXMub3V0cHV0VG9rZW5zICs9IG5ld1VzYWdlLm91dHB1dFRva2VucztcbiAgICAgICAgdGhpcy50b3RhbFRva2VucyArPSBuZXdVc2FnZS50b3RhbFRva2VucztcbiAgICAgICAgaWYgKG5ld1VzYWdlLmlucHV0VG9rZW5zRGV0YWlscykge1xuICAgICAgICAgICAgLy8gVGhlIHR5cGUgZG9lcyBub3QgYWxsb3cgdW5kZWZpbmVkLCBidXQgaXQgY291bGQgaGFwcGVuIHJ1bnRpbWVcbiAgICAgICAgICAgIHRoaXMuaW5wdXRUb2tlbnNEZXRhaWxzLnB1c2goLi4ubmV3VXNhZ2UuaW5wdXRUb2tlbnNEZXRhaWxzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3VXNhZ2Uub3V0cHV0VG9rZW5zRGV0YWlscykge1xuICAgICAgICAgICAgLy8gVGhlIHR5cGUgZG9lcyBub3QgYWxsb3cgdW5kZWZpbmVkLCBidXQgaXQgY291bGQgaGFwcGVuIHJ1bnRpbWVcbiAgICAgICAgICAgIHRoaXMub3V0cHV0VG9rZW5zRGV0YWlscy5wdXNoKC4uLm5ld1VzYWdlLm91dHB1dFRva2Vuc0RldGFpbHMpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IHsgVXNhZ2VEYXRhIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2FnZS5tanMubWFwIiwiaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyBVc2FnZSB9IGZyb20gXCIuL3VzYWdlLm1qc1wiO1xuLyoqXG4gKiBBIGNvbnRleHQgb2JqZWN0IHRoYXQgaXMgcGFzc2VkIHRvIHRoZSBgUnVubmVyLnJ1bigpYCBtZXRob2QuXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW5Db250ZXh0IHtcbiAgICAvKipcbiAgICAgKiBUaGUgY29udGV4dCBvYmplY3QgcGFzc2VkIGJ5IHlvdSB0byB0aGUgYFJ1bm5lci5ydW4oKWBcbiAgICAgKi9cbiAgICBjb250ZXh0O1xuICAgIC8qKlxuICAgICAqIFRoZSB1c2FnZSBvZiB0aGUgYWdlbnQgcnVuIHNvIGZhci4gRm9yIHN0cmVhbWVkIHJlc3BvbnNlcywgdGhlIHVzYWdlIHdpbGwgYmUgc3RhbGUgdW50aWwgdGhlXG4gICAgICogbGFzdCBjaHVuayBvZiB0aGUgc3RyZWFtIGlzIHByb2Nlc3NlZC5cbiAgICAgKi9cbiAgICB1c2FnZTtcbiAgICAvKipcbiAgICAgKiBBIG1hcCBvZiB0b29sIG5hbWVzIHRvIHdoZXRoZXIgdGhleSBoYXZlIGJlZW4gYXBwcm92ZWQuXG4gICAgICovXG4gICAgI2FwcHJvdmFscztcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0ID0ge30pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy51c2FnZSA9IG5ldyBVc2FnZSgpO1xuICAgICAgICB0aGlzLiNhcHByb3ZhbHMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYnVpbGQgdGhlIGFwcHJvdmFscyBtYXAgZnJvbSBhIHNlcmlhbGl6ZWQgc3RhdGUuXG4gICAgICogQGludGVybmFsXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXBwcm92YWxzIC0gVGhlIGFwcHJvdmFscyBtYXAgdG8gcmVidWlsZC5cbiAgICAgKi9cbiAgICBfcmVidWlsZEFwcHJvdmFscyhhcHByb3ZhbHMpIHtcbiAgICAgICAgdGhpcy4jYXBwcm92YWxzID0gbmV3IE1hcChPYmplY3QuZW50cmllcyhhcHByb3ZhbHMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSB0b29sIGNhbGwgaGFzIGJlZW4gYXBwcm92ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdG9vbE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdG9vbC5cbiAgICAgKiBAcGFyYW0gY2FsbElkIC0gVGhlIGNhbGwgSUQgb2YgdGhlIHRvb2wgY2FsbC5cbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRvb2wgY2FsbCBoYXMgYmVlbiBhcHByb3ZlZCwgYGZhbHNlYCBpZiBibG9ja2VkIGFuZCBgdW5kZWZpbmVkYCBpZiBub3QgeWV0IGFwcHJvdmVkIG9yIHJlamVjdGVkLlxuICAgICAqL1xuICAgIGlzVG9vbEFwcHJvdmVkKHsgdG9vbE5hbWUsIGNhbGxJZCB9KSB7XG4gICAgICAgIGNvbnN0IGFwcHJvdmFsRW50cnkgPSB0aGlzLiNhcHByb3ZhbHMuZ2V0KHRvb2xOYW1lKTtcbiAgICAgICAgaWYgKGFwcHJvdmFsRW50cnk/LmFwcHJvdmVkID09PSB0cnVlICYmIGFwcHJvdmFsRW50cnkucmVqZWN0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdUb29sIGlzIHBlcm1hbmVudGx5IGFwcHJvdmVkIGFuZCByZWplY3RlZCBhdCB0aGUgc2FtZSB0aW1lLiBBcHByb3ZhbCB0YWtlcyBwcmVjZWRlbmNlJyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXBwcm92YWxFbnRyeT8uYXBwcm92ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcHByb3ZhbEVudHJ5Py5yZWplY3RlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGl2aWR1YWxDYWxsQXBwcm92YWwgPSBBcnJheS5pc0FycmF5KGFwcHJvdmFsRW50cnk/LmFwcHJvdmVkKVxuICAgICAgICAgICAgPyBhcHByb3ZhbEVudHJ5LmFwcHJvdmVkLmluY2x1ZGVzKGNhbGxJZClcbiAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGluZGl2aWR1YWxDYWxsUmVqZWN0aW9uID0gQXJyYXkuaXNBcnJheShhcHByb3ZhbEVudHJ5Py5yZWplY3RlZClcbiAgICAgICAgICAgID8gYXBwcm92YWxFbnRyeS5yZWplY3RlZC5pbmNsdWRlcyhjYWxsSWQpXG4gICAgICAgICAgICA6IGZhbHNlO1xuICAgICAgICBpZiAoaW5kaXZpZHVhbENhbGxBcHByb3ZhbCAmJiBpbmRpdmlkdWFsQ2FsbFJlamVjdGlvbikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oYFRvb2wgY2FsbCAke2NhbGxJZH0gaXMgYm90aCBhcHByb3ZlZCBhbmQgcmVqZWN0ZWQgYXQgdGhlIHNhbWUgdGltZS4gQXBwcm92YWwgdGFrZXMgcHJlY2VkZW5jZWApO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGl2aWR1YWxDYWxsQXBwcm92YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRpdmlkdWFsQ2FsbFJlamVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcHJvdmUgYSB0b29sIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdG9vbE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdG9vbC5cbiAgICAgKiBAcGFyYW0gY2FsbElkIC0gVGhlIGNhbGwgSUQgb2YgdGhlIHRvb2wgY2FsbC5cbiAgICAgKi9cbiAgICBhcHByb3ZlVG9vbChhcHByb3ZhbEl0ZW0sIHsgYWx3YXlzQXBwcm92ZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICBjb25zdCB0b29sTmFtZSA9IGFwcHJvdmFsSXRlbS5yYXdJdGVtLm5hbWU7XG4gICAgICAgIGlmIChhbHdheXNBcHByb3ZlKSB7XG4gICAgICAgICAgICB0aGlzLiNhcHByb3ZhbHMuc2V0KHRvb2xOYW1lLCB7XG4gICAgICAgICAgICAgICAgYXBwcm92ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVqZWN0ZWQ6IFtdLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXBwcm92YWxFbnRyeSA9IHRoaXMuI2FwcHJvdmFscy5nZXQodG9vbE5hbWUpID8/IHtcbiAgICAgICAgICAgIGFwcHJvdmVkOiBbXSxcbiAgICAgICAgICAgIHJlamVjdGVkOiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXBwcm92YWxFbnRyeS5hcHByb3ZlZCkpIHtcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uIHRvb2wgaGFzIGNhbGxfaWQsIGhvc3RlZCB0b29sIGNhbGwgaGFzIGlkXG4gICAgICAgICAgICBjb25zdCBjYWxsSWQgPSAnY2FsbElkJyBpbiBhcHByb3ZhbEl0ZW0ucmF3SXRlbVxuICAgICAgICAgICAgICAgID8gYXBwcm92YWxJdGVtLnJhd0l0ZW0uY2FsbElkIC8vIGZ1bmN0aW9uIHRvb2xzXG4gICAgICAgICAgICAgICAgOiBhcHByb3ZhbEl0ZW0ucmF3SXRlbS5pZDsgLy8gaG9zdGVkIHRvb2xzXG4gICAgICAgICAgICBhcHByb3ZhbEVudHJ5LmFwcHJvdmVkLnB1c2goY2FsbElkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNhcHByb3ZhbHMuc2V0KHRvb2xOYW1lLCBhcHByb3ZhbEVudHJ5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVqZWN0IGEgdG9vbCBjYWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFwcHJvdmFsSXRlbSAtIFRoZSB0b29sIGFwcHJvdmFsIGl0ZW0gdG8gcmVqZWN0LlxuICAgICAqL1xuICAgIHJlamVjdFRvb2woYXBwcm92YWxJdGVtLCB7IGFsd2F5c1JlamVjdCA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICBjb25zdCB0b29sTmFtZSA9IGFwcHJvdmFsSXRlbS5yYXdJdGVtLm5hbWU7XG4gICAgICAgIGlmIChhbHdheXNSZWplY3QpIHtcbiAgICAgICAgICAgIHRoaXMuI2FwcHJvdmFscy5zZXQodG9vbE5hbWUsIHtcbiAgICAgICAgICAgICAgICBhcHByb3ZlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVqZWN0ZWQ6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhcHByb3ZhbEVudHJ5ID0gdGhpcy4jYXBwcm92YWxzLmdldCh0b29sTmFtZSkgPz8ge1xuICAgICAgICAgICAgYXBwcm92ZWQ6IFtdLFxuICAgICAgICAgICAgcmVqZWN0ZWQ6IFtdLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcHByb3ZhbEVudHJ5LnJlamVjdGVkKSkge1xuICAgICAgICAgICAgLy8gZnVuY3Rpb24gdG9vbCBoYXMgY2FsbF9pZCwgaG9zdGVkIHRvb2wgY2FsbCBoYXMgaWRcbiAgICAgICAgICAgIGNvbnN0IGNhbGxJZCA9ICdjYWxsSWQnIGluIGFwcHJvdmFsSXRlbS5yYXdJdGVtXG4gICAgICAgICAgICAgICAgPyBhcHByb3ZhbEl0ZW0ucmF3SXRlbS5jYWxsSWQgLy8gZnVuY3Rpb24gdG9vbHNcbiAgICAgICAgICAgICAgICA6IGFwcHJvdmFsSXRlbS5yYXdJdGVtLmlkOyAvLyBob3N0ZWQgdG9vbHNcbiAgICAgICAgICAgIGFwcHJvdmFsRW50cnkucmVqZWN0ZWQucHVzaChjYWxsSWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2FwcHJvdmFscy5zZXQodG9vbE5hbWUsIGFwcHJvdmFsRW50cnkpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsXG4gICAgICAgICAgICB1c2FnZTogdGhpcy51c2FnZSxcbiAgICAgICAgICAgIGFwcHJvdmFsczogT2JqZWN0LmZyb21FbnRyaWVzKHRoaXMuI2FwcHJvdmFscy5lbnRyaWVzKCkpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bkNvbnRleHQubWpzLm1hcCIsImltcG9ydCB7IFJlYWRhYmxlU3RyZWFtIGFzIF9SZWFkYWJsZVN0cmVhbSwgVHJhbnNmb3JtU3RyZWFtLCBSZWFkYWJsZSwgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL19zaGltcyc7XG5pbXBvcnQgeyBnZXRUdXJuSW5wdXQgfSBmcm9tIFwiLi9ydW4ubWpzXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbmltcG9ydCB7IFN0cmVhbUV2ZW50VGV4dFN0cmVhbSB9IGZyb20gXCIuL3R5cGVzL3Byb3RvY29sLm1qc1wiO1xuY2xhc3MgUnVuUmVzdWx0QmFzZSB7XG4gICAgc3RhdGU7XG4gICAgY29uc3RydWN0b3Ioc3RhdGUpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgaGlzdG9yeSBvZiB0aGUgYWdlbnQgcnVuLiBUaGlzIGluY2x1ZGVzIHRoZSBpbnB1dCBpdGVtcyBhbmQgdGhlIG5ldyBpdGVtcyBnZW5lcmF0ZWQgZHVyaW5nXG4gICAgICogdGhlIGFnZW50IHJ1bi5cbiAgICAgKlxuICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgYXMgaW5wdXRzIGZvciB0aGUgbmV4dCBhZ2VudCBydW4uXG4gICAgICovXG4gICAgZ2V0IGhpc3RvcnkoKSB7XG4gICAgICAgIHJldHVybiBnZXRUdXJuSW5wdXQodGhpcy5pbnB1dCwgdGhpcy5uZXdJdGVtcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBuZXcgaXRlbXMgZ2VuZXJhdGVkIGR1cmluZyB0aGUgYWdlbnQgcnVuLiBUaGVzZSBpbmNsdWRlIHRoaW5ncyBsaWtlIG5ldyBtZXNzYWdlcywgdG9vbFxuICAgICAqIGNhbGxzIGFuZCB0aGVpciBvdXRwdXRzLCBldGMuXG4gICAgICpcbiAgICAgKiBJdCBkb2VzIG5vdCBpbmNsdWRlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBhZ2VudHMgYW5kIGluc3RlYWQgcmVwcmVzZW50cyB0aGUgbW9kZWwgZGF0YS5cbiAgICAgKlxuICAgICAqIEZvciB0aGUgb3V0cHV0IGluY2x1ZGluZyB0aGUgYWdlbnRzLCB1c2UgdGhlIGBuZXdJdGVtc2AgcHJvcGVydHkuXG4gICAgICovXG4gICAgZ2V0IG91dHB1dCgpIHtcbiAgICAgICAgcmV0dXJuIGdldFR1cm5JbnB1dChbXSwgdGhpcy5uZXdJdGVtcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgY29weSBvZiB0aGUgb3JpZ2luYWwgaW5wdXQgaXRlbXMuXG4gICAgICovXG4gICAgZ2V0IGlucHV0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5fb3JpZ2luYWxJbnB1dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHJ1biBpdGVtcyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBhZ2VudCBydW4uIFRoaXMgYXNzb2NpYXRlcyB0aGUgbW9kZWwgZGF0YSB3aXRoIHRoZSBhZ2VudHMuXG4gICAgICpcbiAgICAgKiBGb3IgdGhlIG1vZGVsIGRhdGEgdGhhdCBjYW4gYmUgdXNlZCBhcyBpbnB1dHMgZm9yIHRoZSBuZXh0IGFnZW50IHJ1biwgdXNlIHRoZSBgb3V0cHV0YCBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBnZXQgbmV3SXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLl9nZW5lcmF0ZWRJdGVtcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHJhdyBMTE0gcmVzcG9uc2VzIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgZHVyaW5nIHRoZSBhZ2VudCBydW4uXG4gICAgICovXG4gICAgZ2V0IHJhd1Jlc3BvbnNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuX21vZGVsUmVzcG9uc2VzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbGFzdCByZXNwb25zZSBJRCBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsIGR1cmluZyB0aGUgYWdlbnQgcnVuLlxuICAgICAqL1xuICAgIGdldCBsYXN0UmVzcG9uc2VJZCgpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2VzID0gdGhpcy5yYXdSZXNwb25zZXM7XG4gICAgICAgIHJldHVybiByZXNwb25zZXMgJiYgcmVzcG9uc2VzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgID8gcmVzcG9uc2VzW3Jlc3BvbnNlcy5sZW5ndGggLSAxXS5yZXNwb25zZUlkXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGxhc3QgYWdlbnQgdGhhdCB3YXMgcnVuXG4gICAgICovXG4gICAgZ2V0IGxhc3RBZ2VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuX2N1cnJlbnRBZ2VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR3VhcmRyYWlsIHJlc3VsdHMgZm9yIHRoZSBpbnB1dCBtZXNzYWdlcy5cbiAgICAgKi9cbiAgICBnZXQgaW5wdXRHdWFyZHJhaWxSZXN1bHRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5faW5wdXRHdWFyZHJhaWxSZXN1bHRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHdWFyZHJhaWwgcmVzdWx0cyBmb3IgdGhlIGZpbmFsIG91dHB1dCBvZiB0aGUgYWdlbnQuXG4gICAgICovXG4gICAgZ2V0IG91dHB1dEd1YXJkcmFpbFJlc3VsdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLl9vdXRwdXRHdWFyZHJhaWxSZXN1bHRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbnkgaW50ZXJydXB0aW9ucyB0aGF0IG9jY3VycmVkIGR1cmluZyB0aGUgYWdlbnQgcnVuIGZvciBleGFtcGxlIGZvciB0b29sIGFwcHJvdmFscy5cbiAgICAgKi9cbiAgICBnZXQgaW50ZXJydXB0aW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuX2N1cnJlbnRTdGVwPy50eXBlID09PSAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLl9jdXJyZW50U3RlcC5kYXRhLmludGVycnVwdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZmluYWwgb3V0cHV0IG9mIHRoZSBhZ2VudC4gSWYgdGhlIG91dHB1dCB0eXBlIHdhcyBzZXQgdG8gYW55dGhpbmcgb3RoZXIgdGhhbiBgdGV4dGAsXG4gICAgICogdGhpcyB3aWxsIGJlIHBhcnNlZCBlaXRoZXIgYXMgSlNPTiBvciB1c2luZyB0aGUgWm9kIHNjaGVtYSB5b3UgcHJvdmlkZWQuXG4gICAgICovXG4gICAgZ2V0IGZpbmFsT3V0cHV0KCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5fY3VycmVudFN0ZXA/LnR5cGUgPT09ICduZXh0X3N0ZXBfZmluYWxfb3V0cHV0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuX2N1cnJlbnRBZ2VudC5wcm9jZXNzRmluYWxPdXRwdXQodGhpcy5zdGF0ZS5fY3VycmVudFN0ZXAub3V0cHV0KTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIud2FybignQWNjZXNzZWQgZmluYWxPdXRwdXQgYmVmb3JlIGFnZW50IHJ1biBpcyBjb21wbGV0ZWQuJyk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgcmVzdWx0IG9mIGFuIGFnZW50IHJ1bi5cbiAqL1xuZXhwb3J0IGNsYXNzIFJ1blJlc3VsdCBleHRlbmRzIFJ1blJlc3VsdEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKHN0YXRlKTtcbiAgICB9XG59XG4vKipcbiAqIFRoZSByZXN1bHQgb2YgYW4gYWdlbnQgcnVuIGluIHN0cmVhbWluZyBtb2RlLlxuICovXG5leHBvcnQgY2xhc3MgU3RyZWFtZWRSdW5SZXN1bHQgZXh0ZW5kcyBSdW5SZXN1bHRCYXNlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBhZ2VudCB0aGF0IGlzIHJ1bm5pbmdcbiAgICAgKi9cbiAgICBnZXQgY3VycmVudEFnZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXN0QWdlbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHR1cm4gbnVtYmVyXG4gICAgICovXG4gICAgY3VycmVudFR1cm4gPSAwO1xuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0dXJucyB0aGF0IGNhbiBiZSBydW5cbiAgICAgKi9cbiAgICBtYXhUdXJucztcbiAgICAjZXJyb3IgPSBudWxsO1xuICAgICNzaWduYWw7XG4gICAgI3JlYWRhYmxlQ29udHJvbGxlcjtcbiAgICAjcmVhZGFibGVTdHJlYW07XG4gICAgI2NvbXBsZXRlZFByb21pc2U7XG4gICAgI2NvbXBsZXRlZFByb21pc2VSZXNvbHZlO1xuICAgICNjb21wbGV0ZWRQcm9taXNlUmVqZWN0O1xuICAgICNjYW5jZWxsZWQgPSBmYWxzZTtcbiAgICBjb25zdHJ1Y3RvcihyZXN1bHQgPSB7fSkge1xuICAgICAgICBzdXBlcihyZXN1bHQuc3RhdGUpO1xuICAgICAgICB0aGlzLiNzaWduYWwgPSByZXN1bHQuc2lnbmFsO1xuICAgICAgICBpZiAodGhpcy4jc2lnbmFsKSB7XG4gICAgICAgICAgICB0aGlzLiNzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jcmVhZGFibGVTdHJlYW0uY2FuY2VsKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNyZWFkYWJsZVN0cmVhbSA9IG5ldyBfUmVhZGFibGVTdHJlYW0oe1xuICAgICAgICAgICAgc3RhcnQ6IChjb250cm9sbGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4jcmVhZGFibGVDb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5jZWw6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLiNjYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI2NvbXBsZXRlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNjb21wbGV0ZWRQcm9taXNlUmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICB0aGlzLiNjb21wbGV0ZWRQcm9taXNlUmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogQWRkcyBhbiBpdGVtIHRvIHRoZSBzdHJlYW0gb2Ygb3V0cHV0IGl0ZW1zXG4gICAgICovXG4gICAgX2FkZEl0ZW0oaXRlbSkge1xuICAgICAgICBpZiAoIXRoaXMuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICB0aGlzLiNyZWFkYWJsZUNvbnRyb2xsZXI/LmVucXVldWUoaXRlbSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIHN0cmVhbSBoYXMgYmVlbiBjb21wbGV0ZWRcbiAgICAgKi9cbiAgICBfZG9uZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhbmNlbGxlZCAmJiB0aGlzLiNyZWFkYWJsZUNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIHRoaXMuI3JlYWRhYmxlQ29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy4jcmVhZGFibGVDb250cm9sbGVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy4jY29tcGxldGVkUHJvbWlzZVJlc29sdmU/LigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEhhbmRsZXMgYW4gZXJyb3IgaW4gdGhlIHN0cmVhbSBsb29wLlxuICAgICAqL1xuICAgIF9yYWlzZUVycm9yKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuY2FuY2VsbGVkICYmIHRoaXMuI3JlYWRhYmxlQ29udHJvbGxlcikge1xuICAgICAgICAgICAgdGhpcy4jcmVhZGFibGVDb250cm9sbGVyLmVycm9yKGVycik7XG4gICAgICAgICAgICB0aGlzLiNyZWFkYWJsZUNvbnRyb2xsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jZXJyb3IgPSBlcnI7XG4gICAgICAgIHRoaXMuI2NvbXBsZXRlZFByb21pc2VSZWplY3Q/LihlcnIpO1xuICAgICAgICB0aGlzLiNjb21wbGV0ZWRQcm9taXNlLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoYFJlc3VsdGVkIGluIGFuIGVycm9yOiAke2V9YCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHN0cmVhbSBoYXMgYmVlbiBjYW5jZWxsZWQuXG4gICAgICovXG4gICAgZ2V0IGNhbmNlbGxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2NhbmNlbGxlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdW5kZXJseWluZyByZWFkYWJsZSBzdHJlYW0uXG4gICAgICogQHJldHVybnMgQSByZWFkYWJsZSBzdHJlYW0gb2YgdGhlIGFnZW50IHJ1bi5cbiAgICAgKi9cbiAgICB0b1N0cmVhbSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3JlYWRhYmxlU3RyZWFtO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBd2FpdCB0aGlzIHByb21pc2UgdG8gZW5zdXJlIHRoYXQgdGhlIHN0cmVhbSBoYXMgYmVlbiBjb21wbGV0ZWQgaWYgeW91IGFyZSBub3QgY29uc3VtaW5nIHRoZVxuICAgICAqIHN0cmVhbSBkaXJlY3RseS5cbiAgICAgKi9cbiAgICBnZXQgY29tcGxldGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY29tcGxldGVkUHJvbWlzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXJyb3IgdGhyb3duIGR1cmluZyB0aGUgcnVuLCBpZiBhbnkuXG4gICAgICovXG4gICAgZ2V0IGVycm9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZXJyb3I7XG4gICAgfVxuICAgIHRvVGV4dFN0cmVhbShvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3Qgc3RyZWFtID0gdGhpcy4jcmVhZGFibGVTdHJlYW0ucGlwZVRocm91Z2gobmV3IFRyYW5zZm9ybVN0cmVhbSh7XG4gICAgICAgICAgICB0cmFuc2Zvcm0oZXZlbnQsIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3Jhd19tb2RlbF9zdHJlYW1fZXZlbnQnICYmXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEudHlwZSA9PT0gJ291dHB1dF90ZXh0X2RlbHRhJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gU3RyZWFtRXZlbnRUZXh0U3RyZWFtLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoaXRlbS5kZWx0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgICAgICBpZiAob3B0aW9ucy5jb21wYXRpYmxlV2l0aE5vZGVTdHJlYW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhZGFibGUuZnJvbVdlYihzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgfVxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNyZWFkYWJsZVN0cmVhbVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXN1bHQubWpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVUb29sKHRvb2wpIHtcbiAgICBpZiAodG9vbC50eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICAgICAgICAgICAgbmFtZTogdG9vbC5uYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHRvb2wuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB0b29sLnBhcmFtZXRlcnMsXG4gICAgICAgICAgICBzdHJpY3Q6IHRvb2wuc3RyaWN0LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAodG9vbC50eXBlID09PSAnY29tcHV0ZXInKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnY29tcHV0ZXInLFxuICAgICAgICAgICAgbmFtZTogdG9vbC5uYW1lLFxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHRvb2wuY29tcHV0ZXIuZW52aXJvbm1lbnQsXG4gICAgICAgICAgICBkaW1lbnNpb25zOiB0b29sLmNvbXB1dGVyLmRpbWVuc2lvbnMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdob3N0ZWRfdG9vbCcsXG4gICAgICAgIG5hbWU6IHRvb2wubmFtZSxcbiAgICAgICAgcHJvdmlkZXJEYXRhOiB0b29sLnByb3ZpZGVyRGF0YSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZUhhbmRvZmYoaCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvb2xOYW1lOiBoLnRvb2xOYW1lLFxuICAgICAgICB0b29sRGVzY3JpcHRpb246IGgudG9vbERlc2NyaXB0aW9uLFxuICAgICAgICBpbnB1dEpzb25TY2hlbWE6IGguaW5wdXRKc29uU2NoZW1hLFxuICAgICAgICBzdHJpY3RKc29uU2NoZW1hOiBoLnN0cmljdEpzb25TY2hlbWEsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcmlhbGl6ZS5tanMubWFwIiwiaW1wb3J0IHsgdG9TbWFydFN0cmluZyB9IGZyb20gXCIuL3V0aWxzL3NtYXJ0U3RyaW5nLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFJ1bkl0ZW1CYXNlIHtcbiAgICB0eXBlID0gJ2Jhc2VfaXRlbSc7XG4gICAgcmF3SXRlbTtcbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICByYXdJdGVtOiB0aGlzLnJhd0l0ZW0sXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJ1bk1lc3NhZ2VPdXRwdXRJdGVtIGV4dGVuZHMgUnVuSXRlbUJhc2Uge1xuICAgIHJhd0l0ZW07XG4gICAgYWdlbnQ7XG4gICAgdHlwZSA9ICdtZXNzYWdlX291dHB1dF9pdGVtJztcbiAgICBjb25zdHJ1Y3RvcihyYXdJdGVtLCBhZ2VudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJhd0l0ZW0gPSByYXdJdGVtO1xuICAgICAgICB0aGlzLmFnZW50ID0gYWdlbnQ7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgYWdlbnQ6IHRoaXMuYWdlbnQudG9KU09OKCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldCBjb250ZW50KCkge1xuICAgICAgICBsZXQgY29udGVudCA9ICcnO1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5yYXdJdGVtLmNvbnRlbnQpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LnR5cGUgPT09ICdvdXRwdXRfdGV4dCcpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ICs9IHBhcnQudGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUnVuVG9vbENhbGxJdGVtIGV4dGVuZHMgUnVuSXRlbUJhc2Uge1xuICAgIHJhd0l0ZW07XG4gICAgYWdlbnQ7XG4gICAgdHlwZSA9ICd0b29sX2NhbGxfaXRlbSc7XG4gICAgY29uc3RydWN0b3IocmF3SXRlbSwgYWdlbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5yYXdJdGVtID0gcmF3SXRlbTtcbiAgICAgICAgdGhpcy5hZ2VudCA9IGFnZW50O1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcbiAgICAgICAgICAgIGFnZW50OiB0aGlzLmFnZW50LnRvSlNPTigpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSdW5Ub29sQ2FsbE91dHB1dEl0ZW0gZXh0ZW5kcyBSdW5JdGVtQmFzZSB7XG4gICAgcmF3SXRlbTtcbiAgICBhZ2VudDtcbiAgICBvdXRwdXQ7XG4gICAgdHlwZSA9ICd0b29sX2NhbGxfb3V0cHV0X2l0ZW0nO1xuICAgIGNvbnN0cnVjdG9yKHJhd0l0ZW0sIGFnZW50LCBvdXRwdXQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5yYXdJdGVtID0gcmF3SXRlbTtcbiAgICAgICAgdGhpcy5hZ2VudCA9IGFnZW50O1xuICAgICAgICB0aGlzLm91dHB1dCA9IG91dHB1dDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICBhZ2VudDogdGhpcy5hZ2VudC50b0pTT04oKSxcbiAgICAgICAgICAgIG91dHB1dDogdG9TbWFydFN0cmluZyh0aGlzLm91dHB1dCksXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJ1blJlYXNvbmluZ0l0ZW0gZXh0ZW5kcyBSdW5JdGVtQmFzZSB7XG4gICAgcmF3SXRlbTtcbiAgICBhZ2VudDtcbiAgICB0eXBlID0gJ3JlYXNvbmluZ19pdGVtJztcbiAgICBjb25zdHJ1Y3RvcihyYXdJdGVtLCBhZ2VudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJhd0l0ZW0gPSByYXdJdGVtO1xuICAgICAgICB0aGlzLmFnZW50ID0gYWdlbnQ7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgYWdlbnQ6IHRoaXMuYWdlbnQudG9KU09OKCksXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJ1bkhhbmRvZmZDYWxsSXRlbSBleHRlbmRzIFJ1bkl0ZW1CYXNlIHtcbiAgICByYXdJdGVtO1xuICAgIGFnZW50O1xuICAgIHR5cGUgPSAnaGFuZG9mZl9jYWxsX2l0ZW0nO1xuICAgIGNvbnN0cnVjdG9yKHJhd0l0ZW0sIGFnZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucmF3SXRlbSA9IHJhd0l0ZW07XG4gICAgICAgIHRoaXMuYWdlbnQgPSBhZ2VudDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICBhZ2VudDogdGhpcy5hZ2VudC50b0pTT04oKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUnVuSGFuZG9mZk91dHB1dEl0ZW0gZXh0ZW5kcyBSdW5JdGVtQmFzZSB7XG4gICAgcmF3SXRlbTtcbiAgICBzb3VyY2VBZ2VudDtcbiAgICB0YXJnZXRBZ2VudDtcbiAgICB0eXBlID0gJ2hhbmRvZmZfb3V0cHV0X2l0ZW0nO1xuICAgIGNvbnN0cnVjdG9yKHJhd0l0ZW0sIHNvdXJjZUFnZW50LCB0YXJnZXRBZ2VudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJhd0l0ZW0gPSByYXdJdGVtO1xuICAgICAgICB0aGlzLnNvdXJjZUFnZW50ID0gc291cmNlQWdlbnQ7XG4gICAgICAgIHRoaXMudGFyZ2V0QWdlbnQgPSB0YXJnZXRBZ2VudDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICBzb3VyY2VBZ2VudDogdGhpcy5zb3VyY2VBZ2VudC50b0pTT04oKSxcbiAgICAgICAgICAgIHRhcmdldEFnZW50OiB0aGlzLnRhcmdldEFnZW50LnRvSlNPTigpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSdW5Ub29sQXBwcm92YWxJdGVtIGV4dGVuZHMgUnVuSXRlbUJhc2Uge1xuICAgIHJhd0l0ZW07XG4gICAgYWdlbnQ7XG4gICAgdHlwZSA9ICd0b29sX2FwcHJvdmFsX2l0ZW0nO1xuICAgIGNvbnN0cnVjdG9yKHJhd0l0ZW0sIGFnZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucmF3SXRlbSA9IHJhd0l0ZW07XG4gICAgICAgIHRoaXMuYWdlbnQgPSBhZ2VudDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICBhZ2VudDogdGhpcy5hZ2VudC50b0pTT04oKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIEV4dHJhY3QgYWxsIHRleHQgb3V0cHV0IGZyb20gYSBsaXN0IG9mIHJ1biBpdGVtcyBieSBjb25jYXRlbmF0aW5nIHRoZSBjb250ZW50IG9mIGFsbFxuICogbWVzc2FnZSBvdXRwdXQgaXRlbXMuXG4gKlxuICogQHBhcmFtIGl0ZW1zIC0gVGhlIGxpc3Qgb2YgcnVuIGl0ZW1zIHRvIGV4dHJhY3QgdGV4dCBmcm9tLlxuICogQHJldHVybnMgQSBzdHJpbmcgb2YgYWxsIHRoZSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBydW4gaXRlbXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0QWxsVGV4dE91dHB1dChpdGVtcykge1xuICAgIHJldHVybiBpdGVtc1xuICAgICAgICAuZmlsdGVyKChpdGVtKSA9PiBpdGVtLnR5cGUgPT09ICdtZXNzYWdlX291dHB1dF9pdGVtJylcbiAgICAgICAgLm1hcCgoaXRlbSkgPT4gaXRlbS5jb250ZW50KVxuICAgICAgICAuam9pbignJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVtcy5tanMubWFwIiwiLyoqXG4gKiBHZXQgdGhlIGxhc3QgdGV4dCBmcm9tIHRoZSBvdXRwdXQgbWVzc2FnZS5cbiAqIEBwYXJhbSBvdXRwdXRNZXNzYWdlXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFzdFRleHRGcm9tT3V0cHV0TWVzc2FnZShvdXRwdXRNZXNzYWdlKSB7XG4gICAgaWYgKG91dHB1dE1lc3NhZ2UudHlwZSAhPT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChvdXRwdXRNZXNzYWdlLnJvbGUgIT09ICdhc3Npc3RhbnQnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGxhc3RJdGVtID0gb3V0cHV0TWVzc2FnZS5jb250ZW50W291dHB1dE1lc3NhZ2UuY29udGVudC5sZW5ndGggLSAxXTtcbiAgICBpZiAobGFzdEl0ZW0udHlwZSAhPT0gJ291dHB1dF90ZXh0Jykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbGFzdEl0ZW0udGV4dDtcbn1cbi8qKlxuICogR2V0IHRoZSBsYXN0IHRleHQgZnJvbSB0aGUgb3V0cHV0IG1lc3NhZ2UuXG4gKiBAcGFyYW0gb3V0cHV0XG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3V0cHV0VGV4dChvdXRwdXQpIHtcbiAgICBpZiAob3V0cHV0Lm91dHB1dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gKGdldExhc3RUZXh0RnJvbU91dHB1dE1lc3NhZ2Uob3V0cHV0Lm91dHB1dFtvdXRwdXQub3V0cHV0Lmxlbmd0aCAtIDFdKSB8fCAnJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlcy5tanMubWFwIiwiLyoqXG4gKiBTdHJlYW1pbmcgZXZlbnQgZnJvbSB0aGUgTExNLiBUaGVzZSBhcmUgYHJhd2AgZXZlbnRzLCBpLmUuIHRoZXkgYXJlIGRpcmVjdGx5IHBhc3NlZCB0aHJvdWdoIGZyb21cbiAqIHRoZSBMTE0uXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW5SYXdNb2RlbFN0cmVhbUV2ZW50IHtcbiAgICBkYXRhO1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC5cbiAgICAgKi9cbiAgICB0eXBlID0gJ3Jhd19tb2RlbF9zdHJlYW1fZXZlbnQnO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBkYXRhIFRoZSByYXcgcmVzcG9uc2VzIHN0cmVhbSBldmVudHMgZnJvbSB0aGUgTExNLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG4vKipcbiAqIFN0cmVhbWluZyBldmVudHMgdGhhdCB3cmFwIGEgYFJ1bkl0ZW1gLiBBcyB0aGUgYWdlbnQgcHJvY2Vzc2VzIHRoZSBMTE0gcmVzcG9uc2UsIGl0IHdpbGwgZ2VuZXJhdGVcbiAqIHRoZXNlIGV2ZW50cyBmcm9tIG5ldyBtZXNzYWdlcywgdG9vbCBjYWxscywgdG9vbCBvdXRwdXRzLCBoYW5kb2ZmcywgZXRjLlxuICovXG5leHBvcnQgY2xhc3MgUnVuSXRlbVN0cmVhbUV2ZW50IHtcbiAgICBuYW1lO1xuICAgIGl0ZW07XG4gICAgdHlwZSA9ICdydW5faXRlbV9zdHJlYW1fZXZlbnQnO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudC5cbiAgICAgKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0aGF0IHdhcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGl0ZW0pIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5pdGVtID0gaXRlbTtcbiAgICB9XG59XG4vKipcbiAqIEV2ZW50IHRoYXQgbm90aWZpZXMgdGhhdCB0aGVyZSBpcyBhIG5ldyBhZ2VudCBydW5uaW5nLlxuICovXG5leHBvcnQgY2xhc3MgUnVuQWdlbnRVcGRhdGVkU3RyZWFtRXZlbnQge1xuICAgIGFnZW50O1xuICAgIHR5cGUgPSAnYWdlbnRfdXBkYXRlZF9zdHJlYW1fZXZlbnQnO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBhZ2VudCBUaGUgbmV3IGFnZW50XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYWdlbnQpIHtcbiAgICAgICAgdGhpcy5hZ2VudCA9IGFnZW50O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50cy5tanMubWFwIiwiaW1wb3J0IHsgTW9kZWxCZWhhdmlvckVycm9yLCBUb29sQ2FsbEVycm9yLCBVc2VyRXJyb3IgfSBmcm9tIFwiLi9lcnJvcnMubWpzXCI7XG5pbXBvcnQgeyBnZXRUcmFuc2Zlck1lc3NhZ2UgfSBmcm9tIFwiLi9oYW5kb2ZmLm1qc1wiO1xuaW1wb3J0IHsgUnVuSGFuZG9mZkNhbGxJdGVtLCBSdW5IYW5kb2ZmT3V0cHV0SXRlbSwgUnVuTWVzc2FnZU91dHB1dEl0ZW0sIFJ1blJlYXNvbmluZ0l0ZW0sIFJ1blRvb2xBcHByb3ZhbEl0ZW0sIFJ1blRvb2xDYWxsSXRlbSwgUnVuVG9vbENhbGxPdXRwdXRJdGVtLCB9IGZyb20gXCIuL2l0ZW1zLm1qc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyBnZXRMYXN0VGV4dEZyb21PdXRwdXRNZXNzYWdlIH0gZnJvbSBcIi4vdXRpbHMvbWVzc2FnZXMubWpzXCI7XG5pbXBvcnQgeyB3aXRoRnVuY3Rpb25TcGFuLCB3aXRoSGFuZG9mZlNwYW4gfSBmcm9tIFwiLi90cmFjaW5nL2NyZWF0ZVNwYW5zLm1qc1wiO1xuaW1wb3J0IHsgZ2V0U2NoZW1hQW5kUGFyc2VyRnJvbUlucHV0VHlwZSB9IGZyb20gXCIuL3V0aWxzL3Rvb2xzLm1qc1wiO1xuaW1wb3J0IHsgc2FmZUV4ZWN1dGUgfSBmcm9tIFwiLi91dGlscy9zYWZlRXhlY3V0ZS5tanNcIjtcbmltcG9ydCB7IGFkZEVycm9yVG9DdXJyZW50U3BhbiB9IGZyb20gXCIuL3RyYWNpbmcvY29udGV4dC5tanNcIjtcbmltcG9ydCB7IFJ1bkl0ZW1TdHJlYW1FdmVudCB9IGZyb20gXCIuL2V2ZW50cy5tanNcIjtcbmltcG9ydCB7IHogfSBmcm9tICdAb3BlbmFpL3pvZC92Myc7XG5pbXBvcnQgeyB0b1NtYXJ0U3RyaW5nIH0gZnJvbSBcIi4vdXRpbHMvc21hcnRTdHJpbmcubWpzXCI7XG5pbXBvcnQgeyBpc1pvZE9iamVjdCB9IGZyb20gXCIuL3V0aWxzL2luZGV4Lm1qc1wiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NNb2RlbFJlc3BvbnNlKG1vZGVsUmVzcG9uc2UsIGFnZW50LCB0b29scywgaGFuZG9mZnMpIHtcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgIGNvbnN0IHJ1bkhhbmRvZmZzID0gW107XG4gICAgY29uc3QgcnVuRnVuY3Rpb25zID0gW107XG4gICAgY29uc3QgcnVuQ29tcHV0ZXJBY3Rpb25zID0gW107XG4gICAgY29uc3QgcnVuTUNQQXBwcm92YWxSZXF1ZXN0cyA9IFtdO1xuICAgIGNvbnN0IHRvb2xzVXNlZCA9IFtdO1xuICAgIGNvbnN0IGhhbmRvZmZNYXAgPSBuZXcgTWFwKGhhbmRvZmZzLm1hcCgoaCkgPT4gW2gudG9vbE5hbWUsIGhdKSk7XG4gICAgY29uc3QgZnVuY3Rpb25NYXAgPSBuZXcgTWFwKHRvb2xzLmZpbHRlcigodCkgPT4gdC50eXBlID09PSAnZnVuY3Rpb24nKS5tYXAoKHQpID0+IFt0Lm5hbWUsIHRdKSk7XG4gICAgY29uc3QgY29tcHV0ZXJUb29sID0gdG9vbHMuZmluZCgodCkgPT4gdC50eXBlID09PSAnY29tcHV0ZXInKTtcbiAgICBjb25zdCBtY3BUb29sTWFwID0gbmV3IE1hcCh0b29sc1xuICAgICAgICAuZmlsdGVyKCh0KSA9PiB0LnR5cGUgPT09ICdob3N0ZWRfdG9vbCcgJiYgdC5wcm92aWRlckRhdGE/LnR5cGUgPT09ICdtY3AnKVxuICAgICAgICAubWFwKCh0KSA9PiB0KVxuICAgICAgICAubWFwKCh0KSA9PiBbdC5wcm92aWRlckRhdGEuc2VydmVyX2xhYmVsLCB0XSkpO1xuICAgIGZvciAoY29uc3Qgb3V0cHV0IG9mIG1vZGVsUmVzcG9uc2Uub3V0cHV0KSB7XG4gICAgICAgIGlmIChvdXRwdXQudHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICBpZiAob3V0cHV0LnJvbGUgPT09ICdhc3Npc3RhbnQnKSB7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChuZXcgUnVuTWVzc2FnZU91dHB1dEl0ZW0ob3V0cHV0LCBhZ2VudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG91dHB1dC50eXBlID09PSAnaG9zdGVkX3Rvb2xfY2FsbCcpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2gobmV3IFJ1blRvb2xDYWxsSXRlbShvdXRwdXQsIGFnZW50KSk7XG4gICAgICAgICAgICBjb25zdCB0b29sTmFtZSA9IG91dHB1dC5uYW1lO1xuICAgICAgICAgICAgdG9vbHNVc2VkLnB1c2godG9vbE5hbWUpO1xuICAgICAgICAgICAgaWYgKG91dHB1dC5wcm92aWRlckRhdGE/LnR5cGUgPT09ICdtY3BfYXBwcm92YWxfcmVxdWVzdCcgfHxcbiAgICAgICAgICAgICAgICBvdXRwdXQubmFtZSA9PT0gJ21jcF9hcHByb3ZhbF9yZXF1ZXN0Jykge1xuICAgICAgICAgICAgICAgIC8vIEhvc3RlZCByZW1vdGUgTUNQIHNlcnZlcidzIGFwcHJvdmFsIHByb2Nlc3NcbiAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlckRhdGEgPSBvdXRwdXQucHJvdmlkZXJEYXRhO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1jcFNlcnZlckxhYmVsID0gcHJvdmlkZXJEYXRhLnNlcnZlcl9sYWJlbDtcbiAgICAgICAgICAgICAgICBjb25zdCBtY3BTZXJ2ZXJUb29sID0gbWNwVG9vbE1hcC5nZXQobWNwU2VydmVyTGFiZWwpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWNwU2VydmVyVG9vbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBNQ1Agc2VydmVyICgke21jcFNlcnZlckxhYmVsfSkgbm90IGZvdW5kIGluIEFnZW50ICgke2FnZW50Lm5hbWV9KWA7XG4gICAgICAgICAgICAgICAgICAgIGFkZEVycm9yVG9DdXJyZW50U3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBtY3Bfc2VydmVyX2xhYmVsOiBtY3BTZXJ2ZXJMYWJlbCB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1vZGVsQmVoYXZpb3JFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRG8gdGhpcyBhcHByb3ZhbCBsYXRlcjpcbiAgICAgICAgICAgICAgICAvLyBXZSBzdXBwb3J0IGJvdGggb25BcHByb3ZhbCBjYWxsYmFjayAobGlrZSB0aGUgUHl0aG9uIFNESyBkb2VzKSBhbmQgSElUTCBwYXR0ZXJucy5cbiAgICAgICAgICAgICAgICBjb25zdCBhcHByb3ZhbEl0ZW0gPSBuZXcgUnVuVG9vbEFwcHJvdmFsSXRlbSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdob3N0ZWRfdG9vbF9jYWxsJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgbXVzdCB1c2UgdGhpcyBuYW1lIHRvIGFsaWduIHdpdGggdGhlIG5hbWUgc2VudCBmcm9tIHRoZSBzZXJ2ZXJzXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHByb3ZpZGVyRGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBpZDogcHJvdmlkZXJEYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdpbl9wcm9ncmVzcycsXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyRGF0YSxcbiAgICAgICAgICAgICAgICB9LCBhZ2VudCk7XG4gICAgICAgICAgICAgICAgcnVuTUNQQXBwcm92YWxSZXF1ZXN0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEl0ZW06IGFwcHJvdmFsSXRlbSxcbiAgICAgICAgICAgICAgICAgICAgbWNwVG9vbDogbWNwU2VydmVyVG9vbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIW1jcFNlcnZlclRvb2wucHJvdmlkZXJEYXRhLm9uX2FwcHJvdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gb25BcHByb3ZhbCBmdW5jdGlvbiBleGlzdHMsIGl0IGNvbmZpcm1zIHRoZSBhcHByb3ZhbCByaWdodCBhZnRlciB0aGlzLlxuICAgICAgICAgICAgICAgICAgICAvLyBUaHVzLCB0aGlzIGFwcHJvdmFsIGl0ZW0gbXVzdCBiZSBhcHBlbmRlZCBvbmx5IGZvciB0aGUgbmV4dCB0dXJuIGludGVycnVwdGlvbiBwYXR0ZXJucy5cbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChhcHByb3ZhbEl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvdXRwdXQudHlwZSA9PT0gJ3JlYXNvbmluZycpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2gobmV3IFJ1blJlYXNvbmluZ0l0ZW0ob3V0cHV0LCBhZ2VudCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG91dHB1dC50eXBlID09PSAnY29tcHV0ZXJfY2FsbCcpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2gobmV3IFJ1blRvb2xDYWxsSXRlbShvdXRwdXQsIGFnZW50KSk7XG4gICAgICAgICAgICB0b29sc1VzZWQucHVzaCgnY29tcHV0ZXJfdXNlJyk7XG4gICAgICAgICAgICBpZiAoIWNvbXB1dGVyVG9vbCkge1xuICAgICAgICAgICAgICAgIGFkZEVycm9yVG9DdXJyZW50U3Bhbih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdNb2RlbCBwcm9kdWNlZCBjb21wdXRlciBhY3Rpb24gd2l0aG91dCBhIGNvbXB1dGVyIHRvb2wuJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWdlbnRfbmFtZTogYWdlbnQubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKCdNb2RlbCBwcm9kdWNlZCBjb21wdXRlciBhY3Rpb24gd2l0aG91dCBhIGNvbXB1dGVyIHRvb2wuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydW5Db21wdXRlckFjdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdG9vbENhbGw6IG91dHB1dCxcbiAgICAgICAgICAgICAgICBjb21wdXRlcjogY29tcHV0ZXJUb29sLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG91dHB1dC50eXBlICE9PSAnZnVuY3Rpb25fY2FsbCcpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRvb2xzVXNlZC5wdXNoKG91dHB1dC5uYW1lKTtcbiAgICAgICAgY29uc3QgaGFuZG9mZiA9IGhhbmRvZmZNYXAuZ2V0KG91dHB1dC5uYW1lKTtcbiAgICAgICAgaWYgKGhhbmRvZmYpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2gobmV3IFJ1bkhhbmRvZmZDYWxsSXRlbShvdXRwdXQsIGFnZW50KSk7XG4gICAgICAgICAgICBydW5IYW5kb2Zmcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0b29sQ2FsbDogb3V0cHV0LFxuICAgICAgICAgICAgICAgIGhhbmRvZmY6IGhhbmRvZmYsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bmN0aW9uVG9vbCA9IGZ1bmN0aW9uTWFwLmdldChvdXRwdXQubmFtZSk7XG4gICAgICAgICAgICBpZiAoIWZ1bmN0aW9uVG9vbCkge1xuICAgICAgICAgICAgICAgIGFkZEVycm9yVG9DdXJyZW50U3Bhbih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBUb29sICR7b3V0cHV0Lm5hbWV9IG5vdCBmb3VuZCBpbiBhZ2VudCAke2FnZW50Lm5hbWV9LmAsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xfbmFtZTogb3V0cHV0Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhZ2VudF9uYW1lOiBhZ2VudC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBNb2RlbEJlaGF2aW9yRXJyb3IoYFRvb2wgJHtvdXRwdXQubmFtZX0gbm90IGZvdW5kIGluIGFnZW50ICR7YWdlbnQubmFtZX0uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtcy5wdXNoKG5ldyBSdW5Ub29sQ2FsbEl0ZW0ob3V0cHV0LCBhZ2VudCkpO1xuICAgICAgICAgICAgcnVuRnVuY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIHRvb2xDYWxsOiBvdXRwdXQsXG4gICAgICAgICAgICAgICAgdG9vbDogZnVuY3Rpb25Ub29sLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmV3SXRlbXM6IGl0ZW1zLFxuICAgICAgICBoYW5kb2ZmczogcnVuSGFuZG9mZnMsXG4gICAgICAgIGZ1bmN0aW9uczogcnVuRnVuY3Rpb25zLFxuICAgICAgICBjb21wdXRlckFjdGlvbnM6IHJ1bkNvbXB1dGVyQWN0aW9ucyxcbiAgICAgICAgbWNwQXBwcm92YWxSZXF1ZXN0czogcnVuTUNQQXBwcm92YWxSZXF1ZXN0cyxcbiAgICAgICAgdG9vbHNVc2VkOiB0b29sc1VzZWQsXG4gICAgICAgIGhhc1Rvb2xzT3JBcHByb3ZhbHNUb1J1bigpIHtcbiAgICAgICAgICAgIHJldHVybiAocnVuSGFuZG9mZnMubGVuZ3RoID4gMCB8fFxuICAgICAgICAgICAgICAgIHJ1bkZ1bmN0aW9ucy5sZW5ndGggPiAwIHx8XG4gICAgICAgICAgICAgICAgcnVuTUNQQXBwcm92YWxSZXF1ZXN0cy5sZW5ndGggPiAwIHx8XG4gICAgICAgICAgICAgICAgcnVuQ29tcHV0ZXJBY3Rpb25zLmxlbmd0aCA+IDApO1xuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgbmV4dFN0ZXBTY2hlbWEgPSB6LmRpc2NyaW1pbmF0ZWRVbmlvbigndHlwZScsIFtcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnbmV4dF9zdGVwX2hhbmRvZmYnKSxcbiAgICAgICAgbmV3QWdlbnQ6IHouYW55KCksXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ25leHRfc3RlcF9maW5hbF9vdXRwdXQnKSxcbiAgICAgICAgb3V0cHV0OiB6LnN0cmluZygpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCduZXh0X3N0ZXBfcnVuX2FnYWluJyksXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ25leHRfc3RlcF9pbnRlcnJ1cHRpb24nKSxcbiAgICAgICAgZGF0YTogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSksXG4gICAgfSksXG5dKTtcbmNsYXNzIFNpbmdsZVN0ZXBSZXN1bHQge1xuICAgIG9yaWdpbmFsSW5wdXQ7XG4gICAgbW9kZWxSZXNwb25zZTtcbiAgICBwcmVTdGVwSXRlbXM7XG4gICAgbmV3U3RlcEl0ZW1zO1xuICAgIG5leHRTdGVwO1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBpbnB1dCBpdGVtcyBpLmUuIHRoZSBpdGVtcyBiZWZvcmUgcnVuKCkgd2FzIGNhbGxlZC4gTWF5IGJlIG11dGVkIGJ5IGhhbmRvZmYgaW5wdXQgZmlsdGVyc1xuICAgICAqL1xuICAgIG9yaWdpbmFsSW5wdXQsIFxuICAgIC8qKlxuICAgICAqIFRoZSBtb2RlbCByZXNwb25zZSBmb3IgdGhlIGN1cnJlbnQgc3RlcFxuICAgICAqL1xuICAgIG1vZGVsUmVzcG9uc2UsIFxuICAgIC8qKlxuICAgICAqIFRoZSBpdGVtcyBiZWZvcmUgdGhlIGN1cnJlbnQgc3RlcCB3YXMgZXhlY3V0ZWRcbiAgICAgKi9cbiAgICBwcmVTdGVwSXRlbXMsIFxuICAgIC8qKlxuICAgICAqIFRoZSBpdGVtcyBhZnRlciB0aGUgY3VycmVudCBzdGVwIHdhcyBleGVjdXRlZFxuICAgICAqL1xuICAgIG5ld1N0ZXBJdGVtcywgXG4gICAgLyoqXG4gICAgICogVGhlIG5leHQgc3RlcCB0byBleGVjdXRlXG4gICAgICovXG4gICAgbmV4dFN0ZXApIHtcbiAgICAgICAgdGhpcy5vcmlnaW5hbElucHV0ID0gb3JpZ2luYWxJbnB1dDtcbiAgICAgICAgdGhpcy5tb2RlbFJlc3BvbnNlID0gbW9kZWxSZXNwb25zZTtcbiAgICAgICAgdGhpcy5wcmVTdGVwSXRlbXMgPSBwcmVTdGVwSXRlbXM7XG4gICAgICAgIHRoaXMubmV3U3RlcEl0ZW1zID0gbmV3U3RlcEl0ZW1zO1xuICAgICAgICB0aGlzLm5leHRTdGVwID0gbmV4dFN0ZXA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBpdGVtcyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBhZ2VudCBydW4gKGkuZS4gZXZlcnl0aGluZyBnZW5lcmF0ZWQgYWZ0ZXIgb3JpZ2luYWxJbnB1dClcbiAgICAgKi9cbiAgICBnZXQgZ2VuZXJhdGVkSXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZVN0ZXBJdGVtcy5jb25jYXQodGhpcy5uZXdTdGVwSXRlbXMpO1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXliZVJlc2V0VG9vbENob2ljZShhZ2VudCwgdG9vbFVzZVRyYWNrZXIsIG1vZGVsU2V0dGluZ3MpIHtcbiAgICBpZiAoYWdlbnQucmVzZXRUb29sQ2hvaWNlICYmIHRvb2xVc2VUcmFja2VyLmhhc1VzZWRUb29scyhhZ2VudCkpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4ubW9kZWxTZXR0aW5ncywgdG9vbENob2ljZTogdW5kZWZpbmVkIH07XG4gICAgfVxuICAgIHJldHVybiBtb2RlbFNldHRpbmdzO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVJbnRlcnJ1cHRlZFRvb2xzQW5kU2lkZUVmZmVjdHMoYWdlbnQsIG9yaWdpbmFsSW5wdXQsIG9yaWdpbmFsUHJlU3RlcEl0ZW1zLCBuZXdSZXNwb25zZSwgcHJvY2Vzc2VkUmVzcG9uc2UsIHJ1bm5lciwgc3RhdGUpIHtcbiAgICAvLyBjYWxsX2lkcyBmb3IgZnVuY3Rpb24gdG9vbHNcbiAgICBjb25zdCBmdW5jdGlvbkNhbGxJZHMgPSBvcmlnaW5hbFByZVN0ZXBJdGVtc1xuICAgICAgICAuZmlsdGVyKChpdGVtKSA9PiBpdGVtIGluc3RhbmNlb2YgUnVuVG9vbEFwcHJvdmFsSXRlbSAmJlxuICAgICAgICAnY2FsbElkJyBpbiBpdGVtLnJhd0l0ZW0gJiZcbiAgICAgICAgaXRlbS5yYXdJdGVtLnR5cGUgPT09ICdmdW5jdGlvbl9jYWxsJylcbiAgICAgICAgLm1hcCgoaXRlbSkgPT4gaXRlbS5yYXdJdGVtLmNhbGxJZCk7XG4gICAgLy8gUnVuIGZ1bmN0aW9uIHRvb2xzIHRoYXQgcmVxdWlyZSBhcHByb3ZhbCBhZnRlciB0aGV5IGdldCB0aGVpciBhcHByb3ZhbCByZXN1bHRzXG4gICAgY29uc3QgZnVuY3Rpb25Ub29sUnVucyA9IHByb2Nlc3NlZFJlc3BvbnNlLmZ1bmN0aW9ucy5maWx0ZXIoKHJ1bikgPT4ge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb25DYWxsSWRzLmluY2x1ZGVzKHJ1bi50b29sQ2FsbC5jYWxsSWQpO1xuICAgIH0pO1xuICAgIGNvbnN0IGZ1bmN0aW9uUmVzdWx0cyA9IGF3YWl0IGV4ZWN1dGVGdW5jdGlvblRvb2xDYWxscyhhZ2VudCwgZnVuY3Rpb25Ub29sUnVucywgcnVubmVyLCBzdGF0ZSk7XG4gICAgLy8gQ3JlYXRlIHRoZSBpbml0aWFsIHNldCBvZiB0aGUgb3V0cHV0IGl0ZW1zXG4gICAgY29uc3QgbmV3SXRlbXMgPSBmdW5jdGlvblJlc3VsdHMubWFwKChyKSA9PiByLnJ1bkl0ZW0pO1xuICAgIC8vIFJ1biBNQ1AgdG9vbHMgdGhhdCByZXF1aXJlIGFwcHJvdmFsIGFmdGVyIHRoZXkgZ2V0IHRoZWlyIGFwcHJvdmFsIHJlc3VsdHNcbiAgICBjb25zdCBtY3BBcHByb3ZhbFJ1bnMgPSBwcm9jZXNzZWRSZXNwb25zZS5tY3BBcHByb3ZhbFJlcXVlc3RzLmZpbHRlcigocnVuKSA9PiB7XG4gICAgICAgIHJldHVybiAocnVuLnJlcXVlc3RJdGVtLnR5cGUgPT09ICd0b29sX2FwcHJvdmFsX2l0ZW0nICYmXG4gICAgICAgICAgICBydW4ucmVxdWVzdEl0ZW0ucmF3SXRlbS50eXBlID09PSAnaG9zdGVkX3Rvb2xfY2FsbCcgJiZcbiAgICAgICAgICAgIHJ1bi5yZXF1ZXN0SXRlbS5yYXdJdGVtLnByb3ZpZGVyRGF0YT8udHlwZSA9PT0gJ21jcF9hcHByb3ZhbF9yZXF1ZXN0Jyk7XG4gICAgfSk7XG4gICAgZm9yIChjb25zdCBydW4gb2YgbWNwQXBwcm92YWxSdW5zKSB7XG4gICAgICAgIC8vIHRoZSBhcHByb3ZhbF9yZXF1ZXN0X2lkIFwibWNwcl8xMjMuLi5cIlxuICAgICAgICBjb25zdCBhcHByb3ZhbFJlcXVlc3RJZCA9IHJ1bi5yZXF1ZXN0SXRlbS5yYXdJdGVtLmlkO1xuICAgICAgICBjb25zdCBhcHByb3ZlZCA9IHN0YXRlLl9jb250ZXh0LmlzVG9vbEFwcHJvdmVkKHtcbiAgICAgICAgICAgIC8vIFNpbmNlIHRoaXMgaXRlbSBuYW1lIG11c3QgYmUgdGhlIHNhbWUgd2l0aCB0aGUgb25lIHNlbnQgZnJvbSBSZXNwb25zZXMgQVBJIHNlcnZlclxuICAgICAgICAgICAgdG9vbE5hbWU6IHJ1bi5yZXF1ZXN0SXRlbS5yYXdJdGVtLm5hbWUsXG4gICAgICAgICAgICBjYWxsSWQ6IGFwcHJvdmFsUmVxdWVzdElkLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiBhcHByb3ZlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBhcHByb3ZlOiBhcHByb3ZlZCxcbiAgICAgICAgICAgICAgICBhcHByb3ZhbF9yZXF1ZXN0X2lkOiBhcHByb3ZhbFJlcXVlc3RJZCxcbiAgICAgICAgICAgICAgICByZWFzb246IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBUZWxsIFJlc3BvbnNlcyBBUEkgc2VydmVyIHRoZSBhcHByb3ZhbCByZXN1bHQgaW4gdGhlIG5leHQgdHVyblxuICAgICAgICAgICAgbmV3SXRlbXMucHVzaChuZXcgUnVuVG9vbENhbGxJdGVtKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnaG9zdGVkX3Rvb2xfY2FsbCcsXG4gICAgICAgICAgICAgICAgbmFtZTogJ21jcF9hcHByb3ZhbF9yZXNwb25zZScsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhLFxuICAgICAgICAgICAgfSwgYWdlbnQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjaGVja1Rvb2xPdXRwdXQgPSBhd2FpdCBjaGVja0ZvckZpbmFsT3V0cHV0RnJvbVRvb2xzKGFnZW50LCBmdW5jdGlvblJlc3VsdHMsIHN0YXRlKTtcbiAgICAvLyBFeGNsdWRlIHRoZSB0b29sIGFwcHJvdmFsIGl0ZW1zLCB3aGljaCBzaG91bGQgbm90IGJlIHNlbnQgdG8gUmVzcG9uc2VzIEFQSSxcbiAgICAvLyBmcm9tIHRoZSBTaW5nbGVTdGVwUmVzdWx0J3MgcHJlU3RlcEl0ZW1zXG4gICAgY29uc3QgcHJlU3RlcEl0ZW1zID0gb3JpZ2luYWxQcmVTdGVwSXRlbXMuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiAhKGl0ZW0gaW5zdGFuY2VvZiBSdW5Ub29sQXBwcm92YWxJdGVtKTtcbiAgICB9KTtcbiAgICBpZiAoY2hlY2tUb29sT3V0cHV0LmlzRmluYWxPdXRwdXQpIHtcbiAgICAgICAgcnVubmVyLmVtaXQoJ2FnZW50X2VuZCcsIHN0YXRlLl9jb250ZXh0LCBhZ2VudCwgY2hlY2tUb29sT3V0cHV0LmZpbmFsT3V0cHV0KTtcbiAgICAgICAgYWdlbnQuZW1pdCgnYWdlbnRfZW5kJywgc3RhdGUuX2NvbnRleHQsIGNoZWNrVG9vbE91dHB1dC5maW5hbE91dHB1dCk7XG4gICAgICAgIHJldHVybiBuZXcgU2luZ2xlU3RlcFJlc3VsdChvcmlnaW5hbElucHV0LCBuZXdSZXNwb25zZSwgcHJlU3RlcEl0ZW1zLCBuZXdJdGVtcywge1xuICAgICAgICAgICAgdHlwZTogJ25leHRfc3RlcF9maW5hbF9vdXRwdXQnLFxuICAgICAgICAgICAgb3V0cHV0OiBjaGVja1Rvb2xPdXRwdXQuZmluYWxPdXRwdXQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaGVja1Rvb2xPdXRwdXQuaXNJbnRlcnJ1cHRlZCkge1xuICAgICAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3SXRlbXMsIHtcbiAgICAgICAgICAgIHR5cGU6ICduZXh0X3N0ZXBfaW50ZXJydXB0aW9uJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBpbnRlcnJ1cHRpb25zOiBjaGVja1Rvb2xPdXRwdXQuaW50ZXJydXB0aW9ucyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyB3ZSBvbmx5IHJhbiBuZXcgdG9vbHMgYW5kIHNpZGUgZWZmZWN0cy4gV2UgbmVlZCB0byBydW4gdGhlIHJlc3Qgb2YgdGhlIGFnZW50XG4gICAgcmV0dXJuIG5ldyBTaW5nbGVTdGVwUmVzdWx0KG9yaWdpbmFsSW5wdXQsIG5ld1Jlc3BvbnNlLCBwcmVTdGVwSXRlbXMsIG5ld0l0ZW1zLCB7IHR5cGU6ICduZXh0X3N0ZXBfcnVuX2FnYWluJyB9KTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjdXRlVG9vbHNBbmRTaWRlRWZmZWN0cyhhZ2VudCwgb3JpZ2luYWxJbnB1dCwgb3JpZ2luYWxQcmVTdGVwSXRlbXMsIG5ld1Jlc3BvbnNlLCBwcm9jZXNzZWRSZXNwb25zZSwgcnVubmVyLCBzdGF0ZSkge1xuICAgIGNvbnN0IHByZVN0ZXBJdGVtcyA9IG9yaWdpbmFsUHJlU3RlcEl0ZW1zO1xuICAgIGxldCBuZXdJdGVtcyA9IHByb2Nlc3NlZFJlc3BvbnNlLm5ld0l0ZW1zO1xuICAgIGNvbnN0IFtmdW5jdGlvblJlc3VsdHMsIGNvbXB1dGVyUmVzdWx0c10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIGV4ZWN1dGVGdW5jdGlvblRvb2xDYWxscyhhZ2VudCwgcHJvY2Vzc2VkUmVzcG9uc2UuZnVuY3Rpb25zLCBydW5uZXIsIHN0YXRlKSxcbiAgICAgICAgZXhlY3V0ZUNvbXB1dGVyQWN0aW9ucyhhZ2VudCwgcHJvY2Vzc2VkUmVzcG9uc2UuY29tcHV0ZXJBY3Rpb25zLCBydW5uZXIsIHN0YXRlLl9jb250ZXh0KSxcbiAgICBdKTtcbiAgICBuZXdJdGVtcyA9IG5ld0l0ZW1zLmNvbmNhdChmdW5jdGlvblJlc3VsdHMubWFwKChyKSA9PiByLnJ1bkl0ZW0pKTtcbiAgICBuZXdJdGVtcyA9IG5ld0l0ZW1zLmNvbmNhdChjb21wdXRlclJlc3VsdHMpO1xuICAgIC8vIHJ1biBob3N0ZWQgTUNQIGFwcHJvdmFsIHJlcXVlc3RzXG4gICAgaWYgKHByb2Nlc3NlZFJlc3BvbnNlLm1jcEFwcHJvdmFsUmVxdWVzdHMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IGFwcHJvdmFsUmVxdWVzdCBvZiBwcm9jZXNzZWRSZXNwb25zZS5tY3BBcHByb3ZhbFJlcXVlc3RzKSB7XG4gICAgICAgICAgICBjb25zdCB0b29sRGF0YSA9IGFwcHJvdmFsUmVxdWVzdC5tY3BUb29sXG4gICAgICAgICAgICAgICAgLnByb3ZpZGVyRGF0YTtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3REYXRhID0gYXBwcm92YWxSZXF1ZXN0LnJlcXVlc3RJdGVtLnJhd0l0ZW1cbiAgICAgICAgICAgICAgICAucHJvdmlkZXJEYXRhO1xuICAgICAgICAgICAgaWYgKHRvb2xEYXRhLm9uX2FwcHJvdmFsKSB7XG4gICAgICAgICAgICAgICAgLy8gc3luY2hyb25vdXNseSBoYW5kbGUgdGhlIGFwcHJvdmFsIHByb2Nlc3MgaGVyZVxuICAgICAgICAgICAgICAgIGNvbnN0IGFwcHJvdmFsUmVzdWx0ID0gYXdhaXQgdG9vbERhdGEub25fYXBwcm92YWwoc3RhdGUuX2NvbnRleHQsIGFwcHJvdmFsUmVxdWVzdC5yZXF1ZXN0SXRlbSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYXBwcm92YWxSZXNwb25zZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcHJvdmU6IGFwcHJvdmFsUmVzdWx0LmFwcHJvdmUsXG4gICAgICAgICAgICAgICAgICAgIGFwcHJvdmFsX3JlcXVlc3RfaWQ6IHJlcXVlc3REYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICByZWFzb246IGFwcHJvdmFsUmVzdWx0LnJlYXNvbixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG5ld0l0ZW1zLnB1c2gobmV3IFJ1blRvb2xDYWxsSXRlbSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdob3N0ZWRfdG9vbF9jYWxsJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ21jcF9hcHByb3ZhbF9yZXNwb25zZScsXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyRGF0YTogYXBwcm92YWxSZXNwb25zZURhdGEsXG4gICAgICAgICAgICAgICAgfSwgYWdlbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHJlY2VpdmUgYSB1c2VyJ3MgYXBwcm92YWwgb24gdGhlIG5leHQgdHVyblxuICAgICAgICAgICAgICAgIG5ld0l0ZW1zLnB1c2goYXBwcm92YWxSZXF1ZXN0LnJlcXVlc3RJdGVtKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhcHByb3ZhbEl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdob3N0ZWRfbWNwX3Rvb2xfYXBwcm92YWwnLFxuICAgICAgICAgICAgICAgICAgICB0b29sOiBhcHByb3ZhbFJlcXVlc3QubWNwVG9vbCxcbiAgICAgICAgICAgICAgICAgICAgcnVuSXRlbTogbmV3IFJ1blRvb2xBcHByb3ZhbEl0ZW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2hvc3RlZF90b29sX2NhbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVxdWVzdERhdGEubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0RGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogcmVxdWVzdERhdGEuYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhOiByZXF1ZXN0RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgfSwgYWdlbnQpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZnVuY3Rpb25SZXN1bHRzLnB1c2goYXBwcm92YWxJdGVtKTtcbiAgICAgICAgICAgICAgICAvLyBuZXdJdGVtcy5wdXNoKGFwcHJvdmFsSXRlbS5ydW5JdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBwcm9jZXNzIGhhbmRvZmZzXG4gICAgaWYgKHByb2Nlc3NlZFJlc3BvbnNlLmhhbmRvZmZzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGV4ZWN1dGVIYW5kb2ZmQ2FsbHMoYWdlbnQsIG9yaWdpbmFsSW5wdXQsIHByZVN0ZXBJdGVtcywgbmV3SXRlbXMsIG5ld1Jlc3BvbnNlLCBwcm9jZXNzZWRSZXNwb25zZS5oYW5kb2ZmcywgcnVubmVyLCBzdGF0ZS5fY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNoZWNrVG9vbE91dHB1dCA9IGF3YWl0IGNoZWNrRm9yRmluYWxPdXRwdXRGcm9tVG9vbHMoYWdlbnQsIGZ1bmN0aW9uUmVzdWx0cywgc3RhdGUpO1xuICAgIGlmIChjaGVja1Rvb2xPdXRwdXQuaXNGaW5hbE91dHB1dCkge1xuICAgICAgICBydW5uZXIuZW1pdCgnYWdlbnRfZW5kJywgc3RhdGUuX2NvbnRleHQsIGFnZW50LCBjaGVja1Rvb2xPdXRwdXQuZmluYWxPdXRwdXQpO1xuICAgICAgICBhZ2VudC5lbWl0KCdhZ2VudF9lbmQnLCBzdGF0ZS5fY29udGV4dCwgY2hlY2tUb29sT3V0cHV0LmZpbmFsT3V0cHV0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW5nbGVTdGVwUmVzdWx0KG9yaWdpbmFsSW5wdXQsIG5ld1Jlc3BvbnNlLCBwcmVTdGVwSXRlbXMsIG5ld0l0ZW1zLCB7XG4gICAgICAgICAgICB0eXBlOiAnbmV4dF9zdGVwX2ZpbmFsX291dHB1dCcsXG4gICAgICAgICAgICBvdXRwdXQ6IGNoZWNrVG9vbE91dHB1dC5maW5hbE91dHB1dCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNoZWNrVG9vbE91dHB1dC5pc0ludGVycnVwdGVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2luZ2xlU3RlcFJlc3VsdChvcmlnaW5hbElucHV0LCBuZXdSZXNwb25zZSwgcHJlU3RlcEl0ZW1zLCBuZXdJdGVtcywge1xuICAgICAgICAgICAgdHlwZTogJ25leHRfc3RlcF9pbnRlcnJ1cHRpb24nLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGludGVycnVwdGlvbnM6IGNoZWNrVG9vbE91dHB1dC5pbnRlcnJ1cHRpb25zLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGNoZWNrIGlmIHRoZSBhZ2VudCBwcm9kdWNlZCBhbnkgbWVzc2FnZXNcbiAgICBjb25zdCBtZXNzYWdlSXRlbXMgPSBuZXdJdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0gaW5zdGFuY2VvZiBSdW5NZXNzYWdlT3V0cHV0SXRlbSk7XG4gICAgLy8gd2Ugd2lsbCB1c2UgdGhlIGxhc3QgY29udGVudCBvdXRwdXQgYXMgdGhlIGZpbmFsIG91dHB1dFxuICAgIGNvbnN0IHBvdGVudGlhbEZpbmFsT3V0cHV0ID0gbWVzc2FnZUl0ZW1zLmxlbmd0aCA+IDBcbiAgICAgICAgPyBnZXRMYXN0VGV4dEZyb21PdXRwdXRNZXNzYWdlKG1lc3NhZ2VJdGVtc1ttZXNzYWdlSXRlbXMubGVuZ3RoIC0gMV0ucmF3SXRlbSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgLy8gaWYgdGhlcmUgaXMgbm8gb3V0cHV0IHdlIGp1c3QgcnVuIGFnYWluXG4gICAgaWYgKCFwb3RlbnRpYWxGaW5hbE91dHB1dCkge1xuICAgICAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3SXRlbXMsIHsgdHlwZTogJ25leHRfc3RlcF9ydW5fYWdhaW4nIH0pO1xuICAgIH1cbiAgICBpZiAoYWdlbnQub3V0cHV0VHlwZSA9PT0gJ3RleHQnICYmXG4gICAgICAgICFwcm9jZXNzZWRSZXNwb25zZS5oYXNUb29sc09yQXBwcm92YWxzVG9SdW4oKSkge1xuICAgICAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3SXRlbXMsIHtcbiAgICAgICAgICAgIHR5cGU6ICduZXh0X3N0ZXBfZmluYWxfb3V0cHV0JyxcbiAgICAgICAgICAgIG91dHB1dDogcG90ZW50aWFsRmluYWxPdXRwdXQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChhZ2VudC5vdXRwdXRUeXBlICE9PSAndGV4dCcgJiYgcG90ZW50aWFsRmluYWxPdXRwdXQpIHtcbiAgICAgICAgLy8gU3RydWN0dXJlZCBvdXRwdXQgc2NoZW1hID0+IGFsd2F5cyBsZWFkcyB0byBhIGZpbmFsIG91dHB1dCBpZiB3ZSBoYXZlIHRleHRcbiAgICAgICAgY29uc3QgeyBwYXJzZXIgfSA9IGdldFNjaGVtYUFuZFBhcnNlckZyb21JbnB1dFR5cGUoYWdlbnQub3V0cHV0VHlwZSwgJ2ZpbmFsX291dHB1dCcpO1xuICAgICAgICBjb25zdCBbZXJyb3JdID0gYXdhaXQgc2FmZUV4ZWN1dGUoKCkgPT4gcGFyc2VyKHBvdGVudGlhbEZpbmFsT3V0cHV0KSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgYWRkRXJyb3JUb0N1cnJlbnRTcGFuKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBvdXRwdXQgdHlwZScsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcjogU3RyaW5nKGVycm9yKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKCdJbnZhbGlkIG91dHB1dCB0eXBlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTaW5nbGVTdGVwUmVzdWx0KG9yaWdpbmFsSW5wdXQsIG5ld1Jlc3BvbnNlLCBwcmVTdGVwSXRlbXMsIG5ld0l0ZW1zLCB7IHR5cGU6ICduZXh0X3N0ZXBfZmluYWxfb3V0cHV0Jywgb3V0cHV0OiBwb3RlbnRpYWxGaW5hbE91dHB1dCB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTaW5nbGVTdGVwUmVzdWx0KG9yaWdpbmFsSW5wdXQsIG5ld1Jlc3BvbnNlLCBwcmVTdGVwSXRlbXMsIG5ld0l0ZW1zLCB7IHR5cGU6ICduZXh0X3N0ZXBfcnVuX2FnYWluJyB9KTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb29sQ2FsbE91dHB1dEl0ZW0odG9vbENhbGwsIG91dHB1dCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdmdW5jdGlvbl9jYWxsX3Jlc3VsdCcsXG4gICAgICAgIG5hbWU6IHRvb2xDYWxsLm5hbWUsXG4gICAgICAgIGNhbGxJZDogdG9vbENhbGwuY2FsbElkLFxuICAgICAgICBzdGF0dXM6ICdjb21wbGV0ZWQnLFxuICAgICAgICBvdXRwdXQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIHRleHQ6IHRvU21hcnRTdHJpbmcob3V0cHV0KSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVGdW5jdGlvblRvb2xDYWxscyhhZ2VudCwgdG9vbFJ1bnMsIHJ1bm5lciwgc3RhdGUpIHtcbiAgICBhc3luYyBmdW5jdGlvbiBydW5TaW5nbGVUb29sKHRvb2xSdW4pIHtcbiAgICAgICAgbGV0IHBhcnNlZEFyZ3MgPSB0b29sUnVuLnRvb2xDYWxsLmFyZ3VtZW50cztcbiAgICAgICAgaWYgKHRvb2xSdW4udG9vbC5wYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBpZiAoaXNab2RPYmplY3QodG9vbFJ1bi50b29sLnBhcmFtZXRlcnMpKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkQXJncyA9IHRvb2xSdW4udG9vbC5wYXJhbWV0ZXJzLnBhcnNlKHBhcnNlZEFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkQXJncyA9IEpTT04ucGFyc2UocGFyc2VkQXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmVlZHNBcHByb3ZhbCA9IGF3YWl0IHRvb2xSdW4udG9vbC5uZWVkc0FwcHJvdmFsKHN0YXRlLl9jb250ZXh0LCBwYXJzZWRBcmdzLCB0b29sUnVuLnRvb2xDYWxsLmNhbGxJZCk7XG4gICAgICAgIGlmIChuZWVkc0FwcHJvdmFsKSB7XG4gICAgICAgICAgICBjb25zdCBhcHByb3ZhbCA9IHN0YXRlLl9jb250ZXh0LmlzVG9vbEFwcHJvdmVkKHtcbiAgICAgICAgICAgICAgICB0b29sTmFtZTogdG9vbFJ1bi50b29sLm5hbWUsXG4gICAgICAgICAgICAgICAgY2FsbElkOiB0b29sUnVuLnRvb2xDYWxsLmNhbGxJZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGFwcHJvdmFsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIC8vIHJlamVjdGVkXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhGdW5jdGlvblNwYW4oYXN5bmMgKHNwYW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSAnVG9vbCBleGVjdXRpb24gd2FzIG5vdCBhcHByb3ZlZC4nO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3BvbnNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xfbmFtZTogdG9vbFJ1bi50b29sLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGBUb29sIGV4ZWN1dGlvbiBmb3IgJHt0b29sUnVuLnRvb2xDYWxsLmNhbGxJZH0gd2FzIG1hbnVhbGx5IHJlamVjdGVkIGJ5IHVzZXIuYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNwYW5EYXRhLm91dHB1dCA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uX291dHB1dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sOiB0b29sUnVuLnRvb2wsXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQ6IHJlc3BvbnNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuSXRlbTogbmV3IFJ1blRvb2xDYWxsT3V0cHV0SXRlbShnZXRUb29sQ2FsbE91dHB1dEl0ZW0odG9vbFJ1bi50b29sQ2FsbCwgcmVzcG9uc2UpLCBhZ2VudCwgcmVzcG9uc2UpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdG9vbFJ1bi50b29sLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXBwcm92YWwgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGFwcHJvdmFsIHByb2Nlc3MgbmVlZHMgdG8gYmUgZG9uZSBpbiB0aGUgbmV4dCB0dXJuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uX2FwcHJvdmFsJyxcbiAgICAgICAgICAgICAgICAgICAgdG9vbDogdG9vbFJ1bi50b29sLFxuICAgICAgICAgICAgICAgICAgICBydW5JdGVtOiBuZXcgUnVuVG9vbEFwcHJvdmFsSXRlbSh0b29sUnVuLnRvb2xDYWxsLCBhZ2VudCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2l0aEZ1bmN0aW9uU3Bhbihhc3luYyAoc3BhbikgPT4ge1xuICAgICAgICAgICAgaWYgKHJ1bm5lci5jb25maWcudHJhY2VJbmNsdWRlU2Vuc2l0aXZlRGF0YSkge1xuICAgICAgICAgICAgICAgIHNwYW4uc3BhbkRhdGEuaW5wdXQgPSB0b29sUnVuLnRvb2xDYWxsLmFyZ3VtZW50cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcnVubmVyLmVtaXQoJ2FnZW50X3Rvb2xfc3RhcnQnLCBzdGF0ZS5fY29udGV4dCwgYWdlbnQsIHRvb2xSdW4udG9vbCwge1xuICAgICAgICAgICAgICAgICAgICB0b29sQ2FsbDogdG9vbFJ1bi50b29sQ2FsbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhZ2VudC5lbWl0KCdhZ2VudF90b29sX3N0YXJ0Jywgc3RhdGUuX2NvbnRleHQsIHRvb2xSdW4udG9vbCwge1xuICAgICAgICAgICAgICAgICAgICB0b29sQ2FsbDogdG9vbFJ1bi50b29sQ2FsbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0b29sUnVuLnRvb2wuaW52b2tlKHN0YXRlLl9jb250ZXh0LCB0b29sUnVuLnRvb2xDYWxsLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgLy8gVXNlIHN0cmluZyBkYXRhIGZvciB0cmFjaW5nIGFuZCBldmVudCBlbWl0dGVyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nUmVzdWx0ID0gdG9TbWFydFN0cmluZyhyZXN1bHQpO1xuICAgICAgICAgICAgICAgIHJ1bm5lci5lbWl0KCdhZ2VudF90b29sX2VuZCcsIHN0YXRlLl9jb250ZXh0LCBhZ2VudCwgdG9vbFJ1bi50b29sLCBzdHJpbmdSZXN1bHQsIHsgdG9vbENhbGw6IHRvb2xSdW4udG9vbENhbGwgfSk7XG4gICAgICAgICAgICAgICAgYWdlbnQuZW1pdCgnYWdlbnRfdG9vbF9lbmQnLCBzdGF0ZS5fY29udGV4dCwgdG9vbFJ1bi50b29sLCBzdHJpbmdSZXN1bHQsIHsgdG9vbENhbGw6IHRvb2xSdW4udG9vbENhbGwgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJ1bm5lci5jb25maWcudHJhY2VJbmNsdWRlU2Vuc2l0aXZlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNwYW5EYXRhLm91dHB1dCA9IHN0cmluZ1Jlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uX291dHB1dCcsXG4gICAgICAgICAgICAgICAgICAgIHRvb2w6IHRvb2xSdW4udG9vbCxcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgIHJ1bkl0ZW06IG5ldyBSdW5Ub29sQ2FsbE91dHB1dEl0ZW0oZ2V0VG9vbENhbGxPdXRwdXRJdGVtKHRvb2xSdW4udG9vbENhbGwsIHJlc3VsdCksIGFnZW50LCByZXN1bHQpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBzcGFuLnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0Vycm9yIHJ1bm5pbmcgdG9vbCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xfbmFtZTogdG9vbFJ1bi50b29sLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogU3RyaW5nKGVycm9yKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG5hbWU6IHRvb2xSdW4udG9vbC5uYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbCh0b29sUnVucy5tYXAocnVuU2luZ2xlVG9vbCkpO1xuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRvb2xDYWxsRXJyb3IoYEZhaWxlZCB0byBydW4gZnVuY3Rpb24gdG9vbHM6ICR7ZX1gLCBlLCBzdGF0ZSk7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuLy8gSW50ZXJuYWwgaGVscGVyOiBkaXNwYXRjaCBhIGNvbXB1dGVyIGFjdGlvbiBhbmQgcmV0dXJuIGEgc2NyZWVuc2hvdCAoc3luYy9hc3luYylcbmFzeW5jIGZ1bmN0aW9uIF9ydW5Db21wdXRlckFjdGlvbkFuZFNjcmVlbnNob3QoY29tcHV0ZXIsIHRvb2xDYWxsKSB7XG4gICAgY29uc3QgYWN0aW9uID0gdG9vbENhbGwuYWN0aW9uO1xuICAgIGxldCBzY3JlZW5zaG90O1xuICAgIC8vIERpc3BhdGNoIGJhc2VkIG9uIGFjdGlvbiB0eXBlIHN0cmluZyAoYXNzdW1lIGFjdGlvbi50eXBlIGV4aXN0cylcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2NsaWNrJzpcbiAgICAgICAgICAgIGF3YWl0IGNvbXB1dGVyLmNsaWNrKGFjdGlvbi54LCBhY3Rpb24ueSwgYWN0aW9uLmJ1dHRvbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZG91YmxlX2NsaWNrJzpcbiAgICAgICAgICAgIGF3YWl0IGNvbXB1dGVyLmRvdWJsZUNsaWNrKGFjdGlvbi54LCBhY3Rpb24ueSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZHJhZyc6XG4gICAgICAgICAgICBhd2FpdCBjb21wdXRlci5kcmFnKGFjdGlvbi5wYXRoLm1hcCgocCkgPT4gW3AueCwgcC55XSkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2tleXByZXNzJzpcbiAgICAgICAgICAgIGF3YWl0IGNvbXB1dGVyLmtleXByZXNzKGFjdGlvbi5rZXlzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtb3ZlJzpcbiAgICAgICAgICAgIGF3YWl0IGNvbXB1dGVyLm1vdmUoYWN0aW9uLngsIGFjdGlvbi55KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzY3JlZW5zaG90JzpcbiAgICAgICAgICAgIHNjcmVlbnNob3QgPSBhd2FpdCBjb21wdXRlci5zY3JlZW5zaG90KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc2Nyb2xsJzpcbiAgICAgICAgICAgIGF3YWl0IGNvbXB1dGVyLnNjcm9sbChhY3Rpb24ueCwgYWN0aW9uLnksIGFjdGlvbi5zY3JvbGxfeCwgYWN0aW9uLnNjcm9sbF95KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd0eXBlJzpcbiAgICAgICAgICAgIGF3YWl0IGNvbXB1dGVyLnR5cGUoYWN0aW9uLnRleHQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3dhaXQnOlxuICAgICAgICAgICAgYXdhaXQgY29tcHV0ZXIud2FpdCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBhY3Rpb247IC8vIGVuc3VyZXMgdGhhdCB3ZSBoYW5kbGUgZXZlcnkgYWN0aW9uIHdlIGtub3cgb2ZcbiAgICAgICAgICAgIC8vIFVua25vd24gYWN0aW9uLCBqdXN0IHRha2Ugc2NyZWVuc2hvdFxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2NyZWVuc2hvdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHNjcmVlbnNob3Q7XG4gICAgfVxuICAgIC8vIEFsd2F5cyByZXR1cm4gc2NyZWVuc2hvdCBhcyBiYXNlNjQgc3RyaW5nXG4gICAgaWYgKHR5cGVvZiBjb21wdXRlci5zY3JlZW5zaG90ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNjcmVlbnNob3QgPSBhd2FpdCBjb21wdXRlci5zY3JlZW5zaG90KCk7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NyZWVuc2hvdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBzY3JlZW5zaG90O1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignQ29tcHV0ZXIgZG9lcyBub3QgaW1wbGVtZW50IHNjcmVlbnNob3QoKScpO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVDb21wdXRlckFjdGlvbnMoYWdlbnQsIGFjdGlvbnMsIHJ1bm5lciwgcnVuQ29udGV4dCwgY3VzdG9tTG9nZ2VyID0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgX2xvZ2dlciA9IGN1c3RvbUxvZ2dlciA/PyBsb2dnZXI7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIGFjdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY29tcHV0ZXIgPSBhY3Rpb24uY29tcHV0ZXIuY29tcHV0ZXI7XG4gICAgICAgIGNvbnN0IHRvb2xDYWxsID0gYWN0aW9uLnRvb2xDYWxsO1xuICAgICAgICAvLyBIb29rczogb25fdG9vbF9zdGFydCAoZ2xvYmFsICsgYWdlbnQpXG4gICAgICAgIHJ1bm5lci5lbWl0KCdhZ2VudF90b29sX3N0YXJ0JywgcnVuQ29udGV4dCwgYWdlbnQsIGFjdGlvbi5jb21wdXRlciwge1xuICAgICAgICAgICAgdG9vbENhbGwsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIGFnZW50LmVtaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFnZW50LmVtaXQoJ2FnZW50X3Rvb2xfc3RhcnQnLCBydW5Db250ZXh0LCBhY3Rpb24uY29tcHV0ZXIsIHsgdG9vbENhbGwgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUnVuIHRoZSBhY3Rpb24gYW5kIGdldCBzY3JlZW5zaG90XG4gICAgICAgIGxldCBvdXRwdXQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBhd2FpdCBfcnVuQ29tcHV0ZXJBY3Rpb25BbmRTY3JlZW5zaG90KGNvbXB1dGVyLCB0b29sQ2FsbCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgX2xvZ2dlci5lcnJvcignRmFpbGVkIHRvIGV4ZWN1dGUgY29tcHV0ZXIgYWN0aW9uOicsIGVycik7XG4gICAgICAgICAgICBvdXRwdXQgPSAnJztcbiAgICAgICAgfVxuICAgICAgICAvLyBIb29rczogb25fdG9vbF9lbmQgKGdsb2JhbCArIGFnZW50KVxuICAgICAgICBydW5uZXIuZW1pdCgnYWdlbnRfdG9vbF9lbmQnLCBydW5Db250ZXh0LCBhZ2VudCwgYWN0aW9uLmNvbXB1dGVyLCBvdXRwdXQsIHtcbiAgICAgICAgICAgIHRvb2xDYWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiBhZ2VudC5lbWl0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBhZ2VudC5lbWl0KCdhZ2VudF90b29sX2VuZCcsIHJ1bkNvbnRleHQsIGFjdGlvbi5jb21wdXRlciwgb3V0cHV0LCB7XG4gICAgICAgICAgICAgICAgdG9vbENhbGwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbHdheXMgcmV0dXJuIGEgc2NyZWVuc2hvdCBhcyBhIGJhc2U2NCBkYXRhIFVSTFxuICAgICAgICBjb25zdCBpbWFnZVVybCA9IG91dHB1dCA/IGBkYXRhOmltYWdlL3BuZztiYXNlNjQsJHtvdXRwdXR9YCA6ICcnO1xuICAgICAgICBjb25zdCByYXdJdGVtID0ge1xuICAgICAgICAgICAgdHlwZTogJ2NvbXB1dGVyX2NhbGxfcmVzdWx0JyxcbiAgICAgICAgICAgIGNhbGxJZDogdG9vbENhbGwuY2FsbElkLFxuICAgICAgICAgICAgb3V0cHV0OiB7IHR5cGU6ICdjb21wdXRlcl9zY3JlZW5zaG90JywgZGF0YTogaW1hZ2VVcmwgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKG5ldyBSdW5Ub29sQ2FsbE91dHB1dEl0ZW0ocmF3SXRlbSwgYWdlbnQsIGltYWdlVXJsKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVIYW5kb2ZmQ2FsbHMoYWdlbnQsIG9yaWdpbmFsSW5wdXQsIHByZVN0ZXBJdGVtcywgbmV3U3RlcEl0ZW1zLCBuZXdSZXNwb25zZSwgcnVuSGFuZG9mZnMsIHJ1bm5lciwgcnVuQ29udGV4dCkge1xuICAgIG5ld1N0ZXBJdGVtcyA9IFsuLi5uZXdTdGVwSXRlbXNdO1xuICAgIGlmIChydW5IYW5kb2Zmcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ0luY29ycmVjdGx5IGNhbGxlZCBleGVjdXRlSGFuZG9mZkNhbGxzIHdpdGggbm8gaGFuZG9mZnMuIFRoaXMgc2hvdWxkIG5vdCBoYXBwZW4uIE1vdmluZyBvbi4nKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW5nbGVTdGVwUmVzdWx0KG9yaWdpbmFsSW5wdXQsIG5ld1Jlc3BvbnNlLCBwcmVTdGVwSXRlbXMsIG5ld1N0ZXBJdGVtcywgeyB0eXBlOiAnbmV4dF9zdGVwX3J1bl9hZ2FpbicgfSk7XG4gICAgfVxuICAgIGlmIChydW5IYW5kb2Zmcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIG11bHRpcGxlIGhhbmRvZmZzLiBJZ25vcmluZyBhbGwgYnV0IHRoZSBmaXJzdCBvbmUgYnkgYWRkaW5nIHJlamVjdCByZXNwb25zZXMgZm9yIHRob3NlXG4gICAgICAgIGNvbnN0IG91dHB1dE1lc3NhZ2UgPSAnTXVsdGlwbGUgaGFuZG9mZnMgZGV0ZWN0ZWQsIGlnbm9yaW5nIHRoaXMgb25lLic7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcnVuSGFuZG9mZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG5ld1N0ZXBJdGVtcy5wdXNoKG5ldyBSdW5Ub29sQ2FsbE91dHB1dEl0ZW0oZ2V0VG9vbENhbGxPdXRwdXRJdGVtKHJ1bkhhbmRvZmZzW2ldLnRvb2xDYWxsLCBvdXRwdXRNZXNzYWdlKSwgYWdlbnQsIG91dHB1dE1lc3NhZ2UpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhY3R1YWxIYW5kb2ZmID0gcnVuSGFuZG9mZnNbMF07XG4gICAgcmV0dXJuIHdpdGhIYW5kb2ZmU3Bhbihhc3luYyAoaGFuZG9mZlNwYW4pID0+IHtcbiAgICAgICAgY29uc3QgaGFuZG9mZiA9IGFjdHVhbEhhbmRvZmYuaGFuZG9mZjtcbiAgICAgICAgY29uc3QgbmV3QWdlbnQgPSBhd2FpdCBoYW5kb2ZmLm9uSW52b2tlSGFuZG9mZihydW5Db250ZXh0LCBhY3R1YWxIYW5kb2ZmLnRvb2xDYWxsLmFyZ3VtZW50cyk7XG4gICAgICAgIGhhbmRvZmZTcGFuLnNwYW5EYXRhLnRvX2FnZW50ID0gbmV3QWdlbnQubmFtZTtcbiAgICAgICAgaWYgKHJ1bkhhbmRvZmZzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RlZEFnZW50cyA9IHJ1bkhhbmRvZmZzLm1hcCgoaCkgPT4gaC5oYW5kb2ZmLmFnZW50TmFtZSk7XG4gICAgICAgICAgICBoYW5kb2ZmU3Bhbi5zZXRFcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ011bHRpcGxlIGhhbmRvZmZzIHJlcXVlc3RlZCcsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRfYWdlbnRzOiByZXF1ZXN0ZWRBZ2VudHMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIG5ld1N0ZXBJdGVtcy5wdXNoKG5ldyBSdW5IYW5kb2ZmT3V0cHV0SXRlbShnZXRUb29sQ2FsbE91dHB1dEl0ZW0oYWN0dWFsSGFuZG9mZi50b29sQ2FsbCwgZ2V0VHJhbnNmZXJNZXNzYWdlKG5ld0FnZW50KSksIGFnZW50LCBuZXdBZ2VudCkpO1xuICAgICAgICBydW5uZXIuZW1pdCgnYWdlbnRfaGFuZG9mZicsIHJ1bkNvbnRleHQsIGFnZW50LCBuZXdBZ2VudCk7XG4gICAgICAgIGFnZW50LmVtaXQoJ2FnZW50X2hhbmRvZmYnLCBydW5Db250ZXh0LCBuZXdBZ2VudCk7XG4gICAgICAgIGNvbnN0IGlucHV0RmlsdGVyID0gaGFuZG9mZi5pbnB1dEZpbHRlciA/PyBydW5uZXIuY29uZmlnLmhhbmRvZmZJbnB1dEZpbHRlcjtcbiAgICAgICAgaWYgKGlucHV0RmlsdGVyKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ0ZpbHRlcmluZyBpbnB1dHMgZm9yIGhhbmRvZmYnKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXRGaWx0ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBoYW5kb2ZmU3Bhbi5zZXRFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGlucHV0IGZpbHRlcicsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6ICdub3QgY2FsbGFibGUnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaGFuZG9mZklucHV0RGF0YSA9IHtcbiAgICAgICAgICAgICAgICBpbnB1dEhpc3Rvcnk6IEFycmF5LmlzQXJyYXkob3JpZ2luYWxJbnB1dClcbiAgICAgICAgICAgICAgICAgICAgPyBbLi4ub3JpZ2luYWxJbnB1dF1cbiAgICAgICAgICAgICAgICAgICAgOiBvcmlnaW5hbElucHV0LFxuICAgICAgICAgICAgICAgIHByZUhhbmRvZmZJdGVtczogWy4uLnByZVN0ZXBJdGVtc10sXG4gICAgICAgICAgICAgICAgbmV3SXRlbXM6IFsuLi5uZXdTdGVwSXRlbXNdLFxuICAgICAgICAgICAgICAgIHJ1bkNvbnRleHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBpbnB1dEZpbHRlcihoYW5kb2ZmSW5wdXREYXRhKTtcbiAgICAgICAgICAgIG9yaWdpbmFsSW5wdXQgPSBmaWx0ZXJlZC5pbnB1dEhpc3Rvcnk7XG4gICAgICAgICAgICBwcmVTdGVwSXRlbXMgPSBmaWx0ZXJlZC5wcmVIYW5kb2ZmSXRlbXM7XG4gICAgICAgICAgICBuZXdTdGVwSXRlbXMgPSBmaWx0ZXJlZC5uZXdJdGVtcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3U3RlcEl0ZW1zLCB7IHR5cGU6ICduZXh0X3N0ZXBfaGFuZG9mZicsIG5ld0FnZW50IH0pO1xuICAgIH0sIHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZnJvbV9hZ2VudDogYWdlbnQubmFtZSxcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbmNvbnN0IE5PVF9GSU5BTF9PVVRQVVQgPSB7XG4gICAgaXNGaW5hbE91dHB1dDogZmFsc2UsXG4gICAgaXNJbnRlcnJ1cHRlZDogdW5kZWZpbmVkLFxufTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0ZvckZpbmFsT3V0cHV0RnJvbVRvb2xzKGFnZW50LCB0b29sUmVzdWx0cywgc3RhdGUpIHtcbiAgICBpZiAodG9vbFJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBOT1RfRklOQUxfT1VUUFVUO1xuICAgIH1cbiAgICBjb25zdCBpbnRlcnJ1cHRpb25zID0gdG9vbFJlc3VsdHNcbiAgICAgICAgLmZpbHRlcigocikgPT4gci5ydW5JdGVtIGluc3RhbmNlb2YgUnVuVG9vbEFwcHJvdmFsSXRlbSlcbiAgICAgICAgLm1hcCgocikgPT4gci5ydW5JdGVtKTtcbiAgICBpZiAoaW50ZXJydXB0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc0ZpbmFsT3V0cHV0OiBmYWxzZSxcbiAgICAgICAgICAgIGlzSW50ZXJydXB0ZWQ6IHRydWUsXG4gICAgICAgICAgICBpbnRlcnJ1cHRpb25zLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoYWdlbnQudG9vbFVzZUJlaGF2aW9yID09PSAncnVuX2xsbV9hZ2FpbicpIHtcbiAgICAgICAgcmV0dXJuIE5PVF9GSU5BTF9PVVRQVVQ7XG4gICAgfVxuICAgIGNvbnN0IGZpcnN0VG9vbFJlc3VsdCA9IHRvb2xSZXN1bHRzWzBdO1xuICAgIGlmIChhZ2VudC50b29sVXNlQmVoYXZpb3IgPT09ICdzdG9wX29uX2ZpcnN0X3Rvb2wnKSB7XG4gICAgICAgIGlmIChmaXJzdFRvb2xSZXN1bHQ/LnR5cGUgPT09ICdmdW5jdGlvbl9vdXRwdXQnKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdPdXRwdXQgPSB0b1NtYXJ0U3RyaW5nKGZpcnN0VG9vbFJlc3VsdC5vdXRwdXQpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpc0ZpbmFsT3V0cHV0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGlzSW50ZXJydXB0ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBmaW5hbE91dHB1dDogc3RyaW5nT3V0cHV0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTk9UX0ZJTkFMX09VVFBVVDtcbiAgICB9XG4gICAgY29uc3QgdG9vbFVzZUJlaGF2aW9yID0gYWdlbnQudG9vbFVzZUJlaGF2aW9yO1xuICAgIGlmICh0eXBlb2YgdG9vbFVzZUJlaGF2aW9yID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zdCBzdG9wcGluZ1Rvb2wgPSB0b29sUmVzdWx0cy5maW5kKChyKSA9PiB0b29sVXNlQmVoYXZpb3Iuc3RvcEF0VG9vbE5hbWVzLmluY2x1ZGVzKHIudG9vbC5uYW1lKSk7XG4gICAgICAgIGlmIChzdG9wcGluZ1Rvb2w/LnR5cGUgPT09ICdmdW5jdGlvbl9vdXRwdXQnKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdPdXRwdXQgPSB0b1NtYXJ0U3RyaW5nKHN0b3BwaW5nVG9vbC5vdXRwdXQpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpc0ZpbmFsT3V0cHV0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGlzSW50ZXJydXB0ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBmaW5hbE91dHB1dDogc3RyaW5nT3V0cHV0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTk9UX0ZJTkFMX09VVFBVVDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0b29sVXNlQmVoYXZpb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRvb2xVc2VCZWhhdmlvcihzdGF0ZS5fY29udGV4dCwgdG9vbFJlc3VsdHMpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBJbnZhbGlkIHRvb2xVc2VCZWhhdmlvcjogJHt0b29sVXNlQmVoYXZpb3J9YCwgc3RhdGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFkZFN0ZXBUb1J1blJlc3VsdChyZXN1bHQsIHN0ZXApIHtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc3RlcC5uZXdTdGVwSXRlbXMpIHtcbiAgICAgICAgbGV0IGl0ZW1OYW1lO1xuICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFJ1bk1lc3NhZ2VPdXRwdXRJdGVtKSB7XG4gICAgICAgICAgICBpdGVtTmFtZSA9ICdtZXNzYWdlX291dHB1dF9jcmVhdGVkJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpdGVtIGluc3RhbmNlb2YgUnVuSGFuZG9mZkNhbGxJdGVtKSB7XG4gICAgICAgICAgICBpdGVtTmFtZSA9ICdoYW5kb2ZmX3JlcXVlc3RlZCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXRlbSBpbnN0YW5jZW9mIFJ1bkhhbmRvZmZPdXRwdXRJdGVtKSB7XG4gICAgICAgICAgICBpdGVtTmFtZSA9ICdoYW5kb2ZmX29jY3VycmVkJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpdGVtIGluc3RhbmNlb2YgUnVuVG9vbENhbGxJdGVtKSB7XG4gICAgICAgICAgICBpdGVtTmFtZSA9ICd0b29sX2NhbGxlZCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXRlbSBpbnN0YW5jZW9mIFJ1blRvb2xDYWxsT3V0cHV0SXRlbSkge1xuICAgICAgICAgICAgaXRlbU5hbWUgPSAndG9vbF9vdXRwdXQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGl0ZW0gaW5zdGFuY2VvZiBSdW5SZWFzb25pbmdJdGVtKSB7XG4gICAgICAgICAgICBpdGVtTmFtZSA9ICdyZWFzb25pbmdfaXRlbV9jcmVhdGVkJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpdGVtIGluc3RhbmNlb2YgUnVuVG9vbEFwcHJvdmFsSXRlbSkge1xuICAgICAgICAgICAgaXRlbU5hbWUgPSAndG9vbF9hcHByb3ZhbF9yZXF1ZXN0ZWQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1Vua25vd24gaXRlbSB0eXBlOiAnLCBpdGVtKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5fYWRkSXRlbShuZXcgUnVuSXRlbVN0cmVhbUV2ZW50KGl0ZW1OYW1lLCBpdGVtKSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEFnZW50VG9vbFVzZVRyYWNrZXIge1xuICAgICNhZ2VudFRvVG9vbHMgPSBuZXcgTWFwKCk7XG4gICAgYWRkVG9vbFVzZShhZ2VudCwgdG9vbE5hbWVzKSB7XG4gICAgICAgIHRoaXMuI2FnZW50VG9Ub29scy5zZXQoYWdlbnQsIHRvb2xOYW1lcyk7XG4gICAgfVxuICAgIGhhc1VzZWRUb29scyhhZ2VudCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jYWdlbnRUb1Rvb2xzLmhhcyhhZ2VudCk7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhBcnJheS5mcm9tKHRoaXMuI2FnZW50VG9Ub29scy5lbnRyaWVzKCkpLm1hcCgoW2FnZW50LCB0b29sTmFtZXNdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gW2FnZW50Lm5hbWUsIHRvb2xOYW1lc107XG4gICAgICAgIH0pKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW5JbXBsZW1lbnRhdGlvbi5tanMubWFwIiwiaW1wb3J0IHsgeiB9IGZyb20gJ0BvcGVuYWkvem9kL3YzJztcbmltcG9ydCB7IEFnZW50IH0gZnJvbSBcIi4vYWdlbnQubWpzXCI7XG5pbXBvcnQgeyBSdW5NZXNzYWdlT3V0cHV0SXRlbSwgUnVuVG9vbEFwcHJvdmFsSXRlbSwgUnVuVG9vbENhbGxJdGVtLCBSdW5Ub29sQ2FsbE91dHB1dEl0ZW0sIFJ1blJlYXNvbmluZ0l0ZW0sIFJ1bkhhbmRvZmZDYWxsSXRlbSwgUnVuSGFuZG9mZk91dHB1dEl0ZW0sIH0gZnJvbSBcIi4vaXRlbXMubWpzXCI7XG5pbXBvcnQgeyBSdW5Db250ZXh0IH0gZnJvbSBcIi4vcnVuQ29udGV4dC5tanNcIjtcbmltcG9ydCB7IEFnZW50VG9vbFVzZVRyYWNrZXIsIG5leHRTdGVwU2NoZW1hLCB9IGZyb20gXCIuL3J1bkltcGxlbWVudGF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgU3lzdGVtRXJyb3IsIFVzZXJFcnJvciB9IGZyb20gXCIuL2Vycm9ycy5tanNcIjtcbmltcG9ydCB7IGdldEdsb2JhbFRyYWNlUHJvdmlkZXIgfSBmcm9tIFwiLi90cmFjaW5nL3Byb3ZpZGVyLm1qc1wiO1xuaW1wb3J0IHsgVXNhZ2UgfSBmcm9tIFwiLi91c2FnZS5tanNcIjtcbmltcG9ydCB7IGdldEN1cnJlbnRUcmFjZSB9IGZyb20gXCIuL3RyYWNpbmcvaW5kZXgubWpzXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbmltcG9ydCB7IGhhbmRvZmYgfSBmcm9tIFwiLi9oYW5kb2ZmLm1qc1wiO1xuaW1wb3J0ICogYXMgcHJvdG9jb2wgZnJvbSBcIi4vdHlwZXMvcHJvdG9jb2wubWpzXCI7XG5pbXBvcnQgeyBzYWZlRXhlY3V0ZSB9IGZyb20gXCIuL3V0aWxzL3NhZmVFeGVjdXRlLm1qc1wiO1xuLyoqXG4gKiBUaGUgc2NoZW1hIHZlcnNpb24gb2YgdGhlIHNlcmlhbGl6ZWQgcnVuIHN0YXRlLiBUaGlzIGlzIHVzZWQgdG8gZW5zdXJlIHRoYXQgdGhlIHNlcmlhbGl6ZWRcbiAqIHJ1biBzdGF0ZSBpcyBjb21wYXRpYmxlIHdpdGggdGhlIGN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgU0RLLlxuICogSWYgYW55dGhpbmcgaW4gdGhpcyBzY2hlbWEgY2hhbmdlcywgdGhlIHZlcnNpb24gd2lsbCBoYXZlIHRvIGJlIGluY3JlbWVudGVkLlxuICovXG5leHBvcnQgY29uc3QgQ1VSUkVOVF9TQ0hFTUFfVkVSU0lPTiA9ICcxLjAnO1xuY29uc3QgJHNjaGVtYVZlcnNpb24gPSB6LmxpdGVyYWwoQ1VSUkVOVF9TQ0hFTUFfVkVSU0lPTik7XG5jb25zdCBzZXJpYWxpemVkQWdlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgbmFtZTogei5zdHJpbmcoKSxcbn0pO1xuY29uc3Qgc2VyaWFsaXplZFNwYW5CYXNlID0gei5vYmplY3Qoe1xuICAgIG9iamVjdDogei5saXRlcmFsKCd0cmFjZS5zcGFuJyksXG4gICAgaWQ6IHouc3RyaW5nKCksXG4gICAgdHJhY2VfaWQ6IHouc3RyaW5nKCksXG4gICAgcGFyZW50X2lkOiB6LnN0cmluZygpLm51bGxhYmxlKCksXG4gICAgc3RhcnRlZF9hdDogei5zdHJpbmcoKS5udWxsYWJsZSgpLFxuICAgIGVuZGVkX2F0OiB6LnN0cmluZygpLm51bGxhYmxlKCksXG4gICAgZXJyb3I6IHpcbiAgICAgICAgLm9iamVjdCh7XG4gICAgICAgIG1lc3NhZ2U6IHouc3RyaW5nKCksXG4gICAgICAgIGRhdGE6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLm9wdGlvbmFsKCksXG4gICAgfSlcbiAgICAgICAgLm51bGxhYmxlKCksXG4gICAgc3Bhbl9kYXRhOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFueSgpKSxcbn0pO1xuY29uc3QgU2VyaWFsaXplZFNwYW4gPSBzZXJpYWxpemVkU3BhbkJhc2UuZXh0ZW5kKHtcbiAgICBwcmV2aW91c19zcGFuOiB6LmxhenkoKCkgPT4gU2VyaWFsaXplZFNwYW4pLm9wdGlvbmFsKCksXG59KTtcbmNvbnN0IHVzYWdlU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHJlcXVlc3RzOiB6Lm51bWJlcigpLFxuICAgIGlucHV0VG9rZW5zOiB6Lm51bWJlcigpLFxuICAgIG91dHB1dFRva2Vuczogei5udW1iZXIoKSxcbiAgICB0b3RhbFRva2Vuczogei5udW1iZXIoKSxcbn0pO1xuY29uc3QgbW9kZWxSZXNwb25zZVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB1c2FnZTogdXNhZ2VTY2hlbWEsXG4gICAgb3V0cHV0OiB6LmFycmF5KHByb3RvY29sLk91dHB1dE1vZGVsSXRlbSksXG4gICAgcmVzcG9uc2VJZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHByb3ZpZGVyRGF0YTogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSkub3B0aW9uYWwoKSxcbn0pO1xuY29uc3QgaXRlbVNjaGVtYSA9IHouZGlzY3JpbWluYXRlZFVuaW9uKCd0eXBlJywgW1xuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdtZXNzYWdlX291dHB1dF9pdGVtJyksXG4gICAgICAgIHJhd0l0ZW06IHByb3RvY29sLkFzc2lzdGFudE1lc3NhZ2VJdGVtLFxuICAgICAgICBhZ2VudDogc2VyaWFsaXplZEFnZW50U2NoZW1hLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCd0b29sX2NhbGxfaXRlbScpLFxuICAgICAgICByYXdJdGVtOiBwcm90b2NvbC5Ub29sQ2FsbEl0ZW0ub3IocHJvdG9jb2wuSG9zdGVkVG9vbENhbGxJdGVtKSxcbiAgICAgICAgYWdlbnQ6IHNlcmlhbGl6ZWRBZ2VudFNjaGVtYSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgndG9vbF9jYWxsX291dHB1dF9pdGVtJyksXG4gICAgICAgIHJhd0l0ZW06IHByb3RvY29sLkZ1bmN0aW9uQ2FsbFJlc3VsdEl0ZW0sXG4gICAgICAgIGFnZW50OiBzZXJpYWxpemVkQWdlbnRTY2hlbWEsXG4gICAgICAgIG91dHB1dDogei5zdHJpbmcoKSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgncmVhc29uaW5nX2l0ZW0nKSxcbiAgICAgICAgcmF3SXRlbTogcHJvdG9jb2wuUmVhc29uaW5nSXRlbSxcbiAgICAgICAgYWdlbnQ6IHNlcmlhbGl6ZWRBZ2VudFNjaGVtYSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnaGFuZG9mZl9jYWxsX2l0ZW0nKSxcbiAgICAgICAgcmF3SXRlbTogcHJvdG9jb2wuRnVuY3Rpb25DYWxsSXRlbSxcbiAgICAgICAgYWdlbnQ6IHNlcmlhbGl6ZWRBZ2VudFNjaGVtYSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnaGFuZG9mZl9vdXRwdXRfaXRlbScpLFxuICAgICAgICByYXdJdGVtOiBwcm90b2NvbC5GdW5jdGlvbkNhbGxSZXN1bHRJdGVtLFxuICAgICAgICBzb3VyY2VBZ2VudDogc2VyaWFsaXplZEFnZW50U2NoZW1hLFxuICAgICAgICB0YXJnZXRBZ2VudDogc2VyaWFsaXplZEFnZW50U2NoZW1hLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCd0b29sX2FwcHJvdmFsX2l0ZW0nKSxcbiAgICAgICAgcmF3SXRlbTogcHJvdG9jb2wuRnVuY3Rpb25DYWxsSXRlbS5vcihwcm90b2NvbC5Ib3N0ZWRUb29sQ2FsbEl0ZW0pLFxuICAgICAgICBhZ2VudDogc2VyaWFsaXplZEFnZW50U2NoZW1hLFxuICAgIH0pLFxuXSk7XG5jb25zdCBzZXJpYWxpemVkVHJhY2VTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgb2JqZWN0OiB6LmxpdGVyYWwoJ3RyYWNlJyksXG4gICAgaWQ6IHouc3RyaW5nKCksXG4gICAgd29ya2Zsb3dfbmFtZTogei5zdHJpbmcoKSxcbiAgICBncm91cF9pZDogei5zdHJpbmcoKS5udWxsYWJsZSgpLFxuICAgIG1ldGFkYXRhOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFueSgpKSxcbn0pO1xuY29uc3Qgc2VyaWFsaXplZFByb2Nlc3NlZFJlc3BvbnNlU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIG5ld0l0ZW1zOiB6LmFycmF5KGl0ZW1TY2hlbWEpLFxuICAgIHRvb2xzVXNlZDogei5hcnJheSh6LnN0cmluZygpKSxcbiAgICBoYW5kb2Zmczogei5hcnJheSh6Lm9iamVjdCh7XG4gICAgICAgIHRvb2xDYWxsOiB6LmFueSgpLFxuICAgICAgICBoYW5kb2ZmOiB6LmFueSgpLFxuICAgIH0pKSxcbiAgICBmdW5jdGlvbnM6IHouYXJyYXkoei5vYmplY3Qoe1xuICAgICAgICB0b29sQ2FsbDogei5hbnkoKSxcbiAgICAgICAgdG9vbDogei5hbnkoKSxcbiAgICB9KSksXG4gICAgY29tcHV0ZXJBY3Rpb25zOiB6LmFycmF5KHoub2JqZWN0KHtcbiAgICAgICAgdG9vbENhbGw6IHouYW55KCksXG4gICAgICAgIGNvbXB1dGVyOiB6LmFueSgpLFxuICAgIH0pKSxcbiAgICBtY3BBcHByb3ZhbFJlcXVlc3RzOiB6XG4gICAgICAgIC5hcnJheSh6Lm9iamVjdCh7XG4gICAgICAgIHJlcXVlc3RJdGVtOiB6Lm9iamVjdCh7XG4gICAgICAgICAgICAvLyBwcm90b2NvbC5Ib3N0ZWRUb29sQ2FsbEl0ZW1cbiAgICAgICAgICAgIHJhd0l0ZW06IHoub2JqZWN0KHtcbiAgICAgICAgICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ2hvc3RlZF90b29sX2NhbGwnKSxcbiAgICAgICAgICAgICAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgICAgICAgICAgICAgIGFyZ3VtZW50czogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICAgICAgICAgIHN0YXR1czogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICAgICAgICAgIG91dHB1dDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICAgICAgICAgIC8vIHRoaXMgYWx3YXlzIGV4aXN0cyBidXQgbWFya2VkIGFzIG9wdGlvbmFsIGZvciBlYXJseSB2ZXJzaW9uIGNvbXBhdGliaWxpdHk7IHdoZW4gcmVsZWFzaW5nIDEuMCwgd2UgY2FuIHJlbW92ZSB0aGUgbnVsbGFibGUgYW5kIG9wdGlvbmFsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFueSgpKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSksXG4gICAgICAgIC8vIEhvc3RlZE1DUFRvb2xcbiAgICAgICAgbWNwVG9vbDogei5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogei5saXRlcmFsKCdob3N0ZWRfdG9vbCcpLFxuICAgICAgICAgICAgbmFtZTogei5saXRlcmFsKCdob3N0ZWRfbWNwJyksXG4gICAgICAgICAgICBwcm92aWRlckRhdGE6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLFxuICAgICAgICB9KSxcbiAgICB9KSlcbiAgICAgICAgLm9wdGlvbmFsKCksXG59KTtcbmNvbnN0IGd1YXJkcmFpbEZ1bmN0aW9uT3V0cHV0U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHRyaXB3aXJlVHJpZ2dlcmVkOiB6LmJvb2xlYW4oKSxcbiAgICBvdXRwdXRJbmZvOiB6LmFueSgpLFxufSk7XG5jb25zdCBpbnB1dEd1YXJkcmFpbFJlc3VsdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBndWFyZHJhaWw6IHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdpbnB1dCcpLFxuICAgICAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIH0pLFxuICAgIG91dHB1dDogZ3VhcmRyYWlsRnVuY3Rpb25PdXRwdXRTY2hlbWEsXG59KTtcbmNvbnN0IG91dHB1dEd1YXJkcmFpbFJlc3VsdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBndWFyZHJhaWw6IHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdvdXRwdXQnKSxcbiAgICAgICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICB9KSxcbiAgICBhZ2VudE91dHB1dDogei5hbnkoKSxcbiAgICBhZ2VudDogc2VyaWFsaXplZEFnZW50U2NoZW1hLFxuICAgIG91dHB1dDogZ3VhcmRyYWlsRnVuY3Rpb25PdXRwdXRTY2hlbWEsXG59KTtcbmV4cG9ydCBjb25zdCBTZXJpYWxpemVkUnVuU3RhdGUgPSB6Lm9iamVjdCh7XG4gICAgJHNjaGVtYVZlcnNpb24sXG4gICAgY3VycmVudFR1cm46IHoubnVtYmVyKCksXG4gICAgY3VycmVudEFnZW50OiBzZXJpYWxpemVkQWdlbnRTY2hlbWEsXG4gICAgb3JpZ2luYWxJbnB1dDogei5zdHJpbmcoKS5vcih6LmFycmF5KHByb3RvY29sLk1vZGVsSXRlbSkpLFxuICAgIG1vZGVsUmVzcG9uc2VzOiB6LmFycmF5KG1vZGVsUmVzcG9uc2VTY2hlbWEpLFxuICAgIGNvbnRleHQ6IHoub2JqZWN0KHtcbiAgICAgICAgdXNhZ2U6IHVzYWdlU2NoZW1hLFxuICAgICAgICBhcHByb3ZhbHM6IHoucmVjb3JkKHouc3RyaW5nKCksIHoub2JqZWN0KHtcbiAgICAgICAgICAgIGFwcHJvdmVkOiB6LmFycmF5KHouc3RyaW5nKCkpLm9yKHouYm9vbGVhbigpKSxcbiAgICAgICAgICAgIHJlamVjdGVkOiB6LmFycmF5KHouc3RyaW5nKCkpLm9yKHouYm9vbGVhbigpKSxcbiAgICAgICAgfSkpLFxuICAgICAgICBjb250ZXh0OiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFueSgpKSxcbiAgICB9KSxcbiAgICB0b29sVXNlVHJhY2tlcjogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hcnJheSh6LnN0cmluZygpKSksXG4gICAgbWF4VHVybnM6IHoubnVtYmVyKCksXG4gICAgY3VycmVudEFnZW50U3BhbjogU2VyaWFsaXplZFNwYW4ubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgIG5vQWN0aXZlQWdlbnRSdW46IHouYm9vbGVhbigpLFxuICAgIGlucHV0R3VhcmRyYWlsUmVzdWx0czogei5hcnJheShpbnB1dEd1YXJkcmFpbFJlc3VsdFNjaGVtYSksXG4gICAgb3V0cHV0R3VhcmRyYWlsUmVzdWx0czogei5hcnJheShvdXRwdXRHdWFyZHJhaWxSZXN1bHRTY2hlbWEpLFxuICAgIGN1cnJlbnRTdGVwOiBuZXh0U3RlcFNjaGVtYS5vcHRpb25hbCgpLFxuICAgIGxhc3RNb2RlbFJlc3BvbnNlOiBtb2RlbFJlc3BvbnNlU2NoZW1hLm9wdGlvbmFsKCksXG4gICAgZ2VuZXJhdGVkSXRlbXM6IHouYXJyYXkoaXRlbVNjaGVtYSksXG4gICAgbGFzdFByb2Nlc3NlZFJlc3BvbnNlOiBzZXJpYWxpemVkUHJvY2Vzc2VkUmVzcG9uc2VTY2hlbWEub3B0aW9uYWwoKSxcbiAgICB0cmFjZTogc2VyaWFsaXplZFRyYWNlU2NoZW1hLm51bGxhYmxlKCksXG59KTtcbi8qKlxuICogU2VyaWFsaXphYmxlIHNuYXBzaG90IG9mIGFuIGFnZW50J3MgcnVuLCBpbmNsdWRpbmcgY29udGV4dCwgdXNhZ2UgYW5kIHRyYWNlLlxuICogV2hpbGUgdGhpcyBjbGFzcyBoYXMgcHVibGljbHkgd3JpdGFibGUgcHJvcGVydGllcyAocHJlZml4ZWQgd2l0aCBgX2ApLCB0aGV5IGFyZSBub3QgbWVhbnQgdG8gYmVcbiAqIHVzZWQgZGlyZWN0bHkuIFRvIHJlYWQgdGhlc2UgcHJvcGVydGllcywgdXNlIHRoZSBgUnVuUmVzdWx0YCBpbnN0ZWFkLlxuICpcbiAqIE1hbmlwdWxhdGlvbiBvZiB0aGUgc3RhdGUgZGlyZWN0bHkgY2FuIGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvciBhbmQgc2hvdWxkIGJlIGF2b2lkZWQuXG4gKiBJbnN0ZWFkLCB1c2UgdGhlIGBhcHByb3ZlYCBhbmQgYHJlamVjdGAgbWV0aG9kcyB0byBpbnRlcmFjdCB3aXRoIHRoZSBzdGF0ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFJ1blN0YXRlIHtcbiAgICAvKipcbiAgICAgKiBDdXJyZW50IHR1cm4gbnVtYmVyIGluIHRoZSBjb252ZXJzYXRpb24uXG4gICAgICovXG4gICAgX2N1cnJlbnRUdXJuID0gMDtcbiAgICAvKipcbiAgICAgKiBUaGUgYWdlbnQgY3VycmVudGx5IGhhbmRsaW5nIHRoZSBjb252ZXJzYXRpb24uXG4gICAgICovXG4gICAgX2N1cnJlbnRBZ2VudDtcbiAgICAvKipcbiAgICAgKiBPcmlnaW5hbCB1c2VyIGlucHV0IHByaW9yIHRvIGFueSBwcm9jZXNzaW5nLlxuICAgICAqL1xuICAgIF9vcmlnaW5hbElucHV0O1xuICAgIC8qKlxuICAgICAqIFJlc3BvbnNlcyBmcm9tIHRoZSBtb2RlbCBzbyBmYXIuXG4gICAgICovXG4gICAgX21vZGVsUmVzcG9uc2VzO1xuICAgIC8qKlxuICAgICAqIEFjdGl2ZSB0cmFjaW5nIHNwYW4gZm9yIHRoZSBjdXJyZW50IGFnZW50IGlmIHRyYWNpbmcgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBfY3VycmVudEFnZW50U3BhbjtcbiAgICAvKipcbiAgICAgKiBSdW4gY29udGV4dCB0cmFja2luZyBhcHByb3ZhbHMsIHVzYWdlLCBhbmQgb3RoZXIgbWV0YWRhdGEuXG4gICAgICovXG4gICAgX2NvbnRleHQ7XG4gICAgLyoqXG4gICAgICogVHJhY2tzIHdoYXQgdG9vbHMgZWFjaCBhZ2VudCBoYXMgdXNlZC5cbiAgICAgKi9cbiAgICBfdG9vbFVzZVRyYWNrZXI7XG4gICAgLyoqXG4gICAgICogSXRlbXMgZ2VuZXJhdGVkIGJ5IHRoZSBhZ2VudCBkdXJpbmcgdGhlIHJ1bi5cbiAgICAgKi9cbiAgICBfZ2VuZXJhdGVkSXRlbXM7XG4gICAgLyoqXG4gICAgICogTWF4aW11bSBhbGxvd2VkIHR1cm5zIGJlZm9yZSBmb3JjaW5nIHRlcm1pbmF0aW9uLlxuICAgICAqL1xuICAgIF9tYXhUdXJucztcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBydW4gaGFzIGFuIGFjdGl2ZSBhZ2VudCBzdGVwIGluIHByb2dyZXNzLlxuICAgICAqL1xuICAgIF9ub0FjdGl2ZUFnZW50UnVuID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBMYXN0IG1vZGVsIHJlc3BvbnNlIGZvciB0aGUgcHJldmlvdXMgdHVybi5cbiAgICAgKi9cbiAgICBfbGFzdFR1cm5SZXNwb25zZTtcbiAgICAvKipcbiAgICAgKiBSZXN1bHRzIGZyb20gaW5wdXQgZ3VhcmRyYWlscyBhcHBsaWVkIHRvIHRoZSBydW4uXG4gICAgICovXG4gICAgX2lucHV0R3VhcmRyYWlsUmVzdWx0cztcbiAgICAvKipcbiAgICAgKiBSZXN1bHRzIGZyb20gb3V0cHV0IGd1YXJkcmFpbHMgYXBwbGllZCB0byB0aGUgcnVuLlxuICAgICAqL1xuICAgIF9vdXRwdXRHdWFyZHJhaWxSZXN1bHRzO1xuICAgIC8qKlxuICAgICAqIE5leHQgc3RlcCBjb21wdXRlZCBmb3IgdGhlIGFnZW50IHRvIHRha2UuXG4gICAgICovXG4gICAgX2N1cnJlbnRTdGVwID0gdW5kZWZpbmVkO1xuICAgIC8qKlxuICAgICAqIFBhcnNlZCBtb2RlbCByZXNwb25zZSBhZnRlciBhcHBseWluZyBndWFyZHJhaWxzIGFuZCB0b29scy5cbiAgICAgKi9cbiAgICBfbGFzdFByb2Nlc3NlZFJlc3BvbnNlID0gdW5kZWZpbmVkO1xuICAgIC8qKlxuICAgICAqIFRyYWNlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHJ1biBpZiB0cmFjaW5nIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgX3RyYWNlID0gbnVsbDtcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBvcmlnaW5hbElucHV0LCBzdGFydGluZ0FnZW50LCBtYXhUdXJucykge1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxJbnB1dCA9IHN0cnVjdHVyZWRDbG9uZShvcmlnaW5hbElucHV0KTtcbiAgICAgICAgdGhpcy5fbW9kZWxSZXNwb25zZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fY3VycmVudEFnZW50U3BhbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fY3VycmVudEFnZW50ID0gc3RhcnRpbmdBZ2VudDtcbiAgICAgICAgdGhpcy5fdG9vbFVzZVRyYWNrZXIgPSBuZXcgQWdlbnRUb29sVXNlVHJhY2tlcigpO1xuICAgICAgICB0aGlzLl9nZW5lcmF0ZWRJdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLl9tYXhUdXJucyA9IG1heFR1cm5zO1xuICAgICAgICB0aGlzLl9pbnB1dEd1YXJkcmFpbFJlc3VsdHMgPSBbXTtcbiAgICAgICAgdGhpcy5fb3V0cHV0R3VhcmRyYWlsUmVzdWx0cyA9IFtdO1xuICAgICAgICB0aGlzLl90cmFjZSA9IGdldEN1cnJlbnRUcmFjZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBpbnRlcnJ1cHRpb25zIGlmIHRoZSBjdXJyZW50IHN0ZXAgaXMgYW4gaW50ZXJydXB0aW9uIG90aGVyd2lzZSByZXR1cm5zIGFuIGVtcHR5IGFycmF5LlxuICAgICAqL1xuICAgIGdldEludGVycnVwdGlvbnMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50U3RlcD8udHlwZSAhPT0gJ25leHRfc3RlcF9pbnRlcnJ1cHRpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRTdGVwLmRhdGEuaW50ZXJydXB0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwcm92ZXMgYSB0b29sIGNhbGwgcmVxdWVzdGVkIGJ5IHRoZSBhZ2VudCB0aHJvdWdoIGFuIGludGVycnVwdGlvbiBhbmQgYXBwcm92YWwgaXRlbSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogVG8gYXBwcm92ZSB0aGUgcmVxdWVzdCB1c2UgdGhpcyBtZXRob2QgYW5kIHRoZW4gcnVuIHRoZSBhZ2VudCBhZ2FpbiB3aXRoIHRoZSBzYW1lIHN0YXRlIG9iamVjdFxuICAgICAqIHRvIGNvbnRpbnVlIHRoZSBleGVjdXRpb24uXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0IGl0IHdpbGwgb25seSBhcHByb3ZlIHRoZSBjdXJyZW50IHRvb2wgY2FsbC4gVG8gYWxsb3cgdGhlIHRvb2wgdG8gYmUgdXNlZCBtdWx0aXBsZVxuICAgICAqIHRpbWVzIHRocm91Z2hvdXQgdGhlIHJ1biwgc2V0IHRoZSBgYWx3YXlzQXBwcm92ZWAgb3B0aW9uIHRvIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcHByb3ZhbEl0ZW0gLSBUaGUgdG9vbCBjYWxsIGFwcHJvdmFsIGl0ZW0gdG8gYXBwcm92ZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBhcHByb3ZhbC5cbiAgICAgKi9cbiAgICBhcHByb3ZlKGFwcHJvdmFsSXRlbSwgb3B0aW9ucyA9IHsgYWx3YXlzQXBwcm92ZTogZmFsc2UgfSkge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmFwcHJvdmVUb29sKGFwcHJvdmFsSXRlbSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlamVjdHMgYSB0b29sIGNhbGwgcmVxdWVzdGVkIGJ5IHRoZSBhZ2VudCB0aHJvdWdoIGFuIGludGVycnVwdGlvbiBhbmQgYXBwcm92YWwgaXRlbSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogVG8gcmVqZWN0IHRoZSByZXF1ZXN0IHVzZSB0aGlzIG1ldGhvZCBhbmQgdGhlbiBydW4gdGhlIGFnZW50IGFnYWluIHdpdGggdGhlIHNhbWUgc3RhdGUgb2JqZWN0XG4gICAgICogdG8gY29udGludWUgdGhlIGV4ZWN1dGlvbi5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQgaXQgd2lsbCBvbmx5IHJlamVjdCB0aGUgY3VycmVudCB0b29sIGNhbGwuIFRvIGFsbG93IHRoZSB0b29sIHRvIGJlIHVzZWQgbXVsdGlwbGVcbiAgICAgKiB0aW1lcyB0aHJvdWdob3V0IHRoZSBydW4sIHNldCB0aGUgYGFsd2F5c1JlamVjdGAgb3B0aW9uIHRvIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcHByb3ZhbEl0ZW0gLSBUaGUgdG9vbCBjYWxsIGFwcHJvdmFsIGl0ZW0gdG8gcmVqZWN0LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIHJlamVjdGlvbi5cbiAgICAgKi9cbiAgICByZWplY3QoYXBwcm92YWxJdGVtLCBvcHRpb25zID0geyBhbHdheXNSZWplY3Q6IGZhbHNlIH0pIHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5yZWplY3RUb29sKGFwcHJvdmFsSXRlbSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIHJ1biBzdGF0ZSB0byBhIEpTT04gb2JqZWN0LlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZCB0byBzZXJpYWxpemUgdGhlIHJ1biBzdGF0ZSB0byBhIEpTT04gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG9cbiAgICAgKiByZXN1bWUgdGhlIHJ1biBsYXRlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBzZXJpYWxpemVkIHJ1biBzdGF0ZS5cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IHtcbiAgICAgICAgICAgICRzY2hlbWFWZXJzaW9uOiBDVVJSRU5UX1NDSEVNQV9WRVJTSU9OLFxuICAgICAgICAgICAgY3VycmVudFR1cm46IHRoaXMuX2N1cnJlbnRUdXJuLFxuICAgICAgICAgICAgY3VycmVudEFnZW50OiB7XG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5fY3VycmVudEFnZW50Lm5hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3JpZ2luYWxJbnB1dDogdGhpcy5fb3JpZ2luYWxJbnB1dCxcbiAgICAgICAgICAgIG1vZGVsUmVzcG9uc2VzOiB0aGlzLl9tb2RlbFJlc3BvbnNlcy5tYXAoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdXNhZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RzOiByZXNwb25zZS51c2FnZS5yZXF1ZXN0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VG9rZW5zOiByZXNwb25zZS51c2FnZS5pbnB1dFRva2VucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFRva2VuczogcmVzcG9uc2UudXNhZ2Uub3V0cHV0VG9rZW5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxUb2tlbnM6IHJlc3BvbnNlLnVzYWdlLnRvdGFsVG9rZW5zLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQ6IHJlc3BvbnNlLm91dHB1dCxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VJZDogcmVzcG9uc2UucmVzcG9uc2VJZCxcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhOiByZXNwb25zZS5wcm92aWRlckRhdGEsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY29udGV4dDogdGhpcy5fY29udGV4dC50b0pTT04oKSxcbiAgICAgICAgICAgIHRvb2xVc2VUcmFja2VyOiB0aGlzLl90b29sVXNlVHJhY2tlci50b0pTT04oKSxcbiAgICAgICAgICAgIG1heFR1cm5zOiB0aGlzLl9tYXhUdXJucyxcbiAgICAgICAgICAgIGN1cnJlbnRBZ2VudFNwYW46IHRoaXMuX2N1cnJlbnRBZ2VudFNwYW4/LnRvSlNPTigpLFxuICAgICAgICAgICAgbm9BY3RpdmVBZ2VudFJ1bjogdGhpcy5fbm9BY3RpdmVBZ2VudFJ1bixcbiAgICAgICAgICAgIGlucHV0R3VhcmRyYWlsUmVzdWx0czogdGhpcy5faW5wdXRHdWFyZHJhaWxSZXN1bHRzLFxuICAgICAgICAgICAgb3V0cHV0R3VhcmRyYWlsUmVzdWx0czogdGhpcy5fb3V0cHV0R3VhcmRyYWlsUmVzdWx0cy5tYXAoKHIpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4ucixcbiAgICAgICAgICAgICAgICBhZ2VudDogci5hZ2VudC50b0pTT04oKSxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIGN1cnJlbnRTdGVwOiB0aGlzLl9jdXJyZW50U3RlcCxcbiAgICAgICAgICAgIGxhc3RNb2RlbFJlc3BvbnNlOiB0aGlzLl9sYXN0VHVyblJlc3BvbnNlLFxuICAgICAgICAgICAgZ2VuZXJhdGVkSXRlbXM6IHRoaXMuX2dlbmVyYXRlZEl0ZW1zLm1hcCgoaXRlbSkgPT4gaXRlbS50b0pTT04oKSksXG4gICAgICAgICAgICBsYXN0UHJvY2Vzc2VkUmVzcG9uc2U6IHRoaXMuX2xhc3RQcm9jZXNzZWRSZXNwb25zZSxcbiAgICAgICAgICAgIHRyYWNlOiB0aGlzLl90cmFjZSA/IHRoaXMuX3RyYWNlLnRvSlNPTigpIDogbnVsbCxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gcGFyc2luZyB0aGUgc2NoZW1hIHRvIGVuc3VyZSB0aGUgb3V0cHV0IGlzIHZhbGlkIGZvciByZXBhcnNpbmdcbiAgICAgICAgY29uc3QgcGFyc2VkID0gU2VyaWFsaXplZFJ1blN0YXRlLnNhZmVQYXJzZShvdXRwdXQpO1xuICAgICAgICBpZiAoIXBhcnNlZC5zdWNjZXNzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU3lzdGVtRXJyb3IoYEZhaWxlZCB0byBzZXJpYWxpemUgcnVuIHN0YXRlLiAke3BhcnNlZC5lcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQuZGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyB0aGUgcnVuIHN0YXRlIHRvIGEgc3RyaW5nLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZCB0byBzZXJpYWxpemUgdGhlIHJ1biBzdGF0ZSB0byBhIHN0cmluZyB0aGF0IGNhbiBiZSB1c2VkIHRvXG4gICAgICogcmVzdW1lIHRoZSBydW4gbGF0ZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgc2VyaWFsaXplZCBydW4gc3RhdGUuXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVzZXJpYWxpemVzIGEgcnVuIHN0YXRlIGZyb20gYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIGRlc2VyaWFsaXplIGEgcnVuIHN0YXRlIGZyb20gYSBzdHJpbmcgdGhhdCB3YXMgc2VyaWFsaXplZCB1c2luZyB0aGVcbiAgICAgKiBgdG9TdHJpbmdgIG1ldGhvZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgZnJvbVN0cmluZyhpbml0aWFsQWdlbnQsIHN0cikge1xuICAgICAgICBjb25zdCBbcGFyc2luZ0Vycm9yLCBqc29uUmVzdWx0XSA9IGF3YWl0IHNhZmVFeGVjdXRlKCgpID0+IEpTT04ucGFyc2Uoc3RyKSk7XG4gICAgICAgIGlmIChwYXJzaW5nRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYEZhaWxlZCB0byBwYXJzZSBydW4gc3RhdGUuICR7cGFyc2luZ0Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBwYXJzaW5nRXJyb3IubWVzc2FnZSA6IFN0cmluZyhwYXJzaW5nRXJyb3IpfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTY2hlbWFWZXJzaW9uID0ganNvblJlc3VsdC4kc2NoZW1hVmVyc2lvbjtcbiAgICAgICAgaWYgKCFjdXJyZW50U2NoZW1hVmVyc2lvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignUnVuIHN0YXRlIGlzIG1pc3Npbmcgc2NoZW1hIHZlcnNpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudFNjaGVtYVZlcnNpb24gIT09IENVUlJFTlRfU0NIRU1BX1ZFUlNJT04pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYFJ1biBzdGF0ZSBzY2hlbWEgdmVyc2lvbiAke2N1cnJlbnRTY2hlbWFWZXJzaW9ufSBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgdXNlIHZlcnNpb24gJHtDVVJSRU5UX1NDSEVNQV9WRVJTSU9OfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXRlSnNvbiA9IFNlcmlhbGl6ZWRSdW5TdGF0ZS5wYXJzZShKU09OLnBhcnNlKHN0cikpO1xuICAgICAgICBjb25zdCBhZ2VudE1hcCA9IGJ1aWxkQWdlbnRNYXAoaW5pdGlhbEFnZW50KTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gUmVidWlsZCB0aGUgY29udGV4dFxuICAgICAgICAvL1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gbmV3IFJ1bkNvbnRleHQoc3RhdGVKc29uLmNvbnRleHQuY29udGV4dCk7XG4gICAgICAgIGNvbnRleHQuX3JlYnVpbGRBcHByb3ZhbHMoc3RhdGVKc29uLmNvbnRleHQuYXBwcm92YWxzKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gRmluZCB0aGUgY3VycmVudCBhZ2VudCBmcm9tIHRoZSBpbml0aWFsIGFnZW50XG4gICAgICAgIC8vXG4gICAgICAgIGNvbnN0IGN1cnJlbnRBZ2VudCA9IGFnZW50TWFwLmdldChzdGF0ZUpzb24uY3VycmVudEFnZW50Lm5hbWUpO1xuICAgICAgICBpZiAoIWN1cnJlbnRBZ2VudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgQWdlbnQgJHtzdGF0ZUpzb24uY3VycmVudEFnZW50Lm5hbWV9IG5vdCBmb3VuZGApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXRlID0gbmV3IFJ1blN0YXRlKGNvbnRleHQsICcnLCBjdXJyZW50QWdlbnQsIHN0YXRlSnNvbi5tYXhUdXJucyk7XG4gICAgICAgIHN0YXRlLl9jdXJyZW50VHVybiA9IHN0YXRlSnNvbi5jdXJyZW50VHVybjtcbiAgICAgICAgLy8gcmVidWlsZCB0b29sIHVzZSB0cmFja2VyXG4gICAgICAgIHN0YXRlLl90b29sVXNlVHJhY2tlciA9IG5ldyBBZ2VudFRvb2xVc2VUcmFja2VyKCk7XG4gICAgICAgIGZvciAoY29uc3QgW2FnZW50TmFtZSwgdG9vbE5hbWVzXSBvZiBPYmplY3QuZW50cmllcyhzdGF0ZUpzb24udG9vbFVzZVRyYWNrZXIpKSB7XG4gICAgICAgICAgICBzdGF0ZS5fdG9vbFVzZVRyYWNrZXIuYWRkVG9vbFVzZShhZ2VudE1hcC5nZXQoYWdlbnROYW1lKSwgdG9vbE5hbWVzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWJ1aWxkIGN1cnJlbnQgYWdlbnQgc3BhblxuICAgICAgICBpZiAoc3RhdGVKc29uLmN1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgIGlmICghc3RhdGVKc29uLnRyYWNlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1RyYWNlIGlzIG5vdCBzZXQsIHNraXBwaW5nIHRyYWNpbmcgc2V0dXAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRyYWNlID0gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVRyYWNlKHtcbiAgICAgICAgICAgICAgICB0cmFjZUlkOiBzdGF0ZUpzb24udHJhY2U/LmlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IHN0YXRlSnNvbi50cmFjZT8ud29ya2Zsb3dfbmFtZSxcbiAgICAgICAgICAgICAgICBncm91cElkOiBzdGF0ZUpzb24udHJhY2U/Lmdyb3VwX2lkID8/IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogc3RhdGVKc29uLnRyYWNlPy5tZXRhZGF0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4gPSBkZXNlcmlhbGl6ZVNwYW4odHJhY2UsIHN0YXRlSnNvbi5jdXJyZW50QWdlbnRTcGFuKTtcbiAgICAgICAgICAgIHN0YXRlLl90cmFjZSA9IHRyYWNlO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLl9ub0FjdGl2ZUFnZW50UnVuID0gc3RhdGVKc29uLm5vQWN0aXZlQWdlbnRSdW47XG4gICAgICAgIHN0YXRlLl9pbnB1dEd1YXJkcmFpbFJlc3VsdHMgPVxuICAgICAgICAgICAgc3RhdGVKc29uLmlucHV0R3VhcmRyYWlsUmVzdWx0cztcbiAgICAgICAgc3RhdGUuX291dHB1dEd1YXJkcmFpbFJlc3VsdHMgPSBzdGF0ZUpzb24ub3V0cHV0R3VhcmRyYWlsUmVzdWx0cy5tYXAoKHIpID0+ICh7XG4gICAgICAgICAgICAuLi5yLFxuICAgICAgICAgICAgYWdlbnQ6IGFnZW50TWFwLmdldChyLmFnZW50Lm5hbWUpLFxuICAgICAgICB9KSk7XG4gICAgICAgIHN0YXRlLl9jdXJyZW50U3RlcCA9IHN0YXRlSnNvbi5jdXJyZW50U3RlcDtcbiAgICAgICAgc3RhdGUuX29yaWdpbmFsSW5wdXQgPSBzdGF0ZUpzb24ub3JpZ2luYWxJbnB1dDtcbiAgICAgICAgc3RhdGUuX21vZGVsUmVzcG9uc2VzID0gc3RhdGVKc29uLm1vZGVsUmVzcG9uc2VzLm1hcChkZXNlcmlhbGl6ZU1vZGVsUmVzcG9uc2UpO1xuICAgICAgICBzdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSA9IHN0YXRlSnNvbi5sYXN0TW9kZWxSZXNwb25zZVxuICAgICAgICAgICAgPyBkZXNlcmlhbGl6ZU1vZGVsUmVzcG9uc2Uoc3RhdGVKc29uLmxhc3RNb2RlbFJlc3BvbnNlKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHN0YXRlLl9nZW5lcmF0ZWRJdGVtcyA9IHN0YXRlSnNvbi5nZW5lcmF0ZWRJdGVtcy5tYXAoKGl0ZW0pID0+IGRlc2VyaWFsaXplSXRlbShpdGVtLCBhZ2VudE1hcCkpO1xuICAgICAgICBzdGF0ZS5fbGFzdFByb2Nlc3NlZFJlc3BvbnNlID0gc3RhdGVKc29uLmxhc3RQcm9jZXNzZWRSZXNwb25zZVxuICAgICAgICAgICAgPyBhd2FpdCBkZXNlcmlhbGl6ZVByb2Nlc3NlZFJlc3BvbnNlKGFnZW50TWFwLCBzdGF0ZS5fY3VycmVudEFnZW50LCBzdGF0ZS5fY29udGV4dCwgc3RhdGVKc29uLmxhc3RQcm9jZXNzZWRSZXNwb25zZSlcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAoc3RhdGVKc29uLmN1cnJlbnRTdGVwPy50eXBlID09PSAnbmV4dF9zdGVwX2hhbmRvZmYnKSB7XG4gICAgICAgICAgICBzdGF0ZS5fY3VycmVudFN0ZXAgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ25leHRfc3RlcF9oYW5kb2ZmJyxcbiAgICAgICAgICAgICAgICBuZXdBZ2VudDogYWdlbnRNYXAuZ2V0KHN0YXRlSnNvbi5jdXJyZW50U3RlcC5uZXdBZ2VudC5uYW1lKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEFnZW50TWFwKGluaXRpYWxBZ2VudCkge1xuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBxdWV1ZSA9IFtpbml0aWFsQWdlbnRdO1xuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRBZ2VudCA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIGlmIChtYXAuaGFzKGN1cnJlbnRBZ2VudC5uYW1lKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbWFwLnNldChjdXJyZW50QWdlbnQubmFtZSwgY3VycmVudEFnZW50KTtcbiAgICAgICAgZm9yIChjb25zdCBoYW5kb2ZmIG9mIGN1cnJlbnRBZ2VudC5oYW5kb2Zmcykge1xuICAgICAgICAgICAgaWYgKGhhbmRvZmYgaW5zdGFuY2VvZiBBZ2VudCkge1xuICAgICAgICAgICAgICAgIGlmICghbWFwLmhhcyhoYW5kb2ZmLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goaGFuZG9mZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGFuZG9mZi5hZ2VudCkge1xuICAgICAgICAgICAgICAgIGlmICghbWFwLmhhcyhoYW5kb2ZmLmFnZW50Lm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goaGFuZG9mZi5hZ2VudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemVTcGFuKHRyYWNlLCBzZXJpYWxpemVkU3Bhbikge1xuICAgIGNvbnN0IHNwYW5EYXRhID0gc2VyaWFsaXplZFNwYW4uc3Bhbl9kYXRhO1xuICAgIGNvbnN0IHByZXZpb3VzU3BhbiA9IHNlcmlhbGl6ZWRTcGFuLnByZXZpb3VzX3NwYW5cbiAgICAgICAgPyBkZXNlcmlhbGl6ZVNwYW4odHJhY2UsIHNlcmlhbGl6ZWRTcGFuLnByZXZpb3VzX3NwYW4pXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHNwYW4gPSBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlU3Bhbih7XG4gICAgICAgIHNwYW5JZDogc2VyaWFsaXplZFNwYW4uaWQsXG4gICAgICAgIHRyYWNlSWQ6IHNlcmlhbGl6ZWRTcGFuLnRyYWNlX2lkLFxuICAgICAgICBwYXJlbnRJZDogc2VyaWFsaXplZFNwYW4ucGFyZW50X2lkID8/IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRlZEF0OiBzZXJpYWxpemVkU3Bhbi5zdGFydGVkX2F0ID8/IHVuZGVmaW5lZCxcbiAgICAgICAgZW5kZWRBdDogc2VyaWFsaXplZFNwYW4uZW5kZWRfYXQgPz8gdW5kZWZpbmVkLFxuICAgICAgICBkYXRhOiBzcGFuRGF0YSxcbiAgICB9LCB0cmFjZSk7XG4gICAgc3Bhbi5wcmV2aW91c1NwYW4gPSBwcmV2aW91c1NwYW47XG4gICAgcmV0dXJuIHNwYW47XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemVNb2RlbFJlc3BvbnNlKHNlcmlhbGl6ZWRNb2RlbFJlc3BvbnNlKSB7XG4gICAgY29uc3QgdXNhZ2UgPSBuZXcgVXNhZ2UoKTtcbiAgICB1c2FnZS5yZXF1ZXN0cyA9IHNlcmlhbGl6ZWRNb2RlbFJlc3BvbnNlLnVzYWdlLnJlcXVlc3RzO1xuICAgIHVzYWdlLmlucHV0VG9rZW5zID0gc2VyaWFsaXplZE1vZGVsUmVzcG9uc2UudXNhZ2UuaW5wdXRUb2tlbnM7XG4gICAgdXNhZ2Uub3V0cHV0VG9rZW5zID0gc2VyaWFsaXplZE1vZGVsUmVzcG9uc2UudXNhZ2Uub3V0cHV0VG9rZW5zO1xuICAgIHVzYWdlLnRvdGFsVG9rZW5zID0gc2VyaWFsaXplZE1vZGVsUmVzcG9uc2UudXNhZ2UudG90YWxUb2tlbnM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXNhZ2UsXG4gICAgICAgIG91dHB1dDogc2VyaWFsaXplZE1vZGVsUmVzcG9uc2Uub3V0cHV0Lm1hcCgoaXRlbSkgPT4gcHJvdG9jb2wuT3V0cHV0TW9kZWxJdGVtLnBhcnNlKGl0ZW0pKSxcbiAgICAgICAgcmVzcG9uc2VJZDogc2VyaWFsaXplZE1vZGVsUmVzcG9uc2UucmVzcG9uc2VJZCxcbiAgICAgICAgcHJvdmlkZXJEYXRhOiBzZXJpYWxpemVkTW9kZWxSZXNwb25zZS5wcm92aWRlckRhdGEsXG4gICAgfTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZUl0ZW0oc2VyaWFsaXplZEl0ZW0sIGFnZW50TWFwKSB7XG4gICAgc3dpdGNoIChzZXJpYWxpemVkSXRlbS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ21lc3NhZ2Vfb3V0cHV0X2l0ZW0nOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSdW5NZXNzYWdlT3V0cHV0SXRlbShzZXJpYWxpemVkSXRlbS5yYXdJdGVtLCBhZ2VudE1hcC5nZXQoc2VyaWFsaXplZEl0ZW0uYWdlbnQubmFtZSkpO1xuICAgICAgICBjYXNlICd0b29sX2NhbGxfaXRlbSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ1blRvb2xDYWxsSXRlbShzZXJpYWxpemVkSXRlbS5yYXdJdGVtLCBhZ2VudE1hcC5nZXQoc2VyaWFsaXplZEl0ZW0uYWdlbnQubmFtZSkpO1xuICAgICAgICBjYXNlICd0b29sX2NhbGxfb3V0cHV0X2l0ZW0nOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSdW5Ub29sQ2FsbE91dHB1dEl0ZW0oc2VyaWFsaXplZEl0ZW0ucmF3SXRlbSwgYWdlbnRNYXAuZ2V0KHNlcmlhbGl6ZWRJdGVtLmFnZW50Lm5hbWUpLCBzZXJpYWxpemVkSXRlbS5vdXRwdXQpO1xuICAgICAgICBjYXNlICdyZWFzb25pbmdfaXRlbSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ1blJlYXNvbmluZ0l0ZW0oc2VyaWFsaXplZEl0ZW0ucmF3SXRlbSwgYWdlbnRNYXAuZ2V0KHNlcmlhbGl6ZWRJdGVtLmFnZW50Lm5hbWUpKTtcbiAgICAgICAgY2FzZSAnaGFuZG9mZl9jYWxsX2l0ZW0nOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSdW5IYW5kb2ZmQ2FsbEl0ZW0oc2VyaWFsaXplZEl0ZW0ucmF3SXRlbSwgYWdlbnRNYXAuZ2V0KHNlcmlhbGl6ZWRJdGVtLmFnZW50Lm5hbWUpKTtcbiAgICAgICAgY2FzZSAnaGFuZG9mZl9vdXRwdXRfaXRlbSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ1bkhhbmRvZmZPdXRwdXRJdGVtKHNlcmlhbGl6ZWRJdGVtLnJhd0l0ZW0sIGFnZW50TWFwLmdldChzZXJpYWxpemVkSXRlbS5zb3VyY2VBZ2VudC5uYW1lKSwgYWdlbnRNYXAuZ2V0KHNlcmlhbGl6ZWRJdGVtLnRhcmdldEFnZW50Lm5hbWUpKTtcbiAgICAgICAgY2FzZSAndG9vbF9hcHByb3ZhbF9pdGVtJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgUnVuVG9vbEFwcHJvdmFsSXRlbShzZXJpYWxpemVkSXRlbS5yYXdJdGVtLCBhZ2VudE1hcC5nZXQoc2VyaWFsaXplZEl0ZW0uYWdlbnQubmFtZSkpO1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGRlc2VyaWFsaXplUHJvY2Vzc2VkUmVzcG9uc2UoYWdlbnRNYXAsIGN1cnJlbnRBZ2VudCwgY29udGV4dCwgc2VyaWFsaXplZFByb2Nlc3NlZFJlc3BvbnNlKSB7XG4gICAgY29uc3QgYWxsVG9vbHMgPSBhd2FpdCBjdXJyZW50QWdlbnQuZ2V0QWxsVG9vbHMoY29udGV4dCk7XG4gICAgY29uc3QgdG9vbHMgPSBuZXcgTWFwKGFsbFRvb2xzXG4gICAgICAgIC5maWx0ZXIoKHRvb2wpID0+IHRvb2wudHlwZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgLm1hcCgodG9vbCkgPT4gW3Rvb2wubmFtZSwgdG9vbF0pKTtcbiAgICBjb25zdCBjb21wdXRlclRvb2xzID0gbmV3IE1hcChhbGxUb29sc1xuICAgICAgICAuZmlsdGVyKCh0b29sKSA9PiB0b29sLnR5cGUgPT09ICdjb21wdXRlcicpXG4gICAgICAgIC5tYXAoKHRvb2wpID0+IFt0b29sLm5hbWUsIHRvb2xdKSk7XG4gICAgY29uc3QgaGFuZG9mZnMgPSBuZXcgTWFwKGN1cnJlbnRBZ2VudC5oYW5kb2Zmcy5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIGlmIChlbnRyeSBpbnN0YW5jZW9mIEFnZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gW2VudHJ5Lm5hbWUsIGhhbmRvZmYoZW50cnkpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2VudHJ5LnRvb2xOYW1lLCBlbnRyeV07XG4gICAgfSkpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgbmV3SXRlbXM6IHNlcmlhbGl6ZWRQcm9jZXNzZWRSZXNwb25zZS5uZXdJdGVtcy5tYXAoKGl0ZW0pID0+IGRlc2VyaWFsaXplSXRlbShpdGVtLCBhZ2VudE1hcCkpLFxuICAgICAgICB0b29sc1VzZWQ6IHNlcmlhbGl6ZWRQcm9jZXNzZWRSZXNwb25zZS50b29sc1VzZWQsXG4gICAgICAgIGhhbmRvZmZzOiBzZXJpYWxpemVkUHJvY2Vzc2VkUmVzcG9uc2UuaGFuZG9mZnMubWFwKChoYW5kb2ZmKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWhhbmRvZmZzLmhhcyhoYW5kb2ZmLmhhbmRvZmYudG9vbE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgSGFuZG9mZiAke2hhbmRvZmYuaGFuZG9mZi50b29sTmFtZX0gbm90IGZvdW5kYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvb2xDYWxsOiBoYW5kb2ZmLnRvb2xDYWxsLFxuICAgICAgICAgICAgICAgIGhhbmRvZmY6IGhhbmRvZmZzLmdldChoYW5kb2ZmLmhhbmRvZmYudG9vbE5hbWUpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIGZ1bmN0aW9uczogYXdhaXQgUHJvbWlzZS5hbGwoc2VyaWFsaXplZFByb2Nlc3NlZFJlc3BvbnNlLmZ1bmN0aW9ucy5tYXAoYXN5bmMgKGZ1bmN0aW9uQ2FsbCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0b29scy5oYXMoZnVuY3Rpb25DYWxsLnRvb2wubmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBUb29sICR7ZnVuY3Rpb25DYWxsLnRvb2wubmFtZX0gbm90IGZvdW5kYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvb2xDYWxsOiBmdW5jdGlvbkNhbGwudG9vbENhbGwsXG4gICAgICAgICAgICAgICAgdG9vbDogdG9vbHMuZ2V0KGZ1bmN0aW9uQ2FsbC50b29sLm5hbWUpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpLFxuICAgICAgICBjb21wdXRlckFjdGlvbnM6IHNlcmlhbGl6ZWRQcm9jZXNzZWRSZXNwb25zZS5jb21wdXRlckFjdGlvbnMubWFwKChjb21wdXRlckFjdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgdG9vbE5hbWUgPSBjb21wdXRlckFjdGlvbi5jb21wdXRlci5uYW1lO1xuICAgICAgICAgICAgaWYgKCFjb21wdXRlclRvb2xzLmhhcyh0b29sTmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBDb21wdXRlciB0b29sICR7dG9vbE5hbWV9IG5vdCBmb3VuZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b29sQ2FsbDogY29tcHV0ZXJBY3Rpb24udG9vbENhbGwsXG4gICAgICAgICAgICAgICAgY29tcHV0ZXI6IGNvbXB1dGVyVG9vbHMuZ2V0KHRvb2xOYW1lKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICBtY3BBcHByb3ZhbFJlcXVlc3RzOiAoc2VyaWFsaXplZFByb2Nlc3NlZFJlc3BvbnNlLm1jcEFwcHJvdmFsUmVxdWVzdHMgPz8gW10pLm1hcCgoYXBwcm92YWxSZXF1ZXN0KSA9PiAoe1xuICAgICAgICAgICAgcmVxdWVzdEl0ZW06IG5ldyBSdW5Ub29sQXBwcm92YWxJdGVtKGFwcHJvdmFsUmVxdWVzdC5yZXF1ZXN0SXRlbVxuICAgICAgICAgICAgICAgIC5yYXdJdGVtLCBjdXJyZW50QWdlbnQpLFxuICAgICAgICAgICAgbWNwVG9vbDogYXBwcm92YWxSZXF1ZXN0Lm1jcFRvb2wsXG4gICAgICAgIH0pKSxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgaGFzVG9vbHNPckFwcHJvdmFsc1RvUnVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIChyZXN1bHQuaGFuZG9mZnMubGVuZ3RoID4gMCB8fFxuICAgICAgICAgICAgICAgIHJlc3VsdC5mdW5jdGlvbnMubGVuZ3RoID4gMCB8fFxuICAgICAgICAgICAgICAgIHJlc3VsdC5tY3BBcHByb3ZhbFJlcXVlc3RzLmxlbmd0aCA+IDAgfHxcbiAgICAgICAgICAgICAgICByZXN1bHQuY29tcHV0ZXJBY3Rpb25zLmxlbmd0aCA+IDApO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW5TdGF0ZS5tanMubWFwIiwiaW1wb3J0IHsgQWdlbnQgfSBmcm9tIFwiLi9hZ2VudC5tanNcIjtcbmltcG9ydCB7IGRlZmluZUlucHV0R3VhcmRyYWlsLCBkZWZpbmVPdXRwdXRHdWFyZHJhaWwsIH0gZnJvbSBcIi4vZ3VhcmRyYWlsLm1qc1wiO1xuaW1wb3J0IHsgZ2V0SGFuZG9mZiB9IGZyb20gXCIuL2hhbmRvZmYubWpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0TW9kZWxQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVycy5tanNcIjtcbmltcG9ydCB7IFJ1bkNvbnRleHQgfSBmcm9tIFwiLi9ydW5Db250ZXh0Lm1qc1wiO1xuaW1wb3J0IHsgUnVuUmVzdWx0LCBTdHJlYW1lZFJ1blJlc3VsdCB9IGZyb20gXCIuL3Jlc3VsdC5tanNcIjtcbmltcG9ydCB7IFJ1bkhvb2tzIH0gZnJvbSBcIi4vbGlmZWN5Y2xlLm1qc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyBzZXJpYWxpemVUb29sLCBzZXJpYWxpemVIYW5kb2ZmIH0gZnJvbSBcIi4vdXRpbHMvc2VyaWFsaXplLm1qc1wiO1xuaW1wb3J0IHsgR3VhcmRyYWlsRXhlY3V0aW9uRXJyb3IsIElucHV0R3VhcmRyYWlsVHJpcHdpcmVUcmlnZ2VyZWQsIE1heFR1cm5zRXhjZWVkZWRFcnJvciwgTW9kZWxCZWhhdmlvckVycm9yLCBPdXRwdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCwgVXNlckVycm9yLCB9IGZyb20gXCIuL2Vycm9ycy5tanNcIjtcbmltcG9ydCB7IGFkZFN0ZXBUb1J1blJlc3VsdCwgZXhlY3V0ZUludGVycnVwdGVkVG9vbHNBbmRTaWRlRWZmZWN0cywgZXhlY3V0ZVRvb2xzQW5kU2lkZUVmZmVjdHMsIG1heWJlUmVzZXRUb29sQ2hvaWNlLCBwcm9jZXNzTW9kZWxSZXNwb25zZSwgfSBmcm9tIFwiLi9ydW5JbXBsZW1lbnRhdGlvbi5tanNcIjtcbmltcG9ydCB7IGdldE9yQ3JlYXRlVHJhY2UsIHJlc2V0Q3VycmVudFNwYW4sIHNldEN1cnJlbnRTcGFuLCB3aXRoTmV3U3BhbkNvbnRleHQsIHdpdGhUcmFjZSwgfSBmcm9tIFwiLi90cmFjaW5nL2NvbnRleHQubWpzXCI7XG5pbXBvcnQgeyBjcmVhdGVBZ2VudFNwYW4sIHdpdGhHdWFyZHJhaWxTcGFuIH0gZnJvbSBcIi4vdHJhY2luZy9pbmRleC5tanNcIjtcbmltcG9ydCB7IFVzYWdlIH0gZnJvbSBcIi4vdXNhZ2UubWpzXCI7XG5pbXBvcnQgeyBSdW5BZ2VudFVwZGF0ZWRTdHJlYW1FdmVudCwgUnVuUmF3TW9kZWxTdHJlYW1FdmVudCB9IGZyb20gXCIuL2V2ZW50cy5tanNcIjtcbmltcG9ydCB7IFJ1blN0YXRlIH0gZnJvbSBcIi4vcnVuU3RhdGUubWpzXCI7XG5pbXBvcnQgeyBTdHJlYW1FdmVudFJlc3BvbnNlQ29tcGxldGVkIH0gZnJvbSBcIi4vdHlwZXMvcHJvdG9jb2wubWpzXCI7XG5pbXBvcnQgeyBjb252ZXJ0QWdlbnRPdXRwdXRUeXBlVG9TZXJpYWxpemFibGUgfSBmcm9tIFwiLi91dGlscy90b29scy5tanNcIjtcbmNvbnN0IERFRkFVTFRfTUFYX1RVUk5TID0gMTA7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhY2luZyh0cmFjaW5nRGlzYWJsZWQsIHRyYWNlSW5jbHVkZVNlbnNpdGl2ZURhdGEpIHtcbiAgICBpZiAodHJhY2luZ0Rpc2FibGVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRyYWNlSW5jbHVkZVNlbnNpdGl2ZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiAnZW5hYmxlZF93aXRob3V0X2RhdGEnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFR1cm5JbnB1dChvcmlnaW5hbElucHV0LCBnZW5lcmF0ZWRJdGVtcykge1xuICAgIGNvbnN0IHJhd0l0ZW1zID0gZ2VuZXJhdGVkSXRlbXNcbiAgICAgICAgLmZpbHRlcigoaXRlbSkgPT4gaXRlbS50eXBlICE9PSAndG9vbF9hcHByb3ZhbF9pdGVtJykgLy8gZG9uJ3QgaW5jbHVkZSBhcHByb3ZhbCBpdGVtcyB0byBhdm9pZCBkb3VibGUgZnVuY3Rpb24gY2FsbHNcbiAgICAgICAgLm1hcCgoaXRlbSkgPT4gaXRlbS5yYXdJdGVtKTtcbiAgICBpZiAodHlwZW9mIG9yaWdpbmFsSW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG9yaWdpbmFsSW5wdXQgPSBbeyB0eXBlOiAnbWVzc2FnZScsIHJvbGU6ICd1c2VyJywgY29udGVudDogb3JpZ2luYWxJbnB1dCB9XTtcbiAgICB9XG4gICAgcmV0dXJuIFsuLi5vcmlnaW5hbElucHV0LCAuLi5yYXdJdGVtc107XG59XG4vKipcbiAqIEEgUnVubmVyIGlzIHJlc3BvbnNpYmxlIGZvciBydW5uaW5nIGFuIGFnZW50IHdvcmtmbG93LlxuICovXG5leHBvcnQgY2xhc3MgUnVubmVyIGV4dGVuZHMgUnVuSG9va3Mge1xuICAgIGNvbmZpZztcbiAgICBpbnB1dEd1YXJkcmFpbERlZnM7XG4gICAgb3V0cHV0R3VhcmRyYWlsRGVmcztcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgICAgICAgIG1vZGVsUHJvdmlkZXI6IGNvbmZpZy5tb2RlbFByb3ZpZGVyID8/IGdldERlZmF1bHRNb2RlbFByb3ZpZGVyKCksXG4gICAgICAgICAgICBtb2RlbDogY29uZmlnLm1vZGVsLFxuICAgICAgICAgICAgbW9kZWxTZXR0aW5nczogY29uZmlnLm1vZGVsU2V0dGluZ3MsXG4gICAgICAgICAgICBoYW5kb2ZmSW5wdXRGaWx0ZXI6IGNvbmZpZy5oYW5kb2ZmSW5wdXRGaWx0ZXIsXG4gICAgICAgICAgICBpbnB1dEd1YXJkcmFpbHM6IGNvbmZpZy5pbnB1dEd1YXJkcmFpbHMsXG4gICAgICAgICAgICBvdXRwdXRHdWFyZHJhaWxzOiBjb25maWcub3V0cHV0R3VhcmRyYWlscyxcbiAgICAgICAgICAgIHRyYWNpbmdEaXNhYmxlZDogY29uZmlnLnRyYWNpbmdEaXNhYmxlZCA/PyBmYWxzZSxcbiAgICAgICAgICAgIHRyYWNlSW5jbHVkZVNlbnNpdGl2ZURhdGE6IGNvbmZpZy50cmFjZUluY2x1ZGVTZW5zaXRpdmVEYXRhID8/IHRydWUsXG4gICAgICAgICAgICB3b3JrZmxvd05hbWU6IGNvbmZpZy53b3JrZmxvd05hbWUgPz8gJ0FnZW50IHdvcmtmbG93JyxcbiAgICAgICAgICAgIHRyYWNlSWQ6IGNvbmZpZy50cmFjZUlkLFxuICAgICAgICAgICAgZ3JvdXBJZDogY29uZmlnLmdyb3VwSWQsXG4gICAgICAgICAgICB0cmFjZU1ldGFkYXRhOiBjb25maWcudHJhY2VNZXRhZGF0YSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbnB1dEd1YXJkcmFpbERlZnMgPSAoY29uZmlnLmlucHV0R3VhcmRyYWlscyA/PyBbXSkubWFwKGRlZmluZUlucHV0R3VhcmRyYWlsKTtcbiAgICAgICAgdGhpcy5vdXRwdXRHdWFyZHJhaWxEZWZzID0gKGNvbmZpZy5vdXRwdXRHdWFyZHJhaWxzID8/IFtdKS5tYXAoZGVmaW5lT3V0cHV0R3VhcmRyYWlsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgYXN5bmMgI3J1bkluZGl2aWR1YWxOb25TdHJlYW0oc3RhcnRpbmdBZ2VudCwgaW5wdXQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhOZXdTcGFuQ29udGV4dChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgc2F2ZWQgc3RhdGUgd2UgdXNlIHRoYXQgb25lLCBvdGhlcndpc2Ugd2UgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBpbnB1dCBpbnN0YW5jZW9mIFJ1blN0YXRlXG4gICAgICAgICAgICAgICAgPyBpbnB1dFxuICAgICAgICAgICAgICAgIDogbmV3IFJ1blN0YXRlKG9wdGlvbnMuY29udGV4dCBpbnN0YW5jZW9mIFJ1bkNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb25zLmNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgUnVuQ29udGV4dChvcHRpb25zLmNvbnRleHQpLCBpbnB1dCwgc3RhcnRpbmdBZ2VudCwgb3B0aW9ucy5tYXhUdXJucyA/PyBERUZBVUxUX01BWF9UVVJOUyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtb2RlbCA9IHNlbGVjdE1vZGVsKHN0YXRlLl9jdXJyZW50QWdlbnQubW9kZWwsIHRoaXMuY29uZmlnLm1vZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtb2RlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsID0gYXdhaXQgdGhpcy5jb25maWcubW9kZWxQcm92aWRlci5nZXRNb2RlbChtb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UgZG9uJ3QgaGF2ZSBhIGN1cnJlbnQgc3RlcCwgd2UgdHJlYXQgdGhpcyBhcyBhIG5ldyBydW5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRTdGVwID0gc3RhdGUuX2N1cnJlbnRTdGVwID8/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICduZXh0X3N0ZXBfcnVuX2FnYWluJyxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9jdXJyZW50U3RlcC50eXBlID09PSAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnQ29udGludWluZyBmcm9tIGludGVycnVwdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSB8fCAhc3RhdGUuX2xhc3RQcm9jZXNzZWRSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ05vIG1vZGVsIHJlc3BvbnNlIGZvdW5kIGluIHByZXZpb3VzIHN0YXRlJywgc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHVyblJlc3VsdCA9IGF3YWl0IGV4ZWN1dGVJbnRlcnJ1cHRlZFRvb2xzQW5kU2lkZUVmZmVjdHMoc3RhdGUuX2N1cnJlbnRBZ2VudCwgc3RhdGUuX29yaWdpbmFsSW5wdXQsIHN0YXRlLl9nZW5lcmF0ZWRJdGVtcywgc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UsIHN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UsIHRoaXMsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl90b29sVXNlVHJhY2tlci5hZGRUb29sVXNlKHN0YXRlLl9jdXJyZW50QWdlbnQsIHN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UudG9vbHNVc2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9vcmlnaW5hbElucHV0ID0gdHVyblJlc3VsdC5vcmlnaW5hbElucHV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2dlbmVyYXRlZEl0ZW1zID0gdHVyblJlc3VsdC5nZW5lcmF0ZWRJdGVtcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50U3RlcCA9IHR1cm5SZXN1bHQubmV4dFN0ZXA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHVyblJlc3VsdC5uZXh0U3RlcC50eXBlID09PSAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBhcmUgc3RpbGwgaW4gYW4gaW50ZXJydXB0aW9uLCBzbyB3ZSBuZWVkIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJ1blJlc3VsdChzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRTdGVwLnR5cGUgPT09ICduZXh0X3N0ZXBfcnVuX2FnYWluJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFuZG9mZnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5fY3VycmVudEFnZW50LmhhbmRvZmZzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2hpbGUgdGhpcyBhcnJheSB1c3VhbGx5IG11c3Qgbm90IGJlIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSd2ZSBhZGRlZCB0aGlzIGNoZWNrIHRvIHByZXZlbnQgdW5leHBlY3RlZCBydW50aW1lIGVycm9ycyBsaWtlIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuYWkvb3BlbmFpLWFnZW50cy1qcy9pc3N1ZXMvMTM4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZG9mZnMucHVzaCguLi5zdGF0ZS5fY3VycmVudEFnZW50LmhhbmRvZmZzLm1hcChnZXRIYW5kb2ZmKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRlLl9jdXJyZW50QWdlbnRTcGFuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFuZG9mZk5hbWVzID0gaGFuZG9mZnMubWFwKChoKSA9PiBoLmFnZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4gPSBjcmVhdGVBZ2VudFNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzdGF0ZS5fY3VycmVudEFnZW50Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kb2ZmczogaGFuZG9mZk5hbWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0X3R5cGU6IHN0YXRlLl9jdXJyZW50QWdlbnQub3V0cHV0U2NoZW1hTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudEFnZW50U3Bhbi5zdGFydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRTcGFuKHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvb2xzID0gYXdhaXQgc3RhdGUuX2N1cnJlbnRBZ2VudC5nZXRBbGxUb29scyhzdGF0ZS5fY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXJpYWxpemVkVG9vbHMgPSB0b29scy5tYXAoKHQpID0+IHNlcmlhbGl6ZVRvb2wodCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplZEhhbmRvZmZzID0gaGFuZG9mZnMubWFwKChoKSA9PiBzZXJpYWxpemVIYW5kb2ZmKGgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5fY3VycmVudEFnZW50U3Bhbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuLnNwYW5EYXRhLnRvb2xzID0gdG9vbHMubWFwKCh0KSA9PiB0Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRUdXJuKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRUdXJuID4gc3RhdGUuX21heFR1cm5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4/LnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ01heCB0dXJucyBleGNlZWRlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgbWF4X3R1cm5zOiBzdGF0ZS5fbWF4VHVybnMgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWF4VHVybnNFeGNlZWRlZEVycm9yKGBNYXggdHVybnMgKCR7c3RhdGUuX21heFR1cm5zfSkgZXhjZWVkZWRgLCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYFJ1bm5pbmcgYWdlbnQgJHtzdGF0ZS5fY3VycmVudEFnZW50Lm5hbWV9ICh0dXJuICR7c3RhdGUuX2N1cnJlbnRUdXJufSlgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5fY3VycmVudFR1cm4gPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLiNydW5JbnB1dEd1YXJkcmFpbHMoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHVybklucHV0ID0gZ2V0VHVybklucHV0KHN0YXRlLl9vcmlnaW5hbElucHV0LCBzdGF0ZS5fZ2VuZXJhdGVkSXRlbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9ub0FjdGl2ZUFnZW50UnVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudC5lbWl0KCdhZ2VudF9zdGFydCcsIHN0YXRlLl9jb250ZXh0LCBzdGF0ZS5fY3VycmVudEFnZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X3N0YXJ0Jywgc3RhdGUuX2NvbnRleHQsIHN0YXRlLl9jdXJyZW50QWdlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGVsU2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5jb25maWcubW9kZWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5zdGF0ZS5fY3VycmVudEFnZW50Lm1vZGVsU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxTZXR0aW5ncyA9IG1heWJlUmVzZXRUb29sQ2hvaWNlKHN0YXRlLl9jdXJyZW50QWdlbnQsIHN0YXRlLl90b29sVXNlVHJhY2tlciwgbW9kZWxTZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSA9IGF3YWl0IG1vZGVsLmdldFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW1JbnN0cnVjdGlvbnM6IGF3YWl0IHN0YXRlLl9jdXJyZW50QWdlbnQuZ2V0U3lzdGVtUHJvbXB0KHN0YXRlLl9jb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9tcHQ6IGF3YWl0IHN0YXRlLl9jdXJyZW50QWdlbnQuZ2V0UHJvbXB0KHN0YXRlLl9jb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogdHVybklucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUmVzcG9uc2VJZDogb3B0aW9ucy5wcmV2aW91c1Jlc3BvbnNlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sczogc2VyaWFsaXplZFRvb2xzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFR5cGU6IGNvbnZlcnRBZ2VudE91dHB1dFR5cGVUb1NlcmlhbGl6YWJsZShzdGF0ZS5fY3VycmVudEFnZW50Lm91dHB1dFR5cGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRvZmZzOiBzZXJpYWxpemVkSGFuZG9mZnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2luZzogZ2V0VHJhY2luZyh0aGlzLmNvbmZpZy50cmFjaW5nRGlzYWJsZWQsIHRoaXMuY29uZmlnLnRyYWNlSW5jbHVkZVNlbnNpdGl2ZURhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogb3B0aW9ucy5zaWduYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9tb2RlbFJlc3BvbnNlcy5wdXNoKHN0YXRlLl9sYXN0VHVyblJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jb250ZXh0LnVzYWdlLmFkZChzdGF0ZS5fbGFzdFR1cm5SZXNwb25zZS51c2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fbm9BY3RpdmVBZ2VudFJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvY2Vzc2VkUmVzcG9uc2UgPSBwcm9jZXNzTW9kZWxSZXNwb25zZShzdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSwgc3RhdGUuX2N1cnJlbnRBZ2VudCwgdG9vbHMsIGhhbmRvZmZzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UgPSBwcm9jZXNzZWRSZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR1cm5SZXN1bHQgPSBhd2FpdCBleGVjdXRlVG9vbHNBbmRTaWRlRWZmZWN0cyhzdGF0ZS5fY3VycmVudEFnZW50LCBzdGF0ZS5fb3JpZ2luYWxJbnB1dCwgc3RhdGUuX2dlbmVyYXRlZEl0ZW1zLCBzdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSwgc3RhdGUuX2xhc3RQcm9jZXNzZWRSZXNwb25zZSwgdGhpcywgc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX3Rvb2xVc2VUcmFja2VyLmFkZFRvb2xVc2Uoc3RhdGUuX2N1cnJlbnRBZ2VudCwgc3RhdGUuX2xhc3RQcm9jZXNzZWRSZXNwb25zZS50b29sc1VzZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX29yaWdpbmFsSW5wdXQgPSB0dXJuUmVzdWx0Lm9yaWdpbmFsSW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fZ2VuZXJhdGVkSXRlbXMgPSB0dXJuUmVzdWx0LmdlbmVyYXRlZEl0ZW1zO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRTdGVwID0gdHVyblJlc3VsdC5uZXh0U3RlcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRTdGVwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudFN0ZXAudHlwZSA9PT0gJ25leHRfc3RlcF9maW5hbF9vdXRwdXQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLiNydW5PdXRwdXRHdWFyZHJhaWxzKHN0YXRlLCBzdGF0ZS5fY3VycmVudFN0ZXAub3V0cHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfZW5kJywgc3RhdGUuX2NvbnRleHQsIHN0YXRlLl9jdXJyZW50QWdlbnQsIHN0YXRlLl9jdXJyZW50U3RlcC5vdXRwdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudC5lbWl0KCdhZ2VudF9lbmQnLCBzdGF0ZS5fY29udGV4dCwgc3RhdGUuX2N1cnJlbnRTdGVwLm91dHB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJ1blJlc3VsdChzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdGUuX2N1cnJlbnRTdGVwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudFN0ZXAudHlwZSA9PT0gJ25leHRfc3RlcF9oYW5kb2ZmJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudCA9IHN0YXRlLl9jdXJyZW50U3RlcC5uZXdBZ2VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5fY3VycmVudEFnZW50U3Bhbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuLmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0Q3VycmVudFNwYW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudEFnZW50U3BhbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9ub0FjdGl2ZUFnZW50UnVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlJ3ZlIHByb2Nlc3NlZCB0aGUgaGFuZG9mZiwgc28gd2UgbmVlZCB0byBydW4gdGhlIGxvb3AgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50U3RlcCA9IHsgdHlwZTogJ25leHRfc3RlcF9ydW5fYWdhaW4nIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdGUuX2N1cnJlbnRTdGVwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudFN0ZXAudHlwZSA9PT0gJ25leHRfc3RlcF9pbnRlcnJ1cHRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnRlcnJ1cHRlZC4gRG9uJ3QgcnVuIGFueSBndWFyZHJhaWxzXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJ1blJlc3VsdChzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1J1bm5pbmcgbmV4dCBsb29wJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuLnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciBpbiBhZ2VudCBydW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBlcnJvcjogU3RyaW5nKGVycikgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5fY3VycmVudEFnZW50U3Bhbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRTdGVwPy50eXBlICE9PSAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvbid0IGVuZCB0aGUgc3BhbiBpZiB0aGUgcnVuIHdhcyBpbnRlcnJ1cHRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4uZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzZXRDdXJyZW50U3BhbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jICNydW5JbnB1dEd1YXJkcmFpbHMoc3RhdGUpIHtcbiAgICAgICAgY29uc3QgZ3VhcmRyYWlscyA9IHRoaXMuaW5wdXRHdWFyZHJhaWxEZWZzLmNvbmNhdChzdGF0ZS5fY3VycmVudEFnZW50LmlucHV0R3VhcmRyYWlscy5tYXAoZGVmaW5lSW5wdXRHdWFyZHJhaWwpKTtcbiAgICAgICAgaWYgKGd1YXJkcmFpbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgZ3VhcmRyYWlsQXJncyA9IHtcbiAgICAgICAgICAgICAgICBhZ2VudDogc3RhdGUuX2N1cnJlbnRBZ2VudCxcbiAgICAgICAgICAgICAgICBpbnB1dDogc3RhdGUuX29yaWdpbmFsSW5wdXQsXG4gICAgICAgICAgICAgICAgY29udGV4dDogc3RhdGUuX2NvbnRleHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoZ3VhcmRyYWlscy5tYXAoYXN5bmMgKGd1YXJkcmFpbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2l0aEd1YXJkcmFpbFNwYW4oYXN5bmMgKHNwYW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGd1YXJkcmFpbC5ydW4oZ3VhcmRyYWlsQXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFuLnNwYW5EYXRhLnRyaWdnZXJlZCA9IHJlc3VsdC5vdXRwdXQudHJpcHdpcmVUcmlnZ2VyZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9LCB7IGRhdGE6IHsgbmFtZTogZ3VhcmRyYWlsLm5hbWUgfSB9LCBzdGF0ZS5fY3VycmVudEFnZW50U3Bhbik7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5vdXRwdXQudHJpcHdpcmVUcmlnZ2VyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5fY3VycmVudEFnZW50U3Bhbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuLnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0d1YXJkcmFpbCB0cmlwd2lyZSB0cmlnZ2VyZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IGd1YXJkcmFpbDogcmVzdWx0Lmd1YXJkcmFpbC5uYW1lIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW5wdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZChgSW5wdXQgZ3VhcmRyYWlsIHRyaWdnZXJlZDogJHtKU09OLnN0cmluZ2lmeShyZXN1bHQub3V0cHV0Lm91dHB1dEluZm8pfWAsIHJlc3VsdCwgc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIElucHV0R3VhcmRyYWlsVHJpcHdpcmVUcmlnZ2VyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcm9sbCBiYWNrIHRoZSBjdXJyZW50IHR1cm4gdG8gZW5hYmxlIHJlcnVuc1xuICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50VHVybi0tO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBHdWFyZHJhaWxFeGVjdXRpb25FcnJvcihgSW5wdXQgZ3VhcmRyYWlsIGZhaWxlZCB0byBjb21wbGV0ZTogJHtlfWAsIGUsIHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyAjcnVuT3V0cHV0R3VhcmRyYWlscyhzdGF0ZSwgb3V0cHV0KSB7XG4gICAgICAgIGNvbnN0IGd1YXJkcmFpbHMgPSB0aGlzLm91dHB1dEd1YXJkcmFpbERlZnMuY29uY2F0KHN0YXRlLl9jdXJyZW50QWdlbnQub3V0cHV0R3VhcmRyYWlscy5tYXAoZGVmaW5lT3V0cHV0R3VhcmRyYWlsKSk7XG4gICAgICAgIGlmIChndWFyZHJhaWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGFnZW50T3V0cHV0ID0gc3RhdGUuX2N1cnJlbnRBZ2VudC5wcm9jZXNzRmluYWxPdXRwdXQob3V0cHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGd1YXJkcmFpbEFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgYWdlbnQ6IHN0YXRlLl9jdXJyZW50QWdlbnQsXG4gICAgICAgICAgICAgICAgYWdlbnRPdXRwdXQsXG4gICAgICAgICAgICAgICAgY29udGV4dDogc3RhdGUuX2NvbnRleHQsXG4gICAgICAgICAgICAgICAgZGV0YWlsczogeyBtb2RlbFJlc3BvbnNlOiBzdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKGd1YXJkcmFpbHMubWFwKGFzeW5jIChndWFyZHJhaWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhHdWFyZHJhaWxTcGFuKGFzeW5jIChzcGFuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBndWFyZHJhaWwucnVuKGd1YXJkcmFpbEFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5zcGFuRGF0YS50cmlnZ2VyZWQgPSByZXN1bHQub3V0cHV0LnRyaXB3aXJlVHJpZ2dlcmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfSwgeyBkYXRhOiB7IG5hbWU6IGd1YXJkcmFpbC5uYW1lIH0gfSwgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQub3V0cHV0LnRyaXB3aXJlVHJpZ2dlcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudEFnZW50U3Bhbi5zZXRFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdHdWFyZHJhaWwgdHJpcHdpcmUgdHJpZ2dlcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBndWFyZHJhaWw6IHJlc3VsdC5ndWFyZHJhaWwubmFtZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE91dHB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkKGBPdXRwdXQgZ3VhcmRyYWlsIHRyaWdnZXJlZDogJHtKU09OLnN0cmluZ2lmeShyZXN1bHQub3V0cHV0Lm91dHB1dEluZm8pfWAsIHJlc3VsdCwgc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIE91dHB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBHdWFyZHJhaWxFeGVjdXRpb25FcnJvcihgT3V0cHV0IGd1YXJkcmFpbCBmYWlsZWQgdG8gY29tcGxldGU6ICR7ZX1gLCBlLCBzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgYXN5bmMgI3J1blN0cmVhbUxvb3AocmVzdWx0LCBvcHRpb25zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRBZ2VudCA9IHJlc3VsdC5zdGF0ZS5fY3VycmVudEFnZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRvZmZzID0gY3VycmVudEFnZW50LmhhbmRvZmZzLm1hcChnZXRIYW5kb2ZmKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29scyA9IGF3YWl0IGN1cnJlbnRBZ2VudC5nZXRBbGxUb29scyhyZXN1bHQuc3RhdGUuX2NvbnRleHQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRUb29scyA9IHRvb2xzLm1hcCgodCkgPT4gc2VyaWFsaXplVG9vbCh0KSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplZEhhbmRvZmZzID0gaGFuZG9mZnMubWFwKChoKSA9PiBzZXJpYWxpemVIYW5kb2ZmKGgpKTtcbiAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwID0gcmVzdWx0LnN0YXRlLl9jdXJyZW50U3RlcCA/PyB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICduZXh0X3N0ZXBfcnVuX2FnYWluJyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwLnR5cGUgPT09ICduZXh0X3N0ZXBfaW50ZXJydXB0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ0NvbnRpbnVpbmcgZnJvbSBpbnRlcnJ1cHRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQuc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICFyZXN1bHQuc3RhdGUuX2xhc3RQcm9jZXNzZWRSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignTm8gbW9kZWwgcmVzcG9uc2UgZm91bmQgaW4gcHJldmlvdXMgc3RhdGUnLCByZXN1bHQuc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR1cm5SZXN1bHQgPSBhd2FpdCBleGVjdXRlSW50ZXJydXB0ZWRUb29sc0FuZFNpZGVFZmZlY3RzKHJlc3VsdC5zdGF0ZS5fY3VycmVudEFnZW50LCByZXN1bHQuc3RhdGUuX29yaWdpbmFsSW5wdXQsIHJlc3VsdC5zdGF0ZS5fZ2VuZXJhdGVkSXRlbXMsIHJlc3VsdC5zdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSwgcmVzdWx0LnN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UsIHRoaXMsIHJlc3VsdC5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGFkZFN0ZXBUb1J1blJlc3VsdChyZXN1bHQsIHR1cm5SZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX3Rvb2xVc2VUcmFja2VyLmFkZFRvb2xVc2UocmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnQsIHJlc3VsdC5zdGF0ZS5fbGFzdFByb2Nlc3NlZFJlc3BvbnNlLnRvb2xzVXNlZCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fb3JpZ2luYWxJbnB1dCA9IHR1cm5SZXN1bHQub3JpZ2luYWxJbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9nZW5lcmF0ZWRJdGVtcyA9IHR1cm5SZXN1bHQuZ2VuZXJhdGVkSXRlbXM7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXAgPSB0dXJuUmVzdWx0Lm5leHRTdGVwO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHVyblJlc3VsdC5uZXh0U3RlcC50eXBlID09PSAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBzdGlsbCBpbiBhbiBpbnRlcnJ1cHRpb24sIHNvIHdlIG5lZWQgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlLl9jdXJyZW50U3RlcC50eXBlID09PSAnbmV4dF9zdGVwX3J1bl9hZ2FpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRvZmZOYW1lcyA9IGhhbmRvZmZzLm1hcCgoaCkgPT4gaC5hZ2VudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnRTcGFuID0gY3JlYXRlQWdlbnRTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRBZ2VudC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kb2ZmczogaGFuZG9mZk5hbWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sczogdG9vbHMubWFwKCh0KSA9PiB0Lm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRfdHlwZTogY3VycmVudEFnZW50Lm91dHB1dFNjaGVtYU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnRTcGFuLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50U3BhbihyZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fY3VycmVudFR1cm4rKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0ZS5fY3VycmVudFR1cm4gPiByZXN1bHQuc3RhdGUuX21heFR1cm5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4/LnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTWF4IHR1cm5zIGV4Y2VlZGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IG1heF90dXJuczogcmVzdWx0LnN0YXRlLl9tYXhUdXJucyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWF4VHVybnNFeGNlZWRlZEVycm9yKGBNYXggdHVybnMgKCR7cmVzdWx0LnN0YXRlLl9tYXhUdXJuc30pIGV4Y2VlZGVkYCwgcmVzdWx0LnN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYFJ1bm5pbmcgYWdlbnQgJHtjdXJyZW50QWdlbnQubmFtZX0gKHR1cm4gJHtyZXN1bHQuc3RhdGUuX2N1cnJlbnRUdXJufSlgKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGVsID0gc2VsZWN0TW9kZWwoY3VycmVudEFnZW50Lm1vZGVsLCB0aGlzLmNvbmZpZy5tb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbW9kZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IGF3YWl0IHRoaXMuY29uZmlnLm1vZGVsUHJvdmlkZXIuZ2V0TW9kZWwobW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdGUuX2N1cnJlbnRUdXJuID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLiNydW5JbnB1dEd1YXJkcmFpbHMocmVzdWx0LnN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgbW9kZWxTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuY29uZmlnLm1vZGVsU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5jdXJyZW50QWdlbnQubW9kZWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxTZXR0aW5ncyA9IG1heWJlUmVzZXRUb29sQ2hvaWNlKGN1cnJlbnRBZ2VudCwgcmVzdWx0LnN0YXRlLl90b29sVXNlVHJhY2tlciwgbW9kZWxTZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR1cm5JbnB1dCA9IGdldFR1cm5JbnB1dChyZXN1bHQuaW5wdXQsIHJlc3VsdC5uZXdJdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdGUuX25vQWN0aXZlQWdlbnRSdW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBZ2VudC5lbWl0KCdhZ2VudF9zdGFydCcsIHJlc3VsdC5zdGF0ZS5fY29udGV4dCwgY3VycmVudEFnZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfc3RhcnQnLCByZXN1bHQuc3RhdGUuX2NvbnRleHQsIGN1cnJlbnRBZ2VudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsUmVzcG9uc2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgZXZlbnQgb2YgbW9kZWwuZ2V0U3RyZWFtZWRSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW1JbnN0cnVjdGlvbnM6IGF3YWl0IGN1cnJlbnRBZ2VudC5nZXRTeXN0ZW1Qcm9tcHQocmVzdWx0LnN0YXRlLl9jb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21wdDogYXdhaXQgY3VycmVudEFnZW50LmdldFByb21wdChyZXN1bHQuc3RhdGUuX2NvbnRleHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHR1cm5JbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUmVzcG9uc2VJZDogb3B0aW9ucy5wcmV2aW91c1Jlc3BvbnNlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHM6IHNlcmlhbGl6ZWRUb29scyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRvZmZzOiBzZXJpYWxpemVkSGFuZG9mZnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRUeXBlOiBjb252ZXJ0QWdlbnRPdXRwdXRUeXBlVG9TZXJpYWxpemFibGUoY3VycmVudEFnZW50Lm91dHB1dFR5cGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2luZzogZ2V0VHJhY2luZyh0aGlzLmNvbmZpZy50cmFjaW5nRGlzYWJsZWQsIHRoaXMuY29uZmlnLnRyYWNlSW5jbHVkZVNlbnNpdGl2ZURhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBvcHRpb25zLnNpZ25hbCxcbiAgICAgICAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAncmVzcG9uc2VfZG9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBTdHJlYW1FdmVudFJlc3BvbnNlQ29tcGxldGVkLnBhcnNlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFJlc3BvbnNlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2FnZTogbmV3IFVzYWdlKHBhcnNlZC5yZXNwb25zZS51c2FnZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dDogcGFyc2VkLnJlc3BvbnNlLm91dHB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VJZDogcGFyc2VkLnJlc3BvbnNlLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIHVzZXIncyBjb2RlIGV4aXRzIGEgbG9vcCB0byBjb25zdW1lIHRoZSBzdHJlYW0sIHdlIG5lZWQgdG8gYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGxvb3AgdG8gcHJldmVudCBpbnRlcm5hbCBmYWxzZSBlcnJvcnMgYW5kIHVubmVjZXNzYXJ5IHByb2Nlc3NpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuX2FkZEl0ZW0obmV3IFJ1blJhd01vZGVsU3RyZWFtRXZlbnQoZXZlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX25vQWN0aXZlQWdlbnRSdW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaW5hbFJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKCdNb2RlbCBkaWQgbm90IHByb2R1Y2UgYSBmaW5hbCByZXNwb25zZSEnLCByZXN1bHQuc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSA9IGZpbmFsUmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fbW9kZWxSZXNwb25zZXMucHVzaChyZXN1bHQuc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9jZXNzZWRSZXNwb25zZSA9IHByb2Nlc3NNb2RlbFJlc3BvbnNlKHJlc3VsdC5zdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSwgY3VycmVudEFnZW50LCB0b29scywgaGFuZG9mZnMpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2xhc3RQcm9jZXNzZWRSZXNwb25zZSA9IHByb2Nlc3NlZFJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0dXJuUmVzdWx0ID0gYXdhaXQgZXhlY3V0ZVRvb2xzQW5kU2lkZUVmZmVjdHMoY3VycmVudEFnZW50LCByZXN1bHQuc3RhdGUuX29yaWdpbmFsSW5wdXQsIHJlc3VsdC5zdGF0ZS5fZ2VuZXJhdGVkSXRlbXMsIHJlc3VsdC5zdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSwgcmVzdWx0LnN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UsIHRoaXMsIHJlc3VsdC5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGFkZFN0ZXBUb1J1blJlc3VsdChyZXN1bHQsIHR1cm5SZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX3Rvb2xVc2VUcmFja2VyLmFkZFRvb2xVc2UoY3VycmVudEFnZW50LCBwcm9jZXNzZWRSZXNwb25zZS50b29sc1VzZWQpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX29yaWdpbmFsSW5wdXQgPSB0dXJuUmVzdWx0Lm9yaWdpbmFsSW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fZ2VuZXJhdGVkSXRlbXMgPSB0dXJuUmVzdWx0LmdlbmVyYXRlZEl0ZW1zO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwID0gdHVyblJlc3VsdC5uZXh0U3RlcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXAudHlwZSA9PT0gJ25leHRfc3RlcF9maW5hbF9vdXRwdXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuI3J1bk91dHB1dEd1YXJkcmFpbHMocmVzdWx0LnN0YXRlLCByZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwLm91dHB1dCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzdWx0LnN0YXRlLl9jdXJyZW50U3RlcC50eXBlID09PSAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIGRvbmUgZm9yIG5vdy4gRG9uJ3QgcnVuIGFueSBvdXRwdXQgZ3VhcmRyYWlsc1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXAudHlwZSA9PT0gJ25leHRfc3RlcF9oYW5kb2ZmJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudCA9IHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXBcbiAgICAgICAgICAgICAgICAgICAgICAgID8ubmV3QWdlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fY3VycmVudEFnZW50U3Bhbi5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0Q3VycmVudFNwYW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5fYWRkSXRlbShuZXcgUnVuQWdlbnRVcGRhdGVkU3RyZWFtRXZlbnQocmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9ub0FjdGl2ZUFnZW50UnVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UndmUgcHJvY2Vzc2VkIHRoZSBoYW5kb2ZmLCBzbyB3ZSBuZWVkIHRvIHJ1biB0aGUgbG9vcCBhZ2FpblxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25leHRfc3RlcF9ydW5fYWdhaW4nLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdSdW5uaW5nIG5leHQgbG9vcCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4uc2V0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgaW4gYWdlbnQgcnVuJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBlcnJvcjogU3RyaW5nKGVycm9yKSB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnRTcGFuKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXA/LnR5cGUgIT09ICduZXh0X3N0ZXBfaW50ZXJydXB0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4uZW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc2V0Q3VycmVudFNwYW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBhc3luYyAjcnVuSW5kaXZpZHVhbFN0cmVhbShhZ2VudCwgaW5wdXQsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIHJldHVybiB3aXRoTmV3U3BhbkNvbnRleHQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBvciByZXVzZSBleGlzdGluZyBzdGF0ZVxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBpbnB1dCBpbnN0YW5jZW9mIFJ1blN0YXRlXG4gICAgICAgICAgICAgICAgPyBpbnB1dFxuICAgICAgICAgICAgICAgIDogbmV3IFJ1blN0YXRlKG9wdGlvbnMuY29udGV4dCBpbnN0YW5jZW9mIFJ1bkNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb25zLmNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgUnVuQ29udGV4dChvcHRpb25zLmNvbnRleHQpLCBpbnB1dCwgYWdlbnQsIG9wdGlvbnMubWF4VHVybnMgPz8gREVGQVVMVF9NQVhfVFVSTlMpO1xuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgc3RyZWFtZWQgcmVzdWx0IHdpdGggZXhpc3Rpbmcgc3RhdGVcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTdHJlYW1lZFJ1blJlc3VsdCh7XG4gICAgICAgICAgICAgICAgc2lnbmFsOiBvcHRpb25zLnNpZ25hbCxcbiAgICAgICAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gU2V0dXAgZGVmYXVsdHNcbiAgICAgICAgICAgIHJlc3VsdC5tYXhUdXJucyA9IG9wdGlvbnMubWF4VHVybnMgPz8gc3RhdGUuX21heFR1cm5zO1xuICAgICAgICAgICAgLy8gQ29udGludWUgdGhlIHN0cmVhbSBsb29wIHdpdGhvdXQgYmxvY2tpbmdcbiAgICAgICAgICAgIHRoaXMuI3J1blN0cmVhbUxvb3AocmVzdWx0LCBvcHRpb25zKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHQuX2RvbmUoKTtcbiAgICAgICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHQuX3JhaXNlRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJ1bihhZ2VudCwgaW5wdXQsIG9wdGlvbnMgPSB7XG4gICAgICAgIHN0cmVhbTogZmFsc2UsXG4gICAgICAgIGNvbnRleHQ6IHVuZGVmaW5lZCxcbiAgICB9KSB7XG4gICAgICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJ1blN0YXRlICYmIGlucHV0Ll90cmFjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhUcmFjZShpbnB1dC5fdHJhY2UsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudFNwYW4oaW5wdXQuX2N1cnJlbnRBZ2VudFNwYW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucz8uc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiNydW5JbmRpdmlkdWFsU3RyZWFtKGFnZW50LCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jcnVuSW5kaXZpZHVhbE5vblN0cmVhbShhZ2VudCwgaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRPckNyZWF0ZVRyYWNlKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zPy5zdHJlYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jcnVuSW5kaXZpZHVhbFN0cmVhbShhZ2VudCwgaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuI3J1bkluZGl2aWR1YWxOb25TdHJlYW0oYWdlbnQsIGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdHJhY2VJZDogdGhpcy5jb25maWcudHJhY2VJZCxcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuY29uZmlnLndvcmtmbG93TmFtZSxcbiAgICAgICAgICAgIGdyb3VwSWQ6IHRoaXMuY29uZmlnLmdyb3VwSWQsXG4gICAgICAgICAgICBtZXRhZGF0YTogdGhpcy5jb25maWcudHJhY2VNZXRhZGF0YSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxubGV0IF9kZWZhdWx0UnVubmVyID0gdW5kZWZpbmVkO1xuZnVuY3Rpb24gZ2V0RGVmYXVsdFJ1bm5lcigpIHtcbiAgICBpZiAoX2RlZmF1bHRSdW5uZXIpIHtcbiAgICAgICAgcmV0dXJuIF9kZWZhdWx0UnVubmVyO1xuICAgIH1cbiAgICBfZGVmYXVsdFJ1bm5lciA9IG5ldyBSdW5uZXIoKTtcbiAgICByZXR1cm4gX2RlZmF1bHRSdW5uZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0TW9kZWwoYWdlbnRNb2RlbCwgcnVuQ29uZmlnTW9kZWwpIHtcbiAgICAvLyBXaGVuIGluaXRpYWxpemluZyBhbiBhZ2VudCB3aXRob3V0IG1vZGVsIG5hbWUsIHRoZSBtb2RlbCBwcm9wZXJ0eSBpcyBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLiBTbyxcbiAgICAvLyAqIGFnZW50TW9kZWwgPT09ICcnICYgcnVuQ29uZmlnTW9kZWwgZXhpc3RzLCBydW5Db25maWdNb2RlbCB3aWxsIGJlIHVzZWRcbiAgICAvLyAqIGFnZW50TW9kZWwgaXMgc2V0LCB0aGUgYWdlbnRNb2RlbCB3aWxsIGJlIHVzZWQgb3ZlciBydW5Db25maWdNb2RlbFxuICAgIGlmICgodHlwZW9mIGFnZW50TW9kZWwgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIGFnZW50TW9kZWwgIT09IEFnZW50LkRFRkFVTFRfTU9ERUxfUExBQ0VIT0xERVIpIHx8XG4gICAgICAgIGFnZW50TW9kZWwgLy8gYW55IHRydXRoeSB2YWx1ZVxuICAgICkge1xuICAgICAgICByZXR1cm4gYWdlbnRNb2RlbDtcbiAgICB9XG4gICAgcmV0dXJuIHJ1bkNvbmZpZ01vZGVsID8/IGFnZW50TW9kZWwgPz8gQWdlbnQuREVGQVVMVF9NT0RFTF9QTEFDRUhPTERFUjtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW4oYWdlbnQsIGlucHV0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgcnVubmVyID0gZ2V0RGVmYXVsdFJ1bm5lcigpO1xuICAgIGlmIChvcHRpb25zPy5zdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHJ1bm5lci5ydW4oYWdlbnQsIGlucHV0LCBvcHRpb25zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBydW5uZXIucnVuKGFnZW50LCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVuLm1qcy5tYXAiLCJpbXBvcnQgeyBBZ2VudEhvb2tzIH0gZnJvbSBcIi4vbGlmZWN5Y2xlLm1qc1wiO1xuaW1wb3J0IHsgZ2V0QWxsTWNwVG9vbHMgfSBmcm9tIFwiLi9tY3AubWpzXCI7XG5pbXBvcnQgeyB0b29sLCB9IGZyb20gXCIuL3Rvb2wubWpzXCI7XG5pbXBvcnQgeyBSdW5uZXIgfSBmcm9tIFwiLi9ydW4ubWpzXCI7XG5pbXBvcnQgeyB0b0Z1bmN0aW9uVG9vbE5hbWUgfSBmcm9tIFwiLi91dGlscy90b29scy5tanNcIjtcbmltcG9ydCB7IGdldE91dHB1dFRleHQgfSBmcm9tIFwiLi91dGlscy9tZXNzYWdlcy5tanNcIjtcbmltcG9ydCB7IGlzQWdlbnRUb29sSW5wdXQgfSBmcm9tIFwiLi91dGlscy90eXBlR3VhcmRzLm1qc1wiO1xuaW1wb3J0IHsgaXNab2RPYmplY3QgfSBmcm9tIFwiLi91dGlscy90eXBlR3VhcmRzLm1qc1wiO1xuaW1wb3J0IHsgTW9kZWxCZWhhdmlvckVycm9yLCBVc2VyRXJyb3IgfSBmcm9tIFwiLi9lcnJvcnMubWpzXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbi8qKlxuICogVGhlIGNsYXNzIHJlcHJlc2VudGluZyBhbiBBSSBhZ2VudCBjb25maWd1cmVkIHdpdGggaW5zdHJ1Y3Rpb25zLCB0b29scywgZ3VhcmRyYWlscywgaGFuZG9mZnMgYW5kIG1vcmUuXG4gKlxuICogV2Ugc3Ryb25nbHkgcmVjb21tZW5kIHBhc3NpbmcgYGluc3RydWN0aW9uc2AsIHdoaWNoIGlzIHRoZSBcInN5c3RlbSBwcm9tcHRcIiBmb3IgdGhlIGFnZW50LiBJblxuICogYWRkaXRpb24sIHlvdSBjYW4gcGFzcyBgaGFuZG9mZkRlc2NyaXB0aW9uYCwgd2hpY2ggaXMgYSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGVcbiAqIGFnZW50LCB1c2VkIHdoZW4gdGhlIGFnZW50IGlzIHVzZWQgaW5zaWRlIHRvb2xzL2hhbmRvZmZzLlxuICpcbiAqIEFnZW50cyBhcmUgZ2VuZXJpYyBvbiB0aGUgY29udGV4dCB0eXBlLiBUaGUgY29udGV4dCBpcyBhIChtdXRhYmxlKSBvYmplY3QgeW91IGNyZWF0ZS4gSXQgaXNcbiAqIHBhc3NlZCB0byB0b29sIGZ1bmN0aW9ucywgaGFuZG9mZnMsIGd1YXJkcmFpbHMsIGV0Yy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFnZW50IGV4dGVuZHMgQWdlbnRIb29rcyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIEFnZW50IHdpdGggaGFuZG9mZnMgYW5kIGF1dG9tYXRpY2FsbHkgaW5mZXIgdGhlIHVuaW9uIHR5cGUgZm9yIFRPdXRwdXQgZnJvbSB0aGUgaGFuZG9mZiBhZ2VudHMnIG91dHB1dCB0eXBlcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gbmV3IEFnZW50KHtcbiAgICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICAgIGhhbmRvZmZzOiBjb25maWcuaGFuZG9mZnMsXG4gICAgICAgICAgICBvdXRwdXRUeXBlOiBjb25maWcub3V0cHV0VHlwZSxcbiAgICAgICAgICAgIGhhbmRvZmZPdXRwdXRUeXBlV2FybmluZ0VuYWJsZWQ6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIERFRkFVTFRfTU9ERUxfUExBQ0VIT0xERVIgPSAnJztcbiAgICBuYW1lO1xuICAgIGluc3RydWN0aW9ucztcbiAgICBwcm9tcHQ7XG4gICAgaGFuZG9mZkRlc2NyaXB0aW9uO1xuICAgIGhhbmRvZmZzO1xuICAgIG1vZGVsO1xuICAgIG1vZGVsU2V0dGluZ3M7XG4gICAgdG9vbHM7XG4gICAgbWNwU2VydmVycztcbiAgICBpbnB1dEd1YXJkcmFpbHM7XG4gICAgb3V0cHV0R3VhcmRyYWlscztcbiAgICBvdXRwdXRUeXBlID0gJ3RleHQnO1xuICAgIHRvb2xVc2VCZWhhdmlvcjtcbiAgICByZXNldFRvb2xDaG9pY2U7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnLm5hbWUgIT09ICdzdHJpbmcnIHx8IGNvbmZpZy5uYW1lLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ0FnZW50IG11c3QgaGF2ZSBhIG5hbWUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb25zID0gY29uZmlnLmluc3RydWN0aW9ucyA/PyBBZ2VudC5ERUZBVUxUX01PREVMX1BMQUNFSE9MREVSO1xuICAgICAgICB0aGlzLnByb21wdCA9IGNvbmZpZy5wcm9tcHQ7XG4gICAgICAgIHRoaXMuaGFuZG9mZkRlc2NyaXB0aW9uID0gY29uZmlnLmhhbmRvZmZEZXNjcmlwdGlvbiA/PyAnJztcbiAgICAgICAgdGhpcy5oYW5kb2ZmcyA9IGNvbmZpZy5oYW5kb2ZmcyA/PyBbXTtcbiAgICAgICAgdGhpcy5tb2RlbCA9IGNvbmZpZy5tb2RlbCA/PyAnJztcbiAgICAgICAgdGhpcy5tb2RlbFNldHRpbmdzID0gY29uZmlnLm1vZGVsU2V0dGluZ3MgPz8ge307XG4gICAgICAgIHRoaXMudG9vbHMgPSBjb25maWcudG9vbHMgPz8gW107XG4gICAgICAgIHRoaXMubWNwU2VydmVycyA9IGNvbmZpZy5tY3BTZXJ2ZXJzID8/IFtdO1xuICAgICAgICB0aGlzLmlucHV0R3VhcmRyYWlscyA9IGNvbmZpZy5pbnB1dEd1YXJkcmFpbHMgPz8gW107XG4gICAgICAgIHRoaXMub3V0cHV0R3VhcmRyYWlscyA9IGNvbmZpZy5vdXRwdXRHdWFyZHJhaWxzID8/IFtdO1xuICAgICAgICBpZiAoY29uZmlnLm91dHB1dFR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMub3V0cHV0VHlwZSA9IGNvbmZpZy5vdXRwdXRUeXBlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9vbFVzZUJlaGF2aW9yID0gY29uZmlnLnRvb2xVc2VCZWhhdmlvciA/PyAncnVuX2xsbV9hZ2Fpbic7XG4gICAgICAgIHRoaXMucmVzZXRUb29sQ2hvaWNlID0gY29uZmlnLnJlc2V0VG9vbENob2ljZSA/PyB0cnVlO1xuICAgICAgICAvLyAtLS0gUnVudGltZSB3YXJuaW5nIGZvciBoYW5kb2ZmIG91dHB1dCB0eXBlIGNvbXBhdGliaWxpdHkgLS0tXG4gICAgICAgIGlmIChjb25maWcuaGFuZG9mZk91dHB1dFR5cGVXYXJuaW5nRW5hYmxlZCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBjb25maWcuaGFuZG9mZk91dHB1dFR5cGVXYXJuaW5nRW5hYmxlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFuZG9mZnMgJiYgdGhpcy5vdXRwdXRUeXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0VHlwZXMgPSBuZXcgU2V0KFtKU09OLnN0cmluZ2lmeSh0aGlzLm91dHB1dFR5cGUpXSk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBoIG9mIHRoaXMuaGFuZG9mZnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCdvdXRwdXRUeXBlJyBpbiBoICYmIGgub3V0cHV0VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0VHlwZXMuYWRkKEpTT04uc3RyaW5naWZ5KGgub3V0cHV0VHlwZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCdhZ2VudCcgaW4gaCAmJiBoLmFnZW50Lm91dHB1dFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFR5cGVzLmFkZChKU09OLnN0cmluZ2lmeShoLmFnZW50Lm91dHB1dFR5cGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3V0cHV0VHlwZXMuc2l6ZSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oYFtBZ2VudF0gV2FybmluZzogSGFuZG9mZiBhZ2VudHMgaGF2ZSBkaWZmZXJlbnQgb3V0cHV0IHR5cGVzOiAke0FycmF5LmZyb20ob3V0cHV0VHlwZXMpLmpvaW4oJywgJyl9LiBZb3UgY2FuIG1ha2UgaXQgdHlwZS1zYWZlIGJ5IHVzaW5nIEFnZW50LmNyZWF0ZSh7IC4uLiB9KSBtZXRob2QgaW5zdGVhZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogT3V0cHV0IHNjaGVtYSBuYW1lLlxuICAgICAqL1xuICAgIGdldCBvdXRwdXRTY2hlbWFOYW1lKCkge1xuICAgICAgICBpZiAodGhpcy5vdXRwdXRUeXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIHJldHVybiAndGV4dCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNab2RPYmplY3QodGhpcy5vdXRwdXRUeXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuICdab2RPdXRwdXQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLm91dHB1dFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vdXRwdXRUeXBlLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIG91dHB1dCB0eXBlOiAke3RoaXMub3V0cHV0VHlwZX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFrZXMgYSBjb3B5IG9mIHRoZSBhZ2VudCwgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzIGNoYW5nZWQuIEZvciBleGFtcGxlLCB5b3UgY291bGQgZG86XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCBuZXdBZ2VudCA9IGFnZW50LmNsb25lKHsgaW5zdHJ1Y3Rpb25zOiAnTmV3IGluc3RydWN0aW9ucycgfSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25maWcgLSBBIHBhcnRpYWwgY29uZmlndXJhdGlvbiB0byBjaGFuZ2UuXG4gICAgICogQHJldHVybnMgQSBuZXcgYWdlbnQgd2l0aCB0aGUgZ2l2ZW4gY2hhbmdlcy5cbiAgICAgKi9cbiAgICBjbG9uZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBZ2VudCh7XG4gICAgICAgICAgICAuLi50aGlzLFxuICAgICAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtIHRoaXMgYWdlbnQgaW50byBhIHRvb2wsIGNhbGxhYmxlIGJ5IG90aGVyIGFnZW50cy5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgZGlmZmVyZW50IGZyb20gaGFuZG9mZnMgaW4gdHdvIHdheXM6XG4gICAgICogMS4gSW4gaGFuZG9mZnMsIHRoZSBuZXcgYWdlbnQgcmVjZWl2ZXMgdGhlIGNvbnZlcnNhdGlvbiBoaXN0b3J5LiBJbiB0aGlzIHRvb2wsIHRoZSBuZXcgYWdlbnRcbiAgICAgKiAgICByZWNlaXZlcyBnZW5lcmF0ZWQgaW5wdXQuXG4gICAgICogMi4gSW4gaGFuZG9mZnMsIHRoZSBuZXcgYWdlbnQgdGFrZXMgb3ZlciB0aGUgY29udmVyc2F0aW9uLiBJbiB0aGlzIHRvb2wsIHRoZSBuZXcgYWdlbnQgaXNcbiAgICAgKiAgICBjYWxsZWQgYXMgYSB0b29sLCBhbmQgdGhlIGNvbnZlcnNhdGlvbiBpcyBjb250aW51ZWQgYnkgdGhlIG9yaWdpbmFsIGFnZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgdG9vbC5cbiAgICAgKiBAcmV0dXJucyBBIHRvb2wgdGhhdCBydW5zIHRoZSBhZ2VudCBhbmQgcmV0dXJucyB0aGUgb3V0cHV0IHRleHQuXG4gICAgICovXG4gICAgYXNUb29sKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyB0b29sTmFtZSwgdG9vbERlc2NyaXB0aW9uLCBjdXN0b21PdXRwdXRFeHRyYWN0b3IgfSA9IG9wdGlvbnM7XG4gICAgICAgIHJldHVybiB0b29sKHtcbiAgICAgICAgICAgIG5hbWU6IHRvb2xOYW1lID8/IHRvRnVuY3Rpb25Ub29sTmFtZSh0aGlzLm5hbWUpLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHRvb2xEZXNjcmlwdGlvbiA/PyAnJyxcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBbJ2lucHV0J10sXG4gICAgICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICAgIGV4ZWN1dGU6IGFzeW5jIChkYXRhLCBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0FnZW50VG9vbElucHV0KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBNb2RlbEJlaGF2aW9yRXJyb3IoJ0FnZW50IHRvb2wgY2FsbGVkIHdpdGggaW52YWxpZCBpbnB1dCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBydW5uZXIgPSBuZXcgUnVubmVyKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcnVubmVyLnJ1bih0aGlzLCBkYXRhLmlucHV0LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQ/LmNvbnRleHQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXN0b21PdXRwdXRFeHRyYWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1c3RvbU91dHB1dEV4dHJhY3RvcihyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0T3V0cHV0VGV4dChyZXN1bHQucmF3UmVzcG9uc2VzW3Jlc3VsdC5yYXdSZXNwb25zZXMubGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN5c3RlbSBwcm9tcHQgZm9yIHRoZSBhZ2VudC5cbiAgICAgKlxuICAgICAqIElmIHRoZSBhZ2VudCBoYXMgYSBmdW5jdGlvbiBhcyBpdHMgaW5zdHJ1Y3Rpb25zLCB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAgICogcnVuQ29udGV4dCBhbmQgdGhlIGFnZW50IGluc3RhbmNlLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFN5c3RlbVByb21wdChydW5Db250ZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5pbnN0cnVjdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmluc3RydWN0aW9ucyhydW5Db250ZXh0LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0cnVjdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHByb21wdCB0ZW1wbGF0ZSBmb3IgdGhlIGFnZW50LCBpZiBkZWZpbmVkLlxuICAgICAqXG4gICAgICogSWYgdGhlIGFnZW50IGhhcyBhIGZ1bmN0aW9uIGFzIGl0cyBwcm9tcHQsIHRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICAgKiBydW5Db250ZXh0IGFuZCB0aGUgYWdlbnQgaW5zdGFuY2UuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0UHJvbXB0KHJ1bkNvbnRleHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb21wdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvbXB0KHJ1bkNvbnRleHQsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByb21wdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyB0aGUgYXZhaWxhYmxlIHRvb2xzIGZyb20gdGhlIE1DUCBzZXJ2ZXJzLlxuICAgICAqIEByZXR1cm5zIHRoZSBNQ1AgcG93ZXJlZCB0b29sc1xuICAgICAqL1xuICAgIGFzeW5jIGdldE1jcFRvb2xzKHJ1bkNvbnRleHQpIHtcbiAgICAgICAgaWYgKHRoaXMubWNwU2VydmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QWxsTWNwVG9vbHMoe1xuICAgICAgICAgICAgICAgIG1jcFNlcnZlcnM6IHRoaXMubWNwU2VydmVycyxcbiAgICAgICAgICAgICAgICBydW5Db250ZXh0LFxuICAgICAgICAgICAgICAgIGFnZW50OiB0aGlzLFxuICAgICAgICAgICAgICAgIGNvbnZlcnRTY2hlbWFzVG9TdHJpY3Q6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBTGwgYWdlbnQgdG9vbHMsIGluY2x1ZGluZyB0aGUgTUNQbCBhbmQgZnVuY3Rpb24gdG9vbHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhbGwgY29uZmlndXJlZCB0b29sc1xuICAgICAqL1xuICAgIGFzeW5jIGdldEFsbFRvb2xzKHJ1bkNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIFsuLi4oYXdhaXQgdGhpcy5nZXRNY3BUb29scyhydW5Db250ZXh0KSksIC4uLnRoaXMudG9vbHNdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzZXMgdGhlIGZpbmFsIG91dHB1dCBvZiB0aGUgYWdlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3V0cHV0IC0gVGhlIG91dHB1dCBvZiB0aGUgYWdlbnQuXG4gICAgICogQHJldHVybnMgVGhlIHBhcnNlZCBvdXQuXG4gICAgICovXG4gICAgcHJvY2Vzc0ZpbmFsT3V0cHV0KG91dHB1dCkge1xuICAgICAgICBpZiAodGhpcy5vdXRwdXRUeXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm91dHB1dFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKG91dHB1dCk7XG4gICAgICAgICAgICBpZiAoaXNab2RPYmplY3QodGhpcy5vdXRwdXRUeXBlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm91dHB1dFR5cGUucGFyc2UocGFyc2VkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIG91dHB1dCB0eXBlOiAke3RoaXMub3V0cHV0VHlwZX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIGFnZW50LCB3aGljaCBpcyBzZXJpYWxpemFibGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIEpTT04gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGFnZW50J3MgbmFtZS5cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgIH07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWdlbnQubWpzLm1hcCIsImltcG9ydCB7IGFkZFRyYWNlUHJvY2Vzc29yIH0gZnJvbSBcIi4vdHJhY2luZy9pbmRleC5tanNcIjtcbmltcG9ydCB7IGRlZmF1bHRQcm9jZXNzb3IgfSBmcm9tIFwiLi90cmFjaW5nL3Byb2Nlc3Nvci5tanNcIjtcbmV4cG9ydCB7IFJ1bnRpbWVFdmVudEVtaXR0ZXIgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL19zaGltcyc7XG5leHBvcnQgeyBBZ2VudCwgfSBmcm9tIFwiLi9hZ2VudC5tanNcIjtcbmV4cG9ydCB7IEFnZW50c0Vycm9yLCBHdWFyZHJhaWxFeGVjdXRpb25FcnJvciwgSW5wdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCwgTWF4VHVybnNFeGNlZWRlZEVycm9yLCBNb2RlbEJlaGF2aW9yRXJyb3IsIE91dHB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkLCBUb29sQ2FsbEVycm9yLCBVc2VyRXJyb3IsIFN5c3RlbUVycm9yLCB9IGZyb20gXCIuL2Vycm9ycy5tanNcIjtcbmV4cG9ydCB7IFJ1bkFnZW50VXBkYXRlZFN0cmVhbUV2ZW50LCBSdW5SYXdNb2RlbFN0cmVhbUV2ZW50LCBSdW5JdGVtU3RyZWFtRXZlbnQsIH0gZnJvbSBcIi4vZXZlbnRzLm1qc1wiO1xuZXhwb3J0IHsgZGVmaW5lT3V0cHV0R3VhcmRyYWlsLCB9IGZyb20gXCIuL2d1YXJkcmFpbC5tanNcIjtcbmV4cG9ydCB7IGdldEhhbmRvZmYsIGdldFRyYW5zZmVyTWVzc2FnZSwgSGFuZG9mZiwgaGFuZG9mZiwgfSBmcm9tIFwiLi9oYW5kb2ZmLm1qc1wiO1xuZXhwb3J0IHsgYXNzaXN0YW50LCBzeXN0ZW0sIHVzZXIgfSBmcm9tIFwiLi9oZWxwZXJzL21lc3NhZ2UubWpzXCI7XG5leHBvcnQgeyBleHRyYWN0QWxsVGV4dE91dHB1dCwgUnVuSGFuZG9mZkNhbGxJdGVtLCBSdW5IYW5kb2ZmT3V0cHV0SXRlbSwgUnVuTWVzc2FnZU91dHB1dEl0ZW0sIFJ1blJlYXNvbmluZ0l0ZW0sIFJ1blRvb2xBcHByb3ZhbEl0ZW0sIFJ1blRvb2xDYWxsSXRlbSwgUnVuVG9vbENhbGxPdXRwdXRJdGVtLCB9IGZyb20gXCIuL2l0ZW1zLm1qc1wiO1xuZXhwb3J0IHsgQWdlbnRIb29rcyB9IGZyb20gXCIuL2xpZmVjeWNsZS5tanNcIjtcbmV4cG9ydCB7IGdldExvZ2dlciB9IGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbmV4cG9ydCB7IGdldEFsbE1jcFRvb2xzLCBpbnZhbGlkYXRlU2VydmVyVG9vbHNDYWNoZSwgbWNwVG9GdW5jdGlvblRvb2wsIE1DUFNlcnZlclN0ZGlvLCBNQ1BTZXJ2ZXJTdHJlYW1hYmxlSHR0cCwgTUNQU2VydmVyU1NFLCB9IGZyb20gXCIuL21jcC5tanNcIjtcbmV4cG9ydCB7IGNyZWF0ZU1DUFRvb2xTdGF0aWNGaWx0ZXIsIH0gZnJvbSBcIi4vbWNwVXRpbC5tanNcIjtcbmV4cG9ydCB7IHNldERlZmF1bHRNb2RlbFByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXJzLm1qc1wiO1xuZXhwb3J0IHsgUnVuUmVzdWx0LCBTdHJlYW1lZFJ1blJlc3VsdCB9IGZyb20gXCIuL3Jlc3VsdC5tanNcIjtcbmV4cG9ydCB7IHJ1biwgUnVubmVyLCB9IGZyb20gXCIuL3J1bi5tanNcIjtcbmV4cG9ydCB7IFJ1bkNvbnRleHQgfSBmcm9tIFwiLi9ydW5Db250ZXh0Lm1qc1wiO1xuZXhwb3J0IHsgUnVuU3RhdGUgfSBmcm9tIFwiLi9ydW5TdGF0ZS5tanNcIjtcbmV4cG9ydCB7IGNvbXB1dGVyVG9vbCwgaG9zdGVkTWNwVG9vbCwgdG9vbCwgfSBmcm9tIFwiLi90b29sLm1qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHJhY2luZy9pbmRleC5tanNcIjtcbmV4cG9ydCB7IGdldEdsb2JhbFRyYWNlUHJvdmlkZXIsIFRyYWNlUHJvdmlkZXIgfSBmcm9tIFwiLi90cmFjaW5nL3Byb3ZpZGVyLm1qc1wiO1xuZXhwb3J0IHsgVXNhZ2UgfSBmcm9tIFwiLi91c2FnZS5tanNcIjtcbmV4cG9ydCAqIGFzIHByb3RvY29sIGZyb20gXCIuL3R5cGVzL3Byb3RvY29sLm1qc1wiO1xuLyoqXG4gKiBBZGQgdGhlIGRlZmF1bHQgcHJvY2Vzc29yLCB3aGljaCBleHBvcnRzIHRyYWNlcyBhbmQgc3BhbnMgdG8gdGhlIGJhY2tlbmQgaW4gYmF0Y2hlcy4gWW91IGNhblxuICogY2hhbmdlIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGJ5IGVpdGhlcjpcbiAqIDEuIGNhbGxpbmcgYWRkVHJhY2VQcm9jZXNzb3IsIHdoaWNoIGFkZHMgYWRkaXRpb25hbCBwcm9jZXNzb3JzLCBvclxuICogMi4gY2FsbGluZyBzZXRUcmFjZVByb2Nlc3NvcnMsIHdoaWNoIHNldHMgdGhlIHByb2Nlc3NvcnMgYW5kIGRpc2NhcmRzIHRoZSBkZWZhdWx0IG9uZVxuICovXG5hZGRUcmFjZVByb2Nlc3NvcihkZWZhdWx0UHJvY2Vzc29yKCkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCIsImltcG9ydCB7IEFnZW50LCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuLyoqXG4gKiBBIHNwZWNpYWxpemVkIGFnZW50IGluc3RhbmNlIHRoYXQgaXMgbWVhbnQgdG8gYmUgdXNlZCB3aXRoaW4gYSBgUmVhbHRpbWVTZXNzaW9uYCB0byBidWlsZFxuICogdm9pY2UgYWdlbnRzLiBEdWUgdG8gdGhlIG5hdHVyZSBvZiB0aGlzIGFnZW50LCBzb21lIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBhcmUgbm90IHN1cHBvcnRlZFxuICogdGhhdCBhcmUgc3VwcG9ydGVkIGJ5IHJlZ3VsYXIgYEFnZW50YCBpbnN0YW5jZXMuIEZvciBleGFtcGxlOlxuICogLSBgbW9kZWxgIGNob2ljZSBpcyBub3Qgc3VwcG9ydGVkIGFzIGFsbCBSZWFsdGltZUFnZW50cyB3aWxsIGJlIGhhbmRsZWQgYnkgdGhlIHNhbWUgbW9kZWwgd2l0aGluXG4gKiAgIGEgYFJlYWx0aW1lU2Vzc2lvbmBcbiAqIC0gYG1vZGVsU2V0dGluZ3NgIGlzIG5vdCBzdXBwb3J0ZWQgYXMgYWxsIFJlYWx0aW1lQWdlbnRzIHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgc2FtZSBtb2RlbCB3aXRoaW5cbiAqICAgYSBgUmVhbHRpbWVTZXNzaW9uYFxuICogLSBgb3V0cHV0VHlwZWAgaXMgbm90IHN1cHBvcnRlZCBhcyBSZWFsdGltZUFnZW50cyBkbyBub3Qgc3VwcG9ydCBzdHJ1Y3R1cmVkIG91dHB1dHNcbiAqIC0gYHRvb2xVc2VCZWhhdmlvcmAgaXMgbm90IHN1cHBvcnRlZCBhcyBhbGwgUmVhbHRpbWVBZ2VudHMgd2lsbCBiZSBoYW5kbGVkIGJ5IHRoZSBzYW1lIG1vZGVsIHdpdGhpblxuICogICBhIGBSZWFsdGltZVNlc3Npb25gXG4gKiAtIGB2b2ljZWAgY2FuIGJlIGNvbmZpZ3VyZWQgb24gYW4gYEFnZW50YCBsZXZlbCBob3dldmVyIGl0IGNhbm5vdCBiZSBjaGFuZ2VkIGFmdGVyIHRoZSBmaXJzdFxuICogICAgYWdlbnQgd2l0aGluIGEgYFJlYWx0aW1lU2Vzc2lvbmAgc3Bva2VcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGNvbnN0IGFnZW50ID0gbmV3IFJlYWx0aW1lQWdlbnQoe1xuICogICBuYW1lOiAnbXktYWdlbnQnLFxuICogICBpbnN0cnVjdGlvbnM6ICdZb3UgYXJlIGEgaGVscGZ1bCBhc3Npc3RhbnQgdGhhdCBjYW4gYW5zd2VyIHF1ZXN0aW9ucyBhbmQgaGVscCB3aXRoIHRhc2tzLicsXG4gKiB9KVxuICpcbiAqIGNvbnN0IHNlc3Npb24gPSBuZXcgUmVhbHRpbWVTZXNzaW9uKGFnZW50KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgUmVhbHRpbWVBZ2VudCBleHRlbmRzIEFnZW50IHtcbiAgICAvKipcbiAgICAgKiBUaGUgdm9pY2UgaW50ZW5kZWQgdG8gYmUgdXNlZCBieSB0aGUgYWdlbnQuIElmIGFub3RoZXIgYWdlbnQgYWxyZWFkeSBzcG9rZSBkdXJpbmcgdGhlXG4gICAgICogUmVhbHRpbWVTZXNzaW9uLCBjaGFuZ2luZyB0aGUgdm9pY2UgZHVyaW5nIGEgaGFuZG9mZiB3aWxsIGZhaWwuXG4gICAgICovXG4gICAgdm9pY2U7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgICAgIHRoaXMudm9pY2UgPSBjb25maWcudm9pY2UgPz8gJ2FzaCc7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhbHRpbWVBZ2VudC5tanMubWFwIiwiaW1wb3J0IHsgZGVmaW5lT3V0cHV0R3VhcmRyYWlsLCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJlYWx0aW1lR3VhcmRyYWlsU2V0dGluZ3Moc2V0dGluZ3MpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWJvdW5jZVRleHRMZW5ndGg6IHNldHRpbmdzLmRlYm91bmNlVGV4dExlbmd0aCA/PyAxMDAsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVSZWFsdGltZU91dHB1dEd1YXJkcmFpbCh7IHBvbGljeUhpbnQ6IHBvbGljeUhpbnRJbnB1dCwgLi4ub3B0aW9ucyB9KSB7XG4gICAgY29uc3QgYmFzZUd1YXJkcmFpbCA9IGRlZmluZU91dHB1dEd1YXJkcmFpbChvcHRpb25zKTtcbiAgICBjb25zdCBwb2xpY3lIaW50ID0gcG9saWN5SGludElucHV0ID8/IGJhc2VHdWFyZHJhaWwubmFtZTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5iYXNlR3VhcmRyYWlsLFxuICAgICAgICBwb2xpY3lIaW50LFxuICAgICAgICBydW46IGFzeW5jIChhcmdzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBiYXNlR3VhcmRyYWlsLnJ1bihhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgICAgIGd1YXJkcmFpbDogeyAuLi5yZXN1bHQuZ3VhcmRyYWlsLCBwb2xpY3lIaW50IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIG1lc3NhZ2UgdGhhdCBpbmZvcm1zIHRoZSBtb2RlbCBhYm91dCB3aHkgdGhlIGd1YXJkcmFpbCB3YXMgdHJpZ2dlcmVkIGFuZCB0b1xuICogY29ycmVjdCB0aGUgYmVoYXZpb3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWFsdGltZUd1YXJkcmFpbEZlZWRiYWNrTWVzc2FnZShyZXN1bHQpIHtcbiAgICByZXR1cm4gYFxu4pqg77iPIFlvdXIgbGFzdCBhbnN3ZXIgd2FzIGJsb2NrZWQuIFxuRmFpbGVkIEd1YXJkcmFpbCBSZWFzb246ICR7cmVzdWx0Lmd1YXJkcmFpbC5wb2xpY3lIaW50fS4gXG5GYWlsdXJlIERldGFpbHM6ICR7SlNPTi5zdHJpbmdpZnkocmVzdWx0Lm91dHB1dC5vdXRwdXRJbmZvID8/IHt9KX0uIFxuUGxlYXNlIHJlc3BvbmQgYWdhaW4gZm9sbG93aW5nIHBvbGljeS4gQXBvbG9naXplIGZvciBub3QgYmVpbmcgYWJsZSB0byBhbnN3ZXIgdGhlIHF1ZXN0aW9uICh3aGlsZSBhdm9pZGluZyB0aGUgc3BlY2lmaWMgcmVhc29uKSBhbmQgZGl2ZXJ0IGRpc2N1c3Npb24gYmFjayB0byBhbiBhcHByb3ZlZCB0b3BpYyBpbW1lZGlhdGVseSBhbmQgbm90IGludml0ZSBtb3JlIGRpc2N1c3Npb24uXG5gLnRyaW0oKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWd1YXJkcmFpbC5tanMubWFwIiwiaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZSc7XG5jb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoJ29wZW5haS1hZ2VudHM6cmVhbHRpbWUnKTtcbmV4cG9ydCBkZWZhdWx0IGxvZ2dlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dlci5tanMubWFwIiwiaW1wb3J0IHsgeiB9IGZyb20gJ0BvcGVuYWkvem9kL3YzJztcbmV4cG9ydCBjb25zdCBiYXNlSXRlbVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBpdGVtSWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCByZWFsdGltZU1lc3NhZ2VJdGVtU2NoZW1hID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3JvbGUnLCBbXG4gICAgei5vYmplY3Qoe1xuICAgICAgICBpdGVtSWQ6IHouc3RyaW5nKCksXG4gICAgICAgIHByZXZpb3VzSXRlbUlkOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdtZXNzYWdlJyksXG4gICAgICAgIHJvbGU6IHoubGl0ZXJhbCgnc3lzdGVtJyksXG4gICAgICAgIGNvbnRlbnQ6IHouYXJyYXkoei5vYmplY3QoeyB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0X3RleHQnKSwgdGV4dDogei5zdHJpbmcoKSB9KSksXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICBpdGVtSWQ6IHouc3RyaW5nKCksXG4gICAgICAgIHByZXZpb3VzSXRlbUlkOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdtZXNzYWdlJyksXG4gICAgICAgIHJvbGU6IHoubGl0ZXJhbCgndXNlcicpLFxuICAgICAgICBzdGF0dXM6IHouZW51bShbJ2luX3Byb2dyZXNzJywgJ2NvbXBsZXRlZCddKSxcbiAgICAgICAgY29udGVudDogei5hcnJheSh6Lm9iamVjdCh7IHR5cGU6IHoubGl0ZXJhbCgnaW5wdXRfdGV4dCcpLCB0ZXh0OiB6LnN0cmluZygpIH0pLm9yKHoub2JqZWN0KHtcbiAgICAgICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnaW5wdXRfYXVkaW8nKSxcbiAgICAgICAgICAgIGF1ZGlvOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICAgICAgICAgIHRyYW5zY3JpcHQ6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgICAgICAgfSkpKSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIGl0ZW1JZDogei5zdHJpbmcoKSxcbiAgICAgICAgcHJldmlvdXNJdGVtSWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ21lc3NhZ2UnKSxcbiAgICAgICAgcm9sZTogei5saXRlcmFsKCdhc3Npc3RhbnQnKSxcbiAgICAgICAgc3RhdHVzOiB6LmVudW0oWydpbl9wcm9ncmVzcycsICdjb21wbGV0ZWQnLCAnaW5jb21wbGV0ZSddKSxcbiAgICAgICAgY29udGVudDogei5hcnJheSh6Lm9iamVjdCh7IHR5cGU6IHoubGl0ZXJhbCgndGV4dCcpLCB0ZXh0OiB6LnN0cmluZygpIH0pLm9yKHoub2JqZWN0KHtcbiAgICAgICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnYXVkaW8nKSxcbiAgICAgICAgICAgIGF1ZGlvOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICAgICAgICAgIHRyYW5zY3JpcHQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgICAgICB9KSkpLFxuICAgIH0pLFxuXSk7XG5leHBvcnQgY29uc3QgcmVhbHRpbWVUb29sQ2FsbEl0ZW0gPSB6Lm9iamVjdCh7XG4gICAgaXRlbUlkOiB6LnN0cmluZygpLFxuICAgIHByZXZpb3VzSXRlbUlkOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2Z1bmN0aW9uX2NhbGwnKSxcbiAgICBzdGF0dXM6IHouZW51bShbJ2luX3Byb2dyZXNzJywgJ2NvbXBsZXRlZCddKSxcbiAgICBhcmd1bWVudHM6IHouc3RyaW5nKCksXG4gICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICBvdXRwdXQ6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlbXMubWpzLm1hcCIsImltcG9ydCB7IHogfSBmcm9tICdAb3BlbmFpL3pvZC92Myc7XG4vLyBFdmVudCBzY2hlbWFzIG1pcnJvcmluZyB0aGUgc3RydWN0dXJlcyBkZWZpbmVkIGluIHRoZSBPcGVuQUkgU0RLIHR5cGluZ3MuXG4vLyBNb3N0IGZpZWxkcyBmcm9tIHRoZSBpbnRlcmZhY2VzIGluIGByZWFsdGltZS5kLnRzYCBhcmUgY2FwdHVyZWQgaGVyZSB0b1xuLy8gcHJvdmlkZSBiZXR0ZXIgcnVudGltZSB2YWxpZGF0aW9uIHdoZW4gcGFyc2luZyBldmVudHMgZnJvbSB0aGUgc2VydmVyLlxuZXhwb3J0IGNvbnN0IHJlYWx0aW1lUmVzcG9uc2UgPSB6Lm9iamVjdCh7XG4gICAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgIGNvbnZlcnNhdGlvbl9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLm51bGxhYmxlKCksXG4gICAgbWF4X291dHB1dF90b2tlbnM6IHoubnVtYmVyKCkub3Ioei5saXRlcmFsKCdpbmYnKSkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgIG1ldGFkYXRhOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFueSgpKS5vcHRpb25hbCgpLm51bGxhYmxlKCksXG4gICAgbW9kYWxpdGllczogei5hcnJheSh6LnN0cmluZygpKS5vcHRpb25hbCgpLm51bGxhYmxlKCksXG4gICAgb2JqZWN0OiB6LmxpdGVyYWwoJ3JlYWx0aW1lLnJlc3BvbnNlJykub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgIG91dHB1dDogei5hcnJheSh6LmFueSgpKS5vcHRpb25hbCgpLm51bGxhYmxlKCksXG4gICAgb3V0cHV0X2F1ZGlvX2Zvcm1hdDogei5zdHJpbmcoKS5vcHRpb25hbCgpLm51bGxhYmxlKCksXG4gICAgc3RhdHVzOiB6XG4gICAgICAgIC5lbnVtKFsnY29tcGxldGVkJywgJ2luY29tcGxldGUnLCAnZmFpbGVkJywgJ2NhbmNlbGxlZCcsICdpbl9wcm9ncmVzcyddKVxuICAgICAgICAub3B0aW9uYWwoKVxuICAgICAgICAubnVsbGFibGUoKSxcbiAgICBzdGF0dXNfZGV0YWlsczogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgIHVzYWdlOiB6XG4gICAgICAgIC5vYmplY3Qoe1xuICAgICAgICBpbnB1dF90b2tlbnM6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICAgICAgaW5wdXRfdG9rZW5zX2RldGFpbHM6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLm9wdGlvbmFsKCkubnVsbGFibGUoKSxcbiAgICAgICAgb3V0cHV0X3Rva2Vuczogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgICAgICBvdXRwdXRfdG9rZW5zX2RldGFpbHM6IHpcbiAgICAgICAgICAgIC5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSlcbiAgICAgICAgICAgIC5vcHRpb25hbCgpXG4gICAgICAgICAgICAubnVsbGFibGUoKSxcbiAgICB9KVxuICAgICAgICAub3B0aW9uYWwoKVxuICAgICAgICAubnVsbGFibGUoKSxcbiAgICB2b2ljZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLm51bGxhYmxlKCksXG59KTtcbi8vIEJhc2ljIGNvbnRlbnQgc2NoZW1hIHVzZWQgYnkgQ29udmVyc2F0aW9uSXRlbS5cbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtQ29udGVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBpZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGF1ZGlvOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICB0ZXh0OiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICB0cmFuc2NyaXB0OiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICB0eXBlOiB6LnVuaW9uKFtcbiAgICAgICAgei5saXRlcmFsKCdpbnB1dF90ZXh0JyksXG4gICAgICAgIHoubGl0ZXJhbCgnaW5wdXRfYXVkaW8nKSxcbiAgICAgICAgei5saXRlcmFsKCdpdGVtX3JlZmVyZW5jZScpLFxuICAgICAgICB6LmxpdGVyYWwoJ3RleHQnKSxcbiAgICAgICAgei5saXRlcmFsKCdhdWRpbycpLFxuICAgIF0pLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBpZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGFyZ3VtZW50czogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGNhbGxfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBjb250ZW50OiB6LmFycmF5KGNvbnZlcnNhdGlvbkl0ZW1Db250ZW50U2NoZW1hKS5vcHRpb25hbCgpLFxuICAgIG5hbWU6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBvYmplY3Q6IHoubGl0ZXJhbCgncmVhbHRpbWUuaXRlbScpLm9wdGlvbmFsKCksXG4gICAgb3V0cHV0OiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgcm9sZTogei5lbnVtKFsndXNlcicsICdhc3Npc3RhbnQnLCAnc3lzdGVtJ10pLm9wdGlvbmFsKCksXG4gICAgc3RhdHVzOiB6LmVudW0oWydjb21wbGV0ZWQnLCAnaW5jb21wbGV0ZScsICdpbl9wcm9ncmVzcyddKS5vcHRpb25hbCgpLFxuICAgIHR5cGU6IHouZW51bShbJ21lc3NhZ2UnLCAnZnVuY3Rpb25fY2FsbCcsICdmdW5jdGlvbl9jYWxsX291dHB1dCddKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uQ3JlYXRlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLmNyZWF0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBjb252ZXJzYXRpb246IHoub2JqZWN0KHtcbiAgICAgICAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgb2JqZWN0OiB6LmxpdGVyYWwoJ3JlYWx0aW1lLmNvbnZlcnNhdGlvbicpLm9wdGlvbmFsKCksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtQ3JlYXRlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0uY3JlYXRlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW06IGNvbnZlcnNhdGlvbkl0ZW1TY2hlbWEsXG4gICAgcHJldmlvdXNfaXRlbV9pZDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtRGVsZXRlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0uZGVsZXRlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25Db21wbGV0ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbnZlcnNhdGlvbi5pdGVtLmlucHV0X2F1ZGlvX3RyYW5zY3JpcHRpb24uY29tcGxldGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHRyYW5zY3JpcHQ6IHouc3RyaW5nKCksXG4gICAgbG9ncHJvYnM6IHouYXJyYXkoei5hbnkoKSkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uRGVsdGFFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbnZlcnNhdGlvbi5pdGVtLmlucHV0X2F1ZGlvX3RyYW5zY3JpcHRpb24uZGVsdGEnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICBkZWx0YTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGxvZ3Byb2JzOiB6LmFycmF5KHouYW55KCkpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkZhaWxlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0uaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbi5mYWlsZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgZXJyb3I6IHoub2JqZWN0KHtcbiAgICAgICAgY29kZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICBtZXNzYWdlOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIHBhcmFtOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbnZlcnNhdGlvbi5pdGVtLnJldHJpZXZlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW06IGNvbnZlcnNhdGlvbkl0ZW1TY2hlbWEsXG59KTtcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtVHJ1bmNhdGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdjb252ZXJzYXRpb24uaXRlbS50cnVuY2F0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGF1ZGlvX2VuZF9tczogei5udW1iZXIoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbUNyZWF0ZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0uY3JlYXRlJyksXG4gICAgaXRlbTogY29udmVyc2F0aW9uSXRlbVNjaGVtYSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHByZXZpb3VzX2l0ZW1faWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbURlbGV0ZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0uZGVsZXRlJyksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbVJldHJpZXZlRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdjb252ZXJzYXRpb24uaXRlbS5yZXRyaWV2ZScpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkl0ZW1UcnVuY2F0ZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0udHJ1bmNhdGUnKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGF1ZGlvX2VuZF9tczogei5udW1iZXIoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBlcnJvckV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnZXJyb3InKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGVycm9yOiB6LmFueSgpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBpbnB1dEF1ZGlvQnVmZmVyQ2xlYXJlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnaW5wdXRfYXVkaW9fYnVmZmVyLmNsZWFyZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGlucHV0QXVkaW9CdWZmZXJBcHBlbmRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0X2F1ZGlvX2J1ZmZlci5hcHBlbmQnKSxcbiAgICBhdWRpbzogei5zdHJpbmcoKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgaW5wdXRBdWRpb0J1ZmZlckNsZWFyRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF9hdWRpb19idWZmZXIuY2xlYXInKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgaW5wdXRBdWRpb0J1ZmZlckNvbW1pdEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnaW5wdXRfYXVkaW9fYnVmZmVyLmNvbW1pdCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBpbnB1dEF1ZGlvQnVmZmVyQ29tbWl0dGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF9hdWRpb19idWZmZXIuY29tbWl0dGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBwcmV2aW91c19pdGVtX2lkOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGlucHV0QXVkaW9CdWZmZXJTcGVlY2hTdGFydGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF9hdWRpb19idWZmZXIuc3BlZWNoX3N0YXJ0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGF1ZGlvX3N0YXJ0X21zOiB6Lm51bWJlcigpLFxufSk7XG5leHBvcnQgY29uc3QgaW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0b3BwZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0X2F1ZGlvX2J1ZmZlci5zcGVlY2hfc3RvcHBlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgYXVkaW9fZW5kX21zOiB6Lm51bWJlcigpLFxufSk7XG5leHBvcnQgY29uc3Qgb3V0cHV0QXVkaW9CdWZmZXJTdGFydGVkRXZlbnRTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdvdXRwdXRfYXVkaW9fYnVmZmVyLnN0YXJ0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbn0pXG4gICAgLnBhc3N0aHJvdWdoKCk7XG5leHBvcnQgY29uc3Qgb3V0cHV0QXVkaW9CdWZmZXJTdG9wcGVkRXZlbnRTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdvdXRwdXRfYXVkaW9fYnVmZmVyLnN0b3BwZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbn0pXG4gICAgLnBhc3N0aHJvdWdoKCk7XG5leHBvcnQgY29uc3Qgb3V0cHV0QXVkaW9CdWZmZXJDbGVhcmVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdvdXRwdXRfYXVkaW9fYnVmZmVyLmNsZWFyZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJhdGVMaW1pdHNVcGRhdGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyYXRlX2xpbWl0cy51cGRhdGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgcmF0ZV9saW1pdHM6IHouYXJyYXkoei5vYmplY3Qoe1xuICAgICAgICBsaW1pdDogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgICAgICBuYW1lOiB6LmVudW0oWydyZXF1ZXN0cycsICd0b2tlbnMnXSkub3B0aW9uYWwoKSxcbiAgICAgICAgcmVtYWluaW5nOiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gICAgICAgIHJlc2V0X3NlY29uZHM6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICB9KSksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZUF1ZGlvRGVsdGFFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLmF1ZGlvLmRlbHRhJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIGRlbHRhOiB6LnN0cmluZygpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlQXVkaW9Eb25lRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5hdWRpby5kb25lJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlQXVkaW9UcmFuc2NyaXB0RGVsdGFFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLmF1ZGlvX3RyYW5zY3JpcHQuZGVsdGEnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgZGVsdGE6IHouc3RyaW5nKCksXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VBdWRpb1RyYW5zY3JpcHREb25lRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5hdWRpb190cmFuc2NyaXB0LmRvbmUnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgdHJhbnNjcmlwdDogei5zdHJpbmcoKSxcbiAgICBvdXRwdXRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgcmVzcG9uc2VfaWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZUNvbnRlbnRQYXJ0QWRkZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLmNvbnRlbnRfcGFydC5hZGRlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgY29udGVudF9pbmRleDogei5udW1iZXIoKSxcbiAgICBvdXRwdXRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgcmVzcG9uc2VfaWQ6IHouc3RyaW5nKCksXG4gICAgcGFydDogei5vYmplY3Qoe1xuICAgICAgICBhdWRpbzogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICB0ZXh0OiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIHRyYW5zY3JpcHQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgdHlwZTogei5lbnVtKFsndGV4dCcsICdhdWRpbyddKS5vcHRpb25hbCgpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VDb250ZW50UGFydERvbmVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLmNvbnRlbnRfcGFydC5kb25lJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbiAgICBwYXJ0OiB6Lm9iamVjdCh7XG4gICAgICAgIGF1ZGlvOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIHRleHQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgdHJhbnNjcmlwdDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICB0eXBlOiB6LmVudW0oWyd0ZXh0JywgJ2F1ZGlvJ10pLm9wdGlvbmFsKCksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZUNyZWF0ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLmNyZWF0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICByZXNwb25zZTogcmVhbHRpbWVSZXNwb25zZSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlRG9uZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2UuZG9uZScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIHJlc3BvbnNlOiByZWFsdGltZVJlc3BvbnNlLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VGdW5jdGlvbkNhbGxBcmd1bWVudHNEZWx0YUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2UuZnVuY3Rpb25fY2FsbF9hcmd1bWVudHMuZGVsdGEnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNhbGxfaWQ6IHouc3RyaW5nKCksXG4gICAgZGVsdGE6IHouc3RyaW5nKCksXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VGdW5jdGlvbkNhbGxBcmd1bWVudHNEb25lRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5mdW5jdGlvbl9jYWxsX2FyZ3VtZW50cy5kb25lJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBjYWxsX2lkOiB6LnN0cmluZygpLFxuICAgIGFyZ3VtZW50czogei5zdHJpbmcoKSxcbiAgICBvdXRwdXRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgcmVzcG9uc2VfaWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZU91dHB1dEl0ZW1BZGRlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2Uub3V0cHV0X2l0ZW0uYWRkZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtOiBjb252ZXJzYXRpb25JdGVtU2NoZW1hLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlT3V0cHV0SXRlbURvbmVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLm91dHB1dF9pdGVtLmRvbmUnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtOiBjb252ZXJzYXRpb25JdGVtU2NoZW1hLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlVGV4dERlbHRhRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS50ZXh0LmRlbHRhJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIGRlbHRhOiB6LnN0cmluZygpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlVGV4dERvbmVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLnRleHQuZG9uZScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgY29udGVudF9pbmRleDogei5udW1iZXIoKSxcbiAgICB0ZXh0OiB6LnN0cmluZygpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHNlc3Npb25DcmVhdGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdzZXNzaW9uLmNyZWF0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBzZXNzaW9uOiB6LmFueSgpLFxufSk7XG5leHBvcnQgY29uc3Qgc2Vzc2lvblVwZGF0ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Nlc3Npb24udXBkYXRlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIHNlc3Npb246IHouYW55KCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZUNhbmNlbEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2UuY2FuY2VsJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VDcmVhdGVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLmNyZWF0ZScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgcmVzcG9uc2U6IHouYW55KCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHNlc3Npb25VcGRhdGVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Nlc3Npb24udXBkYXRlJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBzZXNzaW9uOiB6LmFueSgpLFxufSk7XG5leHBvcnQgY29uc3QgdHJhbnNjcmlwdGlvblNlc3Npb25VcGRhdGVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3RyYW5zY3JpcHRpb25fc2Vzc2lvbi51cGRhdGUnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHNlc3Npb246IHouYW55KCksXG59KTtcbmV4cG9ydCBjb25zdCB0cmFuc2NyaXB0aW9uU2Vzc2lvblVwZGF0ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3RyYW5zY3JpcHRpb25fc2Vzc2lvbi51cGRhdGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgc2Vzc2lvbjogei5hbnkoKSxcbn0pO1xuLyoqXG4gKiBUaGlzIHNjaGVtYSBpcyB1c2VkIGlmIGFuIGV2ZW50IGlzIHVua25vd24gdG8gdGhlIGNsaWVudC4gVGhlIFJlYWx0aW1lIEFQSSBtaWdodCBpbnRyb2R1Y2VcbiAqIG5ldyBldmVudHMgYXQgc29tZSBwb2ludCBhbmQgd2Ugc2hvdWxkIGhhbmRsZSB0aGVtIGdyYWNlZnVsbHkgYnkgdHJlYXRpbmcgdGhlbSBhcyBnZW5lcmljIGV2ZW50c1xuICogb25seSByZXF1aXJpbmcgYSB0eXBlIGFuZCBhbiBvcHRpb25hbCBldmVudF9pZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGdlbmVyaWNFdmVudFNjaGVtYSA9IHpcbiAgICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCkubnVsbGFibGUoKSxcbn0pXG4gICAgLnBhc3N0aHJvdWdoKCk7XG5leHBvcnQgY29uc3QgcmVhbHRpbWVTZXJ2ZXJFdmVudFNjaGVtYSA9IHouZGlzY3JpbWluYXRlZFVuaW9uKCd0eXBlJywgW1xuICAgIGNvbnZlcnNhdGlvbkNyZWF0ZWRFdmVudFNjaGVtYSxcbiAgICBjb252ZXJzYXRpb25JdGVtQ3JlYXRlZEV2ZW50U2NoZW1hLFxuICAgIGNvbnZlcnNhdGlvbkl0ZW1EZWxldGVkRXZlbnRTY2hlbWEsXG4gICAgY29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uQ29tcGxldGVkRXZlbnRTY2hlbWEsXG4gICAgY29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uRGVsdGFFdmVudFNjaGVtYSxcbiAgICBjb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25GYWlsZWRFdmVudFNjaGVtYSxcbiAgICBjb252ZXJzYXRpb25JdGVtUmV0cmlldmVkRXZlbnRTY2hlbWEsXG4gICAgY29udmVyc2F0aW9uSXRlbVRydW5jYXRlZEV2ZW50U2NoZW1hLFxuICAgIGVycm9yRXZlbnRTY2hlbWEsXG4gICAgaW5wdXRBdWRpb0J1ZmZlckNsZWFyZWRFdmVudFNjaGVtYSxcbiAgICBpbnB1dEF1ZGlvQnVmZmVyQ29tbWl0dGVkRXZlbnRTY2hlbWEsXG4gICAgaW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0YXJ0ZWRFdmVudFNjaGVtYSxcbiAgICBpbnB1dEF1ZGlvQnVmZmVyU3BlZWNoU3RvcHBlZEV2ZW50U2NoZW1hLFxuICAgIG91dHB1dEF1ZGlvQnVmZmVyU3RhcnRlZEV2ZW50U2NoZW1hLFxuICAgIG91dHB1dEF1ZGlvQnVmZmVyU3RvcHBlZEV2ZW50U2NoZW1hLFxuICAgIG91dHB1dEF1ZGlvQnVmZmVyQ2xlYXJlZEV2ZW50U2NoZW1hLFxuICAgIHJhdGVMaW1pdHNVcGRhdGVkRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VBdWRpb0RlbHRhRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VBdWRpb0RvbmVFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERlbHRhRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VBdWRpb1RyYW5zY3JpcHREb25lRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VDb250ZW50UGFydEFkZGVkRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VDb250ZW50UGFydERvbmVFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUNyZWF0ZWRFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZURvbmVFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RlbHRhRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VGdW5jdGlvbkNhbGxBcmd1bWVudHNEb25lRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VPdXRwdXRJdGVtQWRkZWRFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZU91dHB1dEl0ZW1Eb25lRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VUZXh0RGVsdGFFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZVRleHREb25lRXZlbnRTY2hlbWEsXG4gICAgc2Vzc2lvbkNyZWF0ZWRFdmVudFNjaGVtYSxcbiAgICBzZXNzaW9uVXBkYXRlZEV2ZW50U2NoZW1hLFxuICAgIHRyYW5zY3JpcHRpb25TZXNzaW9uVXBkYXRlZEV2ZW50U2NoZW1hLFxuXSk7XG5leHBvcnQgY29uc3QgcmVhbHRpbWVDbGllbnRFdmVudFNjaGVtYSA9IHouZGlzY3JpbWluYXRlZFVuaW9uKCd0eXBlJywgW1xuICAgIGNvbnZlcnNhdGlvbkl0ZW1DcmVhdGVFdmVudFNjaGVtYSxcbiAgICBjb252ZXJzYXRpb25JdGVtRGVsZXRlRXZlbnRTY2hlbWEsXG4gICAgY29udmVyc2F0aW9uSXRlbVJldHJpZXZlRXZlbnRTY2hlbWEsXG4gICAgY29udmVyc2F0aW9uSXRlbVRydW5jYXRlRXZlbnRTY2hlbWEsXG4gICAgaW5wdXRBdWRpb0J1ZmZlckFwcGVuZEV2ZW50U2NoZW1hLFxuICAgIGlucHV0QXVkaW9CdWZmZXJDbGVhckV2ZW50U2NoZW1hLFxuICAgIGlucHV0QXVkaW9CdWZmZXJDb21taXRFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUNhbmNlbEV2ZW50U2NoZW1hLFxuICAgIHJlc3BvbnNlQ3JlYXRlRXZlbnRTY2hlbWEsXG4gICAgc2Vzc2lvblVwZGF0ZUV2ZW50U2NoZW1hLFxuICAgIHRyYW5zY3JpcHRpb25TZXNzaW9uVXBkYXRlRXZlbnRTY2hlbWEsXG5dKTtcbi8qKlxuICogUGFyc2VzIGEgcmVhbHRpbWUgZXZlbnQgZnJvbSB0aGUgc2VydmVyLiBJZiB0aGUgZXZlbnQgaXMgdW5rbm93biB0byB0aGUgY2xpZW50LCBpdCB3aWxsIGJlIHRyZWF0ZWQgYXMgYSBnZW5lcmljIGV2ZW50LlxuICogQHBhcmFtIGV2ZW50IC0gVGhlIGV2ZW50IHRvIHBhcnNlLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBldmVudCBvciBudWxsIGlmIHRoZSBldmVudCBpcyB1bmtub3duIHRvIHRoZSBjbGllbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJlYWx0aW1lRXZlbnQoZXZlbnQpIHtcbiAgICBjb25zdCByYXcgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEudG9TdHJpbmcoKSk7XG4gICAgY29uc3QgcGFyc2VkID0gcmVhbHRpbWVTZXJ2ZXJFdmVudFNjaGVtYS5zYWZlUGFyc2UocmF3KTtcbiAgICBpZiAoIXBhcnNlZC5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnN0IGdlbmVyaWNQYXJzZWQgPSBnZW5lcmljRXZlbnRTY2hlbWEuc2FmZVBhcnNlKHJhdyk7XG4gICAgICAgIGlmIChnZW5lcmljUGFyc2VkLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IGdlbmVyaWNQYXJzZWQuZGF0YSwgaXNHZW5lcmljOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgaXNHZW5lcmljOiB0cnVlIH07XG4gICAgfVxuICAgIHJldHVybiB7IGRhdGE6IHBhcnNlZC5kYXRhLCBpc0dlbmVyaWM6IGZhbHNlIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVuYWlSZWFsdGltZUV2ZW50cy5tanMubWFwIiwiaW1wb3J0IHsgUnVudGltZUV2ZW50RW1pdHRlciwgVXNhZ2UgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlJztcbmltcG9ydCB7IHJlYWx0aW1lTWVzc2FnZUl0ZW1TY2hlbWEsIHJlYWx0aW1lVG9vbENhbGxJdGVtLCB9IGZyb20gXCIuL2l0ZW1zLm1qc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVJlYWx0aW1lRXZlbnQsIHJlc3BvbnNlRG9uZUV2ZW50U2NoZW1hLCB9IGZyb20gXCIuL29wZW5haVJlYWx0aW1lRXZlbnRzLm1qc1wiO1xuaW1wb3J0IHsgYXJyYXlCdWZmZXJUb0Jhc2U2NCwgZGlmZlJlYWx0aW1lSGlzdG9yeSB9IGZyb20gXCIuL3V0aWxzLm1qc1wiO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyRGVsZWdhdGUgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL3V0aWxzJztcbi8qKlxuICogVGhlIGRlZmF1bHQgbW9kZWwgdGhhdCBpcyB1c2VkIGR1cmluZyB0aGUgY29ubmVjdGlvbiBpZiBubyBtb2RlbCBpcyBwcm92aWRlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX01PREVMID0gJ2dwdC00by1yZWFsdGltZS1wcmV2aWV3Jztcbi8qKlxuICogVGhlIGRlZmF1bHQgc2Vzc2lvbiBjb25maWcgdGhhdCBnZXRzIHNlbmQgb3ZlciBkdXJpbmcgc2Vzc2lvbiBjb25uZWN0aW9uIHVubGVzcyBvdmVycmlkZGVuXG4gKiBieSB0aGUgdXNlci5cbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHID0ge1xuICAgIHZvaWNlOiAnYXNoJyxcbiAgICBtb2RhbGl0aWVzOiBbJ3RleHQnLCAnYXVkaW8nXSxcbiAgICBpbnB1dEF1ZGlvRm9ybWF0OiAncGNtMTYnLFxuICAgIG91dHB1dEF1ZGlvRm9ybWF0OiAncGNtMTYnLFxuICAgIGlucHV0QXVkaW9UcmFuc2NyaXB0aW9uOiB7XG4gICAgICAgIG1vZGVsOiAnZ3B0LTRvLW1pbmktdHJhbnNjcmliZScsXG4gICAgfSxcbiAgICB0dXJuRGV0ZWN0aW9uOiB7XG4gICAgICAgIHR5cGU6ICdzZW1hbnRpY192YWQnLFxuICAgIH0sXG4gICAgaW5wdXRBdWRpb05vaXNlUmVkdWN0aW9uOiBudWxsLFxuICAgIHNwZWVkOiAxLFxufTtcbmV4cG9ydCBjbGFzcyBPcGVuQUlSZWFsdGltZUJhc2UgZXh0ZW5kcyBFdmVudEVtaXR0ZXJEZWxlZ2F0ZSB7XG4gICAgI21vZGVsO1xuICAgICNhcGlLZXk7XG4gICAgI3RyYWNpbmdDb25maWcgPSBudWxsO1xuICAgICNyYXdTZXNzaW9uQ29uZmlnID0gbnVsbDtcbiAgICBldmVudEVtaXR0ZXIgPSBuZXcgUnVudGltZUV2ZW50RW1pdHRlcigpO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLiNtb2RlbCA9IG9wdGlvbnMubW9kZWwgPz8gREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfTU9ERUw7XG4gICAgICAgIHRoaXMuI2FwaUtleSA9IG9wdGlvbnMuYXBpS2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBtb2RlbCB0aGF0IGlzIGJlaW5nIHVzZWQgYnkgdGhlIHRyYW5zcG9ydCBsYXllci5cbiAgICAgKi9cbiAgICBnZXQgY3VycmVudE1vZGVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jbW9kZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IG1vZGVsIHRoYXQgaXMgYmVpbmcgdXNlZCBieSB0aGUgdHJhbnNwb3J0IGxheWVyLlxuICAgICAqICoqTm90ZSoqOiBUaGUgbW9kZWwgY2Fubm90IGJlIGNoYW5nZWQgbWlkIGNvbnZlcnNhdGlvbi5cbiAgICAgKi9cbiAgICBzZXQgY3VycmVudE1vZGVsKG1vZGVsKSB7XG4gICAgICAgIHRoaXMuI21vZGVsID0gbW9kZWw7XG4gICAgfVxuICAgIGdldCBfcmF3U2Vzc2lvbkNvbmZpZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3Jhd1Nlc3Npb25Db25maWcgPz8gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgX2dldEFwaUtleShvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFwaUtleSA9IG9wdGlvbnMuYXBpS2V5ID8/IHRoaXMuI2FwaUtleTtcbiAgICAgICAgaWYgKHR5cGVvZiBhcGlLZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBhcGlLZXkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBpS2V5O1xuICAgIH1cbiAgICBfb25NZXNzYWdlKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YTogcGFyc2VkLCBpc0dlbmVyaWMgfSA9IHBhcnNlUmVhbHRpbWVFdmVudChldmVudCk7XG4gICAgICAgIGlmIChwYXJzZWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoJyonLCBwYXJzZWQpO1xuICAgICAgICBpZiAoaXNHZW5lcmljKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgeyB0eXBlOiAnZXJyb3InLCBlcnJvcjogcGFyc2VkIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbWl0KHBhcnNlZC50eXBlLCBwYXJzZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLmNyZWF0ZWQnKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3R1cm5fc3RhcnRlZCcsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmVzcG9uc2Vfc3RhcnRlZCcsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnBhcnNlZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAnc2Vzc2lvbi51cGRhdGVkJykge1xuICAgICAgICAgICAgdGhpcy4jcmF3U2Vzc2lvbkNvbmZpZyA9IHBhcnNlZC5zZXNzaW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLmRvbmUnKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHJlc3BvbnNlRG9uZUV2ZW50U2NoZW1hLnNhZmVQYXJzZShwYXJzZWQpO1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciBwYXJzaW5nIHJlc3BvbnNlIGRvbmUgZXZlbnQnLCByZXNwb25zZS5lcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaW5wdXRUb2tlbnMgPSByZXNwb25zZS5kYXRhLnJlc3BvbnNlLnVzYWdlPy5pbnB1dF90b2tlbnMgPz8gMDtcbiAgICAgICAgICAgIGNvbnN0IG91dHB1dFRva2VucyA9IHJlc3BvbnNlLmRhdGEucmVzcG9uc2UudXNhZ2U/Lm91dHB1dF90b2tlbnMgPz8gMDtcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsVG9rZW5zID0gaW5wdXRUb2tlbnMgKyBvdXRwdXRUb2tlbnM7XG4gICAgICAgICAgICBjb25zdCB1c2FnZSA9IG5ldyBVc2FnZSh7XG4gICAgICAgICAgICAgICAgaW5wdXRUb2tlbnMsXG4gICAgICAgICAgICAgICAgaW5wdXRUb2tlbnNEZXRhaWxzOiByZXNwb25zZS5kYXRhLnJlc3BvbnNlLnVzYWdlPy5pbnB1dF90b2tlbnNfZGV0YWlscyA/PyB7fSxcbiAgICAgICAgICAgICAgICBvdXRwdXRUb2tlbnMsXG4gICAgICAgICAgICAgICAgb3V0cHV0VG9rZW5zRGV0YWlsczogcmVzcG9uc2UuZGF0YS5yZXNwb25zZS51c2FnZT8ub3V0cHV0X3Rva2Vuc19kZXRhaWxzID8/IHt9LFxuICAgICAgICAgICAgICAgIHRvdGFsVG9rZW5zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3VzYWdlX3VwZGF0ZScsIHVzYWdlKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgndHVybl9kb25lJywge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdyZXNwb25zZV9kb25lJyxcbiAgICAgICAgICAgICAgICByZXNwb25zZToge1xuICAgICAgICAgICAgICAgICAgICBpZDogcmVzcG9uc2UuZGF0YS5yZXNwb25zZS5pZCA/PyAnJyxcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiByZXNwb25zZS5kYXRhLnJlc3BvbnNlLm91dHB1dCA/PyBbXSxcbiAgICAgICAgICAgICAgICAgICAgdXNhZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VG9rZW5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRUb2tlbnNEZXRhaWxzOiByZXNwb25zZS5kYXRhLnJlc3BvbnNlLnVzYWdlPy5pbnB1dF90b2tlbnNfZGV0YWlscyA/PyB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFRva2VucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFRva2Vuc0RldGFpbHM6IHJlc3BvbnNlLmRhdGEucmVzcG9uc2UudXNhZ2U/Lm91dHB1dF90b2tlbnNfZGV0YWlscyA/PyB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsVG9rZW5zLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5hdWRpby5kb25lJykge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdhdWRpb19kb25lJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0uZGVsZXRlZCcpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnaXRlbV9kZWxldGVkJywge1xuICAgICAgICAgICAgICAgIGl0ZW1JZDogcGFyc2VkLml0ZW1faWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5pbnB1dF9hdWRpb190cmFuc2NyaXB0aW9uLmNvbXBsZXRlZCcgfHxcbiAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0udHJ1bmNhdGVkJykge1xuICAgICAgICAgICAgLy8gcmlnaHQgbm93IHJhdGhlciB0aGFuIGtlZXBpbmcgdHJhY2sgb2YgcGFydGlhbHMgYW5kIHJlYnVpbGRpbmcgdGhlIGl0ZW0gd2VcbiAgICAgICAgICAgIC8vIHdpbGwgcmV0cmlldmUgaXQgaW5zdGVhZCB3aGljaCB0cmlnZ2VycyB0aGUgYGNvbnZlcnNhdGlvbi5pdGVtLnJldHJpZXZlZGAgZXZlbnQgYmVsb3dcbiAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0ucmV0cmlldmUnLFxuICAgICAgICAgICAgICAgIGl0ZW1faWQ6IHBhcnNlZC5pdGVtX2lkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0uaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbi5kZWx0YScgfHxcbiAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAncmVzcG9uc2UudGV4dC5kZWx0YScgfHxcbiAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAncmVzcG9uc2UuYXVkaW9fdHJhbnNjcmlwdC5kZWx0YScgfHxcbiAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAncmVzcG9uc2UuZnVuY3Rpb25fY2FsbF9hcmd1bWVudHMuZGVsdGEnKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5hdWRpb190cmFuc2NyaXB0LmRlbHRhJykge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnYXVkaW9fdHJhbnNjcmlwdF9kZWx0YScsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RyYW5zY3JpcHRfZGVsdGEnLFxuICAgICAgICAgICAgICAgICAgICBkZWx0YTogcGFyc2VkLmRlbHRhLFxuICAgICAgICAgICAgICAgICAgICBpdGVtSWQ6IHBhcnNlZC5pdGVtX2lkLFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZUlkOiBwYXJzZWQucmVzcG9uc2VfaWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBubyBzdXBwb3J0IGZvciBwYXJ0aWFsIHRyYW5zY3JpcHRzIHlldC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5jcmVhdGVkJyB8fFxuICAgICAgICAgICAgcGFyc2VkLnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5yZXRyaWV2ZWQnKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VkLml0ZW0udHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNJdGVtSWQgPSBwYXJzZWQudHlwZSA9PT0gJ2NvbnZlcnNhdGlvbi5pdGVtLmNyZWF0ZWQnXG4gICAgICAgICAgICAgICAgICAgID8gcGFyc2VkLnByZXZpb3VzX2l0ZW1faWRcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSByZWFsdGltZU1lc3NhZ2VJdGVtU2NoZW1hLnBhcnNlKHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbUlkOiBwYXJzZWQuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNJdGVtSWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHBhcnNlZC5pdGVtLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6IHBhcnNlZC5pdGVtLnJvbGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHBhcnNlZC5pdGVtLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogcGFyc2VkLml0ZW0uc3RhdHVzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaXRlbV91cGRhdGUnLCBpdGVtKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAncmVzcG9uc2Uub3V0cHV0X2l0ZW0uZG9uZScgfHxcbiAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAncmVzcG9uc2Uub3V0cHV0X2l0ZW0uYWRkZWQnKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gcGFyc2VkLml0ZW07XG4gICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnZnVuY3Rpb25fY2FsbCcgJiYgaXRlbS5zdGF0dXMgPT09ICdjb21wbGV0ZWQnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9vbENhbGwgPSByZWFsdGltZVRvb2xDYWxsSXRlbS5wYXJzZSh7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1JZDogaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogaXRlbS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdpbl9wcm9ncmVzcycsIC8vIHdlIHNldCBpdCB0byBpbl9wcm9ncmVzcyBmb3IgdGhlIFVJIGFzIGl0IHdpbGwgb25seSBiZSBjb21wbGV0ZWQgd2l0aCB0aGUgb3V0cHV0XG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogaXRlbS5hcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiBudWxsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaXRlbV91cGRhdGUnLCB0b29sQ2FsbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdmdW5jdGlvbl9jYWxsJywge1xuICAgICAgICAgICAgICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uX2NhbGwnLFxuICAgICAgICAgICAgICAgICAgICBjYWxsSWQ6IGl0ZW0uY2FsbF9pZCA/PyAnJyxcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiBpdGVtLmFyZ3VtZW50cyA/PyAnJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lID8/ICcnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdtZXNzYWdlJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWx0aW1lSXRlbSA9IHJlYWx0aW1lTWVzc2FnZUl0ZW1TY2hlbWEucGFyc2Uoe1xuICAgICAgICAgICAgICAgICAgICBpdGVtSWQ6IHBhcnNlZC5pdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBwYXJzZWQuaXRlbS50eXBlLFxuICAgICAgICAgICAgICAgICAgICByb2xlOiBwYXJzZWQuaXRlbS5yb2xlLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBwYXJzZWQuaXRlbS5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdpbl9wcm9ncmVzcycsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdpdGVtX3VwZGF0ZScsIHJlYWx0aW1lSXRlbSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9vbkVycm9yKGVycm9yKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCB7XG4gICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfb25PcGVuKCkge1xuICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3RlZCcpO1xuICAgIH1cbiAgICBfb25DbG9zZSgpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdkaXNjb25uZWN0ZWQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhIG1lc3NhZ2UgdG8gdGhlIFJlYWx0aW1lIEFQSS4gVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyBpdGVtIGluIHRoZSBjb252ZXJzYXRpb24gYW5kXG4gICAgICogdHJpZ2dlciBhIHJlc3BvbnNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgbWVzc2FnZSB0byBzZW5kLlxuICAgICAqIEBwYXJhbSBvdGhlckV2ZW50RGF0YSAtIEFkZGl0aW9uYWwgZXZlbnQgZGF0YSB0byBzZW5kLlxuICAgICAqL1xuICAgIHNlbmRNZXNzYWdlKG1lc3NhZ2UsIG90aGVyRXZlbnREYXRhKSB7XG4gICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgIHR5cGU6ICdjb252ZXJzYXRpb24uaXRlbS5jcmVhdGUnLFxuICAgICAgICAgICAgaXRlbTogdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2lucHV0X3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IG1lc3NhZ2UsXG4gICAgICAgICAgICAuLi5vdGhlckV2ZW50RGF0YSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgIHR5cGU6ICdyZXNwb25zZS5jcmVhdGUnLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2dldE1lcmdlZFNlc3Npb25Db25maWcoY29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHNlc3Npb25EYXRhID0ge1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zOiBjb25maWcuaW5zdHJ1Y3Rpb25zLFxuICAgICAgICAgICAgbW9kZWw6IGNvbmZpZy5tb2RlbCA/P1xuICAgICAgICAgICAgICAgIHRoaXMuI21vZGVsID8/XG4gICAgICAgICAgICAgICAgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfU0VTU0lPTl9DT05GSUcubW9kZWwsXG4gICAgICAgICAgICB2b2ljZTogY29uZmlnLnZvaWNlID8/IERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHLnZvaWNlLFxuICAgICAgICAgICAgc3BlZWQ6IGNvbmZpZy5zcGVlZCA/PyBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRy5zcGVlZCxcbiAgICAgICAgICAgIG1vZGFsaXRpZXM6IGNvbmZpZy5tb2RhbGl0aWVzID8/IERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHLm1vZGFsaXRpZXMsXG4gICAgICAgICAgICBpbnB1dF9hdWRpb19mb3JtYXQ6IGNvbmZpZy5pbnB1dEF1ZGlvRm9ybWF0ID8/XG4gICAgICAgICAgICAgICAgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfU0VTU0lPTl9DT05GSUcuaW5wdXRBdWRpb0Zvcm1hdCxcbiAgICAgICAgICAgIG91dHB1dF9hdWRpb19mb3JtYXQ6IGNvbmZpZy5vdXRwdXRBdWRpb0Zvcm1hdCA/P1xuICAgICAgICAgICAgICAgIERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHLm91dHB1dEF1ZGlvRm9ybWF0LFxuICAgICAgICAgICAgaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbjogY29uZmlnLmlucHV0QXVkaW9UcmFuc2NyaXB0aW9uID8/XG4gICAgICAgICAgICAgICAgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfU0VTU0lPTl9DT05GSUcuaW5wdXRBdWRpb1RyYW5zY3JpcHRpb24sXG4gICAgICAgICAgICBpbnB1dF9hdWRpb19ub2lzZV9yZWR1Y3Rpb246IGNvbmZpZy5pbnB1dEF1ZGlvTm9pc2VSZWR1Y3Rpb24gPz9cbiAgICAgICAgICAgICAgICBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRy5pbnB1dEF1ZGlvTm9pc2VSZWR1Y3Rpb24sXG4gICAgICAgICAgICB0dXJuX2RldGVjdGlvbjogT3BlbkFJUmVhbHRpbWVCYXNlLmJ1aWxkVHVybkRldGVjdGlvbkNvbmZpZyhjb25maWcudHVybkRldGVjdGlvbikgPz9cbiAgICAgICAgICAgICAgICBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRy50dXJuRGV0ZWN0aW9uLFxuICAgICAgICAgICAgdG9vbF9jaG9pY2U6IGNvbmZpZy50b29sQ2hvaWNlID8/IERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHLnRvb2xDaG9pY2UsXG4gICAgICAgICAgICB0b29sczogY29uZmlnLnRvb2xzPy5tYXAoKHRvb2wpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4udG9vbCxcbiAgICAgICAgICAgICAgICBzdHJpY3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIC8vIFdlIGRvbid0IHNldCB0cmFjaW5nIGhlcmUgdG8gbWFrZSBzdXJlIHRoYXQgd2UgZG9uJ3QgdHJ5IHRvIG92ZXJyaWRlIGl0IG9uIGV2ZXJ5XG4gICAgICAgICAgICAvLyBzZXNzaW9uLnVwZGF0ZSBhcyBpdCBtaWdodCBsZWFkIHRvIGVycm9yc1xuICAgICAgICAgICAgLi4uKGNvbmZpZy5wcm92aWRlckRhdGEgPz8ge30pLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc2Vzc2lvbkRhdGE7XG4gICAgfVxuICAgIHN0YXRpYyBidWlsZFR1cm5EZXRlY3Rpb25Db25maWcoYykge1xuICAgICAgICBpZiAodHlwZW9mIGMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdHlwZSwgY3JlYXRlUmVzcG9uc2UsIGNyZWF0ZV9yZXNwb25zZSwgZWFnZXJuZXNzLCBpbnRlcnJ1cHRSZXNwb25zZSwgaW50ZXJydXB0X3Jlc3BvbnNlLCBwcmVmaXhQYWRkaW5nTXMsIHByZWZpeF9wYWRkaW5nX21zLCBzaWxlbmNlRHVyYXRpb25Ncywgc2lsZW5jZV9kdXJhdGlvbl9tcywgdGhyZXNob2xkLCAuLi5yZXN0IH0gPSBjO1xuICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgY3JlYXRlX3Jlc3BvbnNlOiBjcmVhdGVSZXNwb25zZSA/IGNyZWF0ZVJlc3BvbnNlIDogY3JlYXRlX3Jlc3BvbnNlLFxuICAgICAgICAgICAgZWFnZXJuZXNzLFxuICAgICAgICAgICAgaW50ZXJydXB0X3Jlc3BvbnNlOiBpbnRlcnJ1cHRSZXNwb25zZVxuICAgICAgICAgICAgICAgID8gaW50ZXJydXB0UmVzcG9uc2VcbiAgICAgICAgICAgICAgICA6IGludGVycnVwdF9yZXNwb25zZSxcbiAgICAgICAgICAgIHByZWZpeF9wYWRkaW5nX21zOiBwcmVmaXhQYWRkaW5nTXMgPyBwcmVmaXhQYWRkaW5nTXMgOiBwcmVmaXhfcGFkZGluZ19tcyxcbiAgICAgICAgICAgIHNpbGVuY2VfZHVyYXRpb25fbXM6IHNpbGVuY2VEdXJhdGlvbk1zXG4gICAgICAgICAgICAgICAgPyBzaWxlbmNlRHVyYXRpb25Nc1xuICAgICAgICAgICAgICAgIDogc2lsZW5jZV9kdXJhdGlvbl9tcyxcbiAgICAgICAgICAgIHRocmVzaG9sZCxcbiAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgIH07XG4gICAgICAgIC8vIFJlbW92ZSB1bmRlZmluZWQgdmFsdWVzIGZyb20gdGhlIGNvbmZpZ1xuICAgICAgICBPYmplY3Qua2V5cyhjb25maWcpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbmZpZ1trZXldID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbmZpZ1trZXldO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGNvbmZpZykubGVuZ3RoID4gMCA/IGNvbmZpZyA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW50ZXJuYWwgdHJhY2luZyBjb25maWcuIFRoaXMgaXMgdXNlZCB0byB0cmFjayB0aGUgdHJhY2luZyBjb25maWcgdGhhdCBoYXMgYmVlbiBzZXRcbiAgICAgKiBkdXJpbmcgdGhlIHNlc3Npb24uY3JlYXRlIGV2ZW50LlxuICAgICAqL1xuICAgIHNldCBfdHJhY2luZ0NvbmZpZyh0cmFjaW5nQ29uZmlnKSB7XG4gICAgICAgIHRoaXMuI3RyYWNpbmdDb25maWcgPSB0cmFjaW5nQ29uZmlnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0cmFjaW5nIGNvbmZpZyBmb3IgdGhlIHNlc3Npb24uIFRoaXMgd2lsbCBzZW5kIHRoZSB0cmFjaW5nIGNvbmZpZyB0byB0aGUgUmVhbHRpbWUgQVBJLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYWNpbmdDb25maWcgLSBUaGUgdHJhY2luZyBjb25maWcgdG8gc2V0LiBXZSBkb24ndCBzdXBwb3J0ICdhdXRvJyBoZXJlIGFzIHRoZSBTREsgd2lsbCBhbHdheXMgY29uZmlndXJlIGEgV29ya2Zsb3cgTmFtZSB1bmxlc3MgaXQgZXhpc3RzXG4gICAgICovXG4gICAgX3VwZGF0ZVRyYWNpbmdDb25maWcodHJhY2luZ0NvbmZpZykge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuI3RyYWNpbmdDb25maWcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAvLyB0cmVhdGluZyBpdCBhcyBkZWZhdWx0IHZhbHVlXG4gICAgICAgICAgICB0aGlzLiN0cmFjaW5nQ29uZmlnID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhY2luZ0NvbmZpZyA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAvLyB0dXJuIG9uIHRyYWNpbmcgaW4gYXV0byBtb2RlXG4gICAgICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3Nlc3Npb24udXBkYXRlJyxcbiAgICAgICAgICAgICAgICBzZXNzaW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNpbmc6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLiN0cmFjaW5nQ29uZmlnICE9PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgdHlwZW9mIHRyYWNpbmdDb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyB0cmFjaW5nIGlzIGFscmVhZHkgc2V0LCB3ZSBjYW4ndCBjaGFuZ2UgaXRcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdUcmFjaW5nIGNvbmZpZyBpcyBhbHJlYWR5IHNldCwgc2tpcHBpbmcgc2V0dGluZyBpdCBhZ2Fpbi4gVGhpcyBsaWtlbHkgaGFwcGVucyB3aGVuIHlvdSBhbHJlYWR5IHNldCBhIHRyYWNpbmcgY29uZmlnIG9uIHNlc3Npb24gY3JlYXRpb24uJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYWNpbmdDb25maWcgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnRGlzYWJsaW5nIHRyYWNpbmcgZm9yIHRoaXMgc2Vzc2lvbi4gSXQgY2Fubm90IGJlIHR1cm5lZCBvbiBmb3IgdGhpcyBzZXNzaW9uIGZyb20gdGhpcyBwb2ludCBvbi4nKTtcbiAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2Vzc2lvbi51cGRhdGUnLFxuICAgICAgICAgICAgICAgIHNlc3Npb246IHtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2luZzogbnVsbCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuI3RyYWNpbmdDb25maWcgPT09IG51bGwgfHxcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLiN0cmFjaW5nQ29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gdHJhY2luZyBpcyBjdXJyZW50bHkgbm90IHNldCBzbyB3ZSBjYW4gc2V0IGl0IHRvIHRoZSBuZXcgdmFsdWVcbiAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2Vzc2lvbi51cGRhdGUnLFxuICAgICAgICAgICAgICAgIHNlc3Npb246IHtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2luZzogdHJhY2luZ0NvbmZpZyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYWNpbmdDb25maWc/Lmdyb3VwX2lkICE9PSB0aGlzLiN0cmFjaW5nQ29uZmlnPy5ncm91cF9pZCB8fFxuICAgICAgICAgICAgdHJhY2luZ0NvbmZpZz8ubWV0YWRhdGEgIT09IHRoaXMuI3RyYWNpbmdDb25maWc/Lm1ldGFkYXRhIHx8XG4gICAgICAgICAgICB0cmFjaW5nQ29uZmlnPy53b3JrZmxvd19uYW1lICE9PSB0aGlzLiN0cmFjaW5nQ29uZmlnPy53b3JrZmxvd19uYW1lKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybignTWlzbWF0Y2ggaW4gdHJhY2luZyBjb25maWcuIElnbm9yaW5nIHRoZSBuZXcgdHJhY2luZyBjb25maWcuIFRoaXMgbGlrZWx5IGhhcHBlbnMgd2hlbiB5b3UgYWxyZWFkeSBzZXQgYSB0cmFjaW5nIGNvbmZpZyBvbiBzZXNzaW9uIGNyZWF0aW9uLiBDdXJyZW50IHRyYWNpbmcgY29uZmlnOiAlcywgbmV3IHRyYWNpbmcgY29uZmlnOiAlcycsIEpTT04uc3RyaW5naWZ5KHRoaXMuI3RyYWNpbmdDb25maWcpLCBKU09OLnN0cmluZ2lmeSh0cmFjaW5nQ29uZmlnKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogJ3Nlc3Npb24udXBkYXRlJyxcbiAgICAgICAgICAgIHNlc3Npb246IHtcbiAgICAgICAgICAgICAgICB0cmFjaW5nOiB0cmFjaW5nQ29uZmlnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHNlc3Npb24gY29uZmlnLiBUaGlzIHdpbGwgbWVyZ2UgaXQgd2l0aCB0aGUgY3VycmVudCBzZXNzaW9uIGNvbmZpZyB3aXRoIHRoZSBkZWZhdWx0XG4gICAgICogdmFsdWVzIGFuZCBzZW5kIGl0IHRvIHRoZSBSZWFsdGltZSBBUEkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29uZmlnIC0gVGhlIHNlc3Npb24gY29uZmlnIHRvIHVwZGF0ZS5cbiAgICAgKi9cbiAgICB1cGRhdGVTZXNzaW9uQ29uZmlnKGNvbmZpZykge1xuICAgICAgICBjb25zdCBzZXNzaW9uRGF0YSA9IHRoaXMuX2dldE1lcmdlZFNlc3Npb25Db25maWcoY29uZmlnKTtcbiAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogJ3Nlc3Npb24udXBkYXRlJyxcbiAgICAgICAgICAgIHNlc3Npb246IHNlc3Npb25EYXRhLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCB0aGUgb3V0cHV0IG9mIGEgZnVuY3Rpb24gY2FsbCB0byB0aGUgUmVhbHRpbWUgQVBJLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRvb2xDYWxsIC0gVGhlIHRvb2wgY2FsbCB0byBzZW5kIHRoZSBvdXRwdXQgZm9yLlxuICAgICAqIEBwYXJhbSBvdXRwdXQgLSBUaGUgb3V0cHV0IG9mIHRoZSBmdW5jdGlvbiBjYWxsLlxuICAgICAqIEBwYXJhbSBzdGFydFJlc3BvbnNlIC0gV2hldGhlciB0byBzdGFydCBhIG5ldyByZXNwb25zZSBhZnRlciBzZW5kaW5nIHRoZSBvdXRwdXQuXG4gICAgICovXG4gICAgc2VuZEZ1bmN0aW9uQ2FsbE91dHB1dCh0b29sQ2FsbCwgb3V0cHV0LCBzdGFydFJlc3BvbnNlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0uY3JlYXRlJyxcbiAgICAgICAgICAgIGl0ZW06IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZnVuY3Rpb25fY2FsbF9vdXRwdXQnLFxuICAgICAgICAgICAgICAgIG91dHB1dCxcbiAgICAgICAgICAgICAgICBjYWxsX2lkOiB0b29sQ2FsbC5jYWxsSWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSByZWFsdGltZVRvb2xDYWxsSXRlbS5wYXJzZSh7XG4gICAgICAgICAgICAgICAgaXRlbUlkOiB0b29sQ2FsbC5pZCxcbiAgICAgICAgICAgICAgICBwcmV2aW91c0l0ZW1JZDogdG9vbENhbGwucHJldmlvdXNJdGVtSWQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uX2NhbGwnLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ2NvbXBsZXRlZCcsXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiB0b29sQ2FsbC5hcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgbmFtZTogdG9vbENhbGwubmFtZSxcbiAgICAgICAgICAgICAgICBvdXRwdXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnaXRlbV91cGRhdGUnLCBpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgcGFyc2luZyB0b29sIGNhbGwgaXRlbScsIGVycm9yLCB0b29sQ2FsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0UmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmVzcG9uc2UuY3JlYXRlJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmQgYW4gYXVkaW8gYnVmZmVyIHRvIHRoZSBSZWFsdGltZSBBUEkuIElmIGB7IGNvbW1pdDogdHJ1ZSB9YCBpcyBwYXNzZWQsIHRoZSBhdWRpbyBidWZmZXJcbiAgICAgKiB3aWxsIGJlIGNvbW1pdHRlZCBhbmQgdGhlIG1vZGVsIHdpbGwgc3RhcnQgcHJvY2Vzc2luZyBpdC4gVGhpcyBpcyBuZWNlc3NhcnkgaWYgeW91IGhhdmVcbiAgICAgKiBkaXNhYmxlZCB0dXJuIGRldGVjdGlvbiAvIHZvaWNlIGFjdGl2aXR5IGRldGVjdGlvbiAoVkFEKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdWRpbyAtIFRoZSBhdWRpbyBidWZmZXIgdG8gc2VuZC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgYXVkaW8gYnVmZmVyLlxuICAgICAqL1xuICAgIHNlbmRBdWRpbyhhdWRpbywgeyBjb21taXQgPSBmYWxzZSB9ID0ge30pIHtcbiAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogJ2lucHV0X2F1ZGlvX2J1ZmZlci5hcHBlbmQnLFxuICAgICAgICAgICAgYXVkaW86IGFycmF5QnVmZmVyVG9CYXNlNjQoYXVkaW8pLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGNvbW1pdCkge1xuICAgICAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdpbnB1dF9hdWRpb19idWZmZXIuY29tbWl0JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBoaXN0b3J5IG9mIHRoZSBjb252ZXJzYXRpb24uIFRoaXMgd2lsbCBjcmVhdGUgYSBkaWZmIGJldHdlZW4gdGhlIG9sZCBhbmQgbmV3IGhpc3RvcnlcbiAgICAgKiBhbmQgc2VuZCB0aGUgbmVjZXNzYXJ5IGV2ZW50cyB0byB0aGUgUmVhbHRpbWUgQVBJIHRvIHVwZGF0ZSB0aGUgaGlzdG9yeS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvbGRIaXN0b3J5IC0gVGhlIG9sZCBoaXN0b3J5IG9mIHRoZSBjb252ZXJzYXRpb24uXG4gICAgICogQHBhcmFtIG5ld0hpc3RvcnkgLSBUaGUgbmV3IGhpc3Rvcnkgb2YgdGhlIGNvbnZlcnNhdGlvbi5cbiAgICAgKi9cbiAgICByZXNldEhpc3Rvcnkob2xkSGlzdG9yeSwgbmV3SGlzdG9yeSkge1xuICAgICAgICBjb25zdCB7IHJlbW92YWxzLCBhZGRpdGlvbnMsIHVwZGF0ZXMgfSA9IGRpZmZSZWFsdGltZUhpc3Rvcnkob2xkSGlzdG9yeSwgbmV3SGlzdG9yeSk7XG4gICAgICAgIGNvbnN0IHJlbW92YWxJZHMgPSBuZXcgU2V0KHJlbW92YWxzLm1hcCgoaXRlbSkgPT4gaXRlbS5pdGVtSWQpKTtcbiAgICAgICAgLy8gd2UgZG9uJ3QgaGF2ZSBhbiB1cGRhdGUgZXZlbnQgZm9yIGl0ZW1zIHNvIHdlIHdpbGwgcmVtb3ZlIGFuZCByZS1hZGQgd2hhdCdzIHRoZXJlXG4gICAgICAgIGZvciAoY29uc3QgdXBkYXRlIG9mIHVwZGF0ZXMpIHtcbiAgICAgICAgICAgIHJlbW92YWxJZHMuYWRkKHVwZGF0ZS5pdGVtSWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZW1vdmFsSWRzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW1JZCBvZiByZW1vdmFsSWRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0uZGVsZXRlJyxcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9pZDogaXRlbUlkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFkZGl0aW9uc0FuZFVwZGF0ZXMgPSBbLi4uYWRkaXRpb25zLCAuLi51cGRhdGVzXTtcbiAgICAgICAgZm9yIChjb25zdCBhZGRpdGlvbiBvZiBhZGRpdGlvbnNBbmRVcGRhdGVzKSB7XG4gICAgICAgICAgICBpZiAoYWRkaXRpb24udHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbUVudHJ5ID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6IGFkZGl0aW9uLnJvbGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGFkZGl0aW9uLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBhZGRpdGlvbi5pdGVtSWQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoYWRkaXRpb24ucm9sZSAhPT0gJ3N5c3RlbScgJiYgYWRkaXRpb24uc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1FbnRyeS5zdGF0dXMgPSBhZGRpdGlvbi5zdGF0dXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NvbnZlcnNhdGlvbi5pdGVtLmNyZWF0ZScsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW1FbnRyeSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFkZGl0aW9uLnR5cGUgPT09ICdmdW5jdGlvbl9jYWxsJykge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKCdGdW5jdGlvbiBjYWxscyBjYW5ub3QgYmUgbWFudWFsbHkgYWRkZWQgb3IgdXBkYXRlZCBhdCB0aGUgbW9tZW50LiBJZ25vcmluZy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5haVJlYWx0aW1lQmFzZS5tanMubWFwIiwiLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbmltcG9ydCB7IGlzQnJvd3NlckVudmlyb25tZW50IH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZS9fc2hpbXMnO1xuaW1wb3J0IHsgVXNlckVycm9yIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZSc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbmltcG9ydCB7IE9wZW5BSVJlYWx0aW1lQmFzZSwgfSBmcm9tIFwiLi9vcGVuYWlSZWFsdGltZUJhc2UubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVJlYWx0aW1lRXZlbnQgfSBmcm9tIFwiLi9vcGVuYWlSZWFsdGltZUV2ZW50cy5tanNcIjtcbmltcG9ydCB7IEhFQURFUlMgfSBmcm9tIFwiLi91dGlscy5tanNcIjtcbi8qKlxuICogVHJhbnNwb3J0IGxheWVyIHRoYXQncyBoYW5kbGluZyB0aGUgY29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBjbGllbnQgYW5kIE9wZW5BSSdzIFJlYWx0aW1lIEFQSVxuICogdmlhIFdlYlJUQy4gV2hpbGUgdGhpcyB0cmFuc3BvcnQgbGF5ZXIgaXMgZGVzaWduZWQgdG8gYmUgdXNlZCB3aXRoaW4gYSBSZWFsdGltZVNlc3Npb24sIGl0IGNhblxuICogYWxzbyBiZSB1c2VkIHN0YW5kYWxvbmUgaWYgeW91IHdhbnQgdG8gaGF2ZSBhIGRpcmVjdCBjb25uZWN0aW9uIHRvIHRoZSBSZWFsdGltZSBBUEkuXG4gKlxuICogVW5sZXNzIHlvdSBzcGVjaWZ5IGEgYG1lZGlhU3RyZWFtYCBvciBgYXVkaW9FbGVtZW50YCBvcHRpb24sIHRoZSB0cmFuc3BvcnQgbGF5ZXIgd2lsbFxuICogYXV0b21hdGljYWxseSBjb25maWd1cmUgdGhlIG1pY3JvcGhvbmUgYW5kIGF1ZGlvIG91dHB1dCB0byBiZSB1c2VkIGJ5IHRoZSBzZXNzaW9uLlxuICovXG5leHBvcnQgY2xhc3MgT3BlbkFJUmVhbHRpbWVXZWJSVEMgZXh0ZW5kcyBPcGVuQUlSZWFsdGltZUJhc2Uge1xuICAgIG9wdGlvbnM7XG4gICAgI3VybDtcbiAgICAjc3RhdGUgPSB7XG4gICAgICAgIHN0YXR1czogJ2Rpc2Nvbm5lY3RlZCcsXG4gICAgICAgIHBlZXJDb25uZWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGRhdGFDaGFubmVsOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICAjdXNlSW5zZWN1cmVBcGlLZXk7XG4gICAgI29uZ29pbmdSZXNwb25zZSA9IGZhbHNlO1xuICAgICNtdXRlZCA9IGZhbHNlO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAodHlwZW9mIFJUQ1BlZXJDb25uZWN0aW9uID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJSVEMgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuI3VybCA9IG9wdGlvbnMuYmFzZVVybCA/PyBgaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9yZWFsdGltZWA7XG4gICAgICAgIHRoaXMuI3VzZUluc2VjdXJlQXBpS2V5ID0gb3B0aW9ucy51c2VJbnNlY3VyZUFwaUtleSA/PyBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSBXZWJSVEMgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBnZXQgc3RhdHVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jc3RhdGUuc3RhdHVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBjb25uZWN0aW9uIHN0YXRlIG9mIHRoZSBXZWJSVEMgY29ubmVjdGlvbiBpbmNsdWRpbmcgdGhlIHBlZXIgY29ubmVjdGlvbiBhbmQgZGF0YVxuICAgICAqIGNoYW5uZWwuXG4gICAgICovXG4gICAgZ2V0IGNvbm5lY3Rpb25TdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3N0YXRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBzZXNzaW9uIGlzIG11dGVkLlxuICAgICAqL1xuICAgIGdldCBtdXRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI211dGVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25uZWN0IHRvIHRoZSBSZWFsdGltZSBBUEkuIFRoaXMgd2lsbCBlc3RhYmxpc2ggdGhlIGNvbm5lY3Rpb24gdG8gdGhlIE9wZW5BSSBSZWFsdGltZSBBUElcbiAgICAgKiB2aWEgV2ViUlRDLlxuICAgICAqXG4gICAgICogSWYgeW91IGFyZSB1c2luZyBhIGJyb3dzZXIsIHRoZSB0cmFuc3BvcnQgbGF5ZXIgd2lsbCBhbHNvIGF1dG9tYXRpY2FsbHkgY29uZmlndXJlIHRoZVxuICAgICAqIG1pY3JvcGhvbmUgYW5kIGF1ZGlvIG91dHB1dCB0byBiZSB1c2VkIGJ5IHRoZSBzZXNzaW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgYXN5bmMgY29ubmVjdChvcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLiNzdGF0ZS5zdGF0dXMgPT09ICdjb25uZWN0ZWQnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuI3N0YXRlLnN0YXR1cyA9PT0gJ2Nvbm5lY3RpbmcnKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybignUmVhbHRpbWUgY29ubmVjdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzLiBQbGVhc2UgYXdhaXQgb3JpZ2luYWwgcHJvbWlzZScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vZGVsID0gb3B0aW9ucy5tb2RlbCA/PyB0aGlzLmN1cnJlbnRNb2RlbDtcbiAgICAgICAgdGhpcy5jdXJyZW50TW9kZWwgPSBtb2RlbDtcbiAgICAgICAgY29uc3QgYmFzZVVybCA9IG9wdGlvbnMudXJsID8/IHRoaXMuI3VybDtcbiAgICAgICAgY29uc3QgYXBpS2V5ID0gYXdhaXQgdGhpcy5fZ2V0QXBpS2V5KG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBpc0NsaWVudEtleSA9IHR5cGVvZiBhcGlLZXkgPT09ICdzdHJpbmcnICYmIGFwaUtleS5zdGFydHNXaXRoKCdla18nKTtcbiAgICAgICAgaWYgKGlzQnJvd3NlckVudmlyb25tZW50KCkgJiYgIXRoaXMuI3VzZUluc2VjdXJlQXBpS2V5ICYmICFpc0NsaWVudEtleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignVXNpbmcgdGhlIFdlYlJUQyBjb25uZWN0aW9uIGluIGEgYnJvd3NlciBlbnZpcm9ubWVudCByZXF1aXJlcyBhbiBpbnNlY3VyZSBBUEkga2V5LiBQbGVhc2UgdXNlIGEgV2ViU29ja2V0IGNvbm5lY3Rpb24gaW5zdGVhZCBvciBzZXQgdGhlIHVzZUluc2VjdXJlQXBpS2V5IG9wdGlvbiB0byB0cnVlLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hc3luYy1wcm9taXNlLWV4ZWN1dG9yXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJTZXNzaW9uQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi4ob3B0aW9ucy5pbml0aWFsU2Vzc2lvbkNvbmZpZyB8fCB7fSksXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiB0aGlzLmN1cnJlbnRNb2RlbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbm5lY3Rpb25VcmwgPSBuZXcgVVJMKGJhc2VVcmwpO1xuICAgICAgICAgICAgICAgIGxldCBwZWVyQ29ubmVjdGlvbiA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFDaGFubmVsID0gcGVlckNvbm5lY3Rpb24uY3JlYXRlRGF0YUNoYW5uZWwoJ29haS1ldmVudHMnKTtcbiAgICAgICAgICAgICAgICB0aGlzLiNzdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnY29ubmVjdGluZycsXG4gICAgICAgICAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkYXRhQ2hhbm5lbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnY29ubmVjdGlvbl9jaGFuZ2UnLCB0aGlzLiNzdGF0ZS5zdGF0dXMpO1xuICAgICAgICAgICAgICAgIGRhdGFDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3N0YXRlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnY29ubmVjdGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUNoYW5uZWwsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIC8vIFNlbmRpbmcgdGhlIHNlc3Npb24gY29uZmlnIGFnYWluIGhlcmUgb25jZSB0aGUgY2hhbm5lbCBpcyBjb25uZWN0ZWQgdG8gZW5zdXJlXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoYXQgdGhlIHNlc3Npb24gY29uZmlnIGlzIHNlbnQgdG8gdGhlIHNlcnZlciBiZWZvcmUgdGhlIGZpcnN0IHJlc3BvbnNlIGlzIHJlY2VpdmVkXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldHRpbmcgaXQgb24gY29ubmVjdGlvbiBzaG91bGQgd29yayBidXQgdGhlIGNvbmZpZyBpcyBub3QgYmVpbmcgdmFsaWRhdGVkIG9uIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBzZXJ2ZXIuIFRoaXMgdHJpZ2dlcnMgYSB2YWxpZGF0aW9uIGVycm9yIGlmIHRoZSBjb25maWcgaXMgbm90IHZhbGlkLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNlc3Npb25Db25maWcodXNlclNlc3Npb25Db25maWcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3Rpb25fY2hhbmdlJywgdGhpcy4jc3RhdGUuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25PcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkYXRhQ2hhbm5lbC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRXJyb3IoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRhdGFDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25NZXNzYWdlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhOiBwYXJzZWQsIGlzR2VuZXJpYyB9ID0gcGFyc2VSZWFsdGltZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJzZWQgfHwgaXNHZW5lcmljKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAncmVzcG9uc2UuY3JlYXRlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI29uZ29pbmdSZXNwb25zZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5kb25lJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jb25nb2luZ1Jlc3BvbnNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAnc2Vzc2lvbi5jcmVhdGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhY2luZ0NvbmZpZyA9IHBhcnNlZC5zZXNzaW9uLnRyYWNpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnlpbmcgdG8gdHVybiBvbiB0cmFjaW5nIGFmdGVyIHRoZSBzZXNzaW9uIGlzIGNyZWF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVRyYWNpbmdDb25maWcodXNlclNlc3Npb25Db25maWcudHJhY2luZyA/PyAnYXV0bycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gc2V0IHVwIGF1ZGlvIHBsYXliYWNrXG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaW9FbGVtZW50ID0gdGhpcy5vcHRpb25zLmF1ZGlvRWxlbWVudCA/PyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpO1xuICAgICAgICAgICAgICAgIGF1ZGlvRWxlbWVudC5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24ub250cmFjayA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhdWRpb0VsZW1lbnQuc3JjT2JqZWN0ID0gZXZlbnQuc3RyZWFtc1swXTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vIGdldCBtaWNyb3Bob25lIHN0cmVhbVxuICAgICAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMub3B0aW9ucy5tZWRpYVN0cmVhbSA/P1xuICAgICAgICAgICAgICAgICAgICAoYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW86IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5hZGRUcmFjayhzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVswXSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jaGFuZ2VQZWVyQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm9wdGlvbnMuY2hhbmdlUGVlckNvbm5lY3Rpb24ocGVlckNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNzdGF0ZSA9IHsgLi4udGhpcy4jc3RhdGUsIHBlZXJDb25uZWN0aW9uIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgcGVlckNvbm5lY3Rpb24uY3JlYXRlT2ZmZXIoKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBwZWVyQ29ubmVjdGlvbi5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgICAgICBpZiAoIW9mZmVyLnNkcCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgb2ZmZXInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbkNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5fZ2V0TWVyZ2VkU2Vzc2lvbkNvbmZpZyh1c2VyU2Vzc2lvbkNvbmZpZyksXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiB0aGlzLmN1cnJlbnRNb2RlbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgICAgICBkYXRhLmFwcGVuZCgnc2RwJywgb2ZmZXIuc2RwKTtcbiAgICAgICAgICAgICAgICBkYXRhLmFwcGVuZCgnc2Vzc2lvbicsIEpTT04uc3RyaW5naWZ5KHNlc3Npb25Db25maWcpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZHBSZXNwb25zZSA9IGF3YWl0IGZldGNoKGNvbm5lY3Rpb25VcmwsIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHthcGlLZXl9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdYLU9wZW5BSS1BZ2VudHMtU0RLJzogSEVBREVSU1snWC1PcGVuQUktQWdlbnRzLVNESyddLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Fuc3dlcicsXG4gICAgICAgICAgICAgICAgICAgIHNkcDogYXdhaXQgc2RwUmVzcG9uc2UudGV4dCgpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYXdhaXQgcGVlckNvbm5lY3Rpb24uc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhbiBldmVudCB0byB0aGUgUmVhbHRpbWUgQVBJLiBUaGlzIHdpbGwgc3RyaW5naWZ5IHRoZSBldmVudCBhbmQgc2VuZCBpdCBkaXJlY3RseSB0byB0aGVcbiAgICAgKiBBUEkuIFRoaXMgY2FuIGJlIHVzZWQgaWYgeW91IHdhbnQgdG8gdGFrZSBjb250cm9sIG92ZXIgdGhlIGNvbm5lY3Rpb24gYW5kIHNlbmQgZXZlbnRzIG1hbnVhbGx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIGV2ZW50IHRvIHNlbmQuXG4gICAgICovXG4gICAgc2VuZEV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy4jc3RhdGUuZGF0YUNoYW5uZWwgfHxcbiAgICAgICAgICAgIHRoaXMuI3N0YXRlLmRhdGFDaGFubmVsLnJlYWR5U3RhdGUgIT09ICdvcGVuJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJSVEMgZGF0YSBjaGFubmVsIGlzIG5vdCBjb25uZWN0ZWQuIE1ha2Ugc3VyZSB5b3UgY2FsbCBgY29ubmVjdCgpYCBiZWZvcmUgc2VuZGluZyBldmVudHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jc3RhdGUuZGF0YUNoYW5uZWwuc2VuZChKU09OLnN0cmluZ2lmeShldmVudCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdXRlIG9yIHVubXV0ZSB0aGUgc2Vzc2lvbi5cbiAgICAgKiBAcGFyYW0gbXV0ZWQgLSBXaGV0aGVyIHRvIG11dGUgdGhlIHNlc3Npb24uXG4gICAgICovXG4gICAgbXV0ZShtdXRlZCkge1xuICAgICAgICB0aGlzLiNtdXRlZCA9IG11dGVkO1xuICAgICAgICBpZiAodGhpcy4jc3RhdGUucGVlckNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBlZXJDb25uZWN0aW9uID0gdGhpcy4jc3RhdGUucGVlckNvbm5lY3Rpb247XG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5nZXRTZW5kZXJzKCkuZm9yRWFjaCgoc2VuZGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbmRlci50cmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzZW5kZXIudHJhY2suZW5hYmxlZCA9ICFtdXRlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZSB0aGUgY29ubmVjdGlvbiB0byB0aGUgUmVhbHRpbWUgQVBJIGFuZCBkaXNjb25uZWN0cyB0aGUgdW5kZXJseWluZyBXZWJSVEMgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3N0YXRlLmRhdGFDaGFubmVsKSB7XG4gICAgICAgICAgICB0aGlzLiNzdGF0ZS5kYXRhQ2hhbm5lbC5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLiNzdGF0ZS5wZWVyQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcGVlckNvbm5lY3Rpb24gPSB0aGlzLiNzdGF0ZS5wZWVyQ29ubmVjdGlvbjtcbiAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uLmdldFNlbmRlcnMoKS5mb3JFYWNoKChzZW5kZXIpID0+IHtcbiAgICAgICAgICAgICAgICBzZW5kZXIudHJhY2s/LnN0b3AoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy4jc3RhdGUuc3RhdHVzICE9PSAnZGlzY29ubmVjdGVkJykge1xuICAgICAgICAgICAgdGhpcy4jc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnZGlzY29ubmVjdGVkJyxcbiAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGRhdGFDaGFubmVsOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uX2NoYW5nZScsIHRoaXMuI3N0YXRlLnN0YXR1cyk7XG4gICAgICAgICAgICB0aGlzLl9vbkNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJydXB0IHRoZSBjdXJyZW50IHJlc3BvbnNlIGlmIG9uZSBpcyBvbmdvaW5nIGFuZCBjbGVhciB0aGUgYXVkaW8gYnVmZmVyIHNvIHRoYXQgdGhlIGFnZW50XG4gICAgICogc3RvcHMgdGFsa2luZy5cbiAgICAgKi9cbiAgICBpbnRlcnJ1cHQoKSB7XG4gICAgICAgIGlmICh0aGlzLiNvbmdvaW5nUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmVzcG9uc2UuY2FuY2VsJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy4jb25nb2luZ1Jlc3BvbnNlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogJ291dHB1dF9hdWRpb19idWZmZXIuY2xlYXInLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVuYWlSZWFsdGltZVdlYlJ0Yy5tanMubWFwIiwiLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbmV4cG9ydCBjb25zdCBXZWJTb2NrZXQgPSBnbG9iYWxUaGlzLldlYlNvY2tldDtcbmV4cG9ydCBmdW5jdGlvbiBpc0Jyb3dzZXJFbnZpcm9ubWVudCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBjb25zdCB1c2VXZWJTb2NrZXRQcm90b2NvbHMgPSB0cnVlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hpbXMtYnJvd3Nlci5tanMubWFwIiwiaW1wb3J0IHsgaXNCcm93c2VyRW52aXJvbm1lbnQsIHVzZVdlYlNvY2tldFByb3RvY29scywgV2ViU29ja2V0LCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLXJlYWx0aW1lL19zaGltcyc7XG5pbXBvcnQgeyBPcGVuQUlSZWFsdGltZUJhc2UsIH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVCYXNlLm1qc1wiO1xuaW1wb3J0IHsgYmFzZTY0VG9BcnJheUJ1ZmZlciwgSEVBREVSUywgV0VCU09DS0VUX01FVEEgfSBmcm9tIFwiLi91dGlscy5tanNcIjtcbmltcG9ydCB7IFVzZXJFcnJvciB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuaW1wb3J0IHsgcGFyc2VSZWFsdGltZUV2ZW50IH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVFdmVudHMubWpzXCI7XG4vKipcbiAqIFRyYW5zcG9ydCBsYXllciB0aGF0J3MgaGFuZGxpbmcgdGhlIGNvbm5lY3Rpb24gYmV0d2VlbiB0aGUgY2xpZW50IGFuZCBPcGVuQUkncyBSZWFsdGltZSBBUElcbiAqIHZpYSBXZWJTb2NrZXRzLiBXaGlsZSB0aGlzIHRyYW5zcG9ydCBsYXllciBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIHdpdGhpbiBhIFJlYWx0aW1lU2Vzc2lvbiwgaXRcbiAqIGNhbiBhbHNvIGJlIHVzZWQgc3RhbmRhbG9uZSBpZiB5b3Ugd2FudCB0byBoYXZlIGEgZGlyZWN0IGNvbm5lY3Rpb24gdG8gdGhlIFJlYWx0aW1lIEFQSS5cbiAqL1xuZXhwb3J0IGNsYXNzIE9wZW5BSVJlYWx0aW1lV2ViU29ja2V0IGV4dGVuZHMgT3BlbkFJUmVhbHRpbWVCYXNlIHtcbiAgICAjYXBpS2V5O1xuICAgICN1cmw7XG4gICAgI3N0YXRlID0ge1xuICAgICAgICBzdGF0dXM6ICdkaXNjb25uZWN0ZWQnLFxuICAgICAgICB3ZWJzb2NrZXQ6IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgICN1c2VJbnNlY3VyZUFwaUtleTtcbiAgICAjY3VycmVudEl0ZW1JZDtcbiAgICAjY3VycmVudEF1ZGlvQ29udGVudEluZGV4O1xuICAgIC8qKlxuICAgICAqIFRpbWVzdGFtcCBtYWludGFpbmVkIGJ5IHRoZSB0cmFuc3BvcnQgbGF5ZXIgdG8gYWlkIHdpdGggdGhlIGNhbGN1bGF0aW9uIG9mIHRoZSBlbGFwc2VkIHRpbWVcbiAgICAgKiBzaW5jZSB0aGUgcmVzcG9uc2Ugc3RhcnRlZCB0byBjb21wdXRlIHRoZSByaWdodCBpbnRlcnJ1cHRpb24gdGltZS5cbiAgICAgKlxuICAgICAqIE1vc3RseSBpbnRlcm5hbCBidXQgbWlnaHQgYmUgdXNlZCBieSBleHRlbmRlZCB0cmFuc3BvcnQgbGF5ZXJzIGZvciB0aGVpciBpbnRlcnJ1cHRpb25cbiAgICAgKiBjYWxjdWxhdGlvbi5cbiAgICAgKi9cbiAgICBfZmlyc3RBdWRpb1RpbWVzdGFtcDtcbiAgICBfYXVkaW9MZW5ndGhNcyA9IDA7XG4gICAgI29uZ29pbmdSZXNwb25zZSA9IGZhbHNlO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy4jdXJsID0gb3B0aW9ucy51cmw7XG4gICAgICAgIHRoaXMuI3VzZUluc2VjdXJlQXBpS2V5ID0gb3B0aW9ucy51c2VJbnNlY3VyZUFwaUtleSA/PyBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBnZXQgc3RhdHVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jc3RhdGUuc3RhdHVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBjb25uZWN0aW9uIHN0YXRlIG9mIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBnZXQgY29ubmVjdGlvblN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jc3RhdGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsd2F5cyByZXR1cm5zIGBudWxsYCBhcyB0aGUgV2ViU29ja2V0IHRyYW5zcG9ydCBsYXllciBkb2VzIG5vdCBoYW5kbGUgbXV0aW5nLiBJbnN0ZWFkLFxuICAgICAqIHRoaXMgc2hvdWxkIGJlIGhhbmRsZWQgYnkgdGhlIGNsaWVudCBieSBub3QgdHJpZ2dlcmluZyB0aGUgYHNlbmRBdWRpb2AgbWV0aG9kLlxuICAgICAqL1xuICAgIGdldCBtdXRlZCgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGl0ZW0gSUQgb2YgdGhlIG9uZ29pbmcgcmVzcG9uc2UuXG4gICAgICovXG4gICAgZ2V0IGN1cnJlbnRJdGVtSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNjdXJyZW50SXRlbUlkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VycyB0aGUgYGF1ZGlvYCBldmVudCB0aGF0IGEgY2xpZW50IG1pZ2h0IGxpc3RlbiB0byB0byByZWNlaXZlIHRoZSBhdWRpbyBidWZmZXIuXG4gICAgICogUHJvdGVjdGVkIGZvciB5b3UgdG8gYmUgYWJsZSB0byBvdmVycmlkZSBhbmQgZGlzYWJsZSBlbWl0dGluZyB0aGlzIGV2ZW50IGluIGNhc2UgeW91ciBleHRlbmRlZFxuICAgICAqIHRyYW5zcG9ydCBsYXllciBoYW5kbGVzIGF1ZGlvIGludGVybmFsbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXVkaW9FdmVudCAtIFRoZSBhdWRpbyBldmVudCB0byBlbWl0LlxuICAgICAqL1xuICAgIF9vbkF1ZGlvKGF1ZGlvRXZlbnQpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdhdWRpbycsIGF1ZGlvRXZlbnQpO1xuICAgIH1cbiAgICAjc2V0dXBXZWJTb2NrZXQocmVzb2x2ZSwgcmVqZWN0LCBzZXNzaW9uQ29uZmlnKSB7XG4gICAgICAgIGlmICh0aGlzLiNzdGF0ZS53ZWJzb2NrZXQpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuI2FwaUtleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignQVBJIGtleSBpcyBub3Qgc2V0LiBQbGVhc2UgY2FsbCBgY29ubmVjdCgpYCB3aXRoIGFuIEFQSSBrZXkgZmlyc3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQnJvd3NlckVudmlyb25tZW50KCkgJiZcbiAgICAgICAgICAgICF0aGlzLiNhcGlLZXkuc3RhcnRzV2l0aCgnZWtfJykgJiZcbiAgICAgICAgICAgICF0aGlzLiN1c2VJbnNlY3VyZUFwaUtleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignVXNpbmcgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uIGluIGEgYnJvd3NlciBlbnZpcm9ubWVudCByZXF1aXJlcyBhbiBlcGhlbWVyYWwgY2xpZW50IGtleS4gSWYgeW91IGhhdmUgdG8gdXNlIGEgcmVndWxhciBBUEkga2V5LCBzZXQgdGhlIGB1c2VJbnNlY3VyZUFwaUtleWAgb3B0aW9uIHRvIHRydWUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYnJvd3NlcnMgYW5kIHdvcmtlcmQgc2hvdWxkIHVzZSB0aGUgcHJvdG9jb2xzIGFyZ3VtZW50LCBub2RlIHNob3VsZCB1c2UgdGhlIGhlYWRlcnMgYXJndW1lbnRcbiAgICAgICAgY29uc3Qgd2Vic29ja2V0QXJndW1lbnRzID0gdXNlV2ViU29ja2V0UHJvdG9jb2xzXG4gICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAncmVhbHRpbWUnLFxuICAgICAgICAgICAgICAgIC8vIEF1dGhcbiAgICAgICAgICAgICAgICAnb3BlbmFpLWluc2VjdXJlLWFwaS1rZXkuJyArIHRoaXMuI2FwaUtleSxcbiAgICAgICAgICAgICAgICAvLyBCZXRhIHByb3RvY29sLCByZXF1aXJlZFxuICAgICAgICAgICAgICAgICdvcGVuYWktYmV0YS5yZWFsdGltZS12MScsXG4gICAgICAgICAgICAgICAgLy8gVmVyc2lvbiBoZWFkZXJcbiAgICAgICAgICAgICAgICBXRUJTT0NLRVRfTUVUQSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuI2FwaUtleX1gLFxuICAgICAgICAgICAgICAgICAgICAnT3BlbkFJLUJldGEnOiAncmVhbHRpbWU9djEnLFxuICAgICAgICAgICAgICAgICAgICAuLi5IRUFERVJTLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjb25zdCB3cyA9IG5ldyBXZWJTb2NrZXQodGhpcy4jdXJsLCB3ZWJzb2NrZXRBcmd1bWVudHMpO1xuICAgICAgICB0aGlzLiNzdGF0ZSA9IHtcbiAgICAgICAgICAgIHN0YXR1czogJ2Nvbm5lY3RpbmcnLFxuICAgICAgICAgICAgd2Vic29ja2V0OiB3cyxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uX2NoYW5nZScsIHRoaXMuI3N0YXRlLnN0YXR1cyk7XG4gICAgICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNzdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdjb25uZWN0ZWQnLFxuICAgICAgICAgICAgICAgIHdlYnNvY2tldDogd3MsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uX2NoYW5nZScsIHRoaXMuI3N0YXRlLnN0YXR1cyk7XG4gICAgICAgICAgICB0aGlzLl9vbk9wZW4oKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIHRoaXMuI3N0YXRlID0ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogJ2Rpc2Nvbm5lY3RlZCcsXG4gICAgICAgICAgICAgICAgd2Vic29ja2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uX2NoYW5nZScsIHRoaXMuI3N0YXRlLnN0YXR1cyk7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbk1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGE6IHBhcnNlZCwgaXNHZW5lcmljIH0gPSBwYXJzZVJlYWx0aW1lRXZlbnQobWVzc2FnZSk7XG4gICAgICAgICAgICBpZiAoIXBhcnNlZCB8fCBpc0dlbmVyaWMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5hdWRpby5kZWx0YScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNjdXJyZW50QXVkaW9Db250ZW50SW5kZXggPSBwYXJzZWQuY29udGVudF9pbmRleDtcbiAgICAgICAgICAgICAgICB0aGlzLiNjdXJyZW50SXRlbUlkID0gcGFyc2VkLml0ZW1faWQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ZpcnN0QXVkaW9UaW1lc3RhbXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcmVzcG9uc2Ugc3RhcnQgdGltZXN0YW1wIGlzIG5vdCBzZXQsIHdlIHNldCBpdCB0byB0aGUgY3VycmVudCB0aW1lLlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBlbGFwc2VkIHRpbWUgZm9yIGludGVycnVwdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlyc3RBdWRpb1RpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvTGVuZ3RoTXMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBidWZmID0gYmFzZTY0VG9BcnJheUJ1ZmZlcihwYXJzZWQuZGVsdGEpO1xuICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgYXVkaW8gbGVuZ3RoIGluIG1pbGxpc2Vjb25kcyBhc3N1bWluZyAyNGtIeiBwY20xNmxlXG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaW9Gb3JtYXQgPSB0aGlzLl9yYXdTZXNzaW9uQ29uZmlnPy5vdXRwdXRfYXVkaW9fZm9ybWF0ID8/ICdwY20xNic7XG4gICAgICAgICAgICAgICAgaWYgKGF1ZGlvRm9ybWF0LnN0YXJ0c1dpdGgoJ2c3MTFfJykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gOGtIeiAqIDEgYnl0ZSBwZXIgc2FtcGxlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvTGVuZ3RoTXMgKz0gYnVmZi5ieXRlTGVuZ3RoIC8gODtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIDI0a0h6ICogMiBieXRlcyBwZXIgc2FtcGxlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvTGVuZ3RoTXMgKz0gYnVmZi5ieXRlTGVuZ3RoIC8gMjQgLyAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBhdWRpb0V2ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYXVkaW8nLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBidWZmLFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZUlkOiBwYXJzZWQucmVzcG9uc2VfaWQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkF1ZGlvKGF1ZGlvRXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGFyc2VkLnR5cGUgPT09ICdpbnB1dF9hdWRpb19idWZmZXIuc3BlZWNoX3N0YXJ0ZWQnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXV0b21hdGljUmVzcG9uc2VDYW5jZWxsYXRpb25FbmFibGVkID0gdGhpcy5fcmF3U2Vzc2lvbkNvbmZpZz8udHVybl9kZXRlY3Rpb24/LmludGVycnVwdF9yZXNwb25zZSA/PyBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmludGVycnVwdCghYXV0b21hdGljUmVzcG9uc2VDYW5jZWxsYXRpb25FbmFibGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcnNlZC50eXBlID09PSAncmVzcG9uc2UuY3JlYXRlZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNvbmdvaW5nUmVzcG9uc2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5kb25lJykge1xuICAgICAgICAgICAgICAgIHRoaXMuI29uZ29pbmdSZXNwb25zZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGFyc2VkLnR5cGUgPT09ICdzZXNzaW9uLmNyZWF0ZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhY2luZ0NvbmZpZyA9IHBhcnNlZC5zZXNzaW9uLnRyYWNpbmc7XG4gICAgICAgICAgICAgICAgLy8gVHJ5aW5nIHRvIHR1cm4gb24gdHJhY2luZyBhZnRlciB0aGUgc2Vzc2lvbiBpcyBjcmVhdGVkXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlVHJhY2luZ0NvbmZpZyhzZXNzaW9uQ29uZmlnLnRyYWNpbmcgPz8gJ2F1dG8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnZGlzY29ubmVjdGVkJyxcbiAgICAgICAgICAgICAgICB3ZWJzb2NrZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3Rpb25fY2hhbmdlJywgdGhpcy4jc3RhdGUuc3RhdHVzKTtcbiAgICAgICAgICAgIHRoaXMuX29uQ2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGNvbm5lY3Qob3B0aW9ucykge1xuICAgICAgICBjb25zdCBtb2RlbCA9IG9wdGlvbnMubW9kZWwgPz8gdGhpcy5jdXJyZW50TW9kZWw7XG4gICAgICAgIHRoaXMuY3VycmVudE1vZGVsID0gbW9kZWw7XG4gICAgICAgIHRoaXMuI2FwaUtleSA9IGF3YWl0IHRoaXMuX2dldEFwaUtleShvcHRpb25zKTtcbiAgICAgICAgY29uc3QgdXJsID0gb3B0aW9ucy51cmwgPz9cbiAgICAgICAgICAgIHRoaXMuI3VybCA/P1xuICAgICAgICAgICAgYHdzczovL2FwaS5vcGVuYWkuY29tL3YxL3JlYWx0aW1lP21vZGVsPSR7dGhpcy5jdXJyZW50TW9kZWx9YDtcbiAgICAgICAgdGhpcy4jdXJsID0gdXJsO1xuICAgICAgICBjb25zdCBzZXNzaW9uQ29uZmlnID0ge1xuICAgICAgICAgICAgLi4uKG9wdGlvbnMuaW5pdGlhbFNlc3Npb25Db25maWcgfHwge30pLFxuICAgICAgICAgICAgbW9kZWw6IHRoaXMuY3VycmVudE1vZGVsLFxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuI3NldHVwV2ViU29ja2V0KHJlc29sdmUsIHJlamVjdCwgc2Vzc2lvbkNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVTZXNzaW9uQ29uZmlnKHNlc3Npb25Db25maWcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGFuIGV2ZW50IHRvIHRoZSBSZWFsdGltZSBBUEkuIFRoaXMgd2lsbCBzdHJpbmdpZnkgdGhlIGV2ZW50IGFuZCBzZW5kIGl0IGRpcmVjdGx5IHRvIHRoZVxuICAgICAqIEFQSS4gVGhpcyBjYW4gYmUgdXNlZCBpZiB5b3Ugd2FudCB0byB0YWtlIGNvbnRyb2wgb3ZlciB0aGUgY29ubmVjdGlvbiBhbmQgc2VuZCBldmVudHMgbWFudWFsbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgZXZlbnQgdG8gc2VuZC5cbiAgICAgKi9cbiAgICBzZW5kRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLiNzdGF0ZS53ZWJzb2NrZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2ViU29ja2V0IGlzIG5vdCBjb25uZWN0ZWQuIE1ha2Ugc3VyZSB5b3UgY2FsbCBgY29ubmVjdCgpYCBiZWZvcmUgc2VuZGluZyBldmVudHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jc3RhdGUud2Vic29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoZXZlbnQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uLlxuICAgICAqXG4gICAgICogVGhpcyB3aWxsIGFsc28gcmVzZXQgYW55IGludGVybmFsIGNvbm5lY3Rpb24gdHJhY2tpbmcgdXNlZCBmb3IgaW50ZXJydXB0aW9uIGhhbmRsaW5nLlxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLiNzdGF0ZS53ZWJzb2NrZXQ/LmNsb3NlKCk7XG4gICAgICAgIHRoaXMuI2N1cnJlbnRJdGVtSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2ZpcnN0QXVkaW9UaW1lc3RhbXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2F1ZGlvTGVuZ3RoTXMgPSAwO1xuICAgICAgICB0aGlzLiNjdXJyZW50QXVkaW9Db250ZW50SW5kZXggPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdpbGwgdGhyb3cgYW4gZXJyb3IgYXMgdGhlIFdlYlNvY2tldCB0cmFuc3BvcnQgbGF5ZXIgZG9lcyBub3Qgc3VwcG9ydCBtdXRpbmcuXG4gICAgICovXG4gICAgbXV0ZShfbXV0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXRlIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoZSBXZWJTb2NrZXQgdHJhbnNwb3J0LiBZb3UgaGF2ZSB0byBtdXRlIHRoZSBhdWRpbyBpbnB1dCB5b3Vyc2VsZi4nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhbiBhdWRpbyBidWZmZXIgdG8gdGhlIFJlYWx0aW1lIEFQSS4gVGhpcyBpcyB1c2VkIGZvciB5b3VyIGNsaWVudCB0byBzZW5kIGF1ZGlvIHRvIHRoZVxuICAgICAqIG1vZGVsIHRvIHJlc3BvbmQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXVkaW8gLSBUaGUgYXVkaW8gYnVmZmVyIHRvIHNlbmQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGF1ZGlvIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBzZW5kQXVkaW8oYXVkaW8sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAodGhpcy4jc3RhdGUuc3RhdHVzID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgc3VwZXIuc2VuZEF1ZGlvKGF1ZGlvLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgY2FuY2VsIHJlc3BvbnNlIGV2ZW50IHRvIHRoZSBSZWFsdGltZSBBUEkuIFRoaXMgaXMgdXNlZCB0byBjYW5jZWwgYW4gb25nb2luZ1xuICAgICAqICByZXNwb25zZSB0aGF0IHRoZSBtb2RlbCBpcyBjdXJyZW50bHkgZ2VuZXJhdGluZy5cbiAgICAgKi9cbiAgICBfY2FuY2VsUmVzcG9uc2UoKSB7XG4gICAgICAgIC8vIGNhbmNlbCB0aGUgb25nb2luZyByZXNwb25zZVxuICAgICAgICBpZiAodGhpcy4jb25nb2luZ1Jlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3Jlc3BvbnNlLmNhbmNlbCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuI29uZ29pbmdSZXNwb25zZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERvIE5PVCBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LiBDYWxsIGBpbnRlcnJ1cHQoKWAgaW5zdGVhZCBmb3IgcHJvcGVyIGludGVycnVwdGlvbiBoYW5kbGluZy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gc2VuZCB0aGUgcmlnaHQgZXZlbnRzIHRvIHRoZSBBUEkgdG8gaW5mb3JtIHRoZSBtb2RlbCB0aGF0IHRoZSB1c2VyIGhhc1xuICAgICAqIGludGVycnVwdGVkIHRoZSByZXNwb25zZS4gSXQgbWlnaHQgYmUgb3ZlcnJpZGRlbi9leHRlbmRlZCBieSBhbiBleHRlbmRlZCB0cmFuc3BvcnQgbGF5ZXIuIFNlZVxuICAgICAqIHRoZSBgVHdpbGlvUmVhbHRpbWVUcmFuc3BvcnRMYXllcmAgZm9yIGFuIGV4YW1wbGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxhcHNlZFRpbWUgLSBUaGUgZWxhcHNlZCB0aW1lIHNpbmNlIHRoZSByZXNwb25zZSBzdGFydGVkLlxuICAgICAqL1xuICAgIF9pbnRlcnJ1cHQoZWxhcHNlZFRpbWUsIGNhbmNlbE9uZ29pbmdSZXNwb25zZSA9IHRydWUpIHtcbiAgICAgICAgaWYgKGVsYXBzZWRUaW1lIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGltbWVkaWF0ZWx5IGVtaXQgdGhpcyBldmVudCBzbyB0aGUgY2xpZW50IGNhbiBzdG9wIHBsYXlpbmcgYXVkaW9cbiAgICAgICAgaWYgKGNhbmNlbE9uZ29pbmdSZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy5fY2FuY2VsUmVzcG9uc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLl9hdWRpb0xlbmd0aE1zID8/IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgY29uc3QgYXVkaW9fZW5kX21zID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oTWF0aC5mbG9vcihlbGFwc2VkVGltZSksIGxlbmd0aCkpO1xuICAgICAgICB0aGlzLmVtaXQoJ2F1ZGlvX2ludGVycnVwdGVkJyk7XG4gICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgIHR5cGU6ICdjb252ZXJzYXRpb24uaXRlbS50cnVuY2F0ZScsXG4gICAgICAgICAgICBpdGVtX2lkOiB0aGlzLiNjdXJyZW50SXRlbUlkLFxuICAgICAgICAgICAgY29udGVudF9pbmRleDogdGhpcy4jY3VycmVudEF1ZGlvQ29udGVudEluZGV4LFxuICAgICAgICAgICAgYXVkaW9fZW5kX21zLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJydXB0IHRoZSBvbmdvaW5nIHJlc3BvbnNlLiBUaGlzIG1ldGhvZCBpcyB0cmlnZ2VyZWQgYXV0b21hdGljYWxseSBieSB0aGUgY2xpZW50IHdoZW5cbiAgICAgKiB2b2ljZSBhY3Rpdml0eSBkZXRlY3Rpb24gKFZBRCkgaXMgZW5hYmxlZCAoZGVmYXVsdCkgYXMgd2VsbCBhcyB3aGVuIGFuIG91dHB1dCBndWFyZHJhaWwgZ290XG4gICAgICogdHJpZ2dlcmVkLlxuICAgICAqXG4gICAgICogWW91IGNhbiBhbHNvIGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkgaWYgeW91IHdhbnQgdG8gaW50ZXJydXB0IHRoZSBjb252ZXJzYXRpb24gZm9yIGV4YW1wbGVcbiAgICAgKiBiYXNlZCBvbiBhbiBldmVudCBpbiB0aGUgY2xpZW50LlxuICAgICAqL1xuICAgIGludGVycnVwdChjYW5jZWxPbmdvaW5nUmVzcG9uc2UgPSB0cnVlKSB7XG4gICAgICAgIGlmICghdGhpcy4jY3VycmVudEl0ZW1JZCB8fCB0eXBlb2YgdGhpcy5fZmlyc3RBdWRpb1RpbWVzdGFtcCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbGFwc2VkVGltZSA9IERhdGUubm93KCkgLSB0aGlzLl9maXJzdEF1ZGlvVGltZXN0YW1wO1xuICAgICAgICBpZiAoZWxhcHNlZFRpbWUgPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJydXB0KGVsYXBzZWRUaW1lLCBjYW5jZWxPbmdvaW5nUmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2N1cnJlbnRJdGVtSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2ZpcnN0QXVkaW9UaW1lc3RhbXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2F1ZGlvTGVuZ3RoTXMgPSAwO1xuICAgICAgICB0aGlzLiNjdXJyZW50QXVkaW9Db250ZW50SW5kZXggPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlbmFpUmVhbHRpbWVXZWJzb2NrZXQubWpzLm1hcCIsImltcG9ydCB7IGdldEhhbmRvZmYsIGdldFRyYW5zZmVyTWVzc2FnZSwgTW9kZWxCZWhhdmlvckVycm9yLCBPdXRwdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCwgUnVuQ29udGV4dCwgUnVuVG9vbEFwcHJvdmFsSXRlbSwgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlJztcbmltcG9ydCB7IFJ1bnRpbWVFdmVudEVtaXR0ZXIgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL19zaGltcyc7XG5pbXBvcnQgeyBpc1pvZE9iamVjdCwgdG9TbWFydFN0cmluZyB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvdXRpbHMnO1xuaW1wb3J0IHsgZGVmaW5lUmVhbHRpbWVPdXRwdXRHdWFyZHJhaWwsIGdldFJlYWx0aW1lR3VhcmRyYWlsRmVlZGJhY2tNZXNzYWdlLCBnZXRSZWFsdGltZUd1YXJkcmFpbFNldHRpbmdzLCB9IGZyb20gXCIuL2d1YXJkcmFpbC5tanNcIjtcbmltcG9ydCB7IE9wZW5BSVJlYWx0aW1lV2ViUlRDIH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVXZWJSdGMubWpzXCI7XG5pbXBvcnQgeyBPcGVuQUlSZWFsdGltZVdlYlNvY2tldCB9IGZyb20gXCIuL29wZW5haVJlYWx0aW1lV2Vic29ja2V0Lm1qc1wiO1xuaW1wb3J0IHsgZ2V0TGFzdFRleHRGcm9tQXVkaW9PdXRwdXRNZXNzYWdlLCBoYXNXZWJSVENTdXBwb3J0LCB1cGRhdGVSZWFsdGltZUhpc3RvcnksIH0gZnJvbSBcIi4vdXRpbHMubWpzXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbi8qKlxuICogQSBgUmVhbHRpbWVTZXNzaW9uYCBpcyB0aGUgY29ybmVyIHBpZWNlIG9mIGJ1aWxkaW5nIFZvaWNlIEFnZW50cy4gSXQncyB0aGUgZXF1aXZhbGVudCBvZiBhXG4gKiBSdW5uZXIgaW4gdGV4dC1iYXNlZCBhZ2VudHMgZXhjZXB0IHRoYXQgaXQgYXV0b21hdGljYWxseSBoYW5kbGVzIG11bHRpcGxlIHR1cm5zIGJ5IG1haW50YWluaW5nIGFcbiAqIGNvbm5lY3Rpb24gd2l0aCB0aGUgdW5kZXJseWluZyB0cmFuc3BvcnQgbGF5ZXIuXG4gKlxuICogVGhlIHNlc3Npb24gaGFuZGxlcyBtYW5hZ2luZyB0aGUgbG9jYWwgaGlzdG9yeSBjb3B5LCBleGVjdXRlcyB0b29scywgcnVucyBvdXRwdXQgZ3VhcmRyYWlscywgYW5kXG4gKiBmYWNpbGl0aWVzIGhhbmRvZmZzLlxuICpcbiAqIFRoZSBhY3R1YWwgYXVkaW8gaGFuZGxpbmcgYW5kIGdlbmVyYXRpb24gb2YgbW9kZWwgcmVzcG9uc2VzIGlzIGhhbmRsZWQgYnkgdGhlIHVuZGVybHlpbmdcbiAqIHRyYW5zcG9ydCBsYXllci4gQnkgZGVmYXVsdCBpZiB5b3UgYXJlIHVzaW5nIGEgYnJvd3NlciB3aXRoIFdlYlJUQyBzdXBwb3J0LCB0aGUgc2Vzc2lvbiB3aWxsXG4gKiBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgV2ViUlRDIHZlcnNpb24gb2YgdGhlIE9wZW5BSSBSZWFsdGltZSBBUEkuIE9uIHRoZSBzZXJ2ZXIgb3IgaWYgeW91IHBhc3NcbiAqIGB3ZWJzb2NrZXRgIGFzIHRoZSB0cmFuc3BvcnQgbGF5ZXIsIHRoZSBzZXNzaW9uIHdpbGwgZXN0YWJsaXNoIGEgY29ubmVjdGlvbiB1c2luZyBXZWJTb2NrZXRzLlxuICpcbiAqIEluIHRoZSBjYXNlIG9mIFdlYlJUQywgaW4gdGhlIGJyb3dzZXIsIHRoZSB0cmFuc3BvcnQgbGF5ZXIgd2lsbCBhbHNvIGF1dG9tYXRpY2FsbHkgY29uZmlndXJlIHRoZVxuICogbWljcm9waG9uZSBhbmQgYXVkaW8gb3V0cHV0IHRvIGJlIHVzZWQgYnkgdGhlIHNlc3Npb24uXG4gKlxuICogWW91IGNhbiBhbHNvIGNyZWF0ZSBhIHRyYW5zcG9ydCBsYXllciBpbnN0YW5jZSB5b3Vyc2VsZiBhbmQgcGFzcyBpdCBpbiB0byBoYXZlIG1vcmUgY29udHJvbCBvdmVyXG4gKiB0aGUgY29uZmlndXJhdGlvbiBvciBldmVuIGV4dGVuZCB0aGUgZXhpc3Rpbmcgb25lcy4gQ2hlY2sgb3V0IHRoZSBgVHdpbGlvUmVhbHRpbWVUcmFuc3BvcnRMYXllcmBcbiAqIGZvciBhbiBleGFtcGxlIG9mIGhvdyB0byBjcmVhdGUgYSBjdXN0b20gdHJhbnNwb3J0IGxheWVyLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogY29uc3QgYWdlbnQgPSBuZXcgUmVhbHRpbWVBZ2VudCh7XG4gKiAgIG5hbWU6ICdteS1hZ2VudCcsXG4gKiAgIGluc3RydWN0aW9uczogJ1lvdSBhcmUgYSBoZWxwZnVsIGFzc2lzdGFudCB0aGF0IGNhbiBhbnN3ZXIgcXVlc3Rpb25zIGFuZCBoZWxwIHdpdGggdGFza3MuJyxcbiAqIH0pXG4gKlxuICogY29uc3Qgc2Vzc2lvbiA9IG5ldyBSZWFsdGltZVNlc3Npb24oYWdlbnQpO1xuICogc2Vzc2lvbi5jb25uZWN0KHtcbiAqICAgYXBpS2V5OiAneW91ci1hcGkta2V5JyxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWFsdGltZVNlc3Npb24gZXh0ZW5kcyBSdW50aW1lRXZlbnRFbWl0dGVyIHtcbiAgICBpbml0aWFsQWdlbnQ7XG4gICAgb3B0aW9ucztcbiAgICAjdHJhbnNwb3J0O1xuICAgICNjdXJyZW50QWdlbnQ7XG4gICAgI2N1cnJlbnRUb29scyA9IFtdO1xuICAgICNjb250ZXh0O1xuICAgICNvdXRwdXRHdWFyZHJhaWxzID0gW107XG4gICAgI291dHB1dEd1YXJkcmFpbFNldHRpbmdzO1xuICAgICN0cmFuc2NyaWJlZFRleHREZWx0YXMgPSB7fTtcbiAgICAjaGlzdG9yeSA9IFtdO1xuICAgICNzaG91bGRJbmNsdWRlQXVkaW9EYXRhO1xuICAgICNpbnRlcnJ1cHRlZEJ5R3VhcmRyYWlsID0ge307XG4gICAgI2F1ZGlvU3RhcnRlZCA9IGZhbHNlO1xuICAgIC8vIEtlZXBzIHRyYWNrIG9mIHRoZSBsYXN0IGZ1bGwgc2Vzc2lvbiBjb25maWcgd2Ugc2VudCAoY2FtZWxDYXNlIGtleXMpIHNvIHRoYXRcbiAgICAvLyBzdWJzZXF1ZW50IHVwZGF0ZXMgKGUuZy4gZHVyaW5nIGFnZW50IGhhbmRvZmZzKSBwcmVzZXJ2ZSBwcm9wZXJ0aWVzIHRoYXQgYXJlXG4gICAgLy8gbm90IGV4cGxpY2l0bHkgcmVjYWxjdWxhdGVkIGhlcmUgKHN1Y2ggYXMgaW5wdXRBdWRpb0Zvcm1hdCwgb3V0cHV0QXVkaW9Gb3JtYXQsXG4gICAgLy8gbW9kYWxpdGllcywgc3BlZWQsIHRvb2xDaG9pY2UsIHR1cm5EZXRlY3Rpb24sIGV0Yy4pLiBXaXRob3V0IHRoaXMsIHVwZGF0aW5nXG4gICAgLy8gdGhlIGFnZW50IHdvdWxkIGRyb3AgYXVkaW8gZm9ybWF0IG92ZXJyaWRlcyAoZS5nLiBnNzExX3VsYXcpIGFuZCByZXZlcnQgdG9cbiAgICAvLyB0cmFuc3BvcnQgZGVmYXVsdHMgY2F1c2luZyBpc3N1ZXMgZm9yIGludGVncmF0aW9ucyBsaWtlIFR3aWxpby5cbiAgICAjbGFzdFNlc3Npb25Db25maWcgPSBudWxsO1xuICAgIGNvbnN0cnVjdG9yKGluaXRpYWxBZ2VudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaW5pdGlhbEFnZW50ID0gaW5pdGlhbEFnZW50O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBpZiAoKHR5cGVvZiBvcHRpb25zLnRyYW5zcG9ydCA9PT0gJ3VuZGVmaW5lZCcgJiYgaGFzV2ViUlRDU3VwcG9ydCgpKSB8fFxuICAgICAgICAgICAgb3B0aW9ucy50cmFuc3BvcnQgPT09ICd3ZWJydGMnKSB7XG4gICAgICAgICAgICB0aGlzLiN0cmFuc3BvcnQgPSBuZXcgT3BlbkFJUmVhbHRpbWVXZWJSVEMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zLnRyYW5zcG9ydCA9PT0gJ3dlYnNvY2tldCcgfHxcbiAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLnRyYW5zcG9ydCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuI3RyYW5zcG9ydCA9IG5ldyBPcGVuQUlSZWFsdGltZVdlYlNvY2tldCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4jdHJhbnNwb3J0ID0gb3B0aW9ucy50cmFuc3BvcnQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jY3VycmVudEFnZW50ID0gaW5pdGlhbEFnZW50O1xuICAgICAgICB0aGlzLiNjb250ZXh0ID0gbmV3IFJ1bkNvbnRleHQoe1xuICAgICAgICAgICAgLi4uKG9wdGlvbnMuY29udGV4dCA/PyB7fSksXG4gICAgICAgICAgICBoaXN0b3J5OiB0aGlzLiNoaXN0b3J5LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jb3V0cHV0R3VhcmRyYWlscyA9IChvcHRpb25zLm91dHB1dEd1YXJkcmFpbHMgPz8gW10pLm1hcChkZWZpbmVSZWFsdGltZU91dHB1dEd1YXJkcmFpbCk7XG4gICAgICAgIHRoaXMuI291dHB1dEd1YXJkcmFpbFNldHRpbmdzID0gZ2V0UmVhbHRpbWVHdWFyZHJhaWxTZXR0aW5ncyhvcHRpb25zLm91dHB1dEd1YXJkcmFpbFNldHRpbmdzID8/IHt9KTtcbiAgICAgICAgdGhpcy4jc2hvdWxkSW5jbHVkZUF1ZGlvRGF0YSA9IG9wdGlvbnMuaGlzdG9yeVN0b3JlQXVkaW8gPz8gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSB0cmFuc3BvcnQgbGF5ZXIgdXNlZCBieSB0aGUgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBnZXQgdHJhbnNwb3J0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jdHJhbnNwb3J0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBhZ2VudCBpbiB0aGUgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBnZXQgY3VycmVudEFnZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY3VycmVudEFnZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCB1c2FnZSBvZiB0aGUgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBnZXQgdXNhZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNjb250ZXh0LnVzYWdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBjb250ZXh0IG9mIHRoZSBzZXNzaW9uLlxuICAgICAqL1xuICAgIGdldCBjb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY29udGV4dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgc2Vzc2lvbiBpcyBtdXRlZC4gTWlnaHQgYmUgYG51bGxgIGlmIHRoZSB1bmRlcmx5aW5nIHRyYW5zcG9ydCBsYXllciBkb2VzIG5vdFxuICAgICAqIHN1cHBvcnQgbXV0aW5nLlxuICAgICAqL1xuICAgIGdldCBtdXRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3RyYW5zcG9ydC5tdXRlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGhpc3Rvcnkgb2YgdGhlIHNlc3Npb24uXG4gICAgICovXG4gICAgZ2V0IGhpc3RvcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNoaXN0b3J5O1xuICAgIH1cbiAgICBhc3luYyAjc2V0Q3VycmVudEFnZW50KGFnZW50KSB7XG4gICAgICAgIHRoaXMuI2N1cnJlbnRBZ2VudCA9IGFnZW50O1xuICAgICAgICBjb25zdCBoYW5kb2ZmcyA9IHRoaXMuI2N1cnJlbnRBZ2VudC5oYW5kb2Zmcy5tYXAoZ2V0SGFuZG9mZik7XG4gICAgICAgIGNvbnN0IGhhbmRvZmZUb29scyA9IGhhbmRvZmZzLm1hcCgoaGFuZG9mZikgPT4gaGFuZG9mZi5nZXRIYW5kb2ZmQXNGdW5jdGlvblRvb2woKSk7XG4gICAgICAgIGNvbnN0IGFsbFRvb2xzID0gYXdhaXQgdGhpcy4jY3VycmVudEFnZW50LmdldEFsbFRvb2xzKHRoaXMuI2NvbnRleHQpO1xuICAgICAgICB0aGlzLiNjdXJyZW50VG9vbHMgPSBbXG4gICAgICAgICAgICAuLi5hbGxUb29scy5maWx0ZXIoKHRvb2wpID0+IHRvb2wudHlwZSA9PT0gJ2Z1bmN0aW9uJyksXG4gICAgICAgICAgICAuLi5oYW5kb2ZmVG9vbHMsXG4gICAgICAgIF07XG4gICAgfVxuICAgIGFzeW5jICNnZXRTZXNzaW9uQ29uZmlnKGFkZGl0aW9uYWxDb25maWcgPSB7fSkge1xuICAgICAgICBjb25zdCBpbnN0cnVjdGlvbnMgPSBhd2FpdCB0aGlzLiNjdXJyZW50QWdlbnQuZ2V0U3lzdGVtUHJvbXB0KHRoaXMuI2NvbnRleHQpO1xuICAgICAgICBjb25zdCB0cmFjaW5nQ29uZmlnID0gdGhpcy5vcHRpb25zXG4gICAgICAgICAgICAudHJhY2luZ0Rpc2FibGVkXG4gICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgIDogdGhpcy5vcHRpb25zLndvcmtmbG93TmFtZVxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICB3b3JrZmxvd19uYW1lOiB0aGlzLm9wdGlvbnMud29ya2Zsb3dOYW1lLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6ICdhdXRvJztcbiAgICAgICAgaWYgKHRyYWNpbmdDb25maWcgIT09IG51bGwgJiYgdHJhY2luZ0NvbmZpZyAhPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmdyb3VwSWQpIHtcbiAgICAgICAgICAgICAgICB0cmFjaW5nQ29uZmlnLmdyb3VwX2lkID0gdGhpcy5vcHRpb25zLmdyb3VwSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRyYWNlTWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICB0cmFjaW5nQ29uZmlnLm1ldGFkYXRhID0gdGhpcy5vcHRpb25zLnRyYWNlTWV0YWRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5vcHRpb25zLmdyb3VwSWQgfHwgdGhpcy5vcHRpb25zLnRyYWNlTWV0YWRhdGEpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdJbiBvcmRlciB0byBzZXQgdHJhY2VNZXRhZGF0YSBvciBhIGdyb3VwSWQgeW91IG5lZWQgdG8gc3BlY2lmeSBhIHdvcmtmbG93TmFtZS4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdGFydCBmcm9tIGFueSBwcmV2aW91c2x5LXNlbnQgY29uZmlnIChzbyB3ZSBwcmVzZXJ2ZSB2YWx1ZXMgbGlrZSBhdWRpbyBmb3JtYXRzKVxuICAgICAgICAvLyBhbmQgdGhlIG9yaWdpbmFsIG9wdGlvbnMuY29uZmlnIHByb3ZpZGVkIGJ5IHRoZSB1c2VyLiBQcmVmZXJlbmNlIG9yZGVyOlxuICAgICAgICAvLyAxLiBMYXN0IHNlc3Npb24gY29uZmlnIHdlIHNlbnQgKCNsYXN0U2Vzc2lvbkNvbmZpZylcbiAgICAgICAgLy8gMi4gT3JpZ2luYWwgb3B0aW9ucy5jb25maWdcbiAgICAgICAgLy8gMy4gQWRkaXRpb25hbCBjb25maWcgcGFzc2VkIGludG8gdGhpcyBpbnZvY2F0aW9uIChleHBsaWNpdCBvdmVycmlkZXMpXG4gICAgICAgIC8vIEZpbmFsbHkgd2Ugb3ZlcndyaXRlIGR5bmFtaWMgZmllbGRzIChpbnN0cnVjdGlvbnMsIHZvaWNlLCBtb2RlbCwgdG9vbHMsIHRyYWNpbmcpXG4gICAgICAgIC8vIHRvIGVuc3VyZSB0aGV5IGFsd2F5cyByZWZsZWN0IHRoZSBjdXJyZW50IGFnZW50ICYgcnVudGltZSBzdGF0ZS5cbiAgICAgICAgY29uc3QgYmFzZSA9IHtcbiAgICAgICAgICAgIC4uLih0aGlzLiNsYXN0U2Vzc2lvbkNvbmZpZyA/PyB7fSksXG4gICAgICAgICAgICAuLi4odGhpcy5vcHRpb25zLmNvbmZpZyA/PyB7fSksXG4gICAgICAgICAgICAuLi4oYWRkaXRpb25hbENvbmZpZyA/PyB7fSksXG4gICAgICAgIH07XG4gICAgICAgIC8vIE5vdGU6IENlcnRhaW4gZmllbGRzIGNhbm5vdCBiZSB1cGRhdGVkIGFmdGVyIHRoZSBzZXNzaW9uIGJlZ2lucywgc3VjaCBhcyB2b2ljZSBhbmQgbW9kZWxcbiAgICAgICAgY29uc3QgZnVsbENvbmZpZyA9IHtcbiAgICAgICAgICAgIC4uLmJhc2UsXG4gICAgICAgICAgICBpbnN0cnVjdGlvbnMsXG4gICAgICAgICAgICB2b2ljZTogdGhpcy4jY3VycmVudEFnZW50LnZvaWNlLFxuICAgICAgICAgICAgbW9kZWw6IHRoaXMub3B0aW9ucy5tb2RlbCxcbiAgICAgICAgICAgIHRvb2xzOiB0aGlzLiNjdXJyZW50VG9vbHMsXG4gICAgICAgICAgICB0cmFjaW5nOiB0cmFjaW5nQ29uZmlnLFxuICAgICAgICB9O1xuICAgICAgICAvLyBVcGRhdGUgb3VyIGNhY2hlIHNvIHN1YnNlcXVlbnQgdXBkYXRlcyBpbmhlcml0IHRoZSBmdWxsIHNldCBpbmNsdWRpbmcgYW55XG4gICAgICAgIC8vIGR5bmFtaWMgZmllbGRzIHdlIGp1c3Qgb3Zlcndyb3RlLlxuICAgICAgICB0aGlzLiNsYXN0U2Vzc2lvbkNvbmZpZyA9IGZ1bGxDb25maWc7XG4gICAgICAgIHJldHVybiBmdWxsQ29uZmlnO1xuICAgIH1cbiAgICBhc3luYyB1cGRhdGVBZ2VudChuZXdBZ2VudCkge1xuICAgICAgICB0aGlzLiNjdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfaGFuZG9mZicsIHRoaXMuI2NvbnRleHQsIG5ld0FnZW50KTtcbiAgICAgICAgdGhpcy5lbWl0KCdhZ2VudF9oYW5kb2ZmJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCBuZXdBZ2VudCk7XG4gICAgICAgIGF3YWl0IHRoaXMuI3NldEN1cnJlbnRBZ2VudChuZXdBZ2VudCk7XG4gICAgICAgIGF3YWl0IHRoaXMuI3RyYW5zcG9ydC51cGRhdGVTZXNzaW9uQ29uZmlnKGF3YWl0IHRoaXMuI2dldFNlc3Npb25Db25maWcoKSk7XG4gICAgICAgIHJldHVybiBuZXdBZ2VudDtcbiAgICB9XG4gICAgYXN5bmMgI2hhbmRsZUhhbmRvZmYodG9vbENhbGwsIGhhbmRvZmYpIHtcbiAgICAgICAgY29uc3QgbmV3QWdlbnQgPSAoYXdhaXQgaGFuZG9mZi5vbkludm9rZUhhbmRvZmYodGhpcy4jY29udGV4dCwgdG9vbENhbGwuYXJndW1lbnRzKSk7XG4gICAgICAgIHRoaXMuI2N1cnJlbnRBZ2VudC5lbWl0KCdhZ2VudF9oYW5kb2ZmJywgdGhpcy4jY29udGV4dCwgbmV3QWdlbnQpO1xuICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X2hhbmRvZmYnLCB0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQsIG5ld0FnZW50KTtcbiAgICAgICAgLy8gdXBkYXRlIHNlc3Npb24gd2l0aCBuZXcgYWdlbnRcbiAgICAgICAgYXdhaXQgdGhpcy4jc2V0Q3VycmVudEFnZW50KG5ld0FnZW50KTtcbiAgICAgICAgYXdhaXQgdGhpcy4jdHJhbnNwb3J0LnVwZGF0ZVNlc3Npb25Db25maWcoYXdhaXQgdGhpcy4jZ2V0U2Vzc2lvbkNvbmZpZygpKTtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gZ2V0VHJhbnNmZXJNZXNzYWdlKG5ld0FnZW50KTtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0LnNlbmRGdW5jdGlvbkNhbGxPdXRwdXQodG9vbENhbGwsIG91dHB1dCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXdBZ2VudDtcbiAgICB9XG4gICAgYXN5bmMgI2hhbmRsZUZ1bmN0aW9uVG9vbENhbGwodG9vbENhbGwsIHRvb2wpIHtcbiAgICAgICAgdGhpcy4jY29udGV4dC5jb250ZXh0Lmhpc3RvcnkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuI2hpc3RvcnkpKTsgLy8gZGVlcCBjb3B5IG9mIHRoZSBoaXN0b3J5XG4gICAgICAgIGxldCBwYXJzZWRBcmdzID0gdG9vbENhbGwuYXJndW1lbnRzO1xuICAgICAgICBpZiAodG9vbC5wYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBpZiAoaXNab2RPYmplY3QodG9vbC5wYXJhbWV0ZXJzKSkge1xuICAgICAgICAgICAgICAgIHBhcnNlZEFyZ3MgPSB0b29sLnBhcmFtZXRlcnMucGFyc2UocGFyc2VkQXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJzZWRBcmdzID0gSlNPTi5wYXJzZShwYXJzZWRBcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZWVkc0FwcHJvdmFsID0gYXdhaXQgdG9vbC5uZWVkc0FwcHJvdmFsKHRoaXMuI2NvbnRleHQsIHBhcnNlZEFyZ3MsIHRvb2xDYWxsLmNhbGxJZCk7XG4gICAgICAgIGlmIChuZWVkc0FwcHJvdmFsKSB7XG4gICAgICAgICAgICBjb25zdCBhcHByb3ZhbCA9IHRoaXMuY29udGV4dC5pc1Rvb2xBcHByb3ZlZCh7XG4gICAgICAgICAgICAgICAgdG9vbE5hbWU6IHRvb2wubmFtZSxcbiAgICAgICAgICAgICAgICBjYWxsSWQ6IHRvb2xDYWxsLmNhbGxJZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGFwcHJvdmFsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfdG9vbF9zdGFydCcsIHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudCwgdG9vbCwge1xuICAgICAgICAgICAgICAgICAgICB0b29sQ2FsbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLiNjdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfdG9vbF9zdGFydCcsIHRoaXMuI2NvbnRleHQsIHRvb2wsIHtcbiAgICAgICAgICAgICAgICAgICAgdG9vbENhbGwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gJ1Rvb2wgZXhlY3V0aW9uIHdhcyBub3QgYXBwcm92ZWQuJztcbiAgICAgICAgICAgICAgICB0aGlzLiN0cmFuc3BvcnQuc2VuZEZ1bmN0aW9uQ2FsbE91dHB1dCh0b29sQ2FsbCwgcmVzdWx0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X3Rvb2xfZW5kJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCB0b29sLCByZXN1bHQsIHsgdG9vbENhbGwgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy4jY3VycmVudEFnZW50LmVtaXQoJ2FnZW50X3Rvb2xfZW5kJywgdGhpcy4jY29udGV4dCwgdG9vbCwgcmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2xDYWxsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcHByb3ZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3Rvb2xfYXBwcm92YWxfcmVxdWVzdGVkJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmdW5jdGlvbl9hcHByb3ZhbCcsXG4gICAgICAgICAgICAgICAgICAgIHRvb2wsXG4gICAgICAgICAgICAgICAgICAgIGFwcHJvdmFsSXRlbTogbmV3IFJ1blRvb2xBcHByb3ZhbEl0ZW0odG9vbENhbGwsIHRoaXMuI2N1cnJlbnRBZ2VudCksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfdG9vbF9zdGFydCcsIHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudCwgdG9vbCwge1xuICAgICAgICAgICAgdG9vbENhbGwsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiNjdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfdG9vbF9zdGFydCcsIHRoaXMuI2NvbnRleHQsIHRvb2wsIHtcbiAgICAgICAgICAgIHRvb2xDYWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jY29udGV4dC5jb250ZXh0Lmhpc3RvcnkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuI2hpc3RvcnkpKTsgLy8gZGVlcCBjb3B5IG9mIHRoZSBoaXN0b3J5XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRvb2wuaW52b2tlKHRoaXMuI2NvbnRleHQsIHRvb2xDYWxsLmFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnN0IHN0cmluZ1Jlc3VsdCA9IHRvU21hcnRTdHJpbmcocmVzdWx0KTtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0LnNlbmRGdW5jdGlvbkNhbGxPdXRwdXQodG9vbENhbGwsIHN0cmluZ1Jlc3VsdCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfdG9vbF9lbmQnLCB0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQsIHRvb2wsIHN0cmluZ1Jlc3VsdCwgeyB0b29sQ2FsbCB9KTtcbiAgICAgICAgdGhpcy4jY3VycmVudEFnZW50LmVtaXQoJ2FnZW50X3Rvb2xfZW5kJywgdGhpcy4jY29udGV4dCwgdG9vbCwgc3RyaW5nUmVzdWx0LCB7IHRvb2xDYWxsIH0pO1xuICAgIH1cbiAgICBhc3luYyAjaGFuZGxlRnVuY3Rpb25DYWxsKHRvb2xDYWxsKSB7XG4gICAgICAgIGNvbnN0IGhhbmRvZmZNYXAgPSBuZXcgTWFwKHRoaXMuI2N1cnJlbnRBZ2VudC5oYW5kb2Zmc1xuICAgICAgICAgICAgLm1hcChnZXRIYW5kb2ZmKVxuICAgICAgICAgICAgLm1hcCgoaGFuZG9mZikgPT4gW2hhbmRvZmYudG9vbE5hbWUsIGhhbmRvZmZdKSk7XG4gICAgICAgIGNvbnN0IGFsbFRvb2xzID0gYXdhaXQgdGhpcy4jY3VycmVudEFnZW50LmdldEFsbFRvb2xzKHRoaXMuI2NvbnRleHQpO1xuICAgICAgICBjb25zdCBmdW5jdGlvblRvb2xNYXAgPSBuZXcgTWFwKGFsbFRvb2xzLm1hcCgodG9vbCkgPT4gW3Rvb2wubmFtZSwgdG9vbF0pKTtcbiAgICAgICAgY29uc3QgcG9zc2libGVIYW5kb2ZmID0gaGFuZG9mZk1hcC5nZXQodG9vbENhbGwubmFtZSk7XG4gICAgICAgIGlmIChwb3NzaWJsZUhhbmRvZmYpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI2hhbmRsZUhhbmRvZmYodG9vbENhbGwsIHBvc3NpYmxlSGFuZG9mZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmdW5jdGlvblRvb2wgPSBmdW5jdGlvblRvb2xNYXAuZ2V0KHRvb2xDYWxsLm5hbWUpO1xuICAgICAgICAgICAgaWYgKGZ1bmN0aW9uVG9vbCAmJiBmdW5jdGlvblRvb2wudHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuI2hhbmRsZUZ1bmN0aW9uVG9vbENhbGwodG9vbENhbGwsIGZ1bmN0aW9uVG9vbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKGBUb29sICR7dG9vbENhbGwubmFtZX0gbm90IGZvdW5kYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgI3J1bk91dHB1dEd1YXJkcmFpbHMob3V0cHV0LCByZXNwb25zZUlkLCBpdGVtSWQpIHtcbiAgICAgICAgaWYgKHRoaXMuI291dHB1dEd1YXJkcmFpbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZ3VhcmRyYWlsQXJncyA9IHtcbiAgICAgICAgICAgIGFnZW50OiB0aGlzLiNjdXJyZW50QWdlbnQsXG4gICAgICAgICAgICBhZ2VudE91dHB1dDogb3V0cHV0LFxuICAgICAgICAgICAgY29udGV4dDogdGhpcy4jY29udGV4dCxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKHRoaXMuI291dHB1dEd1YXJkcmFpbHMubWFwKChndWFyZHJhaWwpID0+IGd1YXJkcmFpbC5ydW4oZ3VhcmRyYWlsQXJncykpKTtcbiAgICAgICAgY29uc3QgZmlyc3RUcmlwd2lyZVRyaWdnZXJlZCA9IHJlc3VsdHMuZmluZCgocmVzdWx0KSA9PiByZXN1bHQub3V0cHV0LnRyaXB3aXJlVHJpZ2dlcmVkKTtcbiAgICAgICAgaWYgKGZpcnN0VHJpcHdpcmVUcmlnZ2VyZWQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgZW5zdXJlcyB0aGF0IGlmIG9uZSBndWFyZHJhaWwgYWxyZWFkeSB0cmlwcyBhbmQgd2UgYXJlIGluIHRoZSBtaWRkbGUgb2YgYW5vdGhlclxuICAgICAgICAgICAgLy8gZ3VhcmRyYWlsIHJ1biwgd2UgZG9uJ3QgdHJpcCBhZ2FpblxuICAgICAgICAgICAgaWYgKHRoaXMuI2ludGVycnVwdGVkQnlHdWFyZHJhaWxbcmVzcG9uc2VJZF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLiNpbnRlcnJ1cHRlZEJ5R3VhcmRyYWlsW3Jlc3BvbnNlSWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IE91dHB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkKGBPdXRwdXQgZ3VhcmRyYWlsIHRyaWdnZXJlZDogJHtKU09OLnN0cmluZ2lmeShmaXJzdFRyaXB3aXJlVHJpZ2dlcmVkLm91dHB1dC5vdXRwdXRJbmZvKX1gLCBmaXJzdFRyaXB3aXJlVHJpZ2dlcmVkKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZ3VhcmRyYWlsX3RyaXBwZWQnLCB0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQsIGVycm9yLCB7XG4gICAgICAgICAgICAgICAgaXRlbUlkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmludGVycnVwdCgpO1xuICAgICAgICAgICAgY29uc3QgZmVlZGJhY2tUZXh0ID0gZ2V0UmVhbHRpbWVHdWFyZHJhaWxGZWVkYmFja01lc3NhZ2UoZmlyc3RUcmlwd2lyZVRyaWdnZXJlZCk7XG4gICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKGZlZWRiYWNrVGV4dCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgI3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJyonLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgndHJhbnNwb3J0X2V2ZW50JywgZXZlbnQpO1xuICAgICAgICAgICAgLy8gSGFuZGxlIGNvbXBsZXRlZCB1c2VyIHRyYW5zY3JpcHRpb24gZXZlbnRzXG4gICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NvbnZlcnNhdGlvbi5pdGVtLmlucHV0X2F1ZGlvX3RyYW5zY3JpcHRpb24uY29tcGxldGVkJykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlZEV2ZW50ID0gZXZlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2hpc3RvcnkgPSB1cGRhdGVSZWFsdGltZUhpc3RvcnkodGhpcy4jaGlzdG9yeSwgY29tcGxldGVkRXZlbnQsIHRoaXMuI3Nob3VsZEluY2x1ZGVBdWRpb0RhdGEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNjb250ZXh0LmNvbnRleHQuaGlzdG9yeSA9IHRoaXMuI2hpc3Rvcnk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaGlzdG9yeV91cGRhdGVkJywgdGhpcy4jaGlzdG9yeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ2F1ZGlvJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuI2F1ZGlvU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuI2F1ZGlvU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdhdWRpb19zdGFydCcsIHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2F1ZGlvJywgZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0Lm9uKCd0dXJuX3N0YXJ0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNhdWRpb1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfc3RhcnQnLCB0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQpO1xuICAgICAgICAgICAgdGhpcy4jY3VycmVudEFnZW50LmVtaXQoJ2FnZW50X3N0YXJ0JywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbigndHVybl9kb25lJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gZXZlbnQucmVzcG9uc2Uub3V0cHV0W2V2ZW50LnJlc3BvbnNlLm91dHB1dC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGNvbnN0IHRleHRPdXRwdXQgPSBnZXRMYXN0VGV4dEZyb21BdWRpb091dHB1dE1lc3NhZ2UoaXRlbSkgPz8gJyc7XG4gICAgICAgICAgICBjb25zdCBpdGVtSWQgPSBpdGVtPy5pZCA/PyAnJztcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfZW5kJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCB0ZXh0T3V0cHV0KTtcbiAgICAgICAgICAgIHRoaXMuI2N1cnJlbnRBZ2VudC5lbWl0KCdhZ2VudF9lbmQnLCB0aGlzLiNjb250ZXh0LCB0ZXh0T3V0cHV0KTtcbiAgICAgICAgICAgIHRoaXMuI3J1bk91dHB1dEd1YXJkcmFpbHModGV4dE91dHB1dCwgZXZlbnQucmVzcG9uc2UuaWQsIGl0ZW1JZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ2F1ZGlvX2RvbmUnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy4jYXVkaW9TdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jYXVkaW9TdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2F1ZGlvX3N0b3BwZWQnLCB0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGxhc3RSdW5JbmRleCA9IDA7XG4gICAgICAgIGxldCBsYXN0SXRlbUlkO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ2F1ZGlvX3RyYW5zY3JpcHRfZGVsdGEnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBldmVudC5kZWx0YTtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtSWQgPSBldmVudC5pdGVtSWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VJZCA9IGV2ZW50LnJlc3BvbnNlSWQ7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RJdGVtSWQgIT09IGl0ZW1JZCkge1xuICAgICAgICAgICAgICAgICAgICBsYXN0SXRlbUlkID0gaXRlbUlkO1xuICAgICAgICAgICAgICAgICAgICBsYXN0UnVuSW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VGV4dCA9IHRoaXMuI3RyYW5zY3JpYmVkVGV4dERlbHRhc1tpdGVtSWRdID8/ICcnO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RleHQgPSBjdXJyZW50VGV4dCArIGRlbHRhO1xuICAgICAgICAgICAgICAgIHRoaXMuI3RyYW5zY3JpYmVkVGV4dERlbHRhc1tpdGVtSWRdID0gbmV3VGV4dDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4jb3V0cHV0R3VhcmRyYWlsU2V0dGluZ3MuZGVib3VuY2VUZXh0TGVuZ3RoIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1J1bkluZGV4ID0gTWF0aC5mbG9vcihuZXdUZXh0Lmxlbmd0aCAvIHRoaXMuI291dHB1dEd1YXJkcmFpbFNldHRpbmdzLmRlYm91bmNlVGV4dExlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1J1bkluZGV4ID4gbGFzdFJ1bkluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RSdW5JbmRleCA9IG5ld1J1bkluZGV4O1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCBjYW5jZWwgZXhpc3RpbmcgcnVucyBiZWNhdXNlIHdlIHdhbnQgdGhlIGZpcnN0IG9uZSB0byBmYWlsIHRvIGZhaWxcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHRyYW5zcG9ydCBsYXllciBzaG91bGQgdXBvbiBmYWlsdXJlIGhhbmRsZSB0aGUgaW50ZXJydXB0aW9uIGFuZCBzdG9wIHRoZSBtb2RlbFxuICAgICAgICAgICAgICAgICAgICAvLyBmcm9tIGdlbmVyYXRpbmcgZnVydGhlclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNydW5PdXRwdXRHdWFyZHJhaWxzKG5ld1RleHQsIHJlc3BvbnNlSWQsIGl0ZW1JZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ2l0ZW1fdXBkYXRlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzTmV3ID0gIXRoaXMuI2hpc3Rvcnkuc29tZSgoaXRlbSkgPT4gaXRlbS5pdGVtSWQgPT09IGV2ZW50Lml0ZW1JZCk7XG4gICAgICAgICAgICAgICAgdGhpcy4jaGlzdG9yeSA9IHVwZGF0ZVJlYWx0aW1lSGlzdG9yeSh0aGlzLiNoaXN0b3J5LCBldmVudCwgdGhpcy4jc2hvdWxkSW5jbHVkZUF1ZGlvRGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy4jY29udGV4dC5jb250ZXh0Lmhpc3RvcnkgPSB0aGlzLiNoaXN0b3J5O1xuICAgICAgICAgICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGRlZEl0ZW0gPSB0aGlzLiNoaXN0b3J5LmZpbmQoKGl0ZW0pID0+IGl0ZW0uaXRlbUlkID09PSBldmVudC5pdGVtSWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWRkZWRJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2hpc3RvcnlfYWRkZWQnLCBhZGRlZEl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaGlzdG9yeV91cGRhdGVkJywgdGhpcy4jaGlzdG9yeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbignaXRlbV9kZWxldGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuI2hpc3RvcnkgPSB0aGlzLiNoaXN0b3J5LmZpbHRlcigoaXRlbSkgPT4gaXRlbS5pdGVtSWQgIT09IGV2ZW50Lml0ZW1JZCk7XG4gICAgICAgICAgICAgICAgdGhpcy4jY29udGV4dC5jb250ZXh0Lmhpc3RvcnkgPSB0aGlzLiNoaXN0b3J5O1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaGlzdG9yeV91cGRhdGVkJywgdGhpcy4jaGlzdG9yeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbignZnVuY3Rpb25fY2FsbCcsIGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLiNoYW5kbGVGdW5jdGlvbkNhbGwoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciBoYW5kbGluZyBmdW5jdGlvbiBjYWxsJywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0Lm9uKCd1c2FnZV91cGRhdGUnLCAodXNhZ2UpID0+IHtcbiAgICAgICAgICAgIHRoaXMuI2NvbnRleHQudXNhZ2UuYWRkKHVzYWdlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbignYXVkaW9faW50ZXJydXB0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy4jYXVkaW9TdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jYXVkaW9TdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2F1ZGlvX2ludGVycnVwdGVkJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25uZWN0IHRvIHRoZSBzZXNzaW9uLiBUaGlzIHdpbGwgZXN0YWJsaXNoIHRoZSBjb25uZWN0aW9uIHRvIHRoZSB1bmRlcmx5aW5nIHRyYW5zcG9ydCBsYXllclxuICAgICAqIGFuZCBzdGFydCB0aGUgc2Vzc2lvbi5cbiAgICAgKlxuICAgICAqIEFmdGVyIGNvbm5lY3RpbmcsIHRoZSBzZXNzaW9uIHdpbGwgYWxzbyBlbWl0IGEgYGhpc3RvcnlfdXBkYXRlZGAgZXZlbnQgd2l0aCBhbiBlbXB0eSBoaXN0b3J5LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgYXN5bmMgY29ubmVjdChvcHRpb25zKSB7XG4gICAgICAgIC8vIG1ha2VzIHN1cmUgdGhlIGN1cnJlbnQgYWdlbnQgaXMgY29ycmVjdGx5IHNldCBhbmQgbG9hZHMgdGhlIHRvb2xzXG4gICAgICAgIGF3YWl0IHRoaXMuI3NldEN1cnJlbnRBZ2VudCh0aGlzLmluaXRpYWxBZ2VudCk7XG4gICAgICAgIHRoaXMuI3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuI3RyYW5zcG9ydC5jb25uZWN0KHtcbiAgICAgICAgICAgIGFwaUtleTogb3B0aW9ucy5hcGlLZXkgPz8gdGhpcy5vcHRpb25zLmFwaUtleSxcbiAgICAgICAgICAgIG1vZGVsOiB0aGlzLm9wdGlvbnMubW9kZWwsXG4gICAgICAgICAgICB1cmw6IG9wdGlvbnMudXJsLFxuICAgICAgICAgICAgaW5pdGlhbFNlc3Npb25Db25maWc6IGF3YWl0IHRoaXMuI2dldFNlc3Npb25Db25maWcodGhpcy5vcHRpb25zLmNvbmZpZyksXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBFbnN1cmUgdGhlIGNhY2hlZCBsYXN0U2Vzc2lvbkNvbmZpZyBpbmNsdWRlcyBldmVyeXRoaW5nIHBhc3NlZCBhcyB0aGUgaW5pdGlhbCBzZXNzaW9uIGNvbmZpZ1xuICAgICAgICAvLyAodGhlIGNhbGwgYWJvdmUgYWxyZWFkeSBzZXQgaXQgdmlhICNnZXRTZXNzaW9uQ29uZmlnIGJ1dCBpbiBjYXNlIGFkZGl0aW9uYWwgb3ZlcnJpZGVzIHdlcmVcbiAgICAgICAgLy8gcGFzc2VkIGRpcmVjdGx5IGhlcmUgaW4gdGhlIGZ1dHVyZSB3ZSBjb3VsZCBtZXJnZSB0aGVtKS4gRm9yIG5vdyBpdCdzIGEgbm8tb3AuXG4gICAgICAgIHRoaXMuI2hpc3RvcnkgPSBbXTtcbiAgICAgICAgdGhpcy5lbWl0KCdoaXN0b3J5X3VwZGF0ZWQnLCB0aGlzLiNoaXN0b3J5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBoaXN0b3J5IG9mIHRoZSBzZXNzaW9uLlxuICAgICAqIEBwYXJhbSBuZXdIaXN0b3J5IC0gVGhlIG5ldyBoaXN0b3J5IHRvIHNldC5cbiAgICAgKi9cbiAgICB1cGRhdGVIaXN0b3J5KG5ld0hpc3RvcnkpIHtcbiAgICAgICAgbGV0IHVwZGF0ZWRIaXN0b3J5O1xuICAgICAgICBpZiAodHlwZW9mIG5ld0hpc3RvcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHVwZGF0ZWRIaXN0b3J5ID0gbmV3SGlzdG9yeSh0aGlzLiNoaXN0b3J5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHVwZGF0ZWRIaXN0b3J5ID0gbmV3SGlzdG9yeTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiN0cmFuc3BvcnQucmVzZXRIaXN0b3J5KHRoaXMuI2hpc3RvcnksIHVwZGF0ZWRIaXN0b3J5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhIG1lc3NhZ2UgdG8gdGhlIHNlc3Npb24uXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgbWVzc2FnZSB0byBzZW5kLlxuICAgICAqIEBwYXJhbSBvdGhlckV2ZW50RGF0YSAtIEFkZGl0aW9uYWwgZXZlbnQgZGF0YSB0byBzZW5kLlxuICAgICAqL1xuICAgIHNlbmRNZXNzYWdlKG1lc3NhZ2UsIG90aGVyRXZlbnREYXRhID0ge30pIHtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0LnNlbmRNZXNzYWdlKG1lc3NhZ2UsIG90aGVyRXZlbnREYXRhKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXV0ZSB0aGUgc2Vzc2lvbi5cbiAgICAgKiBAcGFyYW0gbXV0ZWQgLSBXaGV0aGVyIHRvIG11dGUgdGhlIHNlc3Npb24uXG4gICAgICovXG4gICAgbXV0ZShtdXRlZCkge1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQubXV0ZShtdXRlZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc2Nvbm5lY3QgZnJvbSB0aGUgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy4jaW50ZXJydXB0ZWRCeUd1YXJkcmFpbCA9IHt9O1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQuY2xvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhdWRpbyB0byB0aGUgc2Vzc2lvbi5cbiAgICAgKiBAcGFyYW0gYXVkaW8gLSBUaGUgYXVkaW8gdG8gc2VuZC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5jb21taXQgLSBXaGV0aGVyIHRvIGZpbmlzaCB0aGUgdHVybiB3aXRoIHRoaXMgYXVkaW8uXG4gICAgICovXG4gICAgc2VuZEF1ZGlvKGF1ZGlvLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0LnNlbmRBdWRpbyhhdWRpbywgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludGVycnVwdCB0aGUgc2Vzc2lvbiBhcnRpZmljaWFsbHkgZm9yIGV4YW1wbGUgaWYgeW91IHdhbnQgdG8gYnVpbGQgYSBcInN0b3AgdGFsa2luZ1wiXG4gICAgICogYnV0dG9uLlxuICAgICAqL1xuICAgIGludGVycnVwdCgpIHtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0LmludGVycnVwdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHByb3ZlIGEgdG9vbCBjYWxsLiBUaGlzIHdpbGwgYWxzbyB0cmlnZ2VyIHRoZSB0b29sIGNhbGwgdG8gdGhlIGFnZW50LlxuICAgICAqIEBwYXJhbSBhcHByb3ZhbEl0ZW0gLSBUaGUgYXBwcm92YWwgaXRlbSB0byBhcHByb3ZlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmFsd2F5c0FwcHJvdmUgLSBXaGV0aGVyIHRvIGFsd2F5cyBhcHByb3ZlIHRoZSB0b29sIGNhbGwuXG4gICAgICovXG4gICAgYXN5bmMgYXBwcm92ZShhcHByb3ZhbEl0ZW0sIG9wdGlvbnMgPSB7IGFsd2F5c0FwcHJvdmU6IGZhbHNlIH0pIHtcbiAgICAgICAgdGhpcy4jY29udGV4dC5hcHByb3ZlVG9vbChhcHByb3ZhbEl0ZW0sIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB0b29sID0gdGhpcy4jY3VycmVudEFnZW50LnRvb2xzLmZpbmQoKHRvb2wpID0+IHRvb2wubmFtZSA9PT0gYXBwcm92YWxJdGVtLnJhd0l0ZW0ubmFtZSk7XG4gICAgICAgIGlmICh0b29sICYmXG4gICAgICAgICAgICB0b29sLnR5cGUgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIGFwcHJvdmFsSXRlbS5yYXdJdGVtLnR5cGUgPT09ICdmdW5jdGlvbl9jYWxsJykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy4jaGFuZGxlRnVuY3Rpb25Ub29sQ2FsbChhcHByb3ZhbEl0ZW0ucmF3SXRlbSwgdG9vbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKGBUb29sICR7YXBwcm92YWxJdGVtLnJhd0l0ZW0ubmFtZX0gbm90IGZvdW5kYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVqZWN0IGEgdG9vbCBjYWxsLiBUaGlzIHdpbGwgYWxzbyB0cmlnZ2VyIHRoZSB0b29sIGNhbGwgdG8gdGhlIGFnZW50LlxuICAgICAqIEBwYXJhbSBhcHByb3ZhbEl0ZW0gLSBUaGUgYXBwcm92YWwgaXRlbSB0byByZWplY3QuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBBZGRpdGlvbmFsIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYWx3YXlzUmVqZWN0IC0gV2hldGhlciB0byBhbHdheXMgcmVqZWN0IHRoZSB0b29sIGNhbGwuXG4gICAgICovXG4gICAgYXN5bmMgcmVqZWN0KGFwcHJvdmFsSXRlbSwgb3B0aW9ucyA9IHsgYWx3YXlzUmVqZWN0OiBmYWxzZSB9KSB7XG4gICAgICAgIHRoaXMuI2NvbnRleHQucmVqZWN0VG9vbChhcHByb3ZhbEl0ZW0sIG9wdGlvbnMpO1xuICAgICAgICAvLyB3ZSBzdGlsbCBuZWVkIHRvIHNpbXVsYXRlIGEgdG9vbCBjYWxsIHRvIHRoZSBhZ2VudCB0byBsZXQgdGhlIGFnZW50IGtub3dcbiAgICAgICAgY29uc3QgdG9vbCA9IHRoaXMuI2N1cnJlbnRBZ2VudC50b29scy5maW5kKCh0b29sKSA9PiB0b29sLm5hbWUgPT09IGFwcHJvdmFsSXRlbS5yYXdJdGVtLm5hbWUpO1xuICAgICAgICBpZiAodG9vbCAmJlxuICAgICAgICAgICAgdG9vbC50eXBlID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICBhcHByb3ZhbEl0ZW0ucmF3SXRlbS50eXBlID09PSAnZnVuY3Rpb25fY2FsbCcpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI2hhbmRsZUZ1bmN0aW9uVG9vbENhbGwoYXBwcm92YWxJdGVtLnJhd0l0ZW0sIHRvb2wpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1vZGVsQmVoYXZpb3JFcnJvcihgVG9vbCAke2FwcHJvdmFsSXRlbS5yYXdJdGVtLm5hbWV9IG5vdCBmb3VuZGApO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhbHRpbWVTZXNzaW9uLm1qcy5tYXAiLCJpbXBvcnQgKiBhcyB1dGlsSW1wb3J0IGZyb20gXCIuL3V0aWxzLm1qc1wiO1xuZXhwb3J0IHsgUmVhbHRpbWVBZ2VudCB9IGZyb20gXCIuL3JlYWx0aW1lQWdlbnQubWpzXCI7XG5leHBvcnQgeyBSZWFsdGltZVNlc3Npb24sIH0gZnJvbSBcIi4vcmVhbHRpbWVTZXNzaW9uLm1qc1wiO1xuZXhwb3J0IHsgT3BlbkFJUmVhbHRpbWVXZWJSVEMsIH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVXZWJSdGMubWpzXCI7XG5leHBvcnQgeyBPcGVuQUlSZWFsdGltZVdlYlNvY2tldCwgfSBmcm9tIFwiLi9vcGVuYWlSZWFsdGltZVdlYnNvY2tldC5tanNcIjtcbmV4cG9ydCB7IE9wZW5BSVJlYWx0aW1lQmFzZSwgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfTU9ERUwsIERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHLCB9IGZyb20gXCIuL29wZW5haVJlYWx0aW1lQmFzZS5tanNcIjtcbmV4cG9ydCBjb25zdCB1dGlscyA9IHtcbiAgICBiYXNlNjRUb0FycmF5QnVmZmVyOiB1dGlsSW1wb3J0LmJhc2U2NFRvQXJyYXlCdWZmZXIsXG4gICAgYXJyYXlCdWZmZXJUb0Jhc2U2NDogdXRpbEltcG9ydC5hcnJheUJ1ZmZlclRvQmFzZTY0LFxuICAgIGdldExhc3RUZXh0RnJvbUF1ZGlvT3V0cHV0TWVzc2FnZTogdXRpbEltcG9ydC5nZXRMYXN0VGV4dEZyb21BdWRpb091dHB1dE1lc3NhZ2UsXG59O1xuZXhwb3J0IHsgTW9kZWxCZWhhdmlvckVycm9yLCBPdXRwdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCwgdG9vbCwgVXNlckVycm9yLCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6WyJNRVRBREFUQSIsImJhc2U2NFRvQXJyYXlCdWZmZXIiLCJiYXNlNjQiLCJiaW5hcnlTdHJpbmciLCJsZW4iLCJieXRlcyIsImkiLCJhcnJheUJ1ZmZlclRvQmFzZTY0IiwiYXJyYXlCdWZmZXIiLCJnZXRMYXN0VGV4dEZyb21BdWRpb091dHB1dE1lc3NhZ2UiLCJpdGVtIiwibGFzdENvbnRlbnRJdGVtIiwiZGlmZlJlYWx0aW1lSGlzdG9yeSIsIm9sZEhpc3RvcnkiLCJuZXdIaXN0b3J5IiwicmVtb3ZhbHMiLCJuZXdJdGVtIiwiYWRkaXRpb25zIiwib2xkSXRlbSIsInVwZGF0ZXMiLCJoYXNXZWJSVENTdXBwb3J0IiwicmVtb3ZlQXVkaW9Gcm9tQ29udGVudCIsImVudHJ5IiwidXBkYXRlUmVhbHRpbWVIaXN0b3J5IiwiaGlzdG9yeSIsImV2ZW50Iiwic2hvdWxkSW5jbHVkZUF1ZGlvRGF0YSIsInVwZGF0ZWRDb250ZW50IiwibmV3RXZlbnQiLCJleGlzdGluZ0luZGV4IiwiaWR4IiwicHJldkluZGV4IiwiSEVBREVSUyIsIldFQlNPQ0tFVF9NRVRBIiwic2FmZUV4ZWN1dGUiLCJmbiIsImVycm9yIiwibWFrZVBhcnNlYWJsZVRleHRGb3JtYXQiLCJyZXNwb25zZV9mb3JtYXQiLCJwYXJzZXIiLCJvYmoiLCJpZ25vcmVPdmVycmlkZSIsImRlZmF1bHRPcHRpb25zIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJvcHRpb25zIiwiem9kRGVmIiwiem9kU2NoZW1hIiwiaXNFbXB0eU9iaiIsIl9rIiwiZ2V0UmVmcyIsIl9vcHRpb25zIiwiY3VycmVudFBhdGgiLCJuYW1lIiwiZGVmIiwiYWRkRXJyb3JNZXNzYWdlIiwicmVzIiwia2V5IiwiZXJyb3JNZXNzYWdlIiwicmVmcyIsInNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMiLCJ2YWx1ZSIsInV0aWwiLCJfIiwiYXNzZXJ0SXMiLCJfYXJnIiwiYXNzZXJ0TmV2ZXIiLCJfeCIsIml0ZW1zIiwidmFsaWRLZXlzIiwiayIsImZpbHRlcmVkIiwiZSIsIm9iamVjdCIsImtleXMiLCJhcnIiLCJjaGVja2VyIiwidmFsIiwiam9pblZhbHVlcyIsImFycmF5Iiwic2VwYXJhdG9yIiwib2JqZWN0VXRpbCIsImZpcnN0Iiwic2Vjb25kIiwidXRpbCQxIiwiWm9kRXJyb3IiLCJpc3N1ZXMiLCJzdWIiLCJzdWJzIiwiYWN0dWFsUHJvdG8iLCJfbWFwcGVyIiwibWFwcGVyIiwiaXNzdWUiLCJmaWVsZEVycm9ycyIsInByb2Nlc3NFcnJvciIsImN1cnIiLCJlbCIsImZvcm1FcnJvcnMiLCJlcnJvclV0aWwiLCJtZXNzYWdlIiwiWm9kRmlyc3RQYXJ0eVR5cGVLaW5kIiwicGFyc2VBbnlEZWYiLCJwYXJzZUFycmF5RGVmIiwiX2IiLCJfYSIsInBhcnNlRGVmIiwicGFyc2VCaWdpbnREZWYiLCJjaGVjayIsInBhcnNlQm9vbGVhbkRlZiIsInBhcnNlQnJhbmRlZERlZiIsIl9kZWYiLCJwYXJzZUNhdGNoRGVmIiwicGFyc2VEYXRlRGVmIiwib3ZlcnJpZGVEYXRlU3RyYXRlZ3kiLCJzdHJhdGVneSIsImludGVnZXJEYXRlUGFyc2VyIiwicGFyc2VEZWZhdWx0RGVmIiwicGFyc2VFZmZlY3RzRGVmIiwiZm9yY2VSZXNvbHV0aW9uIiwicGFyc2VFbnVtRGVmIiwiaXNKc29uU2NoZW1hN0FsbE9mVHlwZSIsInR5cGUiLCJwYXJzZUludGVyc2VjdGlvbkRlZiIsImFsbE9mIiwieCIsInVuZXZhbHVhdGVkUHJvcGVydGllcyIsIm1lcmdlZEFsbE9mIiwic2NoZW1hIiwibmVzdGVkU2NoZW1hIiwiYWRkaXRpb25hbFByb3BlcnRpZXMiLCJyZXN0IiwicGFyc2VMaXRlcmFsRGVmIiwicGFyc2VkVHlwZSIsImVtb2ppUmVnZXgiLCJ6b2RQYXR0ZXJucyIsInBhcnNlU3RyaW5nRGVmIiwicHJvY2Vzc1BhdHRlcm4iLCJlc2NhcGVOb25BbHBoYU51bWVyaWMiLCJhZGRGb3JtYXQiLCJhZGRQYXR0ZXJuIiwiYyIsInJlZ2V4IiwicHJvY2Vzc1JlZ0V4cCIsInJlZ2V4T3JGdW5jdGlvbiIsImZsYWdzIiwic291cmNlIiwicGF0dGVybiIsImlzRXNjYXBlZCIsImluQ2hhckdyb3VwIiwiaW5DaGFyUmFuZ2UiLCJyZWdleFRlc3QiLCJwYXJzZVJlY29yZERlZiIsImFjYyIsIl9jIiwia2V5VHlwZSIsIl9kIiwicGFyc2VNYXBEZWYiLCJ2YWx1ZXMiLCJwYXJzZU5hdGl2ZUVudW1EZWYiLCJhY3R1YWxWYWx1ZXMiLCJwYXJzZWRUeXBlcyIsInBhcnNlTmV2ZXJEZWYiLCJwYXJzZU51bGxEZWYiLCJwcmltaXRpdmVNYXBwaW5ncyIsInBhcnNlVW5pb25EZWYiLCJhc0FueU9mIiwidHlwZXMiLCJ1bmlxdWVUeXBlcyIsImEiLCJhbnlPZiIsInBhcnNlTnVsbGFibGVEZWYiLCJiYXNlIiwicGFyc2VOdW1iZXJEZWYiLCJkZWNpZGVBZGRpdGlvbmFsUHJvcGVydGllcyIsInBhcnNlT2JqZWN0RGVmIiwicmVzdWx0IiwicHJvcE5hbWUiLCJwcm9wRGVmIiwicHJvcGVydHlQYXRoIiwicGFyc2VkRGVmIiwicGFyc2VPcHRpb25hbERlZiIsImlubmVyU2NoZW1hIiwicGFyc2VQaXBlbGluZURlZiIsImIiLCJwYXJzZVByb21pc2VEZWYiLCJwYXJzZVNldERlZiIsInBhcnNlVHVwbGVEZWYiLCJwYXJzZVVuZGVmaW5lZERlZiIsInBhcnNlVW5rbm93bkRlZiIsInBhcnNlUmVhZG9ubHlEZWYiLCJzZWVuSXRlbSIsIm92ZXJyaWRlUmVzdWx0Iiwic2VlblNjaGVtYSIsImdldCRyZWYiLCJqc29uU2NoZW1hIiwic2VsZWN0UGFyc2VyIiwiYWRkTWV0YSIsImdldFJlbGF0aXZlUGF0aCIsImluZGV4IiwicGF0aEEiLCJwYXRoQiIsInR5cGVOYW1lIiwiem9kVG9Kc29uU2NoZW1hIiwibWFpbiIsInRpdGxlIiwiZGVmaW5pdGlvbnMiLCJwcm9jZXNzZWREZWZpbml0aW9ucyIsIm5ld0RlZmluaXRpb25zIiwiY29tYmluZWQiLCJtYWtlUGFyc2VhYmxlUmVzcG9uc2VUb29sIiwidG9vbCIsImNhbGxiYWNrIiwiX3pvZFRvSnNvblNjaGVtYSIsInpvZFRleHRGb3JtYXQiLCJ6b2RPYmplY3QiLCJwcm9wcyIsImNvbnRlbnQiLCJ6b2RSZXNwb25zZXNGdW5jdGlvbiIsImFyZ3MiLCJBZ2VudHNFcnJvciIsInN0YXRlIiwiX19wdWJsaWNGaWVsZCIsIlN5c3RlbUVycm9yIiwiTWF4VHVybnNFeGNlZWRlZEVycm9yIiwiTW9kZWxCZWhhdmlvckVycm9yIiwiVXNlckVycm9yIiwiR3VhcmRyYWlsRXhlY3V0aW9uRXJyb3IiLCJUb29sQ2FsbEVycm9yIiwiSW5wdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCIsIk91dHB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkIiwiaXNab2RPYmplY3QiLCJpbnB1dCIsImlzQWdlbnRUb29sSW5wdXQiLCJ0b0Z1bmN0aW9uVG9vbE5hbWUiLCJnZXRTY2hlbWFBbmRQYXJzZXJGcm9tSW5wdXRUeXBlIiwiaW5wdXRUeXBlIiwiZm9ybWF0dGVkRnVuY3Rpb24iLCJjb252ZXJ0QWdlbnRPdXRwdXRUeXBlVG9TZXJpYWxpemFibGUiLCJvdXRwdXRUeXBlIiwib3V0cHV0IiwicyIsIm0iLCJoIiwiZCIsInciLCJ5IiwibXMiLCJwYXJzZSIsImZtdExvbmciLCJmbXRTaG9ydCIsInN0ciIsIm1hdGNoIiwibiIsIm1zQWJzIiwicGx1cmFsIiwiaXNQbHVyYWwiLCJzZXR1cCIsImVudiIsImNyZWF0ZURlYnVnIiwiY29lcmNlIiwiZGlzYWJsZSIsImVuYWJsZSIsImVuYWJsZWQiLCJyZXF1aXJlJCQwIiwiZGVzdHJveSIsInNlbGVjdENvbG9yIiwibmFtZXNwYWNlIiwiaGFzaCIsInByZXZUaW1lIiwiZW5hYmxlT3ZlcnJpZGUiLCJuYW1lc3BhY2VzQ2FjaGUiLCJlbmFibGVkQ2FjaGUiLCJkZWJ1ZyIsInNlbGYiLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJleHRlbmQiLCJ2IiwiZGVsaW1pdGVyIiwibmV3RGVidWciLCJuYW1lc3BhY2VzIiwic3BsaXQiLCJucyIsIm1hdGNoZXNUZW1wbGF0ZSIsInNlYXJjaCIsInRlbXBsYXRlIiwic2VhcmNoSW5kZXgiLCJ0ZW1wbGF0ZUluZGV4Iiwic3RhckluZGV4IiwibWF0Y2hJbmRleCIsInNraXAiLCJjb21tb24iLCJleHBvcnRzIiwiZm9ybWF0QXJncyIsInNhdmUiLCJsb2FkIiwidXNlQ29sb3JzIiwibG9jYWxzdG9yYWdlIiwid2FybmVkIiwibW9kdWxlIiwibGFzdEMiLCJyIiwiZm9ybWF0dGVycyIsImxvYWRFbnYiLCJfbG9hZEVudiIsImlzRW5hYmxlZCIsImZsYWdOYW1lIiwidHJhY2luZyIsImxvZ2dpbmciLCJkb250TG9nTW9kZWxEYXRhIiwiZG9udExvZ1Rvb2xEYXRhIiwiZ2V0TG9nZ2VyIiwibG9nZ2VyIiwidG9TbWFydFN0cmluZyIsImRlZmF1bHRUb29sRXJyb3JGdW5jdGlvbiIsImNvbnRleHQiLCJ0b29sRXJyb3JGdW5jdGlvbiIsInN0cmljdE1vZGUiLCJwYXJhbWV0ZXJzIiwiX2ludm9rZSIsInJ1bkNvbnRleHQiLCJwYXJzZWQiLCJzdHJpbmdSZXN1bHQiLCJpbnZva2UiLCJjdXJyZW50U3BhbiIsImdldEN1cnJlbnRTcGFuIiwibmVlZHNBcHByb3ZhbCIsIlpvZFBhcnNlZFR5cGUiLCJnZXRQYXJzZWRUeXBlIiwiZGF0YSIsIlpvZElzc3VlQ29kZSIsImVycm9yTWFwIiwiX2N0eCIsIm92ZXJyaWRlRXJyb3JNYXAiLCJkZWZhdWx0RXJyb3JNYXAiLCJnZXRFcnJvck1hcCIsIm1ha2VJc3N1ZSIsInBhcmFtcyIsInBhdGgiLCJlcnJvck1hcHMiLCJpc3N1ZURhdGEiLCJmdWxsUGF0aCIsImZ1bGxJc3N1ZSIsIm1hcHMiLCJtYXAiLCJhZGRJc3N1ZVRvQ29udGV4dCIsImN0eCIsIm92ZXJyaWRlTWFwIiwiUGFyc2VTdGF0dXMiLCJzdGF0dXMiLCJyZXN1bHRzIiwiYXJyYXlWYWx1ZSIsIklOVkFMSUQiLCJwYWlycyIsInN5bmNQYWlycyIsInBhaXIiLCJmaW5hbE9iamVjdCIsIkRJUlRZIiwiT0siLCJpc0Fib3J0ZWQiLCJpc0RpcnR5IiwiaXNWYWxpZCIsImlzQXN5bmMiLCJQYXJzZUlucHV0TGF6eVBhdGgiLCJwYXJlbnQiLCJoYW5kbGVSZXN1bHQiLCJwcm9jZXNzQ3JlYXRlUGFyYW1zIiwiaW52YWxpZF90eXBlX2Vycm9yIiwicmVxdWlyZWRfZXJyb3IiLCJkZXNjcmlwdGlvbiIsImlzcyIsIlpvZFR5cGUiLCJlcnIiLCJtYXliZUFzeW5jUmVzdWx0IiwiZ2V0SXNzdWVQcm9wZXJ0aWVzIiwic2V0RXJyb3IiLCJyZWZpbmVtZW50RGF0YSIsInJlZmluZW1lbnQiLCJab2RFZmZlY3RzIiwiWm9kT3B0aW9uYWwiLCJab2ROdWxsYWJsZSIsIlpvZEFycmF5IiwiWm9kUHJvbWlzZSIsIm9wdGlvbiIsIlpvZFVuaW9uIiwiaW5jb21pbmciLCJab2RJbnRlcnNlY3Rpb24iLCJ0cmFuc2Zvcm0iLCJkZWZhdWx0VmFsdWVGdW5jIiwiWm9kRGVmYXVsdCIsIlpvZEJyYW5kZWQiLCJjYXRjaFZhbHVlRnVuYyIsIlpvZENhdGNoIiwiVGhpcyIsInRhcmdldCIsIlpvZFBpcGVsaW5lIiwiWm9kUmVhZG9ubHkiLCJjdWlkUmVnZXgiLCJjdWlkMlJlZ2V4IiwidWxpZFJlZ2V4IiwidXVpZFJlZ2V4IiwibmFub2lkUmVnZXgiLCJqd3RSZWdleCIsImR1cmF0aW9uUmVnZXgiLCJlbWFpbFJlZ2V4IiwiX2Vtb2ppUmVnZXgiLCJpcHY0UmVnZXgiLCJpcHY0Q2lkclJlZ2V4IiwiaXB2NlJlZ2V4IiwiaXB2NkNpZHJSZWdleCIsImJhc2U2NFJlZ2V4IiwiYmFzZTY0dXJsUmVnZXgiLCJkYXRlUmVnZXhTb3VyY2UiLCJkYXRlUmVnZXgiLCJ0aW1lUmVnZXhTb3VyY2UiLCJzZWNvbmRzUmVnZXhTb3VyY2UiLCJzZWNvbmRzUXVhbnRpZmllciIsInRpbWVSZWdleCIsImRhdGV0aW1lUmVnZXgiLCJvcHRzIiwiaXNWYWxpZElQIiwiaXAiLCJ2ZXJzaW9uIiwiaXNWYWxpZEpXVCIsImp3dCIsImFsZyIsImhlYWRlciIsImRlY29kZWQiLCJpc1ZhbGlkQ2lkciIsIlpvZFN0cmluZyIsInRvb0JpZyIsInRvb1NtYWxsIiwidmFsaWRhdGlvbiIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsImNoIiwibWluIiwibWF4IiwiZmxvYXRTYWZlUmVtYWluZGVyIiwic3RlcCIsInZhbERlY0NvdW50Iiwic3RlcERlY0NvdW50IiwiZGVjQ291bnQiLCJ2YWxJbnQiLCJzdGVwSW50IiwiWm9kTnVtYmVyIiwia2luZCIsImluY2x1c2l2ZSIsIlpvZEJpZ0ludCIsIlpvZEJvb2xlYW4iLCJab2REYXRlIiwibWluRGF0ZSIsIm1heERhdGUiLCJab2RTeW1ib2wiLCJab2RVbmRlZmluZWQiLCJab2ROdWxsIiwiWm9kQW55IiwiWm9kVW5rbm93biIsIlpvZE5ldmVyIiwiWm9kVm9pZCIsImRlZXBQYXJ0aWFsaWZ5IiwiWm9kT2JqZWN0IiwibmV3U2hhcGUiLCJmaWVsZFNjaGVtYSIsIlpvZFR1cGxlIiwic2hhcGUiLCJzaGFwZUtleXMiLCJleHRyYUtleXMiLCJrZXlWYWxpZGF0b3IiLCJ1bmtub3duS2V5cyIsImNhdGNoYWxsIiwiZGVmYXVsdEVycm9yIiwiYXVnbWVudGF0aW9uIiwibWVyZ2luZyIsIm1hc2siLCJuZXdGaWVsZCIsImNyZWF0ZVpvZEVudW0iLCJoYW5kbGVSZXN1bHRzIiwidW5pb25FcnJvcnMiLCJjaGlsZEN0eCIsImRpcnR5IiwiZ2V0RGlzY3JpbWluYXRvciIsIlpvZExhenkiLCJab2RMaXRlcmFsIiwiWm9kRW51bSIsIlpvZE5hdGl2ZUVudW0iLCJab2REaXNjcmltaW5hdGVkVW5pb24iLCJkaXNjcmltaW5hdG9yIiwiZGlzY3JpbWluYXRvclZhbHVlIiwib3B0aW9uc01hcCIsImRpc2NyaW1pbmF0b3JWYWx1ZXMiLCJtZXJnZVZhbHVlcyIsImFUeXBlIiwiYlR5cGUiLCJiS2V5cyIsInNoYXJlZEtleXMiLCJuZXdPYmoiLCJzaGFyZWRWYWx1ZSIsIm5ld0FycmF5IiwiaXRlbUEiLCJpdGVtQiIsImhhbmRsZVBhcnNlZCIsInBhcnNlZExlZnQiLCJwYXJzZWRSaWdodCIsIm1lcmdlZCIsImxlZnQiLCJyaWdodCIsIml0ZW1JbmRleCIsInNjaGVtYXMiLCJab2RSZWNvcmQiLCJ2YWx1ZVR5cGUiLCJ0aGlyZCIsIlpvZE1hcCIsImZpbmFsTWFwIiwiWm9kU2V0IiwiZmluYWxpemVTZXQiLCJlbGVtZW50cyIsInBhcnNlZFNldCIsImVsZW1lbnQiLCJtaW5TaXplIiwibWF4U2l6ZSIsInNpemUiLCJnZXR0ZXIiLCJleHBlY3RlZFZhbHVlcyIsImVudW1WYWx1ZXMiLCJuZXdEZWYiLCJvcHQiLCJuYXRpdmVFbnVtVmFsdWVzIiwicHJvbWlzaWZpZWQiLCJlZmZlY3QiLCJjaGVja0N0eCIsImFyZyIsInByb2Nlc3NlZCIsImV4ZWN1dGVSZWZpbmVtZW50IiwiaW5uZXIiLCJwcmVwcm9jZXNzIiwibmV3Q3R4IiwiWm9kTmFOIiwiaW5SZXN1bHQiLCJmcmVlemUiLCJzdHJpbmdUeXBlIiwibnVtYmVyVHlwZSIsImJvb2xlYW5UeXBlIiwiYW55VHlwZSIsImFycmF5VHlwZSIsIm9iamVjdFR5cGUiLCJ1bmlvblR5cGUiLCJkaXNjcmltaW5hdGVkVW5pb25UeXBlIiwicmVjb3JkVHlwZSIsImxhenlUeXBlIiwibGl0ZXJhbFR5cGUiLCJlbnVtVHlwZSIsInoub2JqZWN0Iiwiei5zdHJpbmciLCJ6LmxpdGVyYWwiLCJ6LnJlY29yZCIsInouYW55Iiwiei5hcnJheSIsInouYm9vbGVhbiIsIl9jYWNoZWRUb29scyIsImdldEZ1bmN0aW9uVG9vbHNGcm9tU2VydmVyIiwic2VydmVyIiwiY29udmVydFNjaGVtYXNUb1N0cmljdCIsImFnZW50IiwidCIsIm1jcFRvRnVuY3Rpb25Ub29sIiwid2l0aE1DUExpc3RUb29sc1NwYW4iLCJzcGFuIiwiZmV0Y2hlZE1jcFRvb2xzIiwibWNwVG9vbHMiLCJmaWx0ZXJlZFRvb2xzIiwiZmlsdGVyIiwiZ2xvYmFsTG9nZ2VyIiwiYWxsb3dlZFRvb2xOYW1lcyIsImJsb2NrZWRUb29sTmFtZXMiLCJhbGxvd2VkIiwiYmxvY2tlZCIsInRvb2xzIiwiZ2V0QWxsTWNwVG9vbHMiLCJtY3BTZXJ2ZXJzT3JPcHRzIiwibWNwU2VydmVycyIsImNvbnZlcnRTY2hlbWFzVG9TdHJpY3RGcm9tT3B0cyIsInJ1bkNvbnRleHRGcm9tT3B0cyIsImFnZW50RnJvbU9wdHMiLCJhbGxUb29scyIsInRvb2xOYW1lcyIsInNlcnZlclRvb2xzIiwiaW50ZXJzZWN0aW9uIiwibWNwVG9vbCIsIl9jb250ZXh0Iiwic3RyaWN0U2NoZW1hIiwiZW5zdXJlU3RyaWN0SnNvblNjaGVtYSIsIm5vblN0cmljdFNjaGVtYSIsIm91dCIsIkJyb3dzZXJFdmVudEVtaXR0ZXIiLCJfX3ByaXZhdGVBZGQiLCJfdGFyZ2V0IiwibGlzdGVuZXIiLCJfX3ByaXZhdGVHZXQiLCJoYW5kbGVyIiwicmFuZG9tVVVJRCIsIlJlYWRhYmxlIiwiX2Rlc3RpbmF0aW9uIiwiX3RyYW5zZm9ybSIsIlJlYWRhYmxlU3RyZWFtIiwiVHJhbnNmb3JtU3RyZWFtIiwiQXN5bmNMb2NhbFN0b3JhZ2UiLCJCcm93c2VyVGltZXIiLCJ0aW1lb3V0IiwidGltZW91dElkIiwidGltZXIiLCJfY29udGV4dEFzeW5jTG9jYWxTdG9yYWdlIiwiZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlIiwiZ2V0Q3VycmVudFRyYWNlIiwiY3VycmVudFRyYWNlIiwiX3dyYXBGdW5jdGlvbldpdGhUcmFjZUxpZmVjeWNsZSIsInRyYWNlIiwid2l0aFRyYWNlIiwibmV3VHJhY2UiLCJnZXRHbG9iYWxUcmFjZVByb3ZpZGVyIiwiZ2V0T3JDcmVhdGVUcmFjZSIsInNldEN1cnJlbnRTcGFuIiwicmVzZXRDdXJyZW50U3BhbiIsImFkZEVycm9yVG9DdXJyZW50U3BhbiIsInNwYW5FcnJvciIsImNsb25lQ3VycmVudENvbnRleHQiLCJ3aXRoTmV3U3BhbkNvbnRleHQiLCJjdXJyZW50Q29udGV4dCIsImNvcHlPZkNvbnRleHQiLCJDb25zb2xlU3BhbkV4cG9ydGVyIiwiQmF0Y2hUcmFjZVByb2Nlc3NvciIsImV4cG9ydGVyIiwibWF4UXVldWVTaXplIiwibWF4QmF0Y2hTaXplIiwic2NoZWR1bGVEZWxheSIsImV4cG9ydFRyaWdnZXJSYXRpbyIsIl9CYXRjaFRyYWNlUHJvY2Vzc29yX2luc3RhbmNlcyIsIl9tYXhRdWV1ZVNpemUiLCJfbWF4QmF0Y2hTaXplIiwiX3NjaGVkdWxlRGVsYXkiLCJfZXhwb3J0VHJpZ2dlclNpemUiLCJfZXhwb3J0ZXIiLCJfYnVmZmVyIiwiX3RpbWVyIiwiX3RpbWVvdXQiLCJfZXhwb3J0SW5Qcm9ncmVzcyIsIl90aW1lb3V0QWJvcnRDb250cm9sbGVyIiwiX19wcml2YXRlU2V0IiwiX19wcml2YXRlTWV0aG9kIiwicnVuRXhwb3J0TG9vcF9mbiIsInNhZmVBZGRJdGVtX2ZuIiwiX3RyYWNlIiwiX3NwYW4iLCJleHBvcnRCYXRjaGVzX2ZuIiwicmVzb2x2ZSIsImZvcmNlIiwidG9FeHBvcnQiLCJiYXRjaCIsIk11bHRpVHJhY2luZ1Byb2Nlc3NvciIsIl9wcm9jZXNzb3JzIiwicHJvY2Vzc29yIiwicHJvY2Vzc29ycyIsIl9kZWZhdWx0RXhwb3J0ZXIiLCJfZGVmYXVsdFByb2Nlc3NvciIsImRlZmF1bHRFeHBvcnRlciIsImRlZmF1bHRQcm9jZXNzb3IiLCJ0aW1lSXNvIiwiZ2VuZXJhdGVUcmFjZUlkIiwiZ2VuZXJhdGVTcGFuSWQiLCJyZW1vdmVQcml2YXRlRmllbGRzIiwiX1NwYW4iLCJfZGF0YSIsIl90cmFjZUlkIiwiX3NwYW5JZCIsIl9wYXJlbnRJZCIsIl9wcm9jZXNzb3IiLCJfc3RhcnRlZEF0IiwiX2VuZGVkQXQiLCJfZXJyb3IiLCJfcHJldmlvdXNTcGFuIiwiU3BhbiIsIk5vb3BTcGFuIiwiX1RyYWNlIiwiX3N0YXJ0ZWQiLCJUcmFjZSIsIk5vb3BUcmFjZSIsIlRyYWNlUHJvdmlkZXIiLCJfVHJhY2VQcm92aWRlcl9pbnN0YW5jZXMiLCJfbXVsdGlQcm9jZXNzb3IiLCJfZGlzYWJsZWQiLCJhZGRDbGVhbnVwTGlzdGVuZXJzX2ZuIiwiZGlzYWJsZWQiLCJ0cmFjZU9wdGlvbnMiLCJ0cmFjZUlkIiwic3Bhbk9wdGlvbnMiLCJwYXJlbnRJZCIsImNsZWFudXAiLCJoYXNPdGhlckxpc3RlbmVyc0ZvclNpZ25hbHMiLCJyZWFzb24iLCJwcm9taXNlIiwiaGFzT3RoZXJMaXN0ZW5lcnNGb3JFdmVudHMiLCJHTE9CQUxfVFJBQ0VfUFJPVklERVIiLCJfd2l0aFNwYW5GYWN0b3J5IiwiY3JlYXRlU3BhbiIsImNyZWF0ZUFnZW50U3BhbiIsImNyZWF0ZUZ1bmN0aW9uU3BhbiIsIndpdGhGdW5jdGlvblNwYW4iLCJjcmVhdGVIYW5kb2ZmU3BhbiIsIndpdGhIYW5kb2ZmU3BhbiIsImNyZWF0ZUd1YXJkcmFpbFNwYW4iLCJ3aXRoR3VhcmRyYWlsU3BhbiIsImNyZWF0ZU1DUExpc3RUb29sc1NwYW4iLCJhZGRUcmFjZVByb2Nlc3NvciIsIkV2ZW50RW1pdHRlckRlbGVnYXRlIiwiQWdlbnRIb29rcyIsIlJ1bnRpbWVFdmVudEVtaXR0ZXIiLCJSdW5Ib29rcyIsImRlZmluZUlucHV0R3VhcmRyYWlsIiwiZXhlY3V0ZSIsImRlZmluZU91dHB1dEd1YXJkcmFpbCIsImdldFRyYW5zZmVyTWVzc2FnZSIsImRlZmF1bHRIYW5kb2ZmVG9vbE5hbWUiLCJkZWZhdWx0SGFuZG9mZlRvb2xEZXNjcmlwdGlvbiIsIkhhbmRvZmYiLCJvbkludm9rZUhhbmRvZmYiLCJoYW5kb2ZmIiwiY29uZmlnIiwiaGFzT25IYW5kb2ZmIiwiaGFzSW5wdXRUeXBlIiwiaW5wdXRKc29uU3RyaW5nIiwiZ2V0SGFuZG9mZiIsImdldERlZmF1bHRNb2RlbFByb3ZpZGVyIiwiU2hhcmVkQmFzZSIsIkl0ZW1CYXNlIiwiUmVmdXNhbCIsIk91dHB1dFRleHQiLCJJbnB1dFRleHQiLCJSZWFzb25pbmdUZXh0IiwiSW5wdXRJbWFnZSIsInpcbiAgICAgICAgLnN0cmluZyIsIklucHV0RmlsZSIsIkF1ZGlvQ29udGVudCIsIkltYWdlQ29udGVudCIsIlRvb2xPdXRwdXRUZXh0IiwiVG9vbE91dHB1dEltYWdlIiwiQ29tcHV0ZXJUb29sT3V0cHV0IiwiY29tcHV0ZXJBY3Rpb25zIiwiei5kaXNjcmltaW5hdGVkVW5pb24iLCJ6Lm51bWJlciIsInouZW51bSIsIkFzc2lzdGFudENvbnRlbnQiLCJNZXNzYWdlQmFzZSIsIkFzc2lzdGFudE1lc3NhZ2VJdGVtIiwiVXNlckNvbnRlbnQiLCJVc2VyTWVzc2FnZUl0ZW0iLCJTeXN0ZW1NZXNzYWdlSXRlbSIsIkhvc3RlZFRvb2xDYWxsSXRlbSIsIkZ1bmN0aW9uQ2FsbEl0ZW0iLCJGdW5jdGlvbkNhbGxSZXN1bHRJdGVtIiwiQ29tcHV0ZXJVc2VDYWxsSXRlbSIsIkNvbXB1dGVyQ2FsbFJlc3VsdEl0ZW0iLCJUb29sQ2FsbEl0ZW0iLCJSZWFzb25pbmdJdGVtIiwiVW5rbm93bkl0ZW0iLCJPdXRwdXRNb2RlbEl0ZW0iLCJNb2RlbEl0ZW0iLCJ6LnVuaW9uIiwiVXNhZ2VEYXRhIiwiU3RyZWFtRXZlbnRUZXh0U3RyZWFtIiwiU3RyZWFtRXZlbnRSZXNwb25zZVN0YXJ0ZWQiLCJTdHJlYW1FdmVudFJlc3BvbnNlQ29tcGxldGVkIiwiU3RyZWFtRXZlbnRHZW5lcmljSXRlbSIsIlVzYWdlIiwiaW5wdXRUb2tlbnNEZXRhaWxzIiwib3V0cHV0VG9rZW5zRGV0YWlscyIsIm5ld1VzYWdlIiwiUnVuQ29udGV4dCIsIl9hcHByb3ZhbHMiLCJhcHByb3ZhbHMiLCJ0b29sTmFtZSIsImNhbGxJZCIsImFwcHJvdmFsRW50cnkiLCJpbmRpdmlkdWFsQ2FsbEFwcHJvdmFsIiwiaW5kaXZpZHVhbENhbGxSZWplY3Rpb24iLCJhcHByb3ZhbEl0ZW0iLCJhbHdheXNBcHByb3ZlIiwiYWx3YXlzUmVqZWN0IiwiUnVuUmVzdWx0QmFzZSIsImdldFR1cm5JbnB1dCIsInJlc3BvbnNlcyIsIlJ1blJlc3VsdCIsIlN0cmVhbWVkUnVuUmVzdWx0IiwiX3NpZ25hbCIsIl9yZWFkYWJsZUNvbnRyb2xsZXIiLCJfcmVhZGFibGVTdHJlYW0iLCJfY29tcGxldGVkUHJvbWlzZSIsIl9jb21wbGV0ZWRQcm9taXNlUmVzb2x2ZSIsIl9jb21wbGV0ZWRQcm9taXNlUmVqZWN0IiwiX2NhbmNlbGxlZCIsIl9SZWFkYWJsZVN0cmVhbSIsImNvbnRyb2xsZXIiLCJyZWplY3QiLCJzdHJlYW0iLCJzZXJpYWxpemVUb29sIiwic2VyaWFsaXplSGFuZG9mZiIsIlJ1bkl0ZW1CYXNlIiwiUnVuTWVzc2FnZU91dHB1dEl0ZW0iLCJyYXdJdGVtIiwicGFydCIsIlJ1blRvb2xDYWxsSXRlbSIsIlJ1blRvb2xDYWxsT3V0cHV0SXRlbSIsIlJ1blJlYXNvbmluZ0l0ZW0iLCJSdW5IYW5kb2ZmQ2FsbEl0ZW0iLCJSdW5IYW5kb2ZmT3V0cHV0SXRlbSIsInNvdXJjZUFnZW50IiwidGFyZ2V0QWdlbnQiLCJSdW5Ub29sQXBwcm92YWxJdGVtIiwiZ2V0TGFzdFRleHRGcm9tT3V0cHV0TWVzc2FnZSIsIm91dHB1dE1lc3NhZ2UiLCJsYXN0SXRlbSIsImdldE91dHB1dFRleHQiLCJSdW5SYXdNb2RlbFN0cmVhbUV2ZW50IiwiUnVuSXRlbVN0cmVhbUV2ZW50IiwiUnVuQWdlbnRVcGRhdGVkU3RyZWFtRXZlbnQiLCJwcm9jZXNzTW9kZWxSZXNwb25zZSIsIm1vZGVsUmVzcG9uc2UiLCJoYW5kb2ZmcyIsInJ1bkhhbmRvZmZzIiwicnVuRnVuY3Rpb25zIiwicnVuQ29tcHV0ZXJBY3Rpb25zIiwicnVuTUNQQXBwcm92YWxSZXF1ZXN0cyIsInRvb2xzVXNlZCIsImhhbmRvZmZNYXAiLCJmdW5jdGlvbk1hcCIsImNvbXB1dGVyVG9vbCIsIm1jcFRvb2xNYXAiLCJwcm92aWRlckRhdGEiLCJtY3BTZXJ2ZXJMYWJlbCIsIm1jcFNlcnZlclRvb2wiLCJmdW5jdGlvblRvb2wiLCJuZXh0U3RlcFNjaGVtYSIsIlNpbmdsZVN0ZXBSZXN1bHQiLCJvcmlnaW5hbElucHV0IiwicHJlU3RlcEl0ZW1zIiwibmV3U3RlcEl0ZW1zIiwibmV4dFN0ZXAiLCJtYXliZVJlc2V0VG9vbENob2ljZSIsInRvb2xVc2VUcmFja2VyIiwibW9kZWxTZXR0aW5ncyIsImV4ZWN1dGVJbnRlcnJ1cHRlZFRvb2xzQW5kU2lkZUVmZmVjdHMiLCJvcmlnaW5hbFByZVN0ZXBJdGVtcyIsIm5ld1Jlc3BvbnNlIiwicHJvY2Vzc2VkUmVzcG9uc2UiLCJydW5uZXIiLCJmdW5jdGlvbkNhbGxJZHMiLCJmdW5jdGlvblRvb2xSdW5zIiwicnVuIiwiZnVuY3Rpb25SZXN1bHRzIiwiZXhlY3V0ZUZ1bmN0aW9uVG9vbENhbGxzIiwibmV3SXRlbXMiLCJtY3BBcHByb3ZhbFJ1bnMiLCJhcHByb3ZhbFJlcXVlc3RJZCIsImFwcHJvdmVkIiwiY2hlY2tUb29sT3V0cHV0IiwiY2hlY2tGb3JGaW5hbE91dHB1dEZyb21Ub29scyIsImV4ZWN1dGVUb29sc0FuZFNpZGVFZmZlY3RzIiwiY29tcHV0ZXJSZXN1bHRzIiwiZXhlY3V0ZUNvbXB1dGVyQWN0aW9ucyIsImFwcHJvdmFsUmVxdWVzdCIsInRvb2xEYXRhIiwicmVxdWVzdERhdGEiLCJhcHByb3ZhbFJlc3VsdCIsImFwcHJvdmFsUmVzcG9uc2VEYXRhIiwiZXhlY3V0ZUhhbmRvZmZDYWxscyIsIm1lc3NhZ2VJdGVtcyIsInBvdGVudGlhbEZpbmFsT3V0cHV0IiwiZ2V0VG9vbENhbGxPdXRwdXRJdGVtIiwidG9vbENhbGwiLCJ0b29sUnVucyIsInJ1blNpbmdsZVRvb2wiLCJ0b29sUnVuIiwicGFyc2VkQXJncyIsImFwcHJvdmFsIiwicmVzcG9uc2UiLCJfcnVuQ29tcHV0ZXJBY3Rpb25BbmRTY3JlZW5zaG90IiwiY29tcHV0ZXIiLCJhY3Rpb24iLCJzY3JlZW5zaG90IiwicCIsImFjdGlvbnMiLCJjdXN0b21Mb2dnZXIiLCJfbG9nZ2VyIiwiaW1hZ2VVcmwiLCJhY3R1YWxIYW5kb2ZmIiwiaGFuZG9mZlNwYW4iLCJuZXdBZ2VudCIsInJlcXVlc3RlZEFnZW50cyIsImlucHV0RmlsdGVyIiwiaGFuZG9mZklucHV0RGF0YSIsIk5PVF9GSU5BTF9PVVRQVVQiLCJ0b29sUmVzdWx0cyIsImludGVycnVwdGlvbnMiLCJmaXJzdFRvb2xSZXN1bHQiLCJ0b29sVXNlQmVoYXZpb3IiLCJzdG9wcGluZ1Rvb2wiLCJhZGRTdGVwVG9SdW5SZXN1bHQiLCJpdGVtTmFtZSIsIkFnZW50VG9vbFVzZVRyYWNrZXIiLCJfYWdlbnRUb1Rvb2xzIiwiQ1VSUkVOVF9TQ0hFTUFfVkVSU0lPTiIsIiRzY2hlbWFWZXJzaW9uIiwic2VyaWFsaXplZEFnZW50U2NoZW1hIiwiU2VyaWFsaXplZFNwYW4iLCJ6XG4gICAgICAgIC5vYmplY3QiLCJ6LmxhenkiLCJ1c2FnZVNjaGVtYSIsIm1vZGVsUmVzcG9uc2VTY2hlbWEiLCJwcm90b2NvbC5PdXRwdXRNb2RlbEl0ZW0iLCJpdGVtU2NoZW1hIiwicHJvdG9jb2wuQXNzaXN0YW50TWVzc2FnZUl0ZW0iLCJwcm90b2NvbC5Ub29sQ2FsbEl0ZW0iLCJwcm90b2NvbC5Ib3N0ZWRUb29sQ2FsbEl0ZW0iLCJwcm90b2NvbC5GdW5jdGlvbkNhbGxSZXN1bHRJdGVtIiwicHJvdG9jb2wuUmVhc29uaW5nSXRlbSIsInByb3RvY29sLkZ1bmN0aW9uQ2FsbEl0ZW0iLCJzZXJpYWxpemVkVHJhY2VTY2hlbWEiLCJzZXJpYWxpemVkUHJvY2Vzc2VkUmVzcG9uc2VTY2hlbWEiLCJ6XG4gICAgICAgIC5hcnJheSIsImd1YXJkcmFpbEZ1bmN0aW9uT3V0cHV0U2NoZW1hIiwiaW5wdXRHdWFyZHJhaWxSZXN1bHRTY2hlbWEiLCJvdXRwdXRHdWFyZHJhaWxSZXN1bHRTY2hlbWEiLCJTZXJpYWxpemVkUnVuU3RhdGUiLCJwcm90b2NvbC5Nb2RlbEl0ZW0iLCJSdW5TdGF0ZSIsInN0YXJ0aW5nQWdlbnQiLCJtYXhUdXJucyIsImluaXRpYWxBZ2VudCIsInBhcnNpbmdFcnJvciIsImpzb25SZXN1bHQiLCJjdXJyZW50U2NoZW1hVmVyc2lvbiIsInN0YXRlSnNvbiIsImFnZW50TWFwIiwiYnVpbGRBZ2VudE1hcCIsImN1cnJlbnRBZ2VudCIsImFnZW50TmFtZSIsImRlc2VyaWFsaXplU3BhbiIsImRlc2VyaWFsaXplTW9kZWxSZXNwb25zZSIsImRlc2VyaWFsaXplSXRlbSIsImRlc2VyaWFsaXplUHJvY2Vzc2VkUmVzcG9uc2UiLCJfZSIsInF1ZXVlIiwiQWdlbnQiLCJzZXJpYWxpemVkU3BhbiIsInNwYW5EYXRhIiwicHJldmlvdXNTcGFuIiwic2VyaWFsaXplZE1vZGVsUmVzcG9uc2UiLCJ1c2FnZSIsInNlcmlhbGl6ZWRJdGVtIiwic2VyaWFsaXplZFByb2Nlc3NlZFJlc3BvbnNlIiwiY29tcHV0ZXJUb29scyIsImZ1bmN0aW9uQ2FsbCIsImNvbXB1dGVyQWN0aW9uIiwiREVGQVVMVF9NQVhfVFVSTlMiLCJnZXRUcmFjaW5nIiwidHJhY2luZ0Rpc2FibGVkIiwidHJhY2VJbmNsdWRlU2Vuc2l0aXZlRGF0YSIsImdlbmVyYXRlZEl0ZW1zIiwicmF3SXRlbXMiLCJSdW5uZXIiLCJfUnVubmVyX2luc3RhbmNlcyIsInJ1bkluZGl2aWR1YWxTdHJlYW1fZm4iLCJydW5JbmRpdmlkdWFsTm9uU3RyZWFtX2ZuIiwibW9kZWwiLCJzZWxlY3RNb2RlbCIsInR1cm5SZXN1bHQiLCJoYW5kb2ZmTmFtZXMiLCJzZXJpYWxpemVkVG9vbHMiLCJzZXJpYWxpemVkSGFuZG9mZnMiLCJydW5JbnB1dEd1YXJkcmFpbHNfZm4iLCJ0dXJuSW5wdXQiLCJydW5PdXRwdXRHdWFyZHJhaWxzX2ZuIiwiZ3VhcmRyYWlscyIsImd1YXJkcmFpbEFyZ3MiLCJndWFyZHJhaWwiLCJhZ2VudE91dHB1dCIsInJ1blN0cmVhbUxvb3BfZm4iLCJmaW5hbFJlc3BvbnNlIiwiYWdlbnRNb2RlbCIsInJ1bkNvbmZpZ01vZGVsIiwiX0FnZW50Iiwib3V0cHV0VHlwZXMiLCJ0b29sRGVzY3JpcHRpb24iLCJjdXN0b21PdXRwdXRFeHRyYWN0b3IiLCJSZWFsdGltZUFnZW50IiwiZ2V0UmVhbHRpbWVHdWFyZHJhaWxTZXR0aW5ncyIsInNldHRpbmdzIiwiZGVmaW5lUmVhbHRpbWVPdXRwdXRHdWFyZHJhaWwiLCJwb2xpY3lIaW50SW5wdXQiLCJiYXNlR3VhcmRyYWlsIiwicG9saWN5SGludCIsImdldFJlYWx0aW1lR3VhcmRyYWlsRmVlZGJhY2tNZXNzYWdlIiwicmVhbHRpbWVNZXNzYWdlSXRlbVNjaGVtYSIsInJlYWx0aW1lVG9vbENhbGxJdGVtIiwicmVhbHRpbWVSZXNwb25zZSIsInpcbiAgICAgICAgLmVudW0iLCJ6XG4gICAgICAgICAgICAucmVjb3JkIiwiY29udmVyc2F0aW9uSXRlbUNvbnRlbnRTY2hlbWEiLCJjb252ZXJzYXRpb25JdGVtU2NoZW1hIiwiY29udmVyc2F0aW9uQ3JlYXRlZEV2ZW50U2NoZW1hIiwiY29udmVyc2F0aW9uSXRlbUNyZWF0ZWRFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1EZWxldGVkRXZlbnRTY2hlbWEiLCJjb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25Db21wbGV0ZWRFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkRlbHRhRXZlbnRTY2hlbWEiLCJjb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25GYWlsZWRFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZWRFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1UcnVuY2F0ZWRFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1DcmVhdGVFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1EZWxldGVFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZUV2ZW50U2NoZW1hIiwiY29udmVyc2F0aW9uSXRlbVRydW5jYXRlRXZlbnRTY2hlbWEiLCJlcnJvckV2ZW50U2NoZW1hIiwiaW5wdXRBdWRpb0J1ZmZlckNsZWFyZWRFdmVudFNjaGVtYSIsImlucHV0QXVkaW9CdWZmZXJBcHBlbmRFdmVudFNjaGVtYSIsImlucHV0QXVkaW9CdWZmZXJDbGVhckV2ZW50U2NoZW1hIiwiaW5wdXRBdWRpb0J1ZmZlckNvbW1pdEV2ZW50U2NoZW1hIiwiaW5wdXRBdWRpb0J1ZmZlckNvbW1pdHRlZEV2ZW50U2NoZW1hIiwiaW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0YXJ0ZWRFdmVudFNjaGVtYSIsImlucHV0QXVkaW9CdWZmZXJTcGVlY2hTdG9wcGVkRXZlbnRTY2hlbWEiLCJvdXRwdXRBdWRpb0J1ZmZlclN0YXJ0ZWRFdmVudFNjaGVtYSIsInpcbiAgICAub2JqZWN0Iiwib3V0cHV0QXVkaW9CdWZmZXJTdG9wcGVkRXZlbnRTY2hlbWEiLCJvdXRwdXRBdWRpb0J1ZmZlckNsZWFyZWRFdmVudFNjaGVtYSIsInJhdGVMaW1pdHNVcGRhdGVkRXZlbnRTY2hlbWEiLCJyZXNwb25zZUF1ZGlvRGVsdGFFdmVudFNjaGVtYSIsInJlc3BvbnNlQXVkaW9Eb25lRXZlbnRTY2hlbWEiLCJyZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERlbHRhRXZlbnRTY2hlbWEiLCJyZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERvbmVFdmVudFNjaGVtYSIsInJlc3BvbnNlQ29udGVudFBhcnRBZGRlZEV2ZW50U2NoZW1hIiwicmVzcG9uc2VDb250ZW50UGFydERvbmVFdmVudFNjaGVtYSIsInJlc3BvbnNlQ3JlYXRlZEV2ZW50U2NoZW1hIiwicmVzcG9uc2VEb25lRXZlbnRTY2hlbWEiLCJyZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RlbHRhRXZlbnRTY2hlbWEiLCJyZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RvbmVFdmVudFNjaGVtYSIsInJlc3BvbnNlT3V0cHV0SXRlbUFkZGVkRXZlbnRTY2hlbWEiLCJyZXNwb25zZU91dHB1dEl0ZW1Eb25lRXZlbnRTY2hlbWEiLCJyZXNwb25zZVRleHREZWx0YUV2ZW50U2NoZW1hIiwicmVzcG9uc2VUZXh0RG9uZUV2ZW50U2NoZW1hIiwic2Vzc2lvbkNyZWF0ZWRFdmVudFNjaGVtYSIsInNlc3Npb25VcGRhdGVkRXZlbnRTY2hlbWEiLCJyZXNwb25zZUNhbmNlbEV2ZW50U2NoZW1hIiwicmVzcG9uc2VDcmVhdGVFdmVudFNjaGVtYSIsInNlc3Npb25VcGRhdGVFdmVudFNjaGVtYSIsInRyYW5zY3JpcHRpb25TZXNzaW9uVXBkYXRlRXZlbnRTY2hlbWEiLCJ0cmFuc2NyaXB0aW9uU2Vzc2lvblVwZGF0ZWRFdmVudFNjaGVtYSIsImdlbmVyaWNFdmVudFNjaGVtYSIsInJlYWx0aW1lU2VydmVyRXZlbnRTY2hlbWEiLCJwYXJzZVJlYWx0aW1lRXZlbnQiLCJyYXciLCJnZW5lcmljUGFyc2VkIiwiREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfTU9ERUwiLCJERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRyIsIl9PcGVuQUlSZWFsdGltZUJhc2UiLCJfbW9kZWwiLCJfYXBpS2V5IiwiX3RyYWNpbmdDb25maWciLCJfcmF3U2Vzc2lvbkNvbmZpZyIsImFwaUtleSIsImlzR2VuZXJpYyIsImlucHV0VG9rZW5zIiwib3V0cHV0VG9rZW5zIiwidG90YWxUb2tlbnMiLCJfZiIsInByZXZpb3VzSXRlbUlkIiwicmVhbHRpbWVJdGVtIiwib3RoZXJFdmVudERhdGEiLCJjcmVhdGVSZXNwb25zZSIsImNyZWF0ZV9yZXNwb25zZSIsImVhZ2VybmVzcyIsImludGVycnVwdFJlc3BvbnNlIiwiaW50ZXJydXB0X3Jlc3BvbnNlIiwicHJlZml4UGFkZGluZ01zIiwicHJlZml4X3BhZGRpbmdfbXMiLCJzaWxlbmNlRHVyYXRpb25NcyIsInNpbGVuY2VfZHVyYXRpb25fbXMiLCJ0aHJlc2hvbGQiLCJ0cmFjaW5nQ29uZmlnIiwic2Vzc2lvbkRhdGEiLCJzdGFydFJlc3BvbnNlIiwiYXVkaW8iLCJjb21taXQiLCJyZW1vdmFsSWRzIiwidXBkYXRlIiwiaXRlbUlkIiwiYWRkaXRpb25zQW5kVXBkYXRlcyIsImFkZGl0aW9uIiwiaXRlbUVudHJ5IiwiT3BlbkFJUmVhbHRpbWVCYXNlIiwiT3BlbkFJUmVhbHRpbWVXZWJSVEMiLCJfdXJsIiwiX3N0YXRlIiwiX3VzZUluc2VjdXJlQXBpS2V5IiwiX29uZ29pbmdSZXNwb25zZSIsIl9tdXRlZCIsImJhc2VVcmwiLCJpc0NsaWVudEtleSIsInVzZXJTZXNzaW9uQ29uZmlnIiwiY29ubmVjdGlvblVybCIsInBlZXJDb25uZWN0aW9uIiwiZGF0YUNoYW5uZWwiLCJhdWRpb0VsZW1lbnQiLCJvZmZlciIsInNlc3Npb25Db25maWciLCJhbnN3ZXIiLCJtdXRlZCIsInNlbmRlciIsIldlYlNvY2tldCIsIk9wZW5BSVJlYWx0aW1lV2ViU29ja2V0IiwiX09wZW5BSVJlYWx0aW1lV2ViU29ja2V0X2luc3RhbmNlcyIsIl9jdXJyZW50SXRlbUlkIiwiX2N1cnJlbnRBdWRpb0NvbnRlbnRJbmRleCIsImF1ZGlvRXZlbnQiLCJ1cmwiLCJzZXR1cFdlYlNvY2tldF9mbiIsImVsYXBzZWRUaW1lIiwiY2FuY2VsT25nb2luZ1Jlc3BvbnNlIiwibGVuZ3RoIiwiYXVkaW9fZW5kX21zIiwid2Vic29ja2V0QXJndW1lbnRzIiwid3MiLCJidWZmIiwiYXV0b21hdGljUmVzcG9uc2VDYW5jZWxsYXRpb25FbmFibGVkIiwiUmVhbHRpbWVTZXNzaW9uIiwiX1JlYWx0aW1lU2Vzc2lvbl9pbnN0YW5jZXMiLCJfdHJhbnNwb3J0IiwiX2N1cnJlbnRBZ2VudCIsIl9jdXJyZW50VG9vbHMiLCJfb3V0cHV0R3VhcmRyYWlscyIsIl9vdXRwdXRHdWFyZHJhaWxTZXR0aW5ncyIsIl90cmFuc2NyaWJlZFRleHREZWx0YXMiLCJfaGlzdG9yeSIsIl9zaG91bGRJbmNsdWRlQXVkaW9EYXRhIiwiX2ludGVycnVwdGVkQnlHdWFyZHJhaWwiLCJfYXVkaW9TdGFydGVkIiwiX2xhc3RTZXNzaW9uQ29uZmlnIiwic2V0Q3VycmVudEFnZW50X2ZuIiwiZ2V0U2Vzc2lvbkNvbmZpZ19mbiIsInNldEV2ZW50TGlzdGVuZXJzX2ZuIiwidXBkYXRlZEhpc3RvcnkiLCJoYW5kbGVGdW5jdGlvblRvb2xDYWxsX2ZuIiwiaGFuZG9mZlRvb2xzIiwiYWRkaXRpb25hbENvbmZpZyIsImluc3RydWN0aW9ucyIsImZ1bGxDb25maWciLCJoYW5kbGVIYW5kb2ZmX2ZuIiwiaGFuZGxlRnVuY3Rpb25DYWxsX2ZuIiwiZnVuY3Rpb25Ub29sTWFwIiwicG9zc2libGVIYW5kb2ZmIiwicmVzcG9uc2VJZCIsImZpcnN0VHJpcHdpcmVUcmlnZ2VyZWQiLCJmZWVkYmFja1RleHQiLCJjb21wbGV0ZWRFdmVudCIsInRleHRPdXRwdXQiLCJsYXN0UnVuSW5kZXgiLCJsYXN0SXRlbUlkIiwiZGVsdGEiLCJuZXdUZXh0IiwibmV3UnVuSW5kZXgiLCJpc05ldyIsImFkZGVkSXRlbSIsInV0aWxzIiwidXRpbEltcG9ydC5iYXNlNjRUb0FycmF5QnVmZmVyIiwidXRpbEltcG9ydC5hcnJheUJ1ZmZlclRvQmFzZTY0IiwidXRpbEltcG9ydC5nZXRMYXN0VGV4dEZyb21BdWRpb091dHB1dE1lc3NhZ2UiXSwibWFwcGluZ3MiOiJnaENBQ08sTUFBTUEsRUFBVyxDQUVwQixRQUFXLFFBTWYsRUNITyxTQUFTQyxFQUFvQkMsRUFBUSxDQUN4QyxNQUFNQyxFQUFlLEtBQUtELENBQU0sRUFDMUJFLEVBQU1ELEVBQWEsT0FDbkJFLEVBQVEsSUFBSSxXQUFXRCxDQUFHLEVBQ2hDLFFBQVNFLEVBQUksRUFBR0EsRUFBSUYsRUFBS0UsSUFDckJELEVBQU1DLENBQUMsRUFBSUgsRUFBYSxXQUFXRyxDQUFDLEVBRXhDLE9BQU9ELEVBQU0sTUFDakIsQ0FNTyxTQUFTRSxHQUFvQkMsRUFBYSxDQUM3QyxNQUFNTCxFQUFlLE9BQU8sYUFBYSxHQUFHLElBQUksV0FBV0ssQ0FBVyxDQUFDLEVBQ3ZFLE9BQU8sS0FBS0wsQ0FBWSxDQUM1QixDQU1PLFNBQVNNLEdBQWtDQyxFQUFNLENBWXBELEdBWEksT0FBT0EsRUFBUyxLQUNoQkEsSUFBUyxNQUNULE9BQU9BLEdBQVMsVUFDaEIsRUFBRSxTQUFVQSxJQUNaLE9BQU9BLEVBQUssTUFBUyxVQUNyQixDQUFDQSxFQUFLLE1BR05BLEVBQUssT0FBUyxXQUdkLEVBQUUsWUFBYUEsSUFDZixDQUFDLE1BQU0sUUFBUUEsRUFBSyxPQUFPLEdBQzNCQSxFQUFLLFFBQVEsT0FBUyxFQUN0QixPQUVKLE1BQU1DLEVBQWtCRCxFQUFLLFFBQVFBLEVBQUssUUFBUSxPQUFTLENBQUMsRUFDNUQsR0FBSSxJQUFFLFNBQVVDLElBQ1osT0FBT0EsRUFBZ0IsTUFBUyxVQUdwQyxJQUFJQSxFQUFnQixPQUFTLE9BQ3pCLE9BQU8sT0FBT0EsRUFBZ0IsTUFBUyxTQUNqQ0EsRUFBZ0IsS0FDaEIsT0FFVixHQUFJQSxFQUFnQixPQUFTLFFBQ3pCLE9BQU8sT0FBT0EsRUFBZ0IsWUFBZSxTQUN2Q0EsRUFBZ0IsV0FDaEIsT0FHZCxDQU9PLFNBQVNDLEdB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QUt1aEIsR0FBVyxHQUFHLGVBQWlCakwsR0FBVSxDQUMxQ3RXLEVBQUEsS0FBS1QsR0FBUyxNQUFNLElBQUkrVyxDQUFLLENBQ3pDLENBQVMsRUFDRHRXLEVBQUEsS0FBS3VoQixHQUFXLEdBQUcsb0JBQXFCLElBQU0sQ0FDdEN2aEIsRUFBQSxLQUFLZ2lCLEtBQ0wvZSxFQUFBLEtBQUsrZSxHQUFnQixJQUV6QixLQUFLLEtBQUssb0JBQXFCaGlCLEVBQUEsS0FBS1QsR0FBVVMsRUFBQSxLQUFLd2hCLEVBQWEsQ0FDNUUsQ0FBUyxFQUNEeGhCLEVBQUEsS0FBS3VoQixHQUFXLEdBQUcsUUFBVXhrQyxHQUFVLENBQ25DLEtBQUssS0FBSyxRQUFTQSxDQUFLLENBQ3BDLENBQVMsQ0FDVCxFQzdhWSxNQUFDNG1DLEdBQVEsQ0FDakIsb0JBQXFCQyxFQUNyQixvQkFBcUJDLEdBQ3JCLGtDQUFtQ0MsRUFDdkMiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOSwyMCwyMSwyMiwyMywyNCwyNSwyNiwyNywyOCwyOSwzMCwzMSwzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCw0MSw0Miw0Myw0NCw0NSw0OSw1MCw1MSw1Niw1Nyw1OCw1OSw2MCw2MSw2Ml19
